using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.SessionState;
using System.IO;
using System.Web.Script.Serialization;
using System.Data.SqlClient;
using System.Data;
using System.Net;
using System.Globalization;
using System.Threading;
using System.Web.Services;
using System.Net.Mail;
using System.Net;
using System.Text;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.IO;
using System.Net;
using System.Diagnostics;
using System.Security.Cryptography;
using MySql.Data.MySqlClient;


/// <summary>
/// Summary description for EmployeeManagementHandler
/// </summary>
public class EmployeeManagementHandler : IHttpHandler, IRequiresSessionState
{
    SqlCommand cmd;
    DBManager vdm = new DBManager();
    private bool matchFound;
    public EmployeeManagementHandler()
    {
        //
        // TODO: Add constructor logic here
        //
    }
    public bool IsReusable
    {
        get { return true; }
    }
    class GetJsonData
    {
        public string op { set; get; }
    }
    //  [WebMethod(Description="Delete Template",BufferResponse=false)]
    public void ProcessRequest(HttpContext context)
    {

        try
        {
            string operation = context.Request["op"];
            switch (operation)
            {
                //naseema
                case "get_orgmainbranch_details":
                    get_orgmainbranch_details(context);
                    break;
                case "save_Issuesim_approve_click":
                    save_Issuesim_approve_click(context);
                    break;
                case "save_Issuesim_Reject_click":
                    save_Issuesim_Reject_click(context);
                    break;
                case "save_Return_Master":
                    save_Return_Master(context);
                    break;
                case "get_return_details":
                    get_return_details(context);
                    break;
                case "save_IssueSim_Detailes":
                    save_IssueSim_Detailes(context);
                    break;
                case "get_Issue_details":
                    get_Issue_details(context);
                    break;
                case "saveSimMaster":

                    saveSimMaster(context);
                    break;
                case "get_sim_details":
                    get_sim_details(context);
                    break;
                case "emp_login_click":
                    emp_login_click(context);
                    break;
                case "log_out":
                    log_out(context);
                    break;
                case "get_employewise_deptdetails":
                    get_employewise_deptdetails(context);
                    break;
                case "MyleaverequestDetails":
                    MyleaverequestDetails(context);
                    break;
                case "get_birthday_details":
                    get_birthday_details(context);
                    break;
                case "get_leave_details":
                    get_leave_details(context);
                    break;
                case "get_leaveapprv_details":
                    get_leaveapprv_details(context);
                    break;
                case "get_holiday_details":
                    get_holiday_details(context);
                    break;
                case "leavedetails_save":
                    leavedetails_save(context);
                    break;
                case "Approvedetails_save":
                    Approvedetails_save(context);
                    break;
                case "get_Employeedetails":
                    get_Employeedetails(context);
                    break;
                case "save_edit_empbankdetails":
                    save_edit_empbankdetails(context);
                    break;
                case "get_deptwiseemploye_details":
                    get_deptwiseemploye_details(context);
                    break;
                case "get_payrolldeptwiseemploye_details":
                    get_payrolldeptwiseemploye_details(context);
                    break;
                case "Approve_Details":
                    Approve_Details(context);
                    break;
                case "get_all_Employeedetails":
                    get_all_Employeedetails(context);
                    break;
                case "Employee_details_save":
                    Employee_details_save(context);
                    break;
                case "get_all_employee_departments":
                    get_all_employee_departments(context);
                    break;
                case "fileupload":
                    fileupload(context);
                    break;
                case "save_policieDocument":
                    save_policieDocument(context);
                    break;
                case "save_branchDocument_data":
                    save_branchDocument_data(context);
                    break;

                case "getpolicy_Uploaded_Documents":
                    getpolicy_Uploaded_Documents(context);
                    break;
                //  case "oddetails_save":
                //oddetails_save(context);
                //break;
                case "ODrequestDetails":
                    ODrequestDetails(context);
                    break;

                //case "myODrequestDetails":
                //    myODrequestDetails(context);
                //    break;

                case "save_Reject_OD_click":
                    save_Reject_OD_click(context);
                    break;
                case "save_approve_OD_click":
                    save_approve_OD_click(context);
                    break;

                case "save_Department_click":
                    save_Department_click(context);
                    break;
                case "get_Dept_details":
                    get_Dept_details(context);
                    break;

                case "get_group_details":
                    get_group_details(context);
                    break;

                //case "save_Role_click":
                //    save_Role_click(context);
                //    break;
                //case "get_Role_details":
                //    get_Role_details(context);
                //    break;
                case "save_leavetype_click":
                    save_leavetype_click(context);
                    break;
                case "get_leavetype_details":
                    get_leavetype_details(context);
                    break;
                case "save_IDProof_click":
                    save_IDProof_click(context);
                    break;
                case "get_IDProof_details":
                    get_IDProof_details(context);
                    break;
                case "for_save_edit_shifttype":
                    for_save_edit_shifttype(context);
                    break;
                case "get_Shift_details":
                    get_Shift_details(context);
                    break;
                case "save_rejion_detailes":
                    save_rejion_detailes(context);
                    break;

                case "getdataemployeechange":
                    getdataemployeechange(context);
                    break;

                case "save_employeedetails":
                    save_employeedetails(context);
                    break;
                case "get_search_employee":
                    get_search_employee(context);
                    break;
                case "emp_profile_pic_files_upload":
                    emp_profile_pic_files_upload(context);
                    break;
                case "save_employeeDocument":
                    save_employeeDocument(context);
                    break;
                case "getemployee_Uploaded_Documents":
                    getemployee_Uploaded_Documents(context);
                    break;
                case "get_empbank_details":
                    get_empbank_details(context);
                    break;
                case "saveBankDetails":
                    saveBankDetails(context);
                    break;
                case "get_bank_details":
                    get_bank_details(context);
                    break;
                case "save_approve_leave_click":
                    save_approve_leave_click(context);
                    break;
                case "save_Reject_leave_click":
                    save_Reject_leave_click(context);
                    break;
                case "get_ResignationDetails":
                    get_ResignationDetails(context);
                    break;
                case "saveResignationDetails":
                    saveResignationDetails(context);
                    break;
                case "get_reg_search_employee":
                    get_reg_search_employee(context);
                    break;
                case "get_deptemploye_details":
                    get_deptemploye_details(context);
                    break;
                case "get_emppaystructure_details":
                    get_emppaystructure_details(context);
                    break;
                case "save_edit_Salary_click":
                    save_edit_Salary_click(context);
                    break;
                case "get_RejoiningDetails":
                    get_RejoiningDetails(context);
                    break;
                case "save_payrollSalary_click":
                    save_payrollSalary_click(context);
                    break;
                case "save_payrollhold_click":
                    save_payrollhold_click(context);
                    break;
                case "get_salary_fill_Details":
                    get_salary_fill_Details(context);
                    break;
                case "get_paysalary_Details":
                    get_paysalary_Details(context);
                    break;
                case "get_anualsalary_Details":
                    get_anualsalary_Details(context);
                    break;
                case "get_anualit_Details":
                    get_anualit_Details(context);
                    break;
                case "get_salaryytd_Details":
                    get_salaryytd_Details(context);
                    break;
                case "get_pf_Details":
                    get_pf_Details(context);
                    break;
                case "get_incmtax_Details":
                    get_incmtax_Details(context);
                    break;
                case "get_Appraisals_fill_Details":
                    get_Appraisals_fill_Details(context);
                    break;
                case "save_Apprasial_Salary_click":
                    save_Apprasial_Salary_click(context);
                    break;
                case "save_assign_task_click":
                    save_assign_task_click(context);
                    break;
                case "save_resignation_reject_click":
                    save_resignation_reject_click(context);
                    break;
                case "save_resignation_approve_click":
                    save_resignation_approve_click(context);
                    break;
                case "save_Desigination_click":
                    save_Desigination_click(context);
                    break;
                case "get_Desgnation_details":
                    get_Desgnation_details(context);
                    break;
                case "save_edit_emppfdetails":
                    save_edit_emppfdetails(context);
                    break;

                case "get_employeesAttendence":
                    get_employeesAttendence(context);
                    break;
                case "saveBranchDetails":
                    saveBranchDetails(context);
                    break;
                case "get_Branch_details":
                    get_Branch_details(context);
                    break;
                case "get_MonthlyAttendence":
                    get_MonthlyAttendence(context);
                    break;
                case "get_loan_fill_Details":
                    get_loan_fill_Details(context);
                    break;
                case "save_Loan_Request_click":
                    save_Loan_Request_click(context);
                    break;
                case "get_LoanRequest_Details":
                    get_LoanRequest_Details(context);
                    break;
                case "get_view_loanreq_details":
                    get_view_loanreq_details(context);
                    break;
                case "save_loanrequest_approve_click":
                    save_loanrequest_approve_click(context);
                    break;
                case "save_loanrequest_reject_click":
                    save_loanrequest_reject_click(context);
                    break;
                case "save_Salary_Advancedetails":
                    save_Salary_Advancedetails(context);
                    break;
                case "save_canteen_Details":
                    save_canteen_Details(context);
                    break;
                case "save_ProfessionalTax_Details":
                    save_ProfessionalTax_Details(context);
                    break;
                case "get_salaryadvanceRequestDetails":
                    get_salaryadvanceRequestDetails(context);
                    break;
                case "get_salaryadvanceDetails":
                    get_salaryadvanceDetails(context);
                    break;
                case "save_salaryadvancerequest_approve_click":
                    save_salaryadvancerequest_approve_click(context);
                    break;
                case "save_salaryadvance_approve_click":
                    save_salaryadvance_approve_click(context);
                    break;
                case "save_salaryadvancerequest_reject_click":
                    save_salaryadvancerequest_reject_click(context);
                    break;
                case "save_salaryadvance_reject_click":
                    save_salaryadvance_reject_click(context);
                    break;
                case "get_Employee_details":
                    get_Employee_details(context);
                    break;
                case "get_allwiseEmployee_details":
                    get_allwiseEmployee_details(context);
                    break;
                case "get_employeescanteenAttendence":
                    get_employeescanteenAttendence(context);
                    break;
                case "get_Loan_Request_details_click":
                    get_Loan_Request_details_click(context);
                    break;
                case "get_pf_details":
                    get_pf_details(context);
                    break;
                case "get_Assets_details":
                    get_Assets_details(context);
                    break;
                case "get_salaryadvance_details":
                    get_salaryadvance_details(context);
                    break;
                case "get_salaryadvance_generate":
                    get_salaryadvance_generate(context);
                    break;
                case "get_salaryadvance":
                    get_salaryadvance(context);
                    break;
                case "get_canteen_details":
                    get_canteen_details(context);
                    break;
                case "get_ProfessionalTax_details":
                    get_ProfessionalTax_details(context);
                    break;
                case "getfamilydetailes":
                    getfamilydetailes(context);
                    break;
                case "get_meeting_conduct_details":
                    get_meeting_conduct_details(context);
                    break;
                case "upload_Meeting_conduct_Info":
                    upload_Meeting_conduct_Info(context);
                    break;
                case "get_all_dash_employeedetails":
                    get_all_dash_employeedetails(context);
                    break;
                case "save_rejoining_approve_click":
                    save_rejoining_approve_click(context);
                    break;
                case "get_employe_taskdetails":
                    get_employe_taskdetails(context);
                    break;
                case "save_rejoining_reject_click":
                    save_rejoining_reject_click(context);
                    break;
                case "send_employee_wishes_mail":
                    send_employee_wishes_mail(context);
                    break;
                case "send_employee_mail":
                    send_employee_mail(context);
                    break;
                case "send_employee_wishes_moblie":
                    send_employee_wishes_moblie(context);
                    break;
                case "get_meeting_conduct_Reports":
                    get_meeting_conduct_Reports(context);
                    break;
                case "get_Deductiondetailes_details":
                    get_Deductiondetailes_details(context);
                    break;
                case "save_edit_deduction_details":
                    save_edit_deduction_details(context);
                    break;
                case "save_edit_supply_details":
                    save_edit_supply_details(context);
                    break;
                case "saveCompanyMasterdetails":
                    saveCompanyMasterdetails(context);
                    break;
                case "get_CompanyMaster_details":
                    get_CompanyMaster_details(context);
                    break;
                case "get_branch_details":
                    get_branch_details(context);
                    break;
                case "get_branchwise_details":
                    get_branchwise_details(context);
                    break;
                case "get_employeeage_details":
                    get_employeeage_details(context);
                    break;
                case "get_Payslip_details":
                    get_Payslip_details(context);
                    break;

                case "sendmailldclick":
                    sendmailldclick(context);
                    break;
                case "getdatadepchange":
                    getdatadepchange(context);
                    break;
                case "save_edit_Fines":
                    save_edit_Fines(context);
                    break;
                case "get_fine_details":
                    get_fine_details(context);
                    break;
                case "save_damages":
                    save_damages(context);
                    break;
                case "get_Damage_details":
                    get_Damage_details(context);
                    break;

                case "save_edit_bulletin":
                    save_edit_bulletin(context);
                    break;

                case "get_bullentin_details":
                    get_bullentin_details(context);
                    break;

                case "get_organisation_tree_details":
                    get_organisation_tree_details(context);
                    break;

                case "get_wishes_branch_details":
                    get_wishes_branch_details(context);
                    break;

                case "send_Bulk_wishs_click":
                    send_Bulk_wishs_click(context);
                    break;

                case "save_edit_holiday":
                    save_edit_holiday(context);
                    break;

                case "get_All_Holiday_details":
                    get_All_Holiday_details(context);
                    break;

                case "get_Emplogin_details":
                    get_Emplogin_details(context);
                    break;


                case "get_transfer_branch_details":
                    get_transfer_branch_details(context);
                    break;

                case "save_employee_transfer":
                    save_employee_transfer(context);
                    break;

                case "save_contact_details":
                    save_contact_details(context);
                    break;
                case "get_contactform_type":
                    get_contactform_type(context);
                    break;
                case "save_contactform_details":
                    save_contactform_details(context);
                    break;
                case "save_esiform_details":
                    save_esiform_details(context);
                    break;
                case "get_contact_type":
                    get_contact_type(context);
                    break;
                case "save_edit_tds":
                    save_edit_tds(context);
                    break;
                case "save_edit_medicliems":
                    save_edit_medicliems(context);
                    break;
                case "save_edit_travel":
                    save_edit_travel(context);
                    break;
                case "btn_sendfeedback_click":
                    btn_sendfeedback_click(context);
                    break;
                case "save_appovereturn_click":
                    save_appovereturn_click(context);
                    break;

                case "GetFinalizesalaryDeatails":
                    GetFinalizesalaryDeatails(context);
                    break;
                case "get_tds_details":
                    get_tds_details(context);
                    break;
                case "get_medicliem_details":
                    get_medicliem_details(context);
                    break;

                case "Gettotalysalarywiselick":
                    Gettotalysalarywiselick(context);
                    break;
                case "Genderwiseclick":
                    Genderwiseclick(context);
                    break;
                case "PFwiselinechartclick":
                    PFwiselinechartclick(context);
                    break;
                case "Agewiselinechartclick":
                    Agewiselinechartclick(context);
                    break;
                case "Addtionwiselinechartclick":
                    Addtionwiselinechartclick(context);
                    break;
                case "GetPieChartValues":
                    GetPieChartValues(context);
                    break;
                case "GetNetPaymonthlyValues":
                    GetNetPaymonthlyValues(context);
                    break;
                case "Agewiseemployeecount_barChartValues":
                    Agewiseemployeecount_barChartValues(context);
                    break;
                case "employeetypePieChartValues":
                    employeetypePieChartValues(context);
                    break;
                case "employee_relieving_joingcount_barChartValues":
                    employee_relieving_joingcount_barChartValues(context);
                    break;
                case "employee_relieving_joingcount_PieChartValues":
                    employee_relieving_joingcount_PieChartValues(context);
                    break;
                case "get_hrjoinnemployee":
                    get_hrjoinnemployee(context);
                    break;

                case "save_hremployee_approve_click":
                    save_hremployee_approve_click(context);
                    break;
                case "otp_approve_click":
                    otp_approve_click(context);
                    break;
                case "FP_approve_click":
                    FP_approve_click(context);
                    break;

                case "get_od_details":
                    get_od_details(context);
                    break;

                case "get_odrefrence_details":
                    get_odrefrence_details(context);
                    break;
                case "get_edit_OD_details":
                    get_edit_OD_details(context);
                    break;

                case "save_form_click":
                    save_form_click(context);
                    break;
                case "get_Form_details":
                    get_Form_details(context);
                    break;
                case "save_otpauthecation_click":
                    save_otpauthecation_click(context);
                    break;
                case "get_loginotp_details":
                    get_loginotp_details(context);
                    break;
                case "save_ledger_details":
                    save_ledger_details(context);
                    break;
                case "get_ledger_detailes":
                    get_ledger_detailes(context);
                    break;
                case "get_collections_details":
                    get_collections_details(context);
                    break;
                case "get_collectionssubdetails":
                    get_collectionssubdetails(context);
                    break;

                case "get_approveissue_details":
                    get_approveissue_details(context);
                    break;
                case "get_branchwise_attandance_details":
                    get_branchwise_attandance_details(context);
                    break;
                case "get_branchwise_attandance":
                    get_branchwise_attandance(context);
                    break;
                case "dept_wise_attandance_details":
                    dept_wise_attandance_details(context);
                    break;
                case "GetSubPaybleValues":
                    GetSubPaybleValues(context);
                    break;
                case "btnReceiptPrintClick":
                    btnReceiptPrintClick(context);
                    break;
                case "save_edit_paireddatadetails":
                    save_edit_paireddatadetails(context);
                    break;
                case "get_pairdata_details":
                    get_pairdata_details(context);
                    break;
                case "get_onlinedata_details":
                    get_onlinedata_details(context);
                    break;
                case "get_empwork_details_click":
                    get_empwork_details_click(context);
                    break;

                case "get_compaywisebranchname_fill":
                    get_compaywisebranchname_fill(context);
                    break;
                case "get_employeetype_fill":
                    get_employeetype_fill(context);
                    break;

                case "get_branchdetails":
                    get_branchdetails(context);
                    break;

                case "Total_branches_details":
                    Total_branches_details(context);
                    break;

                case "Total_leave_details":
                    Total_leave_details(context);
                    break;


                case "save_grouptype_click":
                    save_grouptype_click(context);
                    break;

                case "get_Grouptype_details":
                    get_Grouptype_details(context);
                    break;
                case "generate_attadancebarchart":
                    generate_attadancebarchart(context);
                    break;

                case "get_Groupledger_details":
                    get_Groupledger_details(context);
                    break;
                case "savegrplederDetails":
                    savegrplederDetails(context);
                    break;
                case "get_employeesAttendencebiometric":
                    get_employeesAttendencebiometric(context);
                    break;

                // case "get_employeeSalarycount":
                //get_employeeSalarycount(context);
                //break;
                case "get_blogs":
                    get_blogs(context);
                    break;

                case "get_finalsttelement_details_click":
                    get_finalsttelement_details_click(context);
                    break;

                case "get_bimetriclogdetails_details":
                    get_bimetriclogdetails_details(context);
                    break;

                case "get_empbiologdetails":
                    get_empbiologdetails(context);
                    break;
                //reports

                case "generate_dup_report":
                    generate_dup_report(context);
                    break;
                case "generate_position_history":
                    generate_position_history(context);
                    break;
                case "get_login_sys":
                    get_login_sys(context);
                    break;
                case "get_logintime_monitor":
                    get_logintime_monitor(context);
                    break;
                case "get_compaywiselocation_fill":
                    get_compaywiselocation_fill(context);
                    break;
                case "get_retirement_list":
                    get_retirement_list(context);
                    break;
                case "get_professionaltax_details":
                    get_professionaltax_details(context);
                    break;
                case "get_deptlocation_salary":
                    get_deptlocation_salary(context);
                    break;

                case "get_employee_salarycount":
                    get_employee_salarycount(context);
                    break;
                case "get_Employee_information":
                    get_Employee_information(context);
                    break;
                case "get_dailyactivity_Reports":
                    get_dailyactivity_Reports(context);
                    break;
                case "get_dailyactivity_details":
                    get_dailyactivity_details(context);
                    break;
                case "get_agewise_employee_details":
                    get_agewise_employee_details(context);
                    break;
                case "get_job_application_details":
                    get_job_application_details(context);
                    break;
                case "getresume":
                    getresume(context);
                    break;
                case "employee_relieving_joingcount_details":
                    employee_relieving_joingcount_details(context);
                    break;
                case "GetSummaryreportdetails":
                    GetSummaryreportdetails(context);
                    break;

                case "btn_Generate_Click":
                    btn_Generate_Click(context);
                    break;
                case "btn_Generatesum_Click":
                    btn_Generatesum_Click(context);
                    break;
                case "get_departmentmanagers_fill_Details":
                    get_departmentmanagers_fill_Details(context);
                    break;
                case "get_branchdepartmentmanagers_fill_Details":
                    get_branchdepartmentmanagers_fill_Details(context);
                    break;
                case "save_noduecertificate_click":
                    save_noduecertificate_click(context);
                    break;
                case "get_brancwisebankdetails":
                    get_brancwisebankdetails(context);
                    break;
                case "get_filenames_details":
                    get_filenames_details(context);
                    break;
                case "get_empbankformate_details":
                    get_empbankformate_details(context);
                    break;
                case "Getdepartemntandbranchwisesalary":
                    Getdepartemntandbranchwisesalary(context);
                    break;
                case "Getbranchwisesalaryandemployeecount":
                    Getbranchwisesalaryandemployeecount(context);
                    break;
                case "Getdepartemntandbranchwisesalarychart":
                    Getdepartemntandbranchwisesalarychart(context);
                    break;
                case "get_DeptemployeesAttendence":
                    get_DeptemployeesAttendence(context);
                    break;
                case "Gettodayleavedetails":
                    Gettodayleavedetails(context);
                    break;
                case "get_Branch_details_id":
                    get_Branch_details_id(context);
                    break;
                case "get_employeesabsent_details":
                    get_employeesabsent_details(context);
                    break;
                case "get_loginemployee_details":
                    get_loginemployee_details(context);
                    break;
                case "btn_getlogininfoemployee_details":
                    btn_getlogininfoemployee_details(context);
                    break;
                case "get_canteenAttendence":
                    get_canteenAttendence(context);
                    break;
                //-------------shiva-----------// 

                case "get_conso_report":
                    get_conso_report(context);
                    break;
                case "btn_attendance_click":
                    btn_attendance_click(context);
                    break;
                case "btn_prsntattendance_click":
                    btn_prsntattendance_click(context);
                    break;
                case "empdept_wise_attandance_details":
                    empdept_wise_attandance_details(context);
                    break;
                case "get_employeeAttendence":
                    get_employeeAttendence(context);
                    break;
                case "generate_companywise_report":
                    generate_companywise_report(context);
                    break;
                case "get_gsvdtot_report":
                    get_gsvdtot_report(context);
                    break;
                case "get_govfto_report":
                    get_govfto_report(context);
                    break;
                case "get_govffto_report":
                    get_govffto_report(context);
                    break;
                case "get_svdspl_report":
                    get_svdspl_report(context);
                    break;
                case "get_svds_report":
                    get_svds_report(context);
                    break;
                case "get_svf_report":
                    get_svf_report(context);
                    break;
                case "get_totstaff_casual_report":
                    get_totstaff_casual_report(context);
                    break;
                case "get_gosvd_branchtypewise_report":
                    get_gosvd_branchtypewise_report(context);
                    break;
                case "get_svdcc_dephwise_report":
                    get_svdcc_dephwise_report(context);
                    break;
                case "get_gosvd_depwisee_report":
                    get_gosvd_depwisee_report(context);
                    break;
                case "get_gosvd_branchwise_report":
                    get_gosvd_branchwise_report(context);
                    break;
                case "get_gosvd_dephwise_report":
                    get_gosvd_dephwise_report(context);
                    break;
                case "get_gosvd_branchwisee_report":
                    get_gosvd_branchwisee_report(context);
                    break;
                case "get_gosvd_deptwise_report":
                    get_gosvd_deptwise_report(context);
                    break;
                case "get_svdsPlant_deptwise_report":
                    get_svdsPlant_deptwise_report(context);
                    break;
                case "get_svdssalesofc_deptwise_report":
                    get_svdssalesofc_deptwise_report(context);
                    break;
                case "get_svdspl_depthwise_report":
                    get_svdspl_depthwise_report(context);
                    break;
                case "get_svdspl_empwise_report":
                    get_svdspl_empwise_report(context);
                    break;
                //test
                case "get_gosvd_branch_details":
                    get_gosvd_branch_details(context);
                    break;
                case "get_gosvd_depthwise_report":
                    get_gosvd_depthwise_report(context);
                    break;
                case "get_gosvd_empwise_report":
                    get_gosvd_empwise_report(context);
                    break;
                case "get_gosvd_empwise_details":
                    get_gosvd_empwise_details(context);
                    break;
                case "get_svds_empwise_details":
                    get_svds_empwise_details(context);
                    break;
                case "get_svd_empwise_details":
                    get_svd_empwise_details(context);
                    break;
                case "get_rmrd_empwise_details":
                    get_rmrd_empwise_details(context);
                    break;
                case "get_staff_empwise_details":
                    get_staff_empwise_details(context);
                    break;
                case "get_casual_empwise_details":
                    get_casual_empwise_details(context);
                    break;
                case "get_branchwise_empattandance":
                    get_branchwise_empattandance(context);
                    break;
                case "get_branchwise_staffattandance":
                    get_branchwise_staffattandance(context);
                    break;
                case "get_branchwise_casualattandance":
                    get_branchwise_casualattandance(context);
                    break;
                case "get_branchwise_casuallattandance":
                    get_branchwise_casuallattandance(context);
                    break;
                case "get_branchwise_allempattandance":
                    get_branchwise_allempattandance(context);
                    break;
                case "get_branchwise_staff_absent_attandance":
                    get_branchwise_staff_absent_attandance(context);
                    break;
                case "get_allbranchestotsal_report":
                    get_allbranchestotsal_report(context);
                    break;
                case "get_gosvd_report":
                    get_gosvd_report(context);
                    break;
                case "sms_report_details":
                    sms_report_details(context);
                    break;
                case "sms_reportbybranch_details":
                    sms_reportbybranch_details(context);
                    break;
                case "sms_fleet_reportbybranch_details":
                    sms_fleet_reportbybranch_details(context);
                    break;
                case "fleetsms_reportbybranch_details":
                    fleetsms_reportbybranch_details(context);
                    break;
                case "procuresms_reportbybranch_details":
                    procuresms_reportbybranch_details(context);
                    break;
                case "procuresms_reportbybranch_wise_details":
                    procuresms_reportbybranch_wise_details(context);
                    break;
                case "overal_sms_report_details":
                    overal_sms_report_details(context);
                    break;
                case "overal_sms_compwise_details":
                    overal_sms_compwise_details(context);
                    break;
                case "branch_wisesms_details":
                    branch_wisesms_details(context);
                    break;
                case "getfile_Uploaded_Documents":
                    getfile_Uploaded_Documents(context);
                    break;
                case "get_employebasicinfo":
                    get_employebasicinfo(context);
                    break;
                case "btn_apprisal_Click":
                    btn_apprisal_Click(context);
                    break;
                case "get_employe_tds_details":
                    get_employe_tds_details(context);
                    break;
                case "save_emp_Loan_Request":
                    save_emp_Loan_Request(context);
                    break;
                case "get_group_grosspay_details":
                    get_group_grosspay_details(context);
                    break;
                case "get_emp_loan_details":
                    get_emp_loan_details(context);
                    break;
                //
                case "get_financial_years":
                    get_financial_years(context);
                    break;
                case "get_esiform_details":
                    get_esiform_details(context);
                    break;


                default:
                    var jsonString = String.Empty;
                    context.Request.InputStream.Position = 0;
                    using (var inputStream = new StreamReader(context.Request.InputStream))
                    {
                        jsonString = HttpUtility.UrlDecode(inputStream.ReadToEnd());
                    }
                    if (jsonString != "")
                    {
                        var js = new JavaScriptSerializer();
                        // var title1 = context.Request.Params[1];
                        GetJsonData obj = js.Deserialize<GetJsonData>(jsonString);
                        switch (obj.op)
                        {
                            case "save_employeeAttendence":
                                save_employeeAttendence(jsonString, context);
                                break;
                            case "save_emp_bankformatedetails":
                                save_emp_bankformatedetails(jsonString, context);
                                break;
                            case "save_Finalize_Attendence":
                                save_Finalize_Attendence(jsonString, context);
                                break;

                        }
                    }
                    else
                    {
                        var js = new JavaScriptSerializer();
                        var title1 = context.Request.Params[1];
                        GetJsonData obj = js.Deserialize<GetJsonData>(title1);
                        switch (obj.op)
                        {
                            case "save_travelexpenses_click":
                                save_travelexpenses_click(context);
                                break;

                            case "SaveMeeting_conduct_Details":
                                SaveMeeting_conduct_Details(context);
                                break;
                            case "Save_DailyActivity_Details":
                                Save_DailyActivity_Details(context);
                                break;
                            case "Save_cmporginfo_Details":
                                Save_cmporginfo_Details(context);
                                break;
                            case "Save_orgbranchinfo_Details":
                                Save_orgbranchinfo_Details(context);
                                break;
                            case "Save_DailyOPERATION_Details":
                                Save_DailyOPERATION_Details(context);
                                break;
                            case "save_MonthlyAttendence":
                                save_MonthlyAttendence(context);
                                break;
                            case "save_Employee_Family_click":
                                save_Employee_Family_click(context);
                                break;
                            case "save_CanteenAttendence":
                                save_CanteenAttendence(context);
                                break;

                            case "save_Monthlyworkingdays":
                                save_Monthlyworkingdays(context);
                                break;
                            case "save_organisation_tree_save_click":
                                save_organisation_tree_save_click(context);
                                break;
                            case "save_edit_empassetdetails":
                                save_edit_empassetdetails(context);
                                break;
                            case "oddetails_save":
                                oddetails_save(context);
                                break;
                            case "get_bankwiseemployeedetails":
                                get_bankwiseemployeedetails(context);
                                break;

                            //-----------shiva----------//
                            case "btn_SmplDetails_save":
                                btn_SmplDetails_save(context);
                                break;
                            case "get_samemp_details":
                                get_samemp_details(context);
                                break;
                        }
                    }
                    break;
            }
        }
        catch (Exception ex)
        {
            string response = GetJson(ex.ToString());
            context.Response.Write(response);
        }
    }
    //shiva
    protected string SendEmail(string toAddress, string subject, string body)
    {
        string result = "Data Sent Successfully..!!";
        //  string senderID = "info.asntech@gmail.com";// use sender's email id here..
        string senderID = "no-reply@vyshnavi.in";// use sender's email id here..
        const string senderPassword = "Vyshnavi@123";
        try
        {
            SmtpClient smtp = new SmtpClient
            {
                Host = "czismtp.logix.in", // smtp server address here...
                Port = 587,
                EnableSsl = true,
                DeliveryMethod = SmtpDeliveryMethod.Network,
                Credentials = new System.Net.NetworkCredential(senderID, senderPassword),
                Timeout = 30000,
            };
            MailMessage message = new MailMessage(senderID, toAddress, subject, body);
            message.IsBodyHtml = true;
            smtp.Send(message);
        }
        catch (Exception ex)
        {
            result = "Error sending data please try again.!!!";
        }
        return result;
    }

    public void sendmailldclick(HttpContext context)
    {
        string email = context.Request["email"];
        //string cellphone = "9490003933";
        string toAddress = email;
        string subject = "Wishes";
        string result = "Success";
        string senderID = "no-reply@vyshnavi.in";// use sender's email id here..
        const string senderPassword = "Vyshnavi@123"; // sender password here...
        try
        {
            SmtpClient smtp = new SmtpClient
            {
                Host = "czismtp.logix.in", // smtp server address here...
                Port = 587,
                //security type=tsl;
                EnableSsl = true,
                DeliveryMethod = SmtpDeliveryMethod.Network,
                Credentials = new System.Net.NetworkCredential(senderID, senderPassword),
                Timeout = 30000,
            };
            MailMessage message = new MailMessage(senderID, toAddress, subject, "<html><body><img src=" + email + " /><br></body></html>");
            //            message.Body = @"This is an email with image included <br />
            //               <img src=""img_url"" alt=""Logo"" /><br />
            //               But, many mail clients will block external images by default";
            message.IsBodyHtml = true;
            smtp.Send(message);
            string msg = "Message send successfully";
            string Response = GetJson(msg);
            context.Response.Write(Response);
        }
        catch (Exception ex)
        {
            result = "Error sending data please try again.!!!";
        }
        //SendEmail(toAddress, subject, body);
    }
    public void send_employee_wishes_mail(HttpContext context)
    {
        string img_url = context.Request["img_url"];
        string email = context.Request["email"];
        //string cellphone = "9490003933";
        string toAddress = "naveen15444@gmail.Com";
        string subject = "Wishes";
        string result = "Success";
        string senderID = "no-reply@vyshnavi.in";// use sender's email id here..
        const string senderPassword = "Vyshnavi@123"; // sender password here...
        try
        {
            SmtpClient smtp = new SmtpClient
            {
                Host = "czismtp.logix.in", // smtp server address here...
                Port = 587,
                //security type=tsl;
                EnableSsl = true,
                DeliveryMethod = SmtpDeliveryMethod.Network,
                Credentials = new System.Net.NetworkCredential(senderID, senderPassword),
                Timeout = 30000,
            };
            MailMessage message = new MailMessage(senderID, toAddress, subject, "<html><body><img src=" + img_url + " /><br></body></html>");
            //            message.Body = @"This is an email with image included <br />
            //               <img src=""img_url"" alt=""Logo"" /><br />
            //               But, many mail clients will block external images by default";
            message.IsBodyHtml = true;
            smtp.Send(message);
            string msg = "Message send successfully";
            string Response = GetJson(msg);
            context.Response.Write(Response);
        }
        catch (Exception ex)
        {
            result = "Error sending data please try again.!!!";
        }
        //SendEmail(toAddress, subject, body);
    }

    public void send_employee_mail(HttpContext context)
    {
        string area = context.Request["area"];
        string email = context.Request["email"];
        string subject = context.Request["subject"];
        string toAddress = email;
        string result = "Success";
        string senderID = "no-reply@vyshnavi.in";// use sender's email id here..
        const string senderPassword = "Vyshnavi@123"; // sender password here...
        try
        {
            SmtpClient smtp = new SmtpClient
            {
                Host = "czismtp.logix.in", // smtp server address here...
                Port = 587,
                //security type=tsl;
                EnableSsl = true,
                DeliveryMethod = SmtpDeliveryMethod.Network,
                Credentials = new System.Net.NetworkCredential(senderID, senderPassword),
                Timeout = 30000,
            };
            MailMessage message = new MailMessage(senderID, toAddress, subject, "<html><body>" + area + "<br></body></html>");
            message.IsBodyHtml = true;
            smtp.Send(message);

            string msg = "Message send successfully";
            string Response = GetJson(msg);
            context.Response.Write(Response);
        }
        catch (Exception ex)
        {
            result = "Error sending data please try again.!!!";
        }
    }
    public void send_Bulk_wishs_click(HttpContext context)
    {
        try
        {
            string branchid = context.Request["branchid"].ToString();
            cmd = new SqlCommand("SELECT employee_num,email,fullname FROM  employedetails where branchid=@branchid and Status='NO'");
            cmd.Parameters.Add("@branchid", branchid);
            DataTable dt = vdm.SelectQuery(cmd).Tables[0];
            foreach (DataRow dr in dt.Rows)
            {
                string holidayid = context.Request["holidayid"].ToString();
                string email = dr["email"].ToString();
                string title = context.Request["title"];
                string content = context.Request["content"];
                cmd = new SqlCommand("SELECT holidayid, imagepath FROM  holiday where holidayid=@holidayid");
                cmd.Parameters.Add("@holidayid", holidayid);
                DataTable dtholiday = vdm.SelectQuery(cmd).Tables[0];
                string image = dtholiday.Rows[0]["imagepath"].ToString();
                string ftplocation = context.Request["ftplocation"];
                string imagepath = "http://182.18.162.51/hrms/Wishes/diwali.jpg";//ftplocation + image;

                string toAddress = email;
                string subject = "Wishes";
                string result = "Success";
                string senderID = "no-reply@vyshnavi.in";// use sender's email id here..
                const string senderPassword = "Vyshnavi@123"; // sender password here...
                try
                {
                    if (email != "")
                    {
                        SmtpClient smtp = new SmtpClient
                        {
                            Host = "czismtp.logix.in", // smtp server address here...
                            Port = 587,
                            //security type=tsl;
                            EnableSsl = true,
                            DeliveryMethod = SmtpDeliveryMethod.Network,
                            Credentials = new System.Net.NetworkCredential(senderID, senderPassword),
                            Timeout = 30000,
                        };
                        MailMessage message = new MailMessage(senderID, toAddress, subject, "<html><body><p>" + title + "</p><p>" + content + "</p><img src=" + imagepath + " /><br></body></html>");
                        message.IsBodyHtml = true;
                        smtp.Send(message);
                    }
                }
                catch (Exception ex)
                {
                    result = "Error sending data please try again.!!!";
                }
            }

            string msg = "Message send successfully";
            string Response = GetJson(msg);
            context.Response.Write(Response);
        }
        catch (Exception ex)
        {
            //result = "Error sending data please try again.!!!";
        }
    }
    public class bulkwishes
    {
        public string empid { get; set; }
        public string employee_num { get; set; }
        public string fullname { get; set; }
        public string branchname { get; set; }
        public string branchid { get; set; }
        public string email { get; set; }

    }

    private void get_wishes_branch_details(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            string branchid = context.Request["branchid"];
            string holidayid = context.Request["holidayid"];
            cmd = new SqlCommand("SELECT branchmaster.branchname, employedetails.branchid,employedetails.email, employedetails.employee_num, employedetails.fullname, employedetails.empid, holiday.holidaydescription, holiday.holidayid FROM employedetails INNER JOIN branchmaster ON employedetails.branchid = branchmaster.branchid INNER JOIN holiday ON branchmaster.branchid = holiday.holidayid WHERE (employedetails.branchid = @branchid) AND (employedetails.status = 'No') AND (holiday.holidayid = @holidayid)");
            cmd.Parameters.Add("@branchid", branchid);
            cmd.Parameters.Add("@holidayid", holidayid);
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<bulkwishes> wishlist = new List<bulkwishes>();
            foreach (DataRow dr in routes.Rows)
            {
                bulkwishes getwishes = new bulkwishes();
                getwishes.empid = dr["empid"].ToString();//Convert.ToInt32(dr["designationid"].ToString());
                getwishes.employee_num = dr["employee_num"].ToString();
                getwishes.fullname = dr["fullname"].ToString();
                getwishes.branchname = dr["branchname"].ToString();
                getwishes.branchid = dr["branchid"].ToString();
                getwishes.email = dr["email"].ToString();
                wishlist.Add(getwishes);
            }
            string response = GetJson(wishlist);
            context.Response.Write(response);
        }
        catch
        {
        }
    }

    private void save_policieDocument(HttpContext context)
    {
        try
        {
            if (context.Request.Files.Count > 0)
            {
                string documentname = context.Request["documentname"];
                documentname = documentname.TrimEnd();
                string documentid = context.Request["documentid"];
                documentid = documentid.TrimEnd();
                string createdby = context.Session["empid"].ToString();
                string editedby = context.Session["empid"].ToString();
                HttpFileCollection files = context.Request.Files;
                DateTime ServerDateCurrentdate = DBManager.GetTime(vdm.conn);
                for (int i = 0; i < files.Count; i++)
                {
                    HttpPostedFile file = files[i];
                    string[] extension = file.FileName.Split('.');
                    string upload_filename = documentname + documentid + ".jpeg";// +extension[extension.Length - 1];
                    if (UploadToFTP(file, upload_filename))
                    {
                        SqlCommand cmd = new SqlCommand("update  policy_details set policypath=@policypath where policyno=@documentid");
                        //cmd.Parameters.Add("@empid", empsno);
                        cmd.Parameters.Add("@policypath", upload_filename);
                        cmd.Parameters.Add("@documentid", documentid);
                        if (vdm.Update(cmd) == 0)
                        {
                            cmd = new SqlCommand("insert into policy_details (policypath,doe,createdby,policyname,policyno,editedby,editedon) values (@policypath,@doe,@createdby,@policyname,@policyno,@editedby,@editedon)");
                            //cmd.Parameters.Add("@empid", empsno);
                            cmd.Parameters.Add("@policypath", upload_filename);
                            cmd.Parameters.Add("@policyname", documentname);
                            cmd.Parameters.Add("@policyno", documentid);
                            cmd.Parameters.Add("@doe", ServerDateCurrentdate);
                            cmd.Parameters.Add("@editedon", ServerDateCurrentdate);
                            cmd.Parameters.Add("@createdby", createdby);
                            cmd.Parameters.Add("@editedby", editedby);
                            vdm.insert(cmd);
                        }
                    }
                }
                context.Response.ContentType = "text/plain";
                context.Response.Write("File Uploaded Successfully!");
            }
        }
        catch (Exception ex)
        {
            string response = GetJson(ex.Message);
            context.Response.Write(response);
        }
    }

    public class Employee_policydocument_details
    {
        public string sno { get; set; }
        public string employee_name { get; set; }
        public string documentid { get; set; }
        public string documentname { get; set; }
        public string ftplocation { get; set; }
        public string documentpath { get; set; }
    }

    private void getpolicy_Uploaded_Documents(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            string empid = context.Request["empsno"];
            cmd = new SqlCommand("SELECT sno, policyno, policypath, doe, createdby, editedby, editedon, policyname FROM policy_details");
            // cmd.Parameters.Add("@EmpID", empid);
            DataTable dtemp = vdm.SelectQuery(cmd).Tables[0];
            List<Employee_policydocument_details> bankMasterlist = new List<Employee_policydocument_details>();
            if (dtemp.Rows.Count > 0)
            {
                foreach (DataRow dr in dtemp.Rows)
                {
                    Employee_policydocument_details GetEmployee = new Employee_policydocument_details();
                    GetEmployee.sno = dr["sno"].ToString();
                    GetEmployee.documentid = dr["policyno"].ToString();
                    GetEmployee.documentname = dr["policyname"].ToString();
                    GetEmployee.ftplocation = "http://182.18.138.228:81/";
                    GetEmployee.documentpath = dr["policypath"].ToString();
                    bankMasterlist.Add(GetEmployee);
                }
            }
            string response = GetJson(bankMasterlist);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }

    public void send_employee_wishes_moblie(HttpContext context)
    {
        WebClient client = new WebClient();
        string img_url = context.Request["img_url"];
        string cellphone = context.Request["cellphone"];
        string msg = "";
        if (cellphone.Length == 10)
        {
            string baseurl = "http://103.16.101.52:8080/sendsms/bulksms?username=kapd-vyshnavi&password=vysavi&type=0&dlr=1&destination=" + cellphone + "&source=VYSHRM&message";
            Stream data = client.OpenRead(baseurl);
            StreamReader reader = new StreamReader(data);
            string ResponseID = reader.ReadToEnd();
            data.Close();
            reader.Close();
            msg = "Message sent successfully";
        }
        else
        {
            msg = "Please enter 10 digit mob no";
        }
        string response = GetJson(msg);
        context.Response.Write(response);
    }

    private void save_edit_holiday(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            string Holidayname = context.Request["Holidayname"];
            string optional = context.Request["optional"];
            DateTime ServerDateCurrentdate = DBManager.GetTime(vdm.conn);
            string date = context.Request["date"];
            DateTime dateofaffence = Convert.ToDateTime(date);
            string strdate = dateofaffence.ToString("dd/MM/yyyy");
            string[] str = strdate.Split('/');
            string year = str[2];
            //int yr = 0;
            string month = str[1];
            string createdby = context.Session["empid"].ToString();
            string btnval = context.Request["btnval"];
            if (btnval == "Save")
            {
                cmd = new SqlCommand("insert into holiday (holidaydate,holidaydescription,optional,createdon,createdby,status,holidayyear) values (@holidaydate,@holidaydescription,@optional,@createdon,@createdby,@status,@holidayyear)");
                cmd.Parameters.Add("@holidaydescription", Holidayname);
                cmd.Parameters.Add("@optional", optional);
                cmd.Parameters.Add("@holidaydate", date);
                cmd.Parameters.Add("@status", "A");
                cmd.Parameters.Add("@createdon", ServerDateCurrentdate);
                cmd.Parameters.Add("@createdby", createdby);
                cmd.Parameters.Add("@holidayyear", year);
                vdm.insert(cmd);
                string response = GetJson("Insert Successfully");
                context.Response.Write(response);
            }
            else
            {
                string sno = context.Request["sno"];
                cmd = new SqlCommand("Update holiday set holidaydate=@holidaydate,holidaydescription=@holidaydescription,optional=@optional,holidayyear=@holidayyear where holidayid=@holidayid");
                cmd.Parameters.Add("@holidaydescription", Holidayname);
                cmd.Parameters.Add("@optional", optional);
                cmd.Parameters.Add("@holidaydate", date);
                cmd.Parameters.Add("@doe", ServerDateCurrentdate);
                cmd.Parameters.Add("@createdby", createdby);
                cmd.Parameters.Add("@holidayid", sno);
                cmd.Parameters.Add("@holidayyear", year);
                vdm.Update(cmd);
                //string response = GetJson("UPDATE Successfully");
                //context.Response.Write(response);
                string msg = "Holiday details successfully updated";
                string response = GetJson(msg);
                context.Response.Write(response);
            }
        }
        catch (Exception ex)
        {
            string response = GetJson(ex.Message);
            context.Response.Write(response);
        }
    }

    public class holidays
    {
        public string sno { get; set; }
        public string Holidayname { get; set; }
        public string optional { get; set; }
        public string date { get; set; }
    }

    private void get_All_Holiday_details(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            cmd = new SqlCommand("SELECT  holidayid, holidaydate, holidaydescription, optional FROM holiday ");
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<holidays> Holidaylist = new List<holidays>();
            foreach (DataRow dr in routes.Rows)
            {
                holidays getholiday = new holidays();
                getholiday.sno = dr["holidayid"].ToString();//Convert.ToInt32(dr["designationid"].ToString());
                getholiday.Holidayname = dr["holidaydescription"].ToString();
                getholiday.optional = dr["optional"].ToString();
                getholiday.date = ((DateTime)dr["holidaydate"]).ToString("yyyy-MM-dd"); //dr["holidaydate"].ToString();
                Holidaylist.Add(getholiday);
            }
            string response = GetJson(Holidaylist);
            context.Response.Write(response);
        }
        catch
        {
        }
    }
    private void save_employee_transfer(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            string created = context.Session["empid"].ToString();
            string employeid = context.Request["employeid"];
            string frombranch = context.Request["frombranch"];
            string tobranch = context.Request["tobranch"];
            string empcode = context.Request["empcode"];
            string date = context.Request["date"];
            DateTime ServerDateCurrentdate = DBManager.GetTime(vdm.conn);
            string btnval = context.Request["btnval"];
            if (btnval == "Save")
            {
                cmd = new SqlCommand("insert into employee_branchtransfer (empid, empcode, frombranch, date, doe, tobranch) values (@empid,@empcode,@frombranch,@date,@doe,@tobranch)");
                cmd.Parameters.Add("@empid", employeid);
                cmd.Parameters.Add("@empcode", empcode);
                cmd.Parameters.Add("@frombranch", frombranch);
                cmd.Parameters.Add("@tobranch", tobranch);
                cmd.Parameters.Add("@doe", ServerDateCurrentdate);
                cmd.Parameters.Add("@date", date);
                vdm.insert(cmd);

                cmd = new SqlCommand("insert into employee_branchtransferlogs (empid, empcode, previasworking, doe, currenttransfor, createdby, createddate) values (@empid, @empcode, @frombranch, @doe, @tobranch, @createdby, @date)");
                cmd.Parameters.Add("@empid", employeid);
                cmd.Parameters.Add("@empcode", empcode);
                cmd.Parameters.Add("@frombranch", frombranch);
                cmd.Parameters.Add("@tobranch", tobranch);
                cmd.Parameters.Add("@doe", ServerDateCurrentdate);
                cmd.Parameters.Add("@date", ServerDateCurrentdate);
                cmd.Parameters.Add("@createdby", created);
                vdm.insert(cmd);

                cmd = new SqlCommand("update employedetails set  branchid=@branchid  where empid=@empid");
                cmd.Parameters.Add("@branchid", tobranch);
                cmd.Parameters.Add("@empid", employeid);
                vdm.Update(cmd);
                string response = GetJson("Insert Successfully");
                context.Response.Write(response);
            }
            else
            {
                string sno = context.Request["sno"];
                cmd = new SqlCommand("Update employee_branchtransfer set empcode=@empcode,empid=@empid,frombranch=@frombranch,tobranch=@tobranch,date=@date where sno=@sno");
                cmd.Parameters.Add("@empid", employeid);
                cmd.Parameters.Add("@empcode", empcode);
                cmd.Parameters.Add("@frombranch", frombranch);
                cmd.Parameters.Add("@tobranch", tobranch);
                cmd.Parameters.Add("@date", date);
                cmd.Parameters.Add("@sno", sno);
                vdm.Update(cmd);
                cmd = new SqlCommand("update employedetails set  branchid=@branchid  where empid=@empid");
                cmd.Parameters.Add("@branchid", tobranch);
                cmd.Parameters.Add("@empid", employeid);
                vdm.Update(cmd);
                string response = GetJson("UPDATE Successfully");
                context.Response.Write(response);
            }
        }
        catch (Exception ex)
        {
            string response = GetJson(ex.Message);
            context.Response.Write(response);
        }
    }

    public class employee_branchtransfer
    {
        public string sno { get; set; }
        public string empid { get; set; }
        public string empcode { get; set; }
        public string date { get; set; }
        public string frombranch { get; set; }
        public string tobranch { get; set; }
        public string frombranchid { get; set; }
        public string branchname { get; set; }
        public string fullname { get; set; }
        public string tobranchid { get; set; }

    }

    private void get_transfer_branch_details(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            string mainbranch = context.Session["mainbranch"].ToString();
            cmd = new SqlCommand("SELECT employedetails.fullname, employee_branchtransfer.empid, employee_branchtransfer.empcode, employee_branchtransfer.date,  branchmaster.branchname AS frombranch, branchmaster_1.branchname AS tobranch, branchmaster_1.branchid AS tobranchid,   branchmaster.branchid AS frombranchid, employee_branchtransfer.sno FROM employee_branchtransfer INNER JOIN employedetails ON employee_branchtransfer.empid = employedetails.empid INNER JOIN  branchmaster AS branchmaster_1 ON employee_branchtransfer.tobranch = branchmaster_1.branchid INNER JOIN branchmaster ON employee_branchtransfer.frombranch = branchmaster.branchid INNER JOIN branchmapping ON employedetails.branchid = branchmapping.subbranch WHERE (employedetails.status = 'No') AND (branchmapping.mainbranch = @m)");
            cmd.Parameters.Add("@m", mainbranch);
            //branchwise
            // cmd = new SqlCommand("SELECT employedetails.fullname, employee_branchtransfer.empid, employee_branchtransfer.empcode, employee_branchtransfer.date, branchmaster.branchname AS frombranch, branchmaster_1.branchname AS tobranch, branchmaster_1.branchid AS tobranchid, branchmaster.branchid AS frombranchid, employee_branchtransfer.sno FROM  employee_branchtransfer INNER JOIN  employedetails ON employee_branchtransfer.empid = employedetails.empid INNER JOIN branchmaster AS branchmaster_1 ON employee_branchtransfer.tobranch = branchmaster_1.branchid INNER JOIN branchmaster ON employee_branchtransfer.frombranch = branchmaster.branchid ");
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<employee_branchtransfer> Holidaylist = new List<employee_branchtransfer>();
            foreach (DataRow dr in routes.Rows)
            {
                employee_branchtransfer gettransfer = new employee_branchtransfer();
                gettransfer.sno = dr["sno"].ToString();//Convert.ToInt32(dr["designationid"].ToString());
                gettransfer.empid = dr["empid"].ToString();
                gettransfer.empcode = dr["empcode"].ToString();
                gettransfer.date = ((DateTime)dr["date"]).ToString("yyyy-MM-dd"); //dr["holidaydate"].ToString();
                gettransfer.frombranch = dr["frombranch"].ToString();
                gettransfer.tobranch = dr["tobranch"].ToString();
                gettransfer.frombranchid = dr["frombranchid"].ToString();
                gettransfer.tobranchid = dr["tobranchid"].ToString();
                gettransfer.fullname = dr["fullname"].ToString();
                Holidaylist.Add(gettransfer);
            }
            string response = GetJson(Holidaylist);
            context.Response.Write(response);
        }
        catch
        {
        }
    }
    private void get_all_dash_employeedetails(HttpContext context)
    {
        try
        {
            string branchid = "1";
            if (branchid != null)
            {
                SqlCommand cmd;
                DBManager vdm = new DBManager();
                DateTime ServerDateCurrentdate = DBManager.GetTime(vdm.conn);
                //branchmapping
                string mainbranch = context.Session["mainbranch"].ToString();
                cmd = new SqlCommand(" SELECT  ed.empid, ed.photos, ed.age, ed.fathername, ed.marriagedate, ed.employee_num, ed.designationid, ds.designation, ed.branchid, ed.joindate, ed.fullname, ed.initials, ed.title, ed.gender, MONTH(ed.dob) AS MonthName, DAY(ed.dob) AS DATE, ed.dob, ed.marital_status, ed.spouse_fullname, ed.nationality, ed.idproof, ed.home_address, ed.presentaddress, ed.home_phone, ed.cellphone, ed.currentlocationsince, ed.currentdesignationsince, ed.currentdepartmentsince, ed.currentemployeesince, ed.pfeligible, ed.esieligible, ed.email, ed.city, ed.state, ed.zipcode, ed.degree, ed.specification, ed.experience, ed.experience_details,  ed.status, ed.employee_dept, el.loginid AS emp_login_sno, el.password, ed.photos AS Expr1, ed.aboutus, ed.aadhaar_id, ed.voter_id, ed.spouse_details,  ed.confirmdate, ed.physicalchallange, ed.bloodgroup, ed.pancard, ed.aadarenrollnumber, ed.nameasforaadhar, ed.remarks, ed.grades, ed.university, ed.salarymode, ed.employee_type, ed.institute, ed.durationofcourse, branchmaster.branchname FROM employedetails AS ed INNER JOIN branchmaster ON ed.branchid = branchmaster.branchid INNER JOIN  designation AS ds ON ds.designationid = ed.designationid INNER JOIN  branchmapping ON ed.branchid = branchmapping.subbranch FULL OUTER JOIN employe_logins AS el ON el.empid = ed.empid WHERE (ed.status = 'No') AND (branchmapping.mainbranch = @m) ORDER BY MonthName, DATE ,joinDate Asc");
                cmd.Parameters.Add("@m", mainbranch);
                //branchwise
                //cmd = new SqlCommand(" SELECT ed.empid, ed.photos, ed.age, ed.fathername, ed.marriagedate, ed.employee_num, ed.designationid, ds.designation, ed.branchid, ed.joindate, ed.fullname, ed.initials, ed.title, ed.gender, MONTH(ed.dob) AS MonthName, DAY(ed.dob) AS DATE, ed.dob, ed.marital_status, ed.spouse_fullname, ed.nationality, ed.idproof, ed.home_address, ed.presentaddress, ed.home_phone, ed.cellphone, ed.currentlocationsince, ed.currentdesignationsince, ed.currentdepartmentsince, ed.currentemployeesince, ed.pfeligible, ed.esieligible, ed.email, ed.city, ed.state, ed.zipcode, ed.degree, ed.specification, ed.experience, ed.experience_details, ed.status, ed.employee_dept, el.loginid AS emp_login_sno, el.password, ed.photos, ed.aboutus, ed.aadhaar_id, ed.voter_id, ed.spouse_details, ed.confirmdate, ed.physicalchallange, ed.bloodgroup, ed.pancard, ed.aadarenrollnumber,   ed.nameasforaadhar, ed.remarks, ed.grades, ed.university, ed.salarymode, ed.employee_type, ed.institute, ed.durationofcourse, branchmaster.branchname FROM  employedetails AS ed INNER JOIN branchmaster ON ed.branchid = branchmaster.branchid INNER JOIN designation ds ON ds.designationid = ed.designationid FULL OUTER JOIN employe_logins AS el ON el.empid = ed.empid  WHERE ed.status='No' order by MonthName,DATE");
                DataTable dt = vdm.SelectQuery(cmd).Tables[0];
                DataView view = dt.DefaultView;
                DataTable main = view.ToTable(true, "empid", "employee_num", "MonthName", "fathername", "age", "marriagedate", "joinDate", "branchid", "designationid", "designation", "fullname", "initials", "title", "gender", "dob", "marital_status", "spouse_fullname", "nationality", "idproof", "home_address", "presentaddress", "home_phone", "cellphone", "email", "city", "state", "zipcode", "degree", "specification", "experience", "experience_details", "status", "employee_dept", "emp_login_sno", "password", "photos", "aboutus", "aadhaar_id", "voter_id", "spouse_details", "confirmdate", "physicalchallange", "bloodgroup", "pancard", "aadarenrollnumber", "nameasforaadhar", "remarks", "grades", "university", "institute", "durationofcourse", "salarymode", "employee_type", "currentlocationsince", "currentdesignationsince", "currentdepartmentsince", "currentemployeesince", "pfeligible", "branchname", "esieligible");
                List<getEmployeedetailscls> list_getEmployeedetailscls = new List<getEmployeedetailscls>();
                foreach (DataRow dr in main.Rows)
                {
                    getEmployeedetailscls getEmployeedetails = new getEmployeedetailscls();
                    getEmployeedetails.empsno = dr["empid"].ToString();
                    getEmployeedetails.empnum = dr["employee_num"].ToString();
                    string empnum = dr["employee_num"].ToString();
                    if (dr["joinDate"].ToString() != null && dr["joinDate"].ToString() != "")
                    {
                        getEmployeedetails.joindate = ((DateTime)dr["joinDate"]).ToString("dd-MM-yyyy");
                        DateTime dtjoin = Convert.ToDateTime(dr["joinDate"].ToString());
                        TimeSpan days;
                        days = ServerDateCurrentdate - dtjoin;
                        int joingdays = Convert.ToInt32(days.TotalDays);
                        getEmployeedetails.joingdays = joingdays.ToString();
                        int joingyears = joingdays / 365;

                        int joingmonths = joingdays / 12;
                        getEmployeedetails.joingyears = joingyears.ToString();
                        getEmployeedetails.joingmonths = joingmonths.ToString();

                    }
                    else
                    {
                        getEmployeedetails.joingyears = "";
                        getEmployeedetails.joingdays = "";
                        getEmployeedetails.joindate = "";
                    }
                    getEmployeedetails.empname = dr["fullname"].ToString();
                    string empname = dr["fullname"].ToString();
                    getEmployeedetails.empnamecode = empname + "[" + empnum + "]";
                    getEmployeedetails.initials = dr["initials"].ToString();
                    getEmployeedetails.title = dr["title"].ToString();
                    getEmployeedetails.gender = dr["gender"].ToString();
                    string dob = dr["dob"].ToString();
                    if (dob == "" || dob == null)
                    {
                        getEmployeedetails.birthdate = "";
                        getEmployeedetails.BirthDays = "";
                    }
                    else
                    {
                        DateTime date = Convert.ToDateTime(dob);
                        string strtime = date.ToString("yyyy-MM-dd");
                        getEmployeedetails.birthdate = strtime;
                        string strBirthtime = date.ToString("dd-MMM");
                        DateTime dtBirth = Convert.ToDateTime(strBirthtime);
                        TimeSpan days;
                        days = dtBirth - ServerDateCurrentdate;
                        int BirthDays = Convert.ToInt32(days.TotalDays);
                        if (BirthDays < 0)
                        {
                        }
                        else
                        {
                            getEmployeedetails.BirthDays = BirthDays.ToString();
                            getEmployeedetails.Birth_Days = strBirthtime.ToString();
                        }
                    }
                    getEmployeedetails.maritalstatus = dr["marital_status"].ToString();
                    getEmployeedetails.spousename = dr["spouse_fullname"].ToString();
                    getEmployeedetails.country = dr["nationality"].ToString();
                    getEmployeedetails.idproof = dr["idproof"].ToString();
                    getEmployeedetails.homeaddress = dr["home_address"].ToString();
                    getEmployeedetails.presentaddress = dr["presentaddress"].ToString();
                    getEmployeedetails.homephone = dr["home_phone"].ToString();
                    getEmployeedetails.cellphone = dr["cellphone"].ToString();
                    getEmployeedetails.email = dr["email"].ToString();
                    getEmployeedetails.designation = dr["designation"].ToString();
                    getEmployeedetails.city = dr["city"].ToString();
                    getEmployeedetails.state = dr["state"].ToString();
                    getEmployeedetails.zipcode = dr["zipcode"].ToString();
                    getEmployeedetails.degree = dr["degree"].ToString();
                    getEmployeedetails.specification = dr["specification"].ToString();
                    getEmployeedetails.experience = dr["experience"].ToString();
                    getEmployeedetails.experiencedet = dr["experience_details"].ToString();
                    getEmployeedetails.status = dr["status"].ToString();
                    getEmployeedetails.photo = dr["photos"].ToString();
                    getEmployeedetails.deptid = dr["employee_dept"].ToString();
                    getEmployeedetails.designationid = dr["designationid"].ToString();
                    getEmployeedetails.branchid = dr["branchid"].ToString();
                    getEmployeedetails.branchname = dr["branchname"].ToString();
                    getEmployeedetails.password = dr["password"].ToString();
                    getEmployeedetails.pass_sno = dr["emp_login_sno"].ToString();
                    // getEmployeedetails.ftplocation = "ftp://182.18.138.228/HRMS/";
                    getEmployeedetails.photo = dr["photos"].ToString();
                    getEmployeedetails.aboutus = dr["aboutus"].ToString();
                    getEmployeedetails.aadhaar_id = dr["aadhaar_id"].ToString();
                    getEmployeedetails.institute = dr["institute"].ToString();
                    getEmployeedetails.university = dr["university"].ToString();
                    getEmployeedetails.duration = dr["durationofcourse"].ToString();
                    getEmployeedetails.remarks = dr["remarks"].ToString();
                    getEmployeedetails.graders = dr["grades"].ToString();
                    getEmployeedetails.bloodgroup = dr["bloodgroup"].ToString();
                    getEmployeedetails.employeetype = dr["employee_type"].ToString();
                    string confirmdate = dr["confirmdate"].ToString();
                    if (confirmdate == "" || confirmdate == null)
                    {
                        getEmployeedetails.conformdate = "";
                    }
                    else
                    {
                        DateTime date = Convert.ToDateTime(confirmdate);
                        string strtime = date.ToString("yyyy-MM-dd");
                        getEmployeedetails.conformdate = strtime;
                    }
                    if (dr["currentlocationsince"].ToString() != null && dr["currentlocationsince"].ToString() != "")
                    {
                        getEmployeedetails.currentlocationsince = ((DateTime)dr["currentlocationsince"]).ToString("yyyy-MM-dd");
                    }
                    else
                    {
                        getEmployeedetails.currentlocationsince = "";
                    }
                    if (dr["currentdesignationsince"].ToString() != null && dr["currentdesignationsince"].ToString() != "")
                    {
                        getEmployeedetails.currentdesignationsince = ((DateTime)dr["currentdesignationsince"]).ToString("yyyy-MM-dd");
                    }
                    else
                    {
                        getEmployeedetails.conformdate = "";
                    }
                    string currentdepartmentsince = dr["currentdepartmentsince"].ToString();
                    if (currentdepartmentsince == "" || currentdepartmentsince == null)
                    {
                        getEmployeedetails.currentdepartmentsince = "";
                    }
                    else
                    {
                        DateTime date = Convert.ToDateTime(currentdepartmentsince);
                        string strtime = date.ToString("yyyy-MM-dd");
                        getEmployeedetails.currentdepartmentsince = strtime;
                    }
                    if (dr["currentemployeesince"].ToString() != null && dr["currentemployeesince"].ToString() != "")
                    {
                        getEmployeedetails.currentemployeesince = ((DateTime)dr["currentemployeesince"]).ToString("yyyy-MM-dd");
                    }
                    else
                    {
                        getEmployeedetails.conformdate = "";
                    }
                    getEmployeedetails.pfeligible = dr["pfeligible"].ToString();
                    getEmployeedetails.esieligible = dr["esieligible"].ToString();
                    getEmployeedetails.pancard = dr["pancard"].ToString();
                    getEmployeedetails.physicalchalnge = dr["physicalchallange"].ToString();
                    getEmployeedetails.aadarenrollnumber = dr["aadarenrollnumber"].ToString();
                    getEmployeedetails.nameasforaadhar = dr["nameasforaadhar"].ToString();
                    getEmployeedetails.salarymode = dr["salarymode"].ToString();
                    getEmployeedetails.voter_id = dr["voter_id"].ToString();
                    getEmployeedetails.spouse_details = dr["spouse_details"].ToString();
                    getEmployeedetails.fathername = dr["fathername"].ToString();
                    getEmployeedetails.marriagedate = dr["marriagedate"].ToString();
                    getEmployeedetails.age = dr["age"].ToString();
                    string currentdate = ServerDateCurrentdate.ToString("dd-MMM");
                    getEmployeedetails.currentdate = currentdate;
                    list_getEmployeedetailscls.Add(getEmployeedetails);
                }
                string returnsring = GetJson(list_getEmployeedetailscls);
                context.Response.Write(returnsring);
            }
        }
        catch (Exception ex)
        {
            string returnsring = GetJson(ex.Message);
            context.Response.Write(returnsring);
        }
    }


    private void upload_Meeting_conduct_Info(HttpContext context)
    {
        try
        {
            //if (context.Session["branch_id"] != null)
            //{
            if (context.Request.Files.Count > 0)
            {
                string meeting_no = context.Request["meeting_no"];
                meeting_no = meeting_no.TrimEnd();
                string conducted_by = context.Request["conducted_by"];
                conducted_by = conducted_by.TrimEnd();
                string documentname = context.Request["documentname"];
                documentname = documentname.TrimEnd();
                string documentid = context.Request["documentid"];
                documentid = documentid.TrimEnd();
                string entryby = context.Session["empid"].ToString();
                HttpFileCollection files = context.Request.Files;
                DateTime ServerDateCurrentdate = DBManager.GetTime(vdm.conn);
                for (int i = 0; i < files.Count; i++)
                {
                    HttpPostedFile file = files[i];
                    string[] extension = file.FileName.Split('.');
                    string upload_filename = conducted_by + documentname + documentid + meeting_no + ".jpeg";// +extension[extension.Length - 1];
                    if (UploadToFTP(file, upload_filename))
                    {
                    }
                }
                context.Response.ContentType = "text/plain";
                context.Response.Write("File Uploaded Successfully!");
            }
            //}

        }
        catch (Exception ex)
        {
            string response = GetJson(ex.Message);
            context.Response.Write(response);
        }
    }
    public void saveCompanyMasterdetails(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            string CompanyName = context.Request["CompanyName"];
            string Add = context.Request["Add"];
            string PhoneNo = context.Request["PhoneNo"];
            string mailId = context.Request["mailId"];
            string TINNo = context.Request["TINNo"];
            string btn_save = context.Request["btnVal"];
            if (btn_save == "Save")
            {
                cmd = new SqlCommand("insert into company_master (companyname,address,phoneno,mailid,tinno) values (@company_name,@address,@phoneno,@mailid,@tinno)");
                cmd.Parameters.Add("@company_name", CompanyName);
                cmd.Parameters.Add("@address", Add);
                cmd.Parameters.Add("@phoneno", PhoneNo);
                cmd.Parameters.Add("@tinno", TINNo);
                cmd.Parameters.Add("@mailid", mailId);
                vdm.insert(cmd);
                string msg = "Company details successfully  saved";
                string Response = GetJson(msg);
                context.Response.Write(Response);
            }
            else
            {
                string CompanyCode = context.Request["CompanyCode"];
                cmd = new SqlCommand("Update company_master set companyname=@company_name,address=@address,phoneno=@phoneno,mailid=@mailid,tinno=@tinno where sno=@company_code");
                cmd.Parameters.Add("@company_name", CompanyName);
                cmd.Parameters.Add("@address", Add);
                cmd.Parameters.Add("@phoneno", PhoneNo);
                cmd.Parameters.Add("@tinno", TINNo);
                cmd.Parameters.Add("@mailid", mailId);
                cmd.Parameters.Add("@company_code", CompanyCode);
                vdm.Update(cmd);
                string msg = "Company details successfully updated";
                string Response = GetJson(msg);
                context.Response.Write(Response);
            }
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }
    public class CompanyMaster
    {
        public string CompanyCode { get; set; }
        public string CompanyName { get; set; }
        public string Add { get; set; }
        public string PhoneNo { get; set; }
        public string mailId { get; set; }
        public string TINNo { get; set; }
        //public string CSTNo { get; set; }
    }
    private void get_CompanyMaster_details(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            string sbranchid = context.Session["branchid"].ToString();
            string scmpcode = context.Session["company_code"].ToString();
            if (sbranchid == "1" || sbranchid == "6")
            {
                cmd = new SqlCommand("SELECT sno,companyname,address,phoneno,mailid,tinno FROM company_master");
            }
            else
            {
                cmd = new SqlCommand("SELECT sno,companyname,address,phoneno,mailid,tinno FROM company_master where sno=@sno");
                cmd.Parameters.Add("@sno", scmpcode);
            }
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<CompanyMaster> companyMasterlist = new List<CompanyMaster>();
            foreach (DataRow dr in routes.Rows)
            {
                CompanyMaster getcompanydetails = new CompanyMaster();
                getcompanydetails.CompanyCode = dr["sno"].ToString();
                getcompanydetails.CompanyName = dr["companyname"].ToString();
                getcompanydetails.Add = dr["address"].ToString();
                getcompanydetails.PhoneNo = dr["phoneno"].ToString();
                getcompanydetails.mailId = dr["mailid"].ToString();
                getcompanydetails.TINNo = dr["tinno"].ToString();
                companyMasterlist.Add(getcompanydetails);
            }
            string response = GetJson(companyMasterlist);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }
    public class EmployeeAssets
    {
        public string department { get; set; }
        public string employe { get; set; }
        public string assetname { get; set; }
        public string receiveddate { get; set; }
        public string validupto { get; set; }
        public string assetvalue { get; set; }
        public string status { get; set; }
        public string remarks { get; set; }
        public string assetdetailes { get; set; }
        public string btnval { get; set; }
    }
    public class Employee_details
    {
        public string empsno { get; set; }
        public string employee_name { get; set; }
        public string designation { get; set; }
        public string joindate { get; set; }
        public string employee_num { get; set; }
        public string home_phone { get; set; }
        public string doe { get; set; }
        public string doe1 { get; set; }
        public string address { get; set; }
        public string cellphone { get; set; }
        public string dob { get; set; }
        public string fathername { get; set; }
        public string presentaddress { get; set; }
        public string age { get; set; }
        public string email { get; set; }
    }
    public class Employee_document_details
    {
        public string empsno { get; set; }
        public string employee_name { get; set; }
        public string documentid { get; set; }
        public string documentname { get; set; }
        public string ftplocation { get; set; }
        public string photo { get; set; }
    }
    public class odDetalis
    {
        public string todate { get; set; }
        public string totaldays { get; set; }
        public string fromdate { get; set; }
        public string reason { get; set; }
        public string reportingempid { get; set; }
        public string MobileNumber { get; set; }
        public string operation { get; set; }
        public string empid { get; set; }
        public string btnVal { get; set; }
        public string hrremarks { get; set; }
        public string empcode { get; set; }
        public string deptid { get; set; }
        public string designationid { get; set; }
        public string sno { get; set; }
        public List<suboddetails> DataTable { get; set; }
    }

    public class suboddetails
    {
        public string branch { get; set; }
        public string dateofentry { get; set; }
        public string purpose { get; set; }
        public string dateofexit { get; set; }
        public string comments { get; set; }
        public string reportingdate { get; set; }
        public string sno1 { get; set; }
    }

    private void oddetails_save(HttpContext context)
    {
        try
        {
            var js = new JavaScriptSerializer();
            var title1 = context.Request.Params[1];
            odDetalis obj = js.Deserialize<odDetalis>(title1);
            string todate = obj.todate;
            string totaldays = obj.totaldays;
            string fromdate = obj.fromdate;
            string reason = obj.reason;
            string reportingempid = obj.reportingempid;
            string MobileNumber = obj.MobileNumber;
            string empid = obj.empid;
            string refno = obj.sno;
            string btnSave = obj.btnVal;
            DateTime ServerDateCurrentdate = DBManager.GetTime(vdm.conn);
            if (btnSave == "Save")
            {
                cmd = new SqlCommand("INSERT INTO oddetails (empid, fromdate, todate, reportingto, noofdays, reason, doe, status,mobileno) VALUES (@empid, @fromdt, @todt, @requestto, @oddays, @description,@doe, @satus,@mobileno)");
                cmd.Parameters.Add("@empid", empid);
                //cmd.Parameters.Add("@empcode", empcode);
                cmd.Parameters.Add("@description", reason);
                cmd.Parameters.Add("@fromdt", fromdate);
                cmd.Parameters.Add("@todt", todate);
                cmd.Parameters.Add("@requestto", reportingempid);
                cmd.Parameters.Add("@oddays", totaldays);
                cmd.Parameters.Add("@satus", "P");//branch_sno
                cmd.Parameters.Add("@mobileno", MobileNumber);//branch_sno
                cmd.Parameters.Add("@doe", ServerDateCurrentdate);//branch_sno
                vdm.insert(cmd);
                cmd = new SqlCommand("SELECT MAX(sno) as maxno from oddetails");
                DataTable dtmeating = vdm.SelectQuery(cmd).Tables[0];
                string sno = dtmeating.Rows[0]["maxno"].ToString();
                foreach (suboddetails si in obj.DataTable)
                {
                    if (si.branch != "")
                    {
                        cmd = new SqlCommand("insert into od_subdetailes (od_refno, placeofduty,dateofentry,purposeofduty,dateofexit,reportingmangercomments,reportingdate) values (@od_refno, @placeofduty,@dateofentry,@purposeofduty,@dateofexit,@reportingmangercomments,@reportingdate)");
                        cmd.Parameters.Add("@placeofduty", si.branch);
                        cmd.Parameters.Add("@dateofentry", si.dateofentry);
                        cmd.Parameters.Add("@purposeofduty", si.purpose);
                        cmd.Parameters.Add("@dateofexit", si.dateofexit);
                        cmd.Parameters.Add("@reportingmangercomments", si.comments);
                        cmd.Parameters.Add("@reportingdate", si.reportingdate);
                        cmd.Parameters.Add("@od_refno", sno);
                        vdm.insert(cmd);
                    }
                }
                //string msg = "Inserted Success fully ";
                cmd = new SqlCommand("SELECT empid, employee_num, fullname, cellphone, email FROM employedetails WHERE (empid = @Emp_ID) ");
                cmd.Parameters.Add("@Emp_ID", empid);
                DataTable empdata = vdm.SelectQuery(cmd).Tables[0];
                string empname = "";
                if (empdata.Rows.Count > 0)
                {
                    empname = empdata.Rows[0]["fullname"].ToString();

                }
                cmd = new SqlCommand("SELECT empid, employee_num, fullname, cellphone, email FROM employedetails WHERE (empid = @EmpID) ");
                cmd.Parameters.Add("@EmpID", reportingempid);
                DataTable Approve_empdata = vdm.SelectQuery(cmd).Tables[0];
                string phoneno = "";
                string fullname = "";
                string emilid = "";
                if (Approve_empdata.Rows.Count > 0)
                {
                    phoneno = Approve_empdata.Rows[0]["cellphone"].ToString();
                    fullname = Approve_empdata.Rows[0]["fullname"].ToString();
                    emilid = Approve_empdata.Rows[0]["email"].ToString();

                }
                DateTime dtfrom = Convert.ToDateTime(fromdate);
                string strfrom = dtfrom.ToString("dd/MM/yyyy");
                DateTime dtto = Convert.ToDateTime(todate);
                string strto = dtto.ToString("dd/MM/yyyy");
                string content = "Dear Sir, I am " + empname + " applying for OD From " + strfrom + " To " + strto + ", For the purpose of " + reason + ".  Please approve my OD";
                WebClient client = new WebClient();
                if (phoneno.Length >= 10)
                {
                    string baseurl = "http://103.16.101.52:8080/sendsms/bulksms?username=kapd-vyshnavi&password=vysavi&type=0&dlr=1&destination=" + phoneno + "&source=VYSHRM&message=" + content + "";
                    Stream data = client.OpenRead(baseurl);
                    StreamReader reader = new StreamReader(data);
                    string ResponseID = reader.ReadToEnd();
                    data.Close();
                    reader.Close();
                }
                send_leave_mail(context, emilid, empname, content);
                string msg = "Inserted Successfully ";
                string Response = GetJson(msg);
                context.Response.Write(Response);
            }
            else
            {
                //string sno = context.Request["sno"];
                cmd = new SqlCommand("Update oddetails set empid=@empid,fromdate=@fromdate,todate=@todate,reportingto=@reportingto,noofdays=@noofdays,reason=@reason,doe=@doe,status=@status,mobileno=@mobileno where sno=@sno ");
                cmd.Parameters.Add("@empid", empid);
                //cmd.Parameters.Add("@empcode", empcode);
                cmd.Parameters.Add("@fromdate", fromdate);
                cmd.Parameters.Add("@todate", todate);
                cmd.Parameters.Add("@reportingto", reportingempid);
                cmd.Parameters.Add("@noofdays", totaldays);
                cmd.Parameters.Add("@status", "P");//branch_sno
                cmd.Parameters.Add("@mobileno", MobileNumber);//branch_sno
                cmd.Parameters.Add("@doe", ServerDateCurrentdate);//branch_sno
                cmd.Parameters.Add("@reason", reason);//branch_sno
                cmd.Parameters.Add("@sno", refno);
                vdm.Update(cmd);
                foreach (suboddetails si in obj.DataTable)
                {
                    if (si.branch != "" && si.branch != null)
                    {
                        cmd = new SqlCommand("update od_subdetailes set placeofduty=@placeofduty,dateofentry=@dateofentry,purposeofduty=@purposeofduty,dateofexit=@dateofexit,reportingmangercomments=@reportingmangercomments,reportingdate=@reportingdate where sno=@sno and od_refno=@od_refno");
                        cmd.Parameters.Add("@placeofduty", si.branch);
                        cmd.Parameters.Add("@dateofentry", si.dateofentry);
                        cmd.Parameters.Add("@purposeofduty", si.purpose);
                        cmd.Parameters.Add("@dateofexit", si.dateofexit);
                        cmd.Parameters.Add("@reportingmangercomments", si.comments);
                        cmd.Parameters.Add("@reportingdate", si.reportingdate);
                        cmd.Parameters.Add("@sno", si.sno1);
                        cmd.Parameters.Add("@od_refno", refno);
                        if (vdm.Update(cmd) == 0)
                        {
                            cmd = new SqlCommand("insert into od_subdetailes (od_refno, placeofduty,dateofentry,purposeofduty,dateofexit,reportingmangercomments,reportingdate) values (@od_refno, @placeofduty,@dateofentry,@purposeofduty,@dateofexit,@reportingmangercomments,@reportingdate)");
                            cmd.Parameters.Add("@placeofduty", si.branch);
                            cmd.Parameters.Add("@dateofentry", si.dateofentry);
                            cmd.Parameters.Add("@purposeofduty", si.purpose);
                            cmd.Parameters.Add("@dateofexit", si.dateofexit);
                            cmd.Parameters.Add("@reportingmangercomments", si.comments);
                            cmd.Parameters.Add("@reportingdate", si.reportingdate);
                            cmd.Parameters.Add("@od_refno", refno);
                            //cmd.Parameters.Add("@po_refno", PONo);
                            vdm.insert(cmd);
                        }
                    }
                }
                string response = GetJson("UPDATE");
                context.Response.Write(response);
            }

        }
        catch (Exception ex)
        {
            string response = GetJson(ex.ToString());
            context.Response.Write(response);
        }
    }


    public class getodDetalis
    {
        public List<odDetalis1> odDetalis1 { get; set; }
        public List<suboddetails1> suboddetails1 { get; set; }
    }

    private void get_edit_OD_details(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            DateTime ServerDateCurrentdate = DBManager.GetTime(vdm.conn);
            string empid = context.Session["empid"].ToString();
            cmd = new SqlCommand("SELECT  od_subdetailes.sno AS subsno, oddetails.sno, employedetails.designationid,employedetails.employee_dept, oddetails.empid, oddetails.fromdate, oddetails.todate, oddetails.reportingto, oddetails.noofdays, oddetails.reason, oddetails.doe, oddetails.mobileno, oddetails.status, oddetails.hrremarks, od_subdetailes.placeofduty, od_subdetailes.od_refno, od_subdetailes.dateofentry,  od_subdetailes.purposeofduty, od_subdetailes.dateofexit, od_subdetailes.reportingmangercomments, od_subdetailes.reportingdate, departments.department,  designation.designation, employedetails.fullname, employedetails_1.fullname AS reprtingname, branchmaster.branchcode, employedetails.employee_num FROM oddetails INNER JOIN employedetails ON oddetails.empid = employedetails.empid INNER JOIN employedetails AS employedetails_1 ON oddetails.reportingto = employedetails_1.empid INNER JOIN branchmaster ON employedetails.branchid = branchmaster.branchid INNER JOIN departments ON employedetails.employee_dept = departments.deptid INNER JOIN designation ON employedetails.designationid = designation.designationid LEFT OUTER JOIN od_subdetailes ON oddetails.sno = od_subdetailes.od_refno WHERE(oddetails.status = 'P') AND oddetails.empid=@EmpID");
            cmd.Parameters.Add("@EmpID", empid);
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            DataView view = new DataView(routes);
            DataTable dtemployee = view.ToTable(true, "sno", "empid", "fullname", "designationid", "employee_dept", "employee_num", "reprtingname", "department", "designation", "fromdate", "todate", "reportingto", "noofdays", "reason", "doe", "status", "mobileno");
            DataTable dtsubinward = view.ToTable(true, "subsno", "placeofduty", "dateofentry", "purposeofduty", "dateofexit", "reportingmangercomments", "reportingdate", "od_refno");
            List<odDetalis1> getodDetalis1 = new List<odDetalis1>();
            List<getodDetalis> getodDetalis = new List<getodDetalis>();
            List<suboddetails1> getsuboddetails1 = new List<suboddetails1>();
            int i = 1;
            foreach (DataRow dr in dtemployee.Rows)
            {
                odDetalis1 getemployee = new odDetalis1();
                getemployee.sno = dr["sno"].ToString();
                getemployee.empid = dr["empid"].ToString();
                getemployee.empcode = dr["employee_num"].ToString();
                getemployee.fullname = dr["fullname"].ToString();
                getemployee.fromdate = ((DateTime)dr["fromdate"]).ToString("yyyy-MM-dd"); //dr["fromdate"].ToString();
                getemployee.todate = ((DateTime)dr["todate"]).ToString("yyyy-MM-dd"); //dr["todate"].ToString();
                getemployee.reportingname = dr["reprtingname"].ToString();
                getemployee.reportingempid = dr["reportingto"].ToString();
                getemployee.deptid = dr["employee_dept"].ToString();
                getemployee.designationid = dr["designationid"].ToString();
                getemployee.totaldays = dr["noofdays"].ToString();
                getemployee.reason = dr["reason"].ToString();
                getemployee.doe = dr["doe"].ToString();
                string approvestatus = dr["status"].ToString();
                if (approvestatus == "P")
                {
                    approvestatus = "Pending";

                }
                else if (approvestatus == "A")
                {
                    approvestatus = "Approved";

                }
                else if (approvestatus == "R")
                {
                    approvestatus = "Reject";

                }
                getemployee.status = approvestatus;
                //getemployee.status = dr["status"].ToString();
                getemployee.MobileNumber = dr["mobileno"].ToString();
                getemployee.department = dr["department"].ToString();
                getemployee.designation = dr["designation"].ToString();
                getodDetalis1.Add(getemployee);
            }

            foreach (DataRow drsub in dtsubinward.Rows)
            {
                suboddetails1 getsubemployee = new suboddetails1();
                getsubemployee.sno = drsub["subsno"].ToString();
                getsubemployee.branch = drsub["placeofduty"].ToString();
                string dateenery = drsub["dateofentry"].ToString();
                if (dateenery == "")
                {
                    getsubemployee.dateofentry = drsub["dateofentry"].ToString();
                }
                else
                {
                    getsubemployee.dateofentry = ((DateTime)drsub["dateofentry"]).ToString("yyyy-MM-dd");// drsub["dateofentry"].ToString(); //((DateTime)drsub["dateofentry"]).ToString("yyyy-MM-dd"); //drsub["dateofentry"].ToString();  //drsub["dateofentry"].ToString();

                }
                getsubemployee.purpose = drsub["purposeofduty"].ToString();

                string dateofexit = drsub["dateofexit"].ToString();
                if (dateofexit == "")
                {
                    getsubemployee.dateofexit = drsub["dateofexit"].ToString();
                }
                else
                {
                    getsubemployee.dateofexit = ((DateTime)drsub["dateofexit"]).ToString("yyyy-MM-dd"); //drsub["dateofexit"].ToString(); //((DateTime)drsub["dateofexit"]).ToString("yyyy-MM-dd"); //drsub["dateofexit"].ToString();

                }
                getsubemployee.comments = drsub["reportingmangercomments"].ToString();

                string reportingdate = drsub["reportingdate"].ToString();
                if (reportingdate == "")
                {
                    getsubemployee.reportingdate = drsub["reportingdate"].ToString();
                }
                else
                {
                    getsubemployee.reportingdate = ((DateTime)drsub["reportingdate"]).ToString("yyyy-MM-dd"); //drsub["reportingdate"].ToString(); //((DateTime)drsub["reportingdate"]).ToString("yyyy-MM-dd"); //drsub["reportingdate"].ToString();//((DateTime)drsub["reportingdate"]).ToString("yyyy-MM-dd"); 

                }

                getsubemployee.od_refno = drsub["od_refno"].ToString();
                getsuboddetails1.Add(getsubemployee);
            }
            getodDetalis getemployeeDatas = new getodDetalis();
            getemployeeDatas.odDetalis1 = getodDetalis1;
            getemployeeDatas.suboddetails1 = getsuboddetails1;
            getodDetalis.Add(getemployeeDatas);
            string response = GetJson(getodDetalis);
            context.Response.Write(response);
        }
        catch
        {
        }
    }
    public class odDetalis1
    {
        public string todate { get; set; }
        public string totaldays { get; set; }
        public string fromdate { get; set; }
        public string reason { get; set; }
        public string reportingempid { get; set; }
        public string MobileNumber { get; set; }
        public string operation { get; set; }
        public string empid { get; set; }
        public string btnVal { get; set; }
        public string hrremarks { get; set; }
        public string sno { get; set; }
        public string doe { get; set; }
        public string status { get; set; }
        public string empcode { get; set; }
        public string designation { get; set; }
        public string department { get; set; }
        public string Title { get; set; }
        public string fullname { get; set; }
        public string reportingname { get; set; }
        public string designationid { get; set; }
        public string deptid { get; set; }
        //public List<suboddetails1> DataTable1 { get; set; }
    }

    public class suboddetails1
    {
        public string branch { get; set; }
        public string dateofentry { get; set; }
        public string purpose { get; set; }
        public string dateofexit { get; set; }
        public string comments { get; set; }
        public string reportingdate { get; set; }
        public string od_refno { get; set; }
        public string sno { get; set; }
    }
    public class getodsubdetilas
    {
        public List<odDetalis1> odDetalis1list { get; set; }
        public List<suboddetails1> suboddetailslist { get; set; }
    }

    private void get_od_details(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            string formtype = context.Request["formtype"];
            DateTime fromdate = new DateTime();
            DateTime todate = new DateTime();
            DateTime ServerDateCurrentdate = DBManager.GetTime(vdm.conn);
            if (formtype == "Meetingconduct")
            {
                fromdate = ServerDateCurrentdate.AddDays(-10);
                todate = ServerDateCurrentdate;
            }
            else
            {
                string frmdate = context.Request["fromdate"];
                fromdate = Convert.ToDateTime(frmdate);
                string tdate = context.Request["todate"];
                todate = Convert.ToDateTime(tdate);
            }
            cmd = new SqlCommand("SELECT oddetails.sno, oddetails.empid, oddetails.fromdate, oddetails.todate, oddetails.reportingto, oddetails.noofdays, oddetails.reason, oddetails.doe, oddetails.mobileno, oddetails.status, oddetails.hrremarks, employedetails.fullname, employedetails_1.fullname AS reptingname FROM oddetails INNER JOIN  employedetails ON oddetails.empid = employedetails.empid INNER JOIN employedetails AS employedetails_1 ON oddetails.reportingto = employedetails_1.empid WHERE (oddetails.doe BETWEEN @d1 AND @d2)");
            cmd.Parameters.Add("@d1", GetLowDate(fromdate));
            cmd.Parameters.Add("@d2", GetHighDate(todate));
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            //DataView view = new DataView(routes);
            //DataTable dtemployee = view.ToTable(true, "sno", "empid", "fullname", "reptingname", "fromdate", "todate", "reportingto", "noofdays", "reason", "doe", "status", "mobileno", "hrremarks");
            //DataTable dtsubinward = view.ToTable(true, "sno", "placeofduty", "dateofentry", "purposeofduty", "dateofexit", "reportingmangercomments", "reportingdate", "od_refno");
            List<odDetalis1> meeting_conduct_details = new List<odDetalis1>();
            //List<getodsubdetilas> getodsubdetilaslis = new List<getodsubdetilas>();
            int i = 1;
            foreach (DataRow dr in routes.Rows)
            {
                odDetalis1 getemployee = new odDetalis1();
                getemployee.sno = dr["sno"].ToString();
                getemployee.empid = dr["empid"].ToString();
                getemployee.fullname = dr["fullname"].ToString();
                getemployee.fromdate = dr["fromdate"].ToString();
                getemployee.todate = dr["todate"].ToString();
                getemployee.reportingempid = dr["reptingname"].ToString();
                getemployee.totaldays = dr["noofdays"].ToString();
                getemployee.reason = dr["reason"].ToString();
                getemployee.doe = dr["doe"].ToString();
                getemployee.status = dr["status"].ToString();
                getemployee.MobileNumber = dr["mobileno"].ToString();
                meeting_conduct_details.Add(getemployee);

                //    List<suboddetails1> sub_meeting_conduct_details = new List<suboddetails1>();
                //    foreach (DataRow drsub in dtsubinward.Select("sno='" + dr["sno"].ToString() + "'"))
                //    {
                //        suboddetails1 getsubemployee = new suboddetails1();
                //        getsubemployee.sno = dr["sno"].ToString();
                //        getsubemployee.branch = drsub["placeofduty"].ToString();
                //        getsubemployee.dateofentry = drsub["dateofentry"].ToString();
                //        getsubemployee.purpose = drsub["purposeofduty"].ToString();
                //        getsubemployee.dateofexit = drsub["dateofexit"].ToString();
                //        getsubemployee.comments = drsub["reportingmangercomments"].ToString();
                //        getsubemployee.reportingdate = drsub["reportingdate"].ToString();
                //        getsubemployee.od_refno = drsub["od_refno"].ToString();
                //        sub_meeting_conduct_details.Add(getsubemployee);
                //    }
                //    getemployee.DataTable1 = sub_meeting_conduct_details;
                //    meeting_conduct_details.Add(getemployee);
                //}
            }
            string response = GetJson(meeting_conduct_details);
            context.Response.Write(response);
        }
        catch
        {
        }
    }
    private void get_odrefrence_details(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            string title = "";
            DateTime ServerDateCurrentdate = DBManager.GetTime(vdm.conn);
            string sno = context.Request["sno"];
            string companyid = context.Session["company_id"].ToString();
            if (companyid == "1")
            {
                title = "SVDS";

            }
            if (companyid == "2")
            {
                title = "SVD";

            }
            if (companyid == "3")
            {
                title = "SVF";

            }
            cmd = new SqlCommand("SELECT oddetails.sno, oddetails.empid, oddetails.fromdate, oddetails.todate, oddetails.reportingto, oddetails.noofdays, oddetails.reason, oddetails.doe, oddetails.mobileno, oddetails.status, oddetails.hrremarks, od_subdetailes.placeofduty, od_subdetailes.od_refno, od_subdetailes.dateofentry, od_subdetailes.purposeofduty, od_subdetailes.dateofexit, od_subdetailes.reportingmangercomments, od_subdetailes.reportingdate, departments.department, designation.designation,employedetails.fullname, employedetails_1.fullname AS reprtingname, branchmaster.branchcode, employedetails.employee_num FROM oddetails INNER JOIN employedetails ON oddetails.empid = employedetails.empid INNER JOIN employedetails AS employedetails_1 ON oddetails.reportingto = employedetails_1.empid INNER JOIN  branchmaster ON employedetails.branchid = branchmaster.branchid INNER JOIN  designation ON employedetails.designationid = designation.designationid INNER JOIN departments ON employedetails.employee_dept = departments.deptid LEFT OUTER JOIN od_subdetailes ON oddetails.sno = od_subdetailes.od_refno WHERE (oddetails.sno = @sno)");
            //cmd = new SqlCommand("SELECT   oddetails.sno, oddetails.empid, oddetails.fromdate, oddetails.todate, oddetails.reportingto, oddetails.noofdays, oddetails.reason, oddetails.doe, oddetails.mobileno, oddetails.status, oddetails.hrremarks, od_subdetailes.placeofduty, od_subdetailes.od_refno,od_subdetailes.dateofentry, od_subdetailes.purposeofduty, od_subdetailes.dateofexit, od_subdetailes.reportingmangercomments, od_subdetailes.reportingdate, departments.department, designation.designation, oddetails.empcode, employedetails.fullname, employedetails_1.fullname AS reprtingname, branchmaster.branchcode FROM oddetails INNER JOIN employedetails ON oddetails.empid = employedetails.empid INNER JOIN departments ON oddetails.deptid = departments.deptid INNER JOIN designation ON oddetails.designationid = designation.designationid  LEFT OUTER JOIN od_subdetailes ON oddetails.sno = od_subdetailes.od_refno INNER JOIN employedetails AS employedetails_1 ON oddetails.reportingto = employedetails_1.empid INNER JOIN branchmaster ON employedetails.branchid = branchmaster.branchid WHERE (od_subdetailes.od_refno = @sno)");
            cmd.Parameters.Add("@sno", sno);

            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            DataView view = new DataView(routes);
            DataTable dtemployee = view.ToTable(true, "sno", "empid", "employee_num", "reprtingname", "fromdate", "todate", "fullname", "reportingto", "department", "designation", "noofdays", "reason", "doe", "status", "mobileno", "hrremarks", "branchcode");
            DataTable dtsubinward = view.ToTable(true, "placeofduty", "dateofentry", "purposeofduty", "dateofexit", "reportingmangercomments", "reportingdate", "od_refno");
            List<odDetalis1> meeting_conduct_details = new List<odDetalis1>();
            List<getodsubdetilas> getodsubdetilaslis = new List<getodsubdetilas>();
            List<suboddetails1> sub_meeting_conduct_details = new List<suboddetails1>();
            int i = 1;
            foreach (DataRow dr in dtemployee.Rows)
            {
                odDetalis1 getemployee = new odDetalis1();
                getemployee.sno = i++.ToString();
                getemployee.empid = dr["empid"].ToString();
                getemployee.empcode = dr["employee_num"].ToString();
                getemployee.fullname = dr["fullname"].ToString();
                getemployee.department = dr["department"].ToString();
                getemployee.designation = dr["designation"].ToString();
                getemployee.fromdate = dr["fromdate"].ToString();
                getemployee.todate = dr["todate"].ToString();
                getemployee.reportingempid = dr["reprtingname"].ToString();
                getemployee.totaldays = dr["noofdays"].ToString();
                getemployee.reason = dr["reason"].ToString();
                getemployee.doe = dr["doe"].ToString();
                getemployee.status = dr["status"].ToString();
                getemployee.MobileNumber = dr["mobileno"].ToString();
                getemployee.hrremarks = dr["hrremarks"].ToString();
                getemployee.Title = "REF/" + title + "/" + dr["department"].ToString() + "/" + dr["branchcode"].ToString() + "/OD-" + dr["sno"].ToString() + "";
                meeting_conduct_details.Add(getemployee);
            }
            int subcount = dtsubinward.Rows.Count;
            DataTable EmptyReport = new DataTable();
            EmptyReport.Columns.Add("Sno");
            EmptyReport.Columns.Add("placeofduty");
            EmptyReport.Columns.Add("dateofentry");
            EmptyReport.Columns.Add("purposeofduty");
            EmptyReport.Columns.Add("dateofexit");
            EmptyReport.Columns.Add("reportingmangercomments");
            EmptyReport.Columns.Add("reportingdate");
            EmptyReport.Columns.Add("od_refno");
            int ssno = 0;
            string emp = string.Empty;
            //suboddetails1 getsubemployee = new suboddetails1();
            if (subcount > 1)
            {

                foreach (DataRow drsub in dtsubinward.Rows)
                //foreach (DataRow drsub in dtsubinward.Select("sno='" + dr["sno"].ToString() + "'"))
                {
                    // getsubemployee.sno = dr["sno"].ToString();
                    suboddetails1 getsubemployee = new suboddetails1();
                    getsubemployee.branch = drsub["placeofduty"].ToString();
                    getsubemployee.dateofentry = drsub["dateofentry"].ToString();
                    getsubemployee.purpose = drsub["purposeofduty"].ToString();
                    getsubemployee.dateofexit = drsub["dateofexit"].ToString();
                    getsubemployee.comments = drsub["reportingmangercomments"].ToString();
                    getsubemployee.reportingdate = drsub["reportingdate"].ToString();
                    getsubemployee.od_refno = drsub["od_refno"].ToString();
                    sub_meeting_conduct_details.Add(getsubemployee);
                }
            }
            else
            {
                suboddetails1 getsubemployee = new suboddetails1();
                for (i = 1; i < 5; i++)
                {
                    DataRow newr = EmptyReport.NewRow();
                    newr["Sno"] = i.ToString();
                    EmptyReport.Rows.Add(newr);
                }
                foreach (DataRow drr in EmptyReport.Rows)
                {
                    getsubemployee.sno = drr["Sno"].ToString();
                    getsubemployee.branch = drr["placeofduty"].ToString();
                    getsubemployee.dateofentry = drr["dateofentry"].ToString();
                    getsubemployee.purpose = drr["purposeofduty"].ToString();
                    getsubemployee.dateofexit = drr["dateofexit"].ToString();
                    getsubemployee.comments = drr["reportingmangercomments"].ToString();
                    getsubemployee.reportingdate = drr["reportingdate"].ToString();
                    getsubemployee.od_refno = drr["od_refno"].ToString();
                    sub_meeting_conduct_details.Add(getsubemployee);
                }
            }
            getodsubdetilas obj = new getodsubdetilas();
            obj.odDetalis1list = meeting_conduct_details;
            obj.suboddetailslist = sub_meeting_conduct_details;
            getodsubdetilaslis.Add(obj);
            string response = GetJson(getodsubdetilaslis);
            context.Response.Write(response);
        }
        catch
        {
        }
    }
    public class meeting_conduct_details
    {
        public string sno { get; set; }
        public string starttime { get; set; }
        public string endtime { get; set; }
        public string participants { get; set; }
        public string doe { get; set; }
        public string subject { get; set; }
        public string conducted_by { get; set; }
        public string videopath { get; set; }
        public string department { get; set; }
        public string meeting_no { get; set; }
        public List<sub_meeting_conduct_details> sub_meeting_list { get; set; }
    }
    public class sub_meeting_conduct_details
    {
        public string conclusion { get; set; }
        public string meeting_no { get; set; }
    }
    private void get_meeting_conduct_details(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            string formtype = context.Request["formtype"];
            DateTime fromdate = new DateTime();
            DateTime todate = new DateTime();
            DateTime ServerDateCurrentdate = DBManager.GetTime(vdm.conn);
            if (formtype == "Meetingconduct")
            {
                fromdate = ServerDateCurrentdate.AddDays(-10);
                todate = ServerDateCurrentdate;
            }
            else
            {
                string frmdate = context.Request["fromdate"];
                fromdate = Convert.ToDateTime(frmdate);
                string tdate = context.Request["todate"];
                todate = Convert.ToDateTime(tdate);
            }
            cmd = new SqlCommand("SELECT meeting_conduct.sno, meeting_conduct.starttime,meeting_conduct.departmentname,meeting_conduct.endtime, meeting_conduct.doe, meeting_conduct.participants, meeting_conduct.subject,meeting_conduct.conducted_by, meeting_conduct.remarks, meeting_conduct.videopath,submeetingdetails.sno as Subsno, submeetingdetails.conclusion FROM meeting_conduct INNER JOIN submeetingdetails ON meeting_conduct.sno = submeetingdetails.meeting_no ");
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            DataView view = new DataView(routes);
            DataTable dtemployee = view.ToTable(true, "sno", "starttime", "endtime", "participants", "doe", "subject", "conducted_by", "videopath", "departmentname");
            DataTable dtsubinward = view.ToTable(true, "sno", "conclusion", "Subsno");
            List<meeting_conduct_details> meeting_conduct_details = new List<meeting_conduct_details>();
            int i = 1;
            foreach (DataRow dr in dtemployee.Rows)
            {
                meeting_conduct_details getemployee = new meeting_conduct_details();
                getemployee.sno = i++.ToString();
                getemployee.starttime = dr["starttime"].ToString();
                getemployee.endtime = dr["endtime"].ToString();
                getemployee.participants = dr["participants"].ToString();
                getemployee.doe = dr["doe"].ToString();
                getemployee.subject = dr["subject"].ToString();
                getemployee.conducted_by = dr["conducted_by"].ToString();
                getemployee.videopath = dr["videopath"].ToString();
                getemployee.department = dr["departmentname"].ToString();
                getemployee.meeting_no = dr["sno"].ToString();
                List<sub_meeting_conduct_details> sub_meeting_conduct_details = new List<sub_meeting_conduct_details>();
                foreach (DataRow drsub in dtsubinward.Select("sno='" + dr["sno"].ToString() + "'"))
                {
                    sub_meeting_conduct_details getsubemployee = new sub_meeting_conduct_details();
                    getsubemployee.meeting_no = dr["sno"].ToString();
                    getsubemployee.conclusion = drsub["conclusion"].ToString();
                    sub_meeting_conduct_details.Add(getsubemployee);
                }
                getemployee.sub_meeting_list = sub_meeting_conduct_details;
                meeting_conduct_details.Add(getemployee);
            }
            string response = GetJson(meeting_conduct_details);
            context.Response.Write(response);
        }
        catch
        {
        }
    }

    private void get_meeting_conduct_Reports(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            string meetingrefno = context.Request["meetingrefno"];
            cmd = new SqlCommand("SELECT meeting_conduct.sno, meeting_conduct.starttime,meeting_conduct.departmentname,meeting_conduct.endtime, meeting_conduct.doe, meeting_conduct.participants, meeting_conduct.subject,meeting_conduct.conducted_by, meeting_conduct.remarks, meeting_conduct.videopath,submeetingdetails.sno as Subsno, submeetingdetails.conclusion FROM meeting_conduct INNER JOIN submeetingdetails ON meeting_conduct.sno = submeetingdetails.meeting_no WHERE (meeting_conduct.sno = @meetingno)");
            cmd.Parameters.Add("@meetingno", meetingrefno);
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            DataView view = new DataView(routes);
            DataTable dtemployee = view.ToTable(true, "sno", "starttime", "endtime", "participants", "doe", "subject", "conducted_by", "videopath", "departmentname");
            DataTable dtsubinward = view.ToTable(true, "sno", "conclusion", "Subsno");
            List<meeting_conduct_details> meeting_conduct_details = new List<meeting_conduct_details>();
            int i = 1;
            foreach (DataRow dr in dtemployee.Rows)
            {
                meeting_conduct_details getemployee = new meeting_conduct_details();
                getemployee.sno = i++.ToString();
                getemployee.starttime = dr["starttime"].ToString();
                getemployee.endtime = dr["endtime"].ToString();
                getemployee.participants = dr["participants"].ToString();
                getemployee.doe = dr["doe"].ToString();
                getemployee.subject = dr["subject"].ToString();
                getemployee.conducted_by = dr["conducted_by"].ToString();
                getemployee.videopath = dr["videopath"].ToString();
                getemployee.department = dr["departmentname"].ToString();
                getemployee.meeting_no = dr["sno"].ToString();
                List<sub_meeting_conduct_details> sub_meeting_conduct_details = new List<sub_meeting_conduct_details>();
                foreach (DataRow drsub in dtsubinward.Select("sno='" + dr["sno"].ToString() + "'"))
                {
                    sub_meeting_conduct_details getsubemployee = new sub_meeting_conduct_details();
                    getsubemployee.meeting_no = dr["sno"].ToString();
                    getsubemployee.conclusion = drsub["conclusion"].ToString();
                    sub_meeting_conduct_details.Add(getsubemployee);
                }
                getemployee.sub_meeting_list = sub_meeting_conduct_details;
                meeting_conduct_details.Add(getemployee);
            }
            string response = GetJson(meeting_conduct_details);
            context.Response.Write(response);
        }
        catch
        {
        }
    }



    private void getemployee_Uploaded_Documents(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            string empid = context.Request["empsno"];
            cmd = new SqlCommand("SELECT employedetails.empid, employedetails.fullname,employee_documents.documentpath, employee_documents.documentid, idproof.idproof FROM employee_documents INNER JOIN employedetails ON employee_documents.empid = employedetails.empid INNER JOIN idproof ON employee_documents.documentid = idproof.idproofid WHERE (employedetails.empid = @EmpID)");
            cmd.Parameters.Add("@EmpID", empid);
            DataTable dtemp = vdm.SelectQuery(cmd).Tables[0];
            List<Employee_document_details> bankMasterlist = new List<Employee_document_details>();
            if (dtemp.Rows.Count > 0)
            {
                foreach (DataRow dr in dtemp.Rows)
                {
                    Employee_document_details GetEmployee = new Employee_document_details();
                    GetEmployee.empsno = dr["empid"].ToString();
                    GetEmployee.employee_name = dr["fullname"].ToString();
                    GetEmployee.documentid = dr["documentid"].ToString();
                    GetEmployee.documentname = dr["idproof"].ToString();
                    GetEmployee.ftplocation = "http://182.18.138.228:81/";
                    GetEmployee.photo = dr["documentpath"].ToString();
                    bankMasterlist.Add(GetEmployee);
                }
            }
            string response = GetJson(bankMasterlist);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }

    private void get_Employee_details(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            DateTime ServerDateCurrentdate = DBManager.GetTime(vdm.conn);
            string mainbranch = context.Session["mainbranch"].ToString();
            cmd = new SqlCommand("SELECT employedetails.empid,employedetails.age,employedetails.fathername,employedetails.presentaddress,employedetails.cellphone,employedetails.dob, employedetails.home_address,employedetails.fullname, designation.designation, CONVERT(VARCHAR(20), employedetails.joindate, 103) AS joindate, employedetails.employee_num, employedetails.email FROM  employedetails INNER JOIN  designation ON employedetails.designationid = designation.designationid INNER JOIN  branchmapping ON employedetails.branchid = branchmapping.subbranch WHERE (branchmapping.mainbranch = @m) AND (employedetails.status = 'No')");
            cmd.Parameters.Add("@m", mainbranch);
            DataTable dtemp = vdm.SelectQuery(cmd).Tables[0];
            List<Employee_details> bankMasterlist = new List<Employee_details>();
            if (dtemp.Rows.Count > 0)
            {
                foreach (DataRow dr in dtemp.Rows)
                {
                    Employee_details GetEmployee = new Employee_details();
                    GetEmployee.doe = ServerDateCurrentdate.ToString("MM-dd-yyyy");
                    GetEmployee.doe1 = ServerDateCurrentdate.ToString("ddMMyyyy");
                    GetEmployee.empsno = dr["empid"].ToString();
                    GetEmployee.employee_name = dr["fullname"].ToString();
                    GetEmployee.designation = dr["designation"].ToString();
                    GetEmployee.cellphone = dr["cellphone"].ToString();
                    GetEmployee.email = dr["email"].ToString();
                    GetEmployee.address = dr["home_address"].ToString();
                    GetEmployee.dob = dr["dob"].ToString();
                    GetEmployee.joindate = dr["joindate"].ToString();
                    GetEmployee.fathername = dr["fathername"].ToString();
                    GetEmployee.employee_num = dr["employee_num"].ToString();
                    GetEmployee.presentaddress = dr["presentaddress"].ToString();
                    GetEmployee.age = dr["age"].ToString();
                    bankMasterlist.Add(GetEmployee);
                }
            }
            string response = GetJson(bankMasterlist);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }


    private void get_allwiseEmployee_details(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            DateTime ServerDateCurrentdate = DBManager.GetTime(vdm.conn);
            //branchmapping
            //string mainbranch = context.Session["mainbranch"].ToString();
            cmd = new SqlCommand("SELECT empid, fullname, employee_num FROM employedetails WHERE (status = 'No')");
            //cmd.Parameters.Add("@m", mainbranch);
            //branchwise
            //cmd = new SqlCommand("SELECT employedetails.empid, employedetails.fullname, designation.designation,CONVERT(VARCHAR(20), employedetails.joindate, 103) AS joindate , employedetails.employee_num FROM employedetails INNER JOIN designation ON employedetails.designationid = designation.designationid");
            DataTable dtemp = vdm.SelectQuery(cmd).Tables[0];
            List<Employee_details> bankMasterlist = new List<Employee_details>();
            if (dtemp.Rows.Count > 0)
            {
                foreach (DataRow dr in dtemp.Rows)
                {
                    Employee_details GetEmployee = new Employee_details();
                    GetEmployee.empsno = dr["empid"].ToString();
                    GetEmployee.employee_name = dr["fullname"].ToString();
                    GetEmployee.employee_num = dr["employee_num"].ToString();
                    bankMasterlist.Add(GetEmployee);
                }
            }
            string response = GetJson(bankMasterlist);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }


    private DateTime GetLowDate(DateTime dt)
    {
        double Hour, Min, Sec;
        DateTime DT = DateTime.Now;
        DT = dt;
        Hour = -dt.Hour;
        Min = -dt.Minute;
        Sec = -dt.Second;
        DT = DT.AddHours(Hour);
        DT = DT.AddMinutes(Min);
        DT = DT.AddSeconds(Sec);
        return DT;
    }

    private DateTime GetHighDate(DateTime dt)
    {
        double Hour, Min, Sec;
        DateTime DT = DateTime.Now;
        Hour = 23 - dt.Hour;
        Min = 59 - dt.Minute;
        Sec = 59 - dt.Second;
        DT = dt;
        DT = DT.AddHours(Hour);
        DT = DT.AddMinutes(Min);
        DT = DT.AddSeconds(Sec);
        return DT;
    }

    private DateTime GetHighMonth(DateTime dt)
    {
        double Day, Hour, Min, Sec;
        int Month;
        DateTime DT = DateTime.Now;
        Month = 11 - dt.Month;
        Day = 30 - dt.Day;
        Hour = 23 - dt.Hour;
        Min = 59 - dt.Minute;
        Sec = 59 - dt.Second;
        DT = dt;
        DT = DT.AddHours(Hour);
        DT = DT.AddMinutes(Min);
        DT = DT.AddSeconds(Sec);
        return DT;
    }

    private DateTime GetLowMonth(DateTime dt)
    {
        double Day, year, Hour, Min, Sec;
        int Month;
        DateTime DT = DateTime.Now;
        DT = dt;
        Day = -dt.Day;
        Month = -dt.Month;
        Hour = -dt.Hour;
        Min = -dt.Minute;
        Sec = -dt.Second;
        DT = DT.AddHours(Hour);
        DT = DT.AddMinutes(Min);
        DT = DT.AddSeconds(Sec);
        DT = DT.AddDays(Day);
        DT = DT.AddMonths(Month);
        return DT;
    }
    public class familyedetailes
    {
        public string department { get; set; }
        public string employeid { get; set; }
        public string fullname { get; set; }
        public string desigination { get; set; }
        public string designationid { get; set; }
        public string empcode { get; set; }
        public string btnval { get; set; }
        public List<employeefamilyclass> DataTable { get; set; }

    }
    public class getempfamilydetailes
    {
        public List<familyedetailes> familyedetailes { get; set; }
        public List<employeefamilyclass> employeefamilyclass { get; set; }
    }
    public class employeefamilyclass
    {
        public string employeid { get; set; }
        public string name { get; set; }
        public string relation { get; set; }
        public string dateofbrith { get; set; }
        public string gender { get; set; }
        public string nationalty { get; set; }
        public string profession { get; set; }
        public string age { get; set; }
        public string bloodgroup { get; set; }
        public string empcode { get; set; }
        public string sno { get; set; }

    }

    private void save_Employee_Family_click(HttpContext context)
    {
        try
        {
            var js = new JavaScriptSerializer();
            var title1 = context.Request.Params[1];
            familyedetailes obj = js.Deserialize<familyedetailes>(title1);
            string department = obj.department.TrimEnd();
            string employeid = obj.employeid.TrimEnd();
            string empcode = obj.empcode.TrimEnd();
            string btnval = obj.btnval.TrimEnd();
            DateTime ServerDateCurrentdate = DBManager.GetTime(vdm.conn);
            vdm = new DBManager();
            if (btnval == "Save")
            {
                foreach (employeefamilyclass es in obj.DataTable)
                {
                    cmd = new SqlCommand("insert into employeefamilydetailes (empid,deptid,relationname,relation,relationdob,gender,nationality,profession,doe,bloodgroup,age,empcode) values (@employee ,@deptid,@relationname,@relation,@relationdob,@gender,@nationality,@profession,@doe,@bloodgroup,@age,@empcode)");
                    cmd.Parameters.Add("@deptid", department);
                    cmd.Parameters.Add("@employee", employeid);
                    cmd.Parameters.Add("@relationname", es.name);
                    cmd.Parameters.Add("@doe", ServerDateCurrentdate);
                    cmd.Parameters.Add("@relation", es.relation);
                    cmd.Parameters.Add("@relationdob", es.dateofbrith);
                    cmd.Parameters.Add("@gender", es.gender);
                    cmd.Parameters.Add("@nationality", es.nationalty);
                    cmd.Parameters.Add("@profession", es.profession);
                    cmd.Parameters.Add("@age", es.age);
                    cmd.Parameters.Add("@bloodgroup", es.bloodgroup);
                    cmd.Parameters.Add("@empcode", empcode);
                    vdm.insert(cmd);
                }
                string response = GetJson("Insert Successfully");
                context.Response.Write(response);
            }
            else
            {
                foreach (employeefamilyclass es in obj.DataTable)
                {
                    cmd = new SqlCommand("Update employeefamilydetailes set empid=@empid,deptid=@deptid, empcode=@empcode, relationname=@relationname,relation=@relation,relationdob=@relationdob,gender=@gender,nationality=@nationality,profession=@profession,bloodgroup=@bloodgroup,age=@age where sno=@sno");
                    cmd.Parameters.Add("@empid", employeid);
                    cmd.Parameters.Add("@sno", es.sno);
                    cmd.Parameters.Add("@deptid", department);
                    cmd.Parameters.Add("@relationname", es.name);
                    cmd.Parameters.Add("@doe", ServerDateCurrentdate);
                    cmd.Parameters.Add("@relation", es.relation);
                    cmd.Parameters.Add("@relationdob", es.dateofbrith);
                    cmd.Parameters.Add("@gender", es.gender);
                    cmd.Parameters.Add("@nationality", es.nationalty);
                    cmd.Parameters.Add("@profession", es.profession);
                    cmd.Parameters.Add("@age", es.age);
                    cmd.Parameters.Add("@bloodgroup", es.bloodgroup);
                    cmd.Parameters.Add("@empcode", empcode);
                    if (vdm.Update(cmd) == 0)
                    {

                        cmd = new SqlCommand("insert into employeefamilydetailes (empid,deptid,relationname,relation,relationdob,gender,nationality,profession,doe,bloodgroup,age,empcode) values (@employee ,@deptid,@relationname,@relation,@relationdob,@gender,@nationality,@profession,@doe,@bloodgroup,@age,@empcode)");
                        cmd.Parameters.Add("@deptid", department);
                        cmd.Parameters.Add("@employee", employeid);
                        cmd.Parameters.Add("@relationname", es.name);
                        cmd.Parameters.Add("@doe", ServerDateCurrentdate);
                        cmd.Parameters.Add("@relation", es.relation);
                        cmd.Parameters.Add("@relationdob", es.dateofbrith);
                        cmd.Parameters.Add("@gender", es.gender);
                        cmd.Parameters.Add("@nationality", es.nationalty);
                        cmd.Parameters.Add("@profession", es.profession);
                        cmd.Parameters.Add("@age", es.age);
                        cmd.Parameters.Add("@bloodgroup", es.bloodgroup);
                        cmd.Parameters.Add("@empcode", empcode);
                        vdm.insert(cmd);

                    }
                }
                string response = GetJson("update Successfully");
                context.Response.Write(response);
            }
        }

        catch (Exception ex)
        {
            string response = GetJson(ex.Message);
            context.Response.Write(response);
        }
    }

    private void getfamilydetailes(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            DateTime ServerDateCurrentdate = DBManager.GetTime(vdm.conn);
            //brnachmapingwise
            string mainbranch = context.Session["mainbranch"].ToString();
            cmd = new SqlCommand("SELECT employedetails.employee_num, employedetails.employee_dept, employedetails.fullname, employedetails.empid, employeefamilydetailes.sno, employeefamilydetailes.deptid, employeefamilydetailes.relationname, employeefamilydetailes.empid AS Expr1, employeefamilydetailes.relation, employeefamilydetailes.relationdob, employeefamilydetailes.bloodgroup, employeefamilydetailes.age, employeefamilydetailes.doe, employeefamilydetailes.remarks, employeefamilydetailes.profession, employeefamilydetailes.nationality, employeefamilydetailes.gender, employeefamilydetailes.empcode, employedetails.designationid, designation.designation FROM  employedetails INNER JOIN  employeefamilydetailes ON employedetails.empid = employeefamilydetailes.empid INNER JOIN designation ON employedetails.designationid = designation.designationid INNER JOIN  branchmapping ON employedetails.branchid = branchmapping.subbranch WHERE (branchmapping.mainbranch = @m) AND (employedetails.status = 'No') ");
            cmd.Parameters.Add("@m", mainbranch);
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            DataView view = new DataView(routes);
            DataTable dtemployee = view.ToTable(true, "employee_num", "empid", "employee_dept", "fullname", "designationid", "designation");
            DataTable dtsubinward = view.ToTable(true, "sno", "empid", "empcode", "deptid", "relationname", "relation", "relationdob", "gender", "nationality", "profession", "doe", "age", "bloodgroup");
            List<getempfamilydetailes> getfamilydetails = new List<getempfamilydetailes>();
            List<familyedetailes> employeelist = new List<familyedetailes>();
            List<employeefamilyclass> subemployeelist = new List<employeefamilyclass>();
            foreach (DataRow dr in dtemployee.Rows)
            {
                familyedetailes getemployee = new familyedetailes();
                getemployee.employeid = dr["empid"].ToString();
                getemployee.empcode = dr["employee_num"].ToString();
                getemployee.department = dr["employee_dept"].ToString();
                getemployee.fullname = dr["fullname"].ToString();
                getemployee.designationid = dr["designationid"].ToString();
                getemployee.desigination = dr["designation"].ToString();
                employeelist.Add(getemployee);
            }
            foreach (DataRow dr in dtsubinward.Rows)
            {
                employeefamilyclass getsubemployee = new employeefamilyclass();
                getsubemployee.employeid = dr["empid"].ToString();
                getsubemployee.empcode = dr["empcode"].ToString();
                getsubemployee.name = dr["relationname"].ToString();
                getsubemployee.relation = dr["relation"].ToString();
                getsubemployee.dateofbrith = dr["relationdob"].ToString(); //((DateTime)dr["relationdob"]).ToString("yyyy-MM-dd"); //
                getsubemployee.age = dr["age"].ToString();
                getsubemployee.profession = dr["profession"].ToString();
                getsubemployee.nationalty = dr["nationality"].ToString();
                getsubemployee.bloodgroup = dr["bloodgroup"].ToString();
                getsubemployee.gender = dr["gender"].ToString();
                getsubemployee.sno = dr["sno"].ToString();
                subemployeelist.Add(getsubemployee);
            }
            getempfamilydetailes getemployeeDatas = new getempfamilydetailes();
            getemployeeDatas.familyedetailes = employeelist;
            getemployeeDatas.employeefamilyclass = subemployeelist;
            getfamilydetails.Add(getemployeeDatas);
            string response = GetJson(getfamilydetails);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }

    public class Employeemonthlyattendence
    {
        public string empsno { get; set; }
        public string employee_name { get; set; }
    }
    public class Alldates
    {
        public string Betweendates { get; set; }

    }
    public class Employeemonthlyattendencedates
    {
        public List<Employeemonthlyattendence> Employeemonthlyattendence { get; set; }
        public List<Alldates> Alldates { get; set; }
        public List<Attendance> Attendance { get; set; }

    }
    public class Attendance
    {

        public string Empid { get; set; }
        public string Employeename { get; set; }
        public string branchid { get; set; }
        public string LogDate { get; set; }

    }
    private void get_MonthlyAttendence(HttpContext context)
    {
        vdm = new DBManager();
        string branch = context.Request["branch"];
        string fromdate = context.Request["fromdate"];
        string todate = context.Request["todate"];
        DateTime FrmDate = Convert.ToDateTime(fromdate);
        DateTime Tdate = Convert.ToDateTime(todate);
        //cmd = new SqlCommand("SELECT  employedetails.empid, employedetails.fullname, employedetails.branchid, dailyattandancedetails.attendance_date, dailyattandancedetails.status FROM employedetails LEFT OUTER JOIN dailyattandancedetails ON employedetails.empid = dailyattandancedetails.empid WHERE (employedetails.branchid = @branchid) AND (employedetails.status = 'NO')");
        cmd = new SqlCommand("SELECT   t1.empid, t1.fullname, ISNULL(f2.D, '') AS Expr1, t1.employee_num FROM  (SELECT empid, fullname, employee_num FROM employedetails WHERE (branchid = @branchid) AND (status = 'No')) AS t1 LEFT OUTER JOIN (SELECT Eid, D FROM  (SELECT  empid AS Eid, CONVERT(nvarchar(20), attendance_date, 103) AS D  FROM dailyattandancedetails WHERE (attendance_date BETWEEN @d1 AND @d2) AND (branchid = @branchid) GROUP BY empid, attendance_date) AS t2 GROUP BY Eid, D) AS f2 ON t1.empid = f2.Eid");
        cmd.Parameters.Add("@branchid", branch);
        cmd.Parameters.Add("@d1", GetLowDate(FrmDate));
        cmd.Parameters.Add("@d2", GetHighDate(Tdate));
        DataTable dtempattendance = vdm.SelectQuery(cmd).Tables[0];
        List<Alldates> Alldateslist = new List<Alldates>();
        List<Attendance> Attendancelist = new List<Attendance>();
        List<Employeemonthlyattendence> empmonthly = new List<Employeemonthlyattendence>();
        List<Employeemonthlyattendencedates> Employeemonthlyattendencedateslist = new List<Employeemonthlyattendencedates>();
        DateTime FromDate = Convert.ToDateTime(fromdate);
        DateTime Todate = Convert.ToDateTime(todate);
        int days = FromDate.Day;
        TimeSpan dateSpan = Todate.Subtract(FromDate);
        int NoOfdays = dateSpan.Days;
        NoOfdays = NoOfdays + 1;
        for (int j = 0; j < NoOfdays; j++)
        {
            Alldates obj1 = new Alldates();
            string dtcount = FromDate.AddDays(j).ToString();
            DateTime dtDOE = Convert.ToDateTime(dtcount);
            string dtdate1 = dtDOE.AddDays(-1).ToString();
            DateTime dtDOE1 = Convert.ToDateTime(dtdate1).AddDays(1);
            string ChangedTime1 = dtDOE1.ToString("dd/MM/yyyy", CultureInfo.InvariantCulture);
            obj1.Betweendates = ChangedTime1;
            Alldateslist.Add(obj1);
        }
        if (dtempattendance.Rows.Count > 0)
        {
            foreach (DataRow dratten in dtempattendance.Rows)
            {
                Attendance getattendance = new Attendance();
                getattendance.Empid = dratten["empid"].ToString();
                getattendance.Employeename = dratten["fullname"].ToString();
                //getattendance.branchid = dratten["branchid"].ToString();
                string date = dratten["Expr1"].ToString();
                getattendance.LogDate = date;
                Attendancelist.Add(getattendance);
            }
        }
        Employeemonthlyattendencedates obj2 = new Employeemonthlyattendencedates();
        obj2.Alldates = Alldateslist;
        obj2.Attendance = Attendancelist;
        Employeemonthlyattendencedateslist.Add(obj2);
        string response = GetJson(Employeemonthlyattendencedateslist);
        context.Response.Write(response);
    }

    public class MonthlyAttence
    {
        public string Department { get; set; }
        public string month { get; set; }
        public string year { get; set; }
        public List<employeesclass> employeeslist { get; set; }

    }
    public class employeesclass
    {
        public string employee { get; set; }
        //public string numberofworkingdays { get; set; }
        public string LOP { get; set; }
        public string otdays { get; set; }
    }

    private void save_MonthlyAttendence(HttpContext context)
    {
        try
        {
            var js = new JavaScriptSerializer();
            var title1 = context.Request.Params[1];
            MonthlyAttence obj = js.Deserialize<MonthlyAttence>(title1);
            //string month = obj.month.TrimEnd();
            string month = obj.month.TrimEnd();
            string year = obj.year.TrimEnd();
            DateTime ServerDateCurrentdate = DBManager.GetTime(vdm.conn);
            vdm = new DBManager();
            foreach (employeesclass es in obj.employeeslist)
            {
                string totallop = "";
                if (es.LOP == "")
                {
                    totallop = "0";
                }
                else
                {
                    totallop = es.LOP;
                }
                cmd = new SqlCommand("insert into monthly_attendance (empid,doe,lop,month,year,otdays) values (@employee ,@doe,@lop,@month,@year,@otdays)");
                cmd.Parameters.Add("@employee", es.employee);
                cmd.Parameters.Add("@doe", ServerDateCurrentdate);
                cmd.Parameters.Add("@month", month);
                cmd.Parameters.Add("@year", year);
                cmd.Parameters.Add("@lop", es.LOP);
                cmd.Parameters.Add("@otdays", es.otdays);
                //vdm.insert(cmd);
            }
            string response = GetJson("insert successfully");
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string response = GetJson(ex.Message);
            context.Response.Write(response);
        }
    }
    public class Monthlyworkingdays
    {
        public string month { get; set; }
        public string year { get; set; }
        public List<branchworkingdays> employeeslist { get; set; }
    }
    public class branchworkingdays
    {
        public string branch { get; set; }
        public string numberofworkingdays { get; set; }
    }
    private void save_Monthlyworkingdays(HttpContext context)
    {
        try
        {
            var js = new JavaScriptSerializer();
            var title1 = context.Request.Params[1];
            Monthlyworkingdays obj = js.Deserialize<Monthlyworkingdays>(title1);
            string month = obj.month.TrimEnd();
            string year = obj.year.TrimEnd();
            DateTime ServerDateCurrentdate = DBManager.GetTime(vdm.conn);
            vdm = new DBManager();
            foreach (branchworkingdays es in obj.employeeslist)
            {

                cmd = new SqlCommand("insert into monthly_workingdays (branchid,date,numberofworkingdays,month,year) values (@branchid ,@date,@numberofworkingdays,@month,@year)");
                cmd.Parameters.Add("@branchid", es.branch);
                cmd.Parameters.Add("@date", ServerDateCurrentdate);
                cmd.Parameters.Add("@month", month);
                cmd.Parameters.Add("@year", year);
                cmd.Parameters.Add("@numberofworkingdays", es.numberofworkingdays);
                vdm.insert(cmd);
            }
            string response = GetJson("Insert successfully");
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string response = GetJson(ex.Message);
            context.Response.Write(response);
        }

    }
    public class canteenAttence
    {
        public string type { get; set; }
        public string DOA { get; set; }
        public string branchid { get; set; }
        public string entryby { get; set; }
        public List<empCanteenclass> employeeslist { get; set; }
    }

    public class empCanteenclass
    {
        public string employee { get; set; }
        public string registrationid { get; set; }
        public string status { get; set; }
        public string Breakfast { get; set; }
        public string lunch { get; set; }
        public string dinner { get; set; }
    }

    private void save_CanteenAttendence(HttpContext context)
    {
        try
        {
            var js = new JavaScriptSerializer();
            var title1 = context.Request.Params[1];
            canteenAttence obj = js.Deserialize<canteenAttence>(title1);
            string type = obj.type.TrimEnd();
            string pdate = obj.DOA;
            DateTime DOA = Convert.ToDateTime(pdate);
            string entry_by = context.Session["empid"].ToString();
            string branchid = context.Session["branchid"].ToString();
            DateTime ServerDateCurrentdate = DBManager.GetTime(vdm.conn);
            vdm = new DBManager();
            foreach (empCanteenclass es in obj.employeeslist)
            {
                cmd = new SqlCommand("insert into canteen_attendence (empid,doe,status,branchid,entry_by,entrydate,type) values (@employee ,@doe,@status,@branchid,@entry_by,@entrydate,@type)");
                cmd.Parameters.Add("@type", type);
                cmd.Parameters.Add("@employee", es.employee);
                cmd.Parameters.Add("@doe", ServerDateCurrentdate);
                cmd.Parameters.Add("@status", es.status);
                cmd.Parameters.Add("@entrydate", DOA);
                cmd.Parameters.Add("@entry_by", entry_by);
                cmd.Parameters.Add("@branchid", branchid);
                vdm.insert(cmd);
            }
            string response = GetJson("Insert Successfully");
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string response = GetJson(ex.Message);
            context.Response.Write(response);
        }
    }

    

    private void get_employeesAttendence(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            string branchid = context.Request["branchid"];
            string mainbranch = context.Session["mainbranch"].ToString();
            string company_code = context.Request["company_code"];
            string Employee_Type = context.Request["Employee_Type"];
            string DOA = context.Request["DOA"];
            DateTime dtDOE = Convert.ToDateTime(DOA);
            // string dtdate1 = dtDOE.AddDays(-1).ToString();
            //cmd = new SqlCommand("SELECT  t1.empid, t1.fullname, ISNULL(f2.D, '') AS Expr1, t1.employee_num FROM (SELECT empid, fullname, employee_num FROM  employedetails WHERE (branchid = @branchid) AND (status = 'No')) AS t1 LEFT OUTER JOIN (SELECT Eid, D FROM (SELECT EmpId AS Eid, CONVERT(nvarchar(20), LogDate, 103) AS D FROM  AttendanceLogs WHERE (LogDate BETWEEN @d1 AND @d2) AND (BranchId = @branchid) GROUP BY EmpId, LogDate) AS t2 GROUP BY Eid, D) AS f2 ON t1.empid = f2.Eid");
            if (branchid == "ALL")
            {
                cmd = new SqlCommand("SELECT   sno, branchid, empid, status, doe, attendance_date, remarks FROM    dailyattandancedetails WHERE  (attendance_date BETWEEN @d1 AND @d2)");
                cmd.Parameters.Add("@d1", GetLowDate(dtDOE));
                cmd.Parameters.Add("@d2", GetHighDate(dtDOE));
            }
            else
            {
                cmd = new SqlCommand("SELECT   dailyattandancedetails.sno, dailyattandancedetails.branchid, dailyattandancedetails.empid, dailyattandancedetails.status, dailyattandancedetails.doe, dailyattandancedetails.attendance_date, dailyattandancedetails.remarks  FROM dailyattandancedetails INNER JOIN employedetails ON employedetails.empid=dailyattandancedetails.empid WHERE  (dailyattandancedetails.attendance_date BETWEEN @d1 AND @d2) AND (dailyattandancedetails.branchid = @branchid) AND (employedetails.employee_type=@employee_type)");
                cmd.Parameters.Add("@d1", GetLowDate(dtDOE));
                cmd.Parameters.Add("@d2", GetHighDate(dtDOE));
                cmd.Parameters.Add("@branchid", branchid);
                cmd.Parameters.Add("@employee_type", Employee_Type);
            }
            DataTable dtcheck = vdm.SelectQuery(cmd).Tables[0];


            if (branchid == "ALL")
            {
                cmd = new SqlCommand("SELECT Atten.empid, Atten.fullname, Atten.Expr1, Atten.employee_num, daily.sno, daily.branchid, daily.empid AS Expr2, daily.status, daily.doe, daily.attendance_date,daily.remarks FROM (SELECT sno, branchid, empid, status, doe, attendance_date, remarks FROM dailyattandancedetails WHERE (attendance_date BETWEEN @d1 AND @d2)) AS daily RIGHT OUTER JOIN(SELECT t1.empid, t1.fullname, ISNULL(f2.D, '') AS Expr1, t1.employee_num FROM (SELECT employedetails.empid, employedetails.fullname, employedetails.employee_num, employedetails.branchid, company_master.companyname, company_master.sno FROM branchmapping INNER JOIN employedetails ON branchmapping.subbranch = employedetails.branchid INNER JOIN branchmaster ON employedetails.branchid = branchmaster.branchid INNER JOIN company_master ON branchmaster.company_code = company_master.sno  WHERE (branchmapping.mainbranch = @m) AND (employedetails.status = 'No') AND (branchmaster.company_code = @company)) AS t1 LEFT OUTER JOIN (SELECT Eid, D FROM (SELECT EmpId AS Eid, CONVERT(nvarchar(20), LogDate, 103) AS D FROM AttendanceLogs WHERE (LogDate BETWEEN @d1 AND @d2) GROUP BY EmpId, LogDate) AS t2 GROUP BY Eid, D) AS f2 ON t1.empid = f2.Eid) AS Atten ON daily.empid = Atten.empid");
                //cmd = new SqlCommand("SELECT  Atten.empid, Atten.fullname, Atten.Expr1, Atten.employee_num, daily.sno, daily.branchid, daily.empid AS Expr2, daily.status, daily.doe, daily.attendance_date,daily.remarks FROM  (SELECT t1.empid, t1.fullname, ISNULL(f2.D, '') AS Expr1, t1.employee_num FROM (SELECT empid, fullname, employee_num FROM employedetails WHERE  (status = 'No')) AS t1 LEFT OUTER JOIN (SELECT Eid, D FROM  (SELECT EmpId AS Eid, CONVERT(nvarchar(20), LogDate, 103) AS D FROM AttendanceLogs WHERE (LogDate BETWEEN @d1 AND @d2)  GROUP BY EmpId, LogDate) AS t2 GROUP BY Eid, D) AS f2 ON t1.empid = f2.Eid) AS Atten LEFT OUTER JOIN (SELECT sno, branchid, empid, status, doe, attendance_date, remarks FROM dailyattandancedetails WHERE (attendance_date BETWEEN @d1 AND @d2)) AS daily ON Atten.empid = daily.empid");
                cmd.Parameters.Add("@d1", GetLowDate(dtDOE));
                cmd.Parameters.Add("@d2", GetHighDate(dtDOE));
                cmd.Parameters.Add("@m", mainbranch);
                cmd.Parameters.Add("@company", company_code);
            }
            else
            {
                cmd = new SqlCommand("SELECT  Atten.empid, Atten.fullname, Atten.Expr1, Atten.employee_num, daily.sno, daily.branchid, daily.empid AS Expr2, daily.status, daily.doe, daily.attendance_date,daily.remarks FROM  (SELECT t1.empid, t1.fullname, ISNULL(f2.D, '') AS Expr1, t1.employee_num FROM (SELECT empid, fullname, employee_num FROM employedetails WHERE (branchid = @branchid) AND (status = 'No') AND (employee_type=@emptype)) AS t1 LEFT OUTER JOIN (SELECT Eid, D FROM  (SELECT EmpId AS Eid, CONVERT(nvarchar(20), LogDate, 103) AS D FROM AttendanceLogs WHERE (LogDate BETWEEN @d1 AND @d2) AND (BranchId = @branchid) GROUP BY EmpId, LogDate) AS t2 GROUP BY Eid, D) AS f2 ON t1.empid = f2.Eid) AS Atten LEFT OUTER JOIN (SELECT sno, branchid, empid, status, doe, attendance_date, remarks FROM dailyattandancedetails WHERE (attendance_date BETWEEN @d1 AND @d2)) AS daily ON Atten.empid = daily.empid");
                cmd.Parameters.Add("@branchid", branchid);
                cmd.Parameters.Add("@d1", GetLowDate(dtDOE));
                cmd.Parameters.Add("@d2", GetHighDate(dtDOE));
                cmd.Parameters.Add("@emptype", Employee_Type);
            }
            DataTable dtemp = vdm.SelectQuery(cmd).Tables[0];
            List<Employeedet> bankMasterlist = new List<Employeedet>();
            if (dtemp.Rows.Count > 0)
            {
                foreach (DataRow dr in dtemp.Rows)
                {
                    Employeedet GetEmployee = new Employeedet();
                    int count = dtcheck.Rows.Count;
                    GetEmployee.totcount = count.ToString();
                    GetEmployee.empsno = dr["empid"].ToString();
                    GetEmployee.employee_name = dr["fullname"].ToString();
                    GetEmployee.registrationid = dr["employee_num"].ToString();
                    GetEmployee.branchid = dr["branchid"].ToString();
                    string date = dr["Expr1"].ToString();
                    if (date != "")
                    {
                        //DateTime Date1 = Convert.ToDateTime(date);
                        GetEmployee.LogDate = date.ToString();
                    }
                    else
                    {
                        date = dr["attendance_date"].ToString();
                        if (date != "")
                        {
                            DateTime Date1 = Convert.ToDateTime(date);
                            GetEmployee.LogDate = Date1.ToString("dd/MM/yyyy");
                        }
                    }
                    GetEmployee.Date = dtDOE.ToString("dd/MM/yyyy");
                    bankMasterlist.Add(GetEmployee);
                }
            }
            string response = GetJson(bankMasterlist);
            context.Response.Write(response);

        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }


    private void get_employeesabsent_details(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            string branchid = context.Request["branchid"];
            string mainbranch = context.Session["mainbranch"].ToString();
            string DOA = context.Request["fromdate"];
            DateTime dtDOE = Convert.ToDateTime(DOA);
            if (branchid == "ALL")
            {
                cmd = new SqlCommand("SELECT Atten.empid, Atten.fullname, Atten.Expr1, Atten.employee_num, daily.sno, daily.branchid, daily.empid AS Expr2, daily.status, daily.doe, daily.attendance_date,daily.remarks FROM (SELECT sno, branchid, empid, status, doe, attendance_date, remarks FROM dailyattandancedetails WHERE (attendance_date BETWEEN @d1 AND @d2)) AS daily RIGHT OUTER JOIN(SELECT t1.empid, t1.fullname, ISNULL(f2.D, '') AS Expr1, t1.employee_num FROM (SELECT employedetails.empid, employedetails.fullname, employedetails.employee_num, employedetails.branchid, company_master.companyname, company_master.sno FROM branchmapping INNER JOIN employedetails ON branchmapping.subbranch = employedetails.branchid INNER JOIN branchmaster ON employedetails.branchid = branchmaster.branchid INNER JOIN company_master ON branchmaster.company_code = company_master.sno  WHERE (branchmapping.mainbranch = @m) AND (employedetails.status = 'No') AND (branchmaster.company_code = @company)) AS t1 LEFT OUTER JOIN (SELECT Eid, D FROM (SELECT EmpId AS Eid, CONVERT(nvarchar(20), LogDate, 103) AS D FROM AttendanceLogs WHERE (LogDate BETWEEN @d1 AND @d2) GROUP BY EmpId, LogDate) AS t2 GROUP BY Eid, D) AS f2 ON t1.empid = f2.Eid) AS Atten ON daily.empid = Atten.empid");
                cmd.Parameters.Add("@d1", GetLowDate(dtDOE));
                cmd.Parameters.Add("@d2", GetHighDate(dtDOE));
                cmd.Parameters.Add("@m", mainbranch);
            }
            else
            {
                cmd = new SqlCommand("SELECT  Atten.empid, Atten.fullname, Atten.Expr1, Atten.employee_num, daily.sno, daily.branchid, daily.empid AS Expr2, daily.status, daily.doe, daily.attendance_date,daily.remarks FROM  (SELECT t1.empid, t1.fullname, ISNULL(f2.D, '') AS Expr1, t1.employee_num FROM (SELECT empid, fullname, employee_num FROM employedetails WHERE (branchid = @branchid) AND (status = 'No')) AS t1 LEFT OUTER JOIN (SELECT Eid, D FROM  (SELECT EmpId AS Eid, CONVERT(nvarchar(20), LogDate, 103) AS D FROM AttendanceLogs WHERE (LogDate BETWEEN @d1 AND @d2) AND (BranchId = @branchid) GROUP BY EmpId, LogDate) AS t2 GROUP BY Eid, D) AS f2 ON t1.empid = f2.Eid) AS Atten LEFT OUTER JOIN (SELECT sno, branchid, empid, status, doe, attendance_date, remarks FROM dailyattandancedetails WHERE (attendance_date BETWEEN @d1 AND @d2)) AS daily ON Atten.empid = daily.empid");
                cmd.Parameters.Add("@branchid", branchid);
                cmd.Parameters.Add("@d1", GetLowDate(dtDOE));
                cmd.Parameters.Add("@d2", GetHighDate(dtDOE));
            }
            DataTable dtemp = vdm.SelectQuery(cmd).Tables[0];
            List<Employeedet> bankMasterlist = new List<Employeedet>();
            if (dtemp.Rows.Count > 0)
            {
                foreach (DataRow dr in dtemp.Rows)
                {
                    Employeedet GetEmployee = new Employeedet();
                    GetEmployee.empsno = dr["empid"].ToString();
                    GetEmployee.employee_name = dr["fullname"].ToString();
                    GetEmployee.registrationid = dr["employee_num"].ToString();
                    GetEmployee.branchid = dr["branchid"].ToString();
                    string date = dr["Expr1"].ToString();
                    if (date != "")
                    {
                        //DateTime Date1 = Convert.ToDateTime(date);
                        GetEmployee.LogDate = date.ToString();
                    }
                    else
                    {
                        date = dr["attendance_date"].ToString();
                        if (date != "")
                        {
                            DateTime Date1 = Convert.ToDateTime(date);
                            GetEmployee.LogDate = Date1.ToString("dd/MM/yyyy");
                        }
                    }
                    GetEmployee.Date = dtDOE.ToString("dd/MM/yyyy");
                    bankMasterlist.Add(GetEmployee);
                }
            }
            string response = GetJson(bankMasterlist);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }

    private void save_employeeAttendence(string jsonString, HttpContext context)
    {
        try
        {
            var js = new JavaScriptSerializer();
            var title1 = context.Request.Params[1];
            //EmployeeAttence obj = js.Deserialize<EmployeeAttence>(title1);
            DateTime ServerDateCurrentdate = DBManager.GetTime(vdm.conn);
            EmployeeAttence obj = js.Deserialize<EmployeeAttence>(jsonString);
            string branchname = obj.branchname.TrimEnd();
            string Employee_Type = obj.Employee_Type;
            string User = context.Session["empid"].ToString();
            string pdate = obj.DOA;
            DateTime DOA = Convert.ToDateTime(pdate);
            string week = DOA.DayOfWeek.ToString();
            string count = obj.employeeslist.Count.ToString();
            vdm = new DBManager();
            int i = 0;
            //cmd = new SqlCommand("SELECT MAX(attendance_date) AS Date  FROM  dailyattandancedetails WHERE (branchid = @branchid) AND (emp_type = @emp_type)");
            //cmd.Parameters.Add("@branchid", branchname);
            //cmd.Parameters.Add("@emp_type", Employee_Type);
            //DataTable dtdate = vdm.SelectQuery(cmd).Tables[0];
            //string Date = dtdate.Rows[0]["Date"].ToString();
            //DateTime DATE = Convert.ToDateTime(Date);
            //if (GetLowDate(DATE).AddDays(1) == DOA)
            //{
            cmd = new SqlCommand("delete FROM dailyattandancedetails WHERE (branchid = @branchid) AND (attendance_date = @attendance_date) AND (emp_type = @emp_type)");
            cmd.Parameters.Add("@branchid", branchname);
            cmd.Parameters.Add("@attendance_date", DOA);
            cmd.Parameters.Add("@emp_type", Employee_Type);
            vdm.Delete(cmd);
            foreach (employeescls es in obj.employeeslist)
            {
                //cmd = new SqlCommand("SELECT  employedetails.branchid, employedetails.empid FROM employedetails INNER JOIN branchmaster ON employedetails.branchid = branchmaster.branchid WHERE (employedetails.empid = @empid)");
                //cmd.Parameters.Add("@empid", es.employee);
                //DataTable dtemp = vdm.SelectQuery(cmd).Tables[0];
                //string branchid = dtemp.Rows[0]["branchid"].ToString();
                try
                {
                    cmd = new SqlCommand("insert into dailyattandancedetails (branchid,empid,doe,status,attendance_date,entry_by,emp_type) values (@branchid,@employee,@doe,@status, @attendance_date,@entry_by,@emp_type)");
                    cmd.Parameters.Add("@branchid", branchname);
                    cmd.Parameters.Add("@employee", es.employee);
                    cmd.Parameters.Add("@doe", ServerDateCurrentdate);
                    cmd.Parameters.Add("@status", es.status);
                    cmd.Parameters.Add("@attendance_date", DOA);
                    cmd.Parameters.Add("@entry_by", User);
                    cmd.Parameters.Add("@emp_type", Employee_Type);
                    vdm.insert(cmd);
                    i++;
                }
                catch
                {
                }
            }
            string response = GetJson("Insert Successfully");
            context.Response.Write(response);
            //}
            //else
            //{
            //    string response = GetJson("Please Finalize Previous Day Attendence");
            //    context.Response.Write(response);
            //}
        }


        catch (Exception ex)
        {
            string response = GetJson(ex.Message);
            context.Response.Write(response);
        }
    }
    //private void save_employeeAttendence(string jsonString, HttpContext context)
    //{
    //    try
    //    {
    //        var js = new JavaScriptSerializer();
    //        var title1 = context.Request.Params[1];
    //        //EmployeeAttence obj = js.Deserialize<EmployeeAttence>(title1);
    //        DateTime ServerDateCurrentdate = DBManager.GetTime(vdm.conn);
    //        EmployeeAttence obj = js.Deserialize<EmployeeAttence>(jsonString);
    //        string branchname = obj.branchname.TrimEnd();
    //        string pdate = obj.DOA;
    //        DateTime DOA = Convert.ToDateTime(pdate);
    //        vdm = new DBManager();
    //        int i = 0;
    //        foreach (employeescls es in obj.employeeslist)
    //        {
    //            cmd = new SqlCommand("SELECT  employedetails.branchid, employedetails.empid FROM employedetails INNER JOIN branchmaster ON employedetails.branchid = branchmaster.branchid WHERE (employedetails.empid = @empid)");
    //            cmd.Parameters.Add("@empid", es.employee);
    //            DataTable dtemp = vdm.SelectQuery(cmd).Tables[0];
    //            string branchid = dtemp.Rows[0]["branchid"].ToString();
    //            try
    //            {
    //                if (es.status == "")
    //                {
    //                    cmd = new SqlCommand("insert into dailyattandancedetails (branchid,empid,doe,status,attendance_date) values (@branchid,@employee,@doe,@status, @attendance_date)");
    //                    cmd.Parameters.Add("@branchid", branchid);
    //                    cmd.Parameters.Add("@employee", es.employee);
    //                    cmd.Parameters.Add("@doe", ServerDateCurrentdate);
    //                    cmd.Parameters.Add("@status", es.status);
    //                    cmd.Parameters.Add("@attendance_date", DOA);
    //                    vdm.insert(cmd);
    //                    i++;
    //                    //cmd = new SqlCommand("Update AttendanceLogs set status=@status where EmpId=@employee and  LogDate=@LogDate");
    //                    ////cmd.Parameters.Add("@DeviceId", branchid);
    //                    //cmd.Parameters.Add("@employee", es.employee);
    //                    ////cmd.Parameters.Add("@doe", ServerDateCurrentdate);
    //                    //cmd.Parameters.Add("@status", es.status);
    //                    //cmd.Parameters.Add("@LogDate", DOA);
    //                    //vdm.Update(cmd);
    //                }
    //                else
    //                {
    //                    cmd = new SqlCommand("Update dailyattandancedetails set  branchid=@branchid,doe=@doe,status=@status where empid=@employee and  attendance_date=@attendance_date");
    //                    cmd.Parameters.Add("@branchid", branchid);
    //                    cmd.Parameters.Add("@employee", es.employee);
    //                    cmd.Parameters.Add("@doe", ServerDateCurrentdate);
    //                    cmd.Parameters.Add("@status", es.status);
    //                    cmd.Parameters.Add("@attendance_date", DOA);
    //                    // vdm.Update(cmd);
    //                }
    //            }

    //            catch
    //            {
    //            }
    //        }
    //        string response = GetJson("Insert Successfully");
    //        context.Response.Write(response);
    //    }
    //    catch (Exception ex)
    //    {
    //        string response = GetJson(ex.Message);
    //        context.Response.Write(response);
    //    }
    //}

    public class Employeecanteen
    {
        public string empsno { get; set; }
        public string employee_name { get; set; }
        public string employee_num { get; set; }
        public string registrationid { get; set; }
        public string status { get; set; }
        public string type { get; set; }
        public string logdate { get; set; }
        public string date { get; set; }
        public string breakfast { get; set; }
        public string lunch { get; set; }
        public string dinner { get; set; }
        public string totalcount { get; set; }
        public string breakfastcount { get; set; }
        public string lunchcount { get; set; }
        public string dinnercount { get; set; }
    }
    private void get_employeescanteenAttendence(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            //string Department = context.Request["Department"];
            string DOA = context.Request["DOA"];
            cmd = new SqlCommand("SELECT empid,employee_num, fullname FROM employedetails ");
            //cmd.Parameters.Add("@DeptID", Department);
            DataTable dtemp = vdm.SelectQuery(cmd).Tables[0];
            List<Employeecanteen> bankMasterlist = new List<Employeecanteen>();
            if (dtemp.Rows.Count > 0)
            {
                foreach (DataRow dr in dtemp.Rows)
                {
                    Employeecanteen GetEmployee = new Employeecanteen();
                    GetEmployee.empsno = dr["empid"].ToString();
                    GetEmployee.employee_name = dr["fullname"].ToString();
                    GetEmployee.registrationid = dr["employee_num"].ToString();
                    //GetEmployee.remarks = dr["remarks"].ToString();
                    bankMasterlist.Add(GetEmployee);
                }
            }
            string response = GetJson(bankMasterlist);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }
    public class EmployeeAttence
    {
        public string Department { get; set; }
        public string branchname { get; set; }
        public string DOA { get; set; }
        public string Employee_Type { get; set; }
        public List<employeescls> employeeslist { get; set; }
    }
    public class employeescls
    {
        public string name { get; set; }
        public string employee { get; set; }
        public string status { get; set; }
        public string remarks { get; set; }
    }
    public class assetdetailes
    {
        public string sno { get; set; }
        public string employeid { get; set; }
        public string fullname { get; set; }
        public string empcode { get; set; }
        public string btnval { get; set; }
        public List<employeeassetclass> DataTable { get; set; }
        public List<employeeassetclass> DataTable1 { get; set; }

    }
    public class getempassetdetailes
    {
        public List<assetdetailes> assetdetailes { get; set; }
        public List<employeeassetclass> employeeassetclass { get; set; }
    }
    public class employeeassetclass
    {
        public string employeid { get; set; }
        public string assetname { get; set; }
        public string receiveddate { get; set; }
        public string assetvalue { get; set; }
        public string remarks { get; set; }
        public string status { get; set; }
        public string assetdetailes { get; set; }
        public string empcode { get; set; }
        public string sno { get; set; }

    }

    private void save_edit_empassetdetails(HttpContext context)
    {
        try
        {
            var js = new JavaScriptSerializer();
            var title1 = context.Request.Params[1];
            assetdetailes obj = js.Deserialize<assetdetailes>(title1);
            string employeid = obj.employeid.TrimEnd();
            string empcode = obj.empcode.TrimEnd();
            string sno = obj.sno.TrimEnd();
            string btnval = obj.btnval.TrimEnd();
            DateTime ServerDateCurrentdate = DBManager.GetTime(vdm.conn);
            vdm = new DBManager();
            //string department = context.Request["Department"];

            if (btnval == "Save")
            {
                foreach (employeeassetclass es in obj.DataTable)
                {
                    cmd = new SqlCommand("insert into employeassetdetails (employeid,assetname,assetdetailes,receiveddate,assetvalue,status,remarks,empcode) values (@employee,@assetname,@assetdetailes,@receiveddate,@assetvalue,@status,@remarks,@empcode)");
                    cmd.Parameters.Add("@employee", employeid);
                    cmd.Parameters.Add("@assetname", es.assetname);
                    //cmd.Parameters.Add("@doe", ServerDateCurrentdate);
                    cmd.Parameters.Add("@assetvalue", es.assetvalue);
                    cmd.Parameters.Add("@receiveddate", es.receiveddate);
                    cmd.Parameters.Add("@assetdetailes", es.assetdetailes);
                    cmd.Parameters.Add("@status", "Active");
                    cmd.Parameters.Add("@remarks", es.remarks);
                    cmd.Parameters.Add("@empcode", empcode);
                    vdm.insert(cmd);
                }
                string response = GetJson("Insert Successfully");
                context.Response.Write(response);
            }
            else
            {
                foreach (employeeassetclass es in obj.DataTable)
                {
                    cmd = new SqlCommand("Update employeassetdetails set  employeid=@employeid,assetname=@assetname,empcode=@empcode,assetdetailes=@assetdetailes,receiveddate=@receiveddate,assetvalue=@assetvalue,status=@status,remarks=@remarks where sno=@sno");
                    //cmd = new SqlCommand("Update employeassetdetails set empid=@empid,deptid=@deptid, empcode=@empcode, relationname=@relationname,relation=@relation,relationdob=@relationdob,gender=@gender,nationality=@nationality,profession=@profession,bloodgroup=@bloodgroup,age=@age where sno=@sno");
                    cmd.Parameters.Add("@employeid", employeid);
                    cmd.Parameters.Add("@sno", es.sno);
                    cmd.Parameters.Add("@assetname", es.assetname);
                    cmd.Parameters.Add("@doe", ServerDateCurrentdate);
                    cmd.Parameters.Add("@assetvalue", es.assetvalue);
                    cmd.Parameters.Add("@receiveddate", es.receiveddate);
                    cmd.Parameters.Add("@assetdetailes", es.assetdetailes);
                    cmd.Parameters.Add("@status", "Active");
                    cmd.Parameters.Add("@remarks", es.remarks);
                    cmd.Parameters.Add("@empcode", empcode);
                    if (vdm.Update(cmd) == 0)
                    {

                        cmd = new SqlCommand("insert into employeassetdetails (employeid,assetname,assetdetailes,receiveddate,assetvalue,status,remarks,empcode) values (@employee,@assetname,@assetdetailes,@receiveddate,@assetvalue,@status,@remarks,@empcode)");
                        cmd.Parameters.Add("@employee", employeid);
                        cmd.Parameters.Add("@assetname", es.assetname);
                        cmd.Parameters.Add("@doe", ServerDateCurrentdate);
                        cmd.Parameters.Add("@assetvalue", es.assetvalue);
                        cmd.Parameters.Add("@receiveddate", es.receiveddate);
                        cmd.Parameters.Add("@assetdetailes", es.assetdetailes);
                        cmd.Parameters.Add("@status", "Active");
                        cmd.Parameters.Add("@remarks", es.remarks);
                        cmd.Parameters.Add("@empcode", empcode);
                        vdm.insert(cmd);

                    }
                }
                string response = GetJson("update Successfully");
                context.Response.Write(response);
            }
        }
        catch (Exception ex)
        {
            string response = GetJson(ex.Message);
            context.Response.Write(response);
        }
    }

    public class getEmployeassetsdetails
    {
        //public string Department { get; set; }
        public string employeid { get; set; }
        public string fullname { get; set; }
        public string department { get; set; }
        public string assetname { get; set; }
        public string receiveddate { get; set; }
        public string validupto { get; set; }
        public string assetvalue { get; set; }
        public string assetdetailes { get; set; }
        public string status { get; set; }
        public string remarks { get; set; }
        public string returndate { get; set; }
        //public string estnumber { get; set; }
        //public string kycidentitynumber { get; set; }
        public string empcode { get; set; }
    }
    private void get_Assets_details(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            DateTime ServerDateCurrentdate = DBManager.GetTime(vdm.conn);
            //brnachmapingwise
            string mainbranch = context.Session["mainbranch"].ToString();
            cmd = new SqlCommand("SELECT employedetails.employee_num, employedetails.fullname,employeassetdetails.sno, employeassetdetails.assetname, employeassetdetails.assetdetailes, employeassetdetails.employeid,employeassetdetails.receiveddate, employeassetdetails.remarks, employeassetdetails.status, employeassetdetails.assetvalue,employeassetdetails.empcode FROM  employedetails INNER JOIN employeassetdetails ON employedetails.empid = employeassetdetails.employeid INNER JOIN branchmapping ON employedetails.branchid = branchmapping.subbranch WHERE(employedetails.status = 'No') AND (branchmapping.mainbranch = @m) and (employeassetdetails.status='Active') ");
            cmd.Parameters.Add("@m", mainbranch);
            //brnachwise
            //cmd = new SqlCommand("SELECT employedetails.employee_num, employedetails.fullname, employeassetdetails.assetname,employeassetdetails.returndate, employeassetdetails.assetdetailes, employeassetdetails.employeid, employeassetdetails.receiveddate, employeassetdetails.validupto, employeassetdetails.remarks, employeassetdetails.status, employeassetdetails.assetvalue FROM employedetails INNER JOIN employeassetdetails ON employedetails.empid = employeassetdetails.employeid");

            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            DataView view = new DataView(routes);
            DataTable dtemployee = view.ToTable(true, "sno", "employee_num", "employeid", "fullname");
            DataTable dtsubinward = view.ToTable(true, "sno", "employeid", "empcode", "assetname", "assetdetailes", "receiveddate", "assetvalue", "status", "remarks");
            List<getempassetdetailes> getfamilydetails = new List<getempassetdetailes>();
            List<assetdetailes> employeelist = new List<assetdetailes>();
            List<employeeassetclass> subemployeelist = new List<employeeassetclass>();
            foreach (DataRow dr in dtemployee.Rows)
            {
                assetdetailes getemployee = new assetdetailes();
                getemployee.sno = dr["sno"].ToString();
                getemployee.employeid = dr["employeid"].ToString();
                getemployee.empcode = dr["employee_num"].ToString();
                getemployee.fullname = dr["fullname"].ToString();
                employeelist.Add(getemployee);
            }
            foreach (DataRow dr in dtsubinward.Rows)
            {
                employeeassetclass getsubemployee = new employeeassetclass();
                getsubemployee.employeid = dr["employeid"].ToString();
                getsubemployee.empcode = dr["empcode"].ToString();
                getsubemployee.assetname = dr["assetname"].ToString();
                getsubemployee.assetdetailes = dr["assetdetailes"].ToString();
                getsubemployee.receiveddate = ((DateTime)dr["receiveddate"]).ToString("yyyy-MM-dd"); //dr["receiveddate"].ToString(); //((DateTime)dr["relationdob"]).ToString("yyyy-MM-dd"); //
                getsubemployee.assetvalue = dr["assetvalue"].ToString();
                getsubemployee.status = dr["status"].ToString();
                getsubemployee.remarks = dr["remarks"].ToString();
                getsubemployee.sno = dr["sno"].ToString();
                subemployeelist.Add(getsubemployee);
            }
            getempassetdetailes getemployeeDatas = new getempassetdetailes();
            getemployeeDatas.assetdetailes = employeelist;
            getemployeeDatas.employeeassetclass = subemployeelist;
            getfamilydetails.Add(getemployeeDatas);
            string response = GetJson(getfamilydetails);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }

    private void save_appovereturn_click(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            DateTime ServerDateCurrentdate = DBManager.GetTime(vdm.conn);
            string sno = context.Request["sno"];
            string employeid = context.Request["employeid"];
            cmd = new SqlCommand("update employeassetdetails set returndate=@doe,status=@status where sno=@sno and employeid=@employeid");
            cmd.Parameters.Add("@doe", ServerDateCurrentdate);
            cmd.Parameters.Add("@status", "Return");
            cmd.Parameters.Add("@sno", sno);
            cmd.Parameters.Add("@employeid", employeid);
            vdm.Update(cmd);
            string msg = "successfully Return";
            string Response = GetJson(msg);
            context.Response.Write(Response);
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }

    private void get_employe_taskdetails(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            // branchmapping
            string mainbranch = context.Session["mainbranch"].ToString();
            cmd = new SqlCommand("SELECT employedetails.fullname, taskassign.project, taskassign.task, taskassign.module FROM  taskassign INNER JOIN employedetails ON employedetails.empid = taskassign.empid INNER JOIN  branchmapping ON employedetails.branchid = branchmapping.subbranch WHERE (branchmapping.mainbranch = @m) AND (employedetails.status = 'No') ");
            cmd.Parameters.Add("@m", mainbranch);
            //brachnwise
            //cmd = new SqlCommand("SELECT employedetails.fullname, taskassign.project, taskassign.task, taskassign.module FROM taskassign INNER JOIN  employedetails ON employedetails.empid = taskassign.empid");
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<getEmployeassetsdetails> bankMasterlist = new List<getEmployeassetsdetails>();
            foreach (DataRow dr in routes.Rows)
            {
                getEmployeassetsdetails getassetdetailes = new getEmployeassetsdetails();
                //getpfdetailes.Department = dr["department"].ToString();
                getassetdetailes.fullname = dr["fullname"].ToString();
                getassetdetailes.assetname = dr["project"].ToString();
                getassetdetailes.assetvalue = dr["module"].ToString();
                bankMasterlist.Add(getassetdetailes);
            }
            string response = GetJson(bankMasterlist);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
        //
    }
    public class EmployeePF
    {
        //public string department { get; set; }
        public string employe { get; set; }
        public string pfjoindate { get; set; }
        public string pfscheme { get; set; }
        public string uannumber { get; set; }
        public string pfnumber { get; set; }
        public string checkpfnumber { get; set; }
        public string epfcontribution { get; set; }
        public string btnval { get; set; }
        public string identity { get; set; }
        public string epscontribution { get; set; }
    }
    private void save_edit_emppfdetails(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            //string department = context.Request["Department"];
            string employee = context.Request["employeid"];
            string pfjoindate = context.Request["pfjoindate"];
            string pfscheme = context.Request["pfscheme"];
            string uannumber = context.Request["uannumber"];
            string pfnumber = context.Request["pfnumber"];
            string checkpfnumber = context.Request["checkpfnumber"];
            string epfcontribution = context.Request["epfcontribution"];
            string identity = context.Request["identity"];
            string epscontribution = context.Request["epscontribution"];
            string estnumber = context.Request["estnumber"];
            string kycidentitynumber = context.Request["kycidentitynumber"];
            string btnval = context.Request["btnval"];
            string User = context.Session["empid"].ToString();
            DateTime ServerDateCurrentdate = DBManager.GetTime(vdm.conn);
            if (btnval == "Save")
            {
                cmd = new SqlCommand("insert into employepfdetails (employeid,pfjoindate,pfscheme,uannumber,pfnumber,checkpfnumber,epfexcesscontribution,epsexcesscontribution,kycidentity,estnumber,identityno,entry_by,entry_date) values (@employee,@pfjoindate,@pfscheme, @uannumber,@pfnumber,@checkpfnumber,@epfcontribution,@identity,@epscontribution,@estnumber,@identityno,@entry_by,@entry_date)");
                //cmd.Parameters.Add("@department", department);
                cmd.Parameters.Add("@employee", employee);
                cmd.Parameters.Add("@pfjoindate", pfjoindate);
                cmd.Parameters.Add("@pfscheme", pfscheme);
                cmd.Parameters.Add("@uannumber", uannumber);
                cmd.Parameters.Add("@pfnumber", pfnumber);
                cmd.Parameters.Add("@checkpfnumber", checkpfnumber);
                cmd.Parameters.Add("@epfcontribution", epfcontribution);
                cmd.Parameters.Add("@identity", identity);
                cmd.Parameters.Add("@epscontribution", epscontribution);
                cmd.Parameters.Add("@estnumber", estnumber);
                cmd.Parameters.Add("@identityno", kycidentitynumber);
                cmd.Parameters.Add("@entry_by", User);
                cmd.Parameters.Add("@entry_date", ServerDateCurrentdate);
                vdm.insert(cmd);
                string response = GetJson("Insert successfully");
                context.Response.Write(response);
            }
            else
            {
                cmd = new SqlCommand("Update employepfdetails set   pfjoindate=@pfjoindate, pfscheme=@pfscheme, uannumber=@uannumber, pfnumber=@pfnumber, checkpfnumber=@checkpfnumber, epfexcesscontribution=@epfcontribution, kycidentity=@identity, epsexcesscontribution=@epscontribution, identityno=@identityno, estnumber=@estnumber,modify_by=@modify_by,modify_date=@modify_date where employeid=@employeid");
                cmd.Parameters.Add("@employeid", employee);
                //cmd.Parameters.Add("@department", department);
                //cmd.Parameters.Add("@employee", employee);
                cmd.Parameters.Add("@pfjoindate", pfjoindate);
                cmd.Parameters.Add("@pfscheme", pfscheme);
                cmd.Parameters.Add("@uannumber", uannumber);
                cmd.Parameters.Add("@pfnumber", pfnumber);
                cmd.Parameters.Add("@checkpfnumber", checkpfnumber);
                cmd.Parameters.Add("@epfcontribution", epfcontribution);
                cmd.Parameters.Add("@identity", identity);
                cmd.Parameters.Add("@epscontribution", epscontribution);
                cmd.Parameters.Add("@estnumber", estnumber);
                cmd.Parameters.Add("@identityno", kycidentitynumber);
                cmd.Parameters.Add("@modify_by", User);
                cmd.Parameters.Add("@modify_date", ServerDateCurrentdate);
                vdm.Update(cmd);
                string response = GetJson("UPDATE Successfully");
                context.Response.Write(response);
            }
        }
        catch (Exception ex)
        {
            string response = GetJson(ex.Message);
            context.Response.Write(response);
        }
    }
    public class getEmployeepfdetails
    {
        //public string Department { get; set; }
        public string employeid { get; set; }
        public string fullname { get; set; }
        public string department { get; set; }
        public string pfjoindate { get; set; }
        public string pfscheme { get; set; }
        public string uannumber { get; set; }
        public string pfnumber { get; set; }
        public string checkpfnumber { get; set; }
        public string epfcontribution { get; set; }
        public string identity { get; set; }
        public string epscontribution { get; set; }
        public string estnumber { get; set; }
        public string kycidentitynumber { get; set; }
        public string empcode { get; set; }
    }
    private void get_pf_details(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            string mainbranch = context.Session["mainbranch"].ToString();
            //branch mapping
            cmd = new SqlCommand("SELECT employepfdetails.empcode, employepfdetails.employeid, employepfdetails.epsexcesscontribution, employepfdetails.pfscheme, employepfdetails.estnumber, employepfdetails.epfexcesscontribution, employepfdetails.kycidentity, employepfdetails.pfnumber, employepfdetails.uannumber, employepfdetails.checkpfnumber, employepfdetails.identityno, employepfdetails.pfjoindate, employedetails.employee_num, employedetails.fullname FROM employedetails INNER JOIN  employepfdetails ON employedetails.empid = employepfdetails.employeid INNER JOIN  branchmapping ON employedetails.branchid = branchmapping.subbranch WHERE (branchmapping.mainbranch = @m) AND (employedetails.status = 'No') AND (employedetails.pfeligible = 'Yes')");
            cmd.Parameters.Add("@m", mainbranch);
            //branchwise
            //cmd = new SqlCommand("SELECT employepfdetails.empcode, employepfdetails.employeid, employepfdetails.epsexcesscontribution, employepfdetails.pfscheme, employepfdetails.estnumber, employepfdetails.epfexcesscontribution, employepfdetails.kycidentity, employepfdetails.pfnumber, employepfdetails.uannumber, employepfdetails.checkpfnumber, employepfdetails.identityno, employepfdetails.pfjoindate, employedetails.employee_num, employedetails.fullname FROM employedetails INNER JOIN employepfdetails ON employedetails.empid = employepfdetails.employeid");
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<getEmployeepfdetails> bankMasterlist = new List<getEmployeepfdetails>();
            foreach (DataRow dr in routes.Rows)
            {
                getEmployeepfdetails getpfdetailes = new getEmployeepfdetails();
                //getpfdetailes.Department = dr["departmentid"].ToString();
                getpfdetailes.empcode = dr["empcode"].ToString();
                getpfdetailes.employeid = dr["employeid"].ToString();
                getpfdetailes.fullname = dr["fullname"].ToString();
                string pfjoindate = dr["pfjoindate"].ToString();

                if (pfjoindate == "" || pfjoindate == null)
                {
                    getpfdetailes.pfjoindate = "";
                }
                else
                {
                    DateTime dt = Convert.ToDateTime(pfjoindate);
                    string strtime = dt.ToString("yyyy-MM-dd");
                    getpfdetailes.pfjoindate = strtime;
                }
                getpfdetailes.pfscheme = dr["pfscheme"].ToString();
                getpfdetailes.pfnumber = dr["pfnumber"].ToString();
                getpfdetailes.uannumber = dr["uannumber"].ToString();
                getpfdetailes.checkpfnumber = dr["checkpfnumber"].ToString();
                getpfdetailes.kycidentitynumber = dr["identityno"].ToString();
                getpfdetailes.identity = dr["kycidentity"].ToString();
                getpfdetailes.epfcontribution = dr["epfexcesscontribution"].ToString();
                getpfdetailes.estnumber = dr["estnumber"].ToString();
                getpfdetailes.epscontribution = dr["epsexcesscontribution"].ToString();
                bankMasterlist.Add(getpfdetailes);
            }
            string response = GetJson(bankMasterlist);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }
    private void saveBankDetails(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            string name = context.Request["Name"];
            string code = context.Request["Code"];
            string status = context.Request["status"];
            DateTime createdon = DateTime.Now;
            string btn_save = context.Request["btnVal"];
            if (btn_save == "Save")
            {
                cmd = new SqlCommand("insert into bankmaster (bankname,code,status) values (@bankname,@code,@status)");
                cmd.Parameters.Add("@bankname", name);
                cmd.Parameters.Add("@code", code);
                cmd.Parameters.Add("@status", status);
                vdm.insert(cmd);
                string msg = "Bank Details successfully saved";
                string Response = GetJson(msg);
                context.Response.Write(Response);
            }
            else
            {
                string sno = context.Request["sno"];
                cmd = new SqlCommand("Update bankmaster set  code=@code,status=@status,bankname=@bankname where sno=@sno");
                cmd.Parameters.Add("@bankname", name);
                cmd.Parameters.Add("@code", code);
                cmd.Parameters.Add("@status", status);
                cmd.Parameters.Add("@sno", sno);
                vdm.Update(cmd);
                string msg = "Sub bank successfully updated";
                string Response = GetJson(msg);
                context.Response.Write(Response);
            }
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }

    public class BankMaster
    {
        public string name { get; set; }
        public string Code { get; set; }
        public string sno { get; set; }
        public string status { get; set; }
        public string code { get; set; }
    }
    private void get_bank_details(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            cmd = new SqlCommand("SELECT sno,bankname, code, status FROM bankmaster");
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<BankMaster> bankMasterlist = new List<BankMaster>();
            foreach (DataRow dr in routes.Rows)
            {
                BankMaster getbankdetails = new BankMaster();
                getbankdetails.name = dr["bankname"].ToString();
                getbankdetails.code = dr["code"].ToString();
                getbankdetails.status = dr["status"].ToString();
                getbankdetails.sno = dr["sno"].ToString();
                bankMasterlist.Add(getbankdetails);
            }
            string response = GetJson(bankMasterlist);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);

        }
    }
    private static string GetJson(object obj)
    {
        JavaScriptSerializer jsonSerializer = new JavaScriptSerializer();
        return jsonSerializer.Serialize(obj);
    }

    public class Departments
    {
        public int Deptid { get; set; }
        public string Department { get; set; }
        public string status { get; set; }
        public string groupname { get; set; }
        public string groupid { get; set; }
    }
    public class Roles
    {
        public int RoleId { get; set; }
        public string Role { get; set; }
        public string status { get; set; }
    }
    public class IDProofs
    {
        public int IDProofId { get; set; }
        public string IDProof { get; set; }
        public string status { get; set; }
    }
    public class leavetypes
    {
        public int leavetypeId { get; set; }
        public string leavetype { get; set; }
        public string leavetypecode { get; set; }
        public string monthlyaccumulation { get; set; }
        public string maximumaccumulation { get; set; }
        public string Reason { get; set; }
        public string status { get; set; }
    }
    public class Shifttypes
    {
        public int shiftid { get; set; }
        public string shifttype { get; set; }
        public string status { get; set; }
    }
    public class empidproof_details_list
    {
        public List<empidproof_details> emp_idproof_details { set; get; }
    }
    public class empidproof_details
    {
        public string IdProofId { get; set; }
        public string path { get; set; }
        public string enteredby { get; set; }
    }
    public class employee_dept
    {
        public string sno { set; get; }
        public string depart_name { set; get; }
        public string status { set; get; }
    }

    public class Approve
    {
        public string leave_type { set; get; }
        public string fromdate { set; get; }
        public string todate { set; get; }
        public string sno { set; get; }
        public string branchsno { set; get; }
        public string leave_days { set; get; }
        public string Employee_name { set; get; }
        public string Mobile_Number { set; get; }
        public string Reason { set; get; }
    }
    private void Approve_Details(HttpContext context)
    {
        try
        {
            string branchid = "1";
            if (branchid != null)
            {
                //string branchid = context.Session["branch_id"].ToString();
                string login_id = context.Session["userid"].ToString();
                cmd = new SqlCommand("SELECT lp.leaveapplicationid, lp.remarks, lp.leave_description, lp.request_to, lp.request_date, lp.leave_from_dt, lp.leave_to_dt, lp.leave_satus, lp.employee_no, lp.aproved_by,  lp.operated_by, lp.leave_type_id, lp.mobile_number, lp.leave_days, ed.fullname, lt.leavetypecode FROM leave_application lp INNER JOIN employedetails ed ON lp.request_to = ed.empid INNER JOIN leavetypes lt ON lp.leave_type_id = lt.leavetypeid WHERE (lp.request_to = @request_to) and lp.leave_satus = 'pending'");
                // cmd.Parameters.Add("@branch_sno", branchid);
                cmd.Parameters.Add("@request_to", login_id);
                DataTable sessiondata = vdm.SelectQuery(cmd).Tables[0];
                List<Approve> getsessionlist = new List<Approve>();
                foreach (DataRow dr in sessiondata.Rows)
                {
                    Approve ss = new Approve();
                    ss.sno = dr["leaveapplicationid"].ToString();
                    ss.leave_type = dr["leavetypecode"].ToString();
                    ss.fromdate = ((DateTime)dr["leave_from_dt"]).ToString("yyyy-MM-dd");
                    ss.todate = ((DateTime)dr["leave_to_dt"]).ToString("yyyy-MM-dd");
                    ss.Employee_name = dr["fullname"].ToString();
                    // ss.branchsno = dr["branch_sno"].ToString();
                    ss.leave_days = dr["leave_days"].ToString();
                    ss.Mobile_Number = dr["mobile_number"].ToString();
                    ss.Reason = dr["leave_description"].ToString();
                    getsessionlist.Add(ss);
                }
                string response = GetJson(getsessionlist);
                context.Response.Write(response);
            }
            else
            {
                context.Response.Write("false");
            }
        }
        catch (Exception ex)
        {
            string response = GetJson(ex.ToString());
            context.Response.Write(response);
        }
    }
    private void Approvedetails_save(HttpContext context)
    {
        try
        {
            string branchid = "1";
            if (branchid != null)
            {
                // string branchid = context.Session["branch_id"].ToString();
                string Status_leave = context.Request["Status_leave"];
                string Comment_leave = context.Request["Comment_leave"];
                string operation = context.Request["operation"];
                string sno = context.Request["sno"];
                if (operation == "SAVE")
                {
                    cmd = new SqlCommand("UPDATE leave_application SET remarks = @remarks,aproved_by=@aproved_by, leave_satus = @leave_satus WHERE (leaveapplicationid = @sno)");
                    cmd.Parameters.Add("@sno", sno);//branch_sno
                    cmd.Parameters.Add("@remarks", Comment_leave);
                    cmd.Parameters.Add("@leave_satus", Status_leave);
                    string login_id = context.Session["userid"].ToString();
                    cmd.Parameters.Add("@Aproved_by", login_id);
                    vdm.Update(cmd);
                }
                string msg = "Data Successfully Saved";
                string response = GetJson(msg);
                context.Response.Write(response);
            }
            else
            {
                context.Response.Write("false");
            }
        }
        catch (Exception ex)
        {
            string response = GetJson(ex.ToString());
            context.Response.Write(response);
        }
    }

    private void get_all_employee_departments(HttpContext context)
    {
        try
        {
            if (context.Session["branch_id"] != null)
            {
                cmd = new SqlCommand("SELECT sno, depart_name, status, branch_sno, operated_by FROM departments WHERE (branch_sno = @branch_sno)");
                cmd.Parameters.Add("@branch_sno", context.Session["branch_id"]);
                DataTable dt = vdm.SelectQuery(cmd).Tables[0];
                List<employee_dept> dept = new List<employee_dept>();
                foreach (DataRow dr in dt.Rows)
                {
                    employee_dept dpert = new employee_dept();
                    dpert.sno = dr["sno"].ToString();
                    dpert.depart_name = dr["depart_name"].ToString();
                    dpert.status = dr["status"].ToString();
                    dept.Add(dpert);
                }
                string response = GetJson(dept);
                context.Response.Write(response);

            }
        }
        catch (Exception ex)
        {
            string response = GetJson(ex.Message);
            context.Response.Write(response);
        }
    }


    private void get_group_details(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            cmd = new SqlCommand("SELECT sno, groupname, status FROM groupmaster");
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<Departments> Departmentslst = new List<Departments>();
            foreach (DataRow dr in routes.Rows)
            {
                Departments getdepts = new Departments();
                getdepts.groupid = dr["sno"].ToString();
                getdepts.groupname = dr["groupname"].ToString();
                // getdepts.status = dr["status"].ToString();
                //getdepts.Reason = dr["reason"].ToString();
                Departmentslst.Add(getdepts);
            }
            string response = GetJson(Departmentslst);
            context.Response.Write(response);
        }
        catch
        {
        }
    }

    private void get_Dept_details(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            cmd = new SqlCommand("SELECT deptid, department, status FROM departments  order by deptid");
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<Departments> Departmentslst = new List<Departments>();
            foreach (DataRow dr in routes.Rows)
            {
                Departments getdepts = new Departments();
                getdepts.Deptid = Convert.ToInt32(dr["deptid"].ToString());
                getdepts.Department = dr["department"].ToString();
                getdepts.status = dr["status"].ToString();
                //getdepts.Reason = dr["reason"].ToString();
                Departmentslst.Add(getdepts);
            }
            string response = GetJson(Departmentslst);
            context.Response.Write(response);
        }
        catch
        {
        }
    }
    public class Designation
    {
        public string designationid { get; set; }
        public string designation { get; set; }
        public string status { get; set; }
        //public string Reason { get; set; }
    }

    private void get_Desgnation_details(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            cmd = new SqlCommand("SELECT designationid, designation, status FROM designation order by designation ");
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<Designation> Deesignationlist = new List<Designation>();
            foreach (DataRow dr in routes.Rows)
            {
                Designation getdegination = new Designation();
                getdegination.designationid = dr["designationid"].ToString();//Convert.ToInt32(dr["designationid"].ToString());
                getdegination.designation = dr["designation"].ToString();
                getdegination.status = dr["status"].ToString();
                //getdegination.Reason = dr["reason"].ToString();
                Deesignationlist.Add(getdegination);
            }
            string response = GetJson(Deesignationlist);
            context.Response.Write(response);
        }
        catch
        {
        }
    }

    private void save_Desigination_click(HttpContext context)
    {
        try
        {
            vdm = new DBManager();

            string desigination = context.Request["desigination"];
            //string Reason = context.Request["Reason"];
            string status = context.Request["Status"];

            string btnval = context.Request["btnval"];
            string User = context.Session["empid"].ToString();
            if (btnval == "Save")
            {
                cmd = new SqlCommand("insert into designation (designation,status,createdby, createdon) values (@designation,@status,@createdby,@createdon)");
                cmd.Parameters.Add("@designation", desigination);
                cmd.Parameters.Add("@status", status);
                cmd.Parameters.Add("@createdby", User);
                cmd.Parameters.Add("@createdon", DateTime.Now);
                //cmd.Parameters.Add("@reason", Reason);
                vdm.insert(cmd);
                string response = GetJson("Insert Successfully");
                context.Response.Write(response);
            }
            else
            {
                string designationid = context.Request["designationid"];
                cmd = new SqlCommand("Update designation set designation=@designation, status=@status, editedby=@editedby, editedon=@editedon where designationid=@designationid");
                cmd.Parameters.Add("@designation", desigination);
                cmd.Parameters.Add("@status", status);
                cmd.Parameters.Add("@editedby", User);
                cmd.Parameters.Add("@editedon", DateTime.Now);
                //cmd.Parameters.Add("@reason", Reason);
                cmd.Parameters.Add("@designationid", designationid);
                vdm.Update(cmd);
                string response = GetJson("Updated Successfully");
                context.Response.Write(response);
            }
        }
        catch (Exception ex)
        {
            string response = GetJson(ex.Message);
            context.Response.Write(response);
        }
    }
    private void save_Department_click(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            string Department = context.Request["Department"];
            //string Reason = context.Request["Reason"];
            string status = context.Request["Status"];
            string Deptid = context.Request["Deptid"];
            string btnval = context.Request["btnval"];
            string groupid = context.Request["groupid"];
            string User = context.Session["empid"].ToString();
            if (btnval == "Save")
            {
                cmd = new SqlCommand("insert into departments (department,status,createdby, createdon,groupid) values (@department, @status,@createdby, @createdon,@groupid)");
                cmd.Parameters.Add("@department", Department);
                cmd.Parameters.Add("@status", status);
                cmd.Parameters.Add("@createdby", User);
                cmd.Parameters.Add("@createdon", DateTime.Now);
                cmd.Parameters.Add("@groupid", groupid);
                vdm.insert(cmd);
                string response = GetJson("Insert Successfully");
                context.Response.Write(response);
            }
            else
            {
                cmd = new SqlCommand("Update departments set department=@department, status=@status,editedby=@editedby, groupid=@groupid, editedon=@editedon where deptid=@Deptid");
                cmd.Parameters.Add("@department", Department);
                cmd.Parameters.Add("@status", status);
                cmd.Parameters.Add("@editedby", User);
                cmd.Parameters.Add("@editedon", DateTime.Now);
                cmd.Parameters.Add("@groupid", groupid);
                cmd.Parameters.Add("@Deptid", Deptid);
                vdm.Update(cmd);
                string response = GetJson("Updated Successfully");
                context.Response.Write(response);
            }
        }
        catch (Exception ex)
        {
            string response = GetJson(ex.Message);
            context.Response.Write(response);
        }
    }

    //naseema
    private void saveSimMaster(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            string Networktype = context.Request["Networktype"];
            string Simno = context.Request["Simno"];
            string Phonenumber = context.Request["Phonenumber"];
            string Typeofsim = context.Request["Typeofsim"];
            string Remarks = context.Request["Remarks"];
            DateTime ServerDateCurrentdate = DBManager.GetTime(vdm.conn);
            string createdby = context.Session["empid"].ToString();
            string editedby = context.Session["empid"].ToString();
            string sno = context.Request["sno"];
            //string editedon = context.Session["empid"].ToString();
            string btnval = context.Request["btnval"];
            if (btnval == "Save")
            {
                cmd = new SqlCommand("insert into sim_carddetails (networktype,simno,phoneno,typeofsim,status,remarks,createdby,doe,editedby,editedon) values (@networktype,@simno,@phoneno,@typeofsim,@status,@remarks,@createdby,@doe,@editedby,@editedon)");
                cmd.Parameters.Add("@networktype", Networktype);
                cmd.Parameters.Add("@status", "E");
                cmd.Parameters.Add("@simno", Simno);
                cmd.Parameters.Add("@phoneno", Phonenumber);
                cmd.Parameters.Add("@typeofsim", Typeofsim);
                cmd.Parameters.Add("@editedon", ServerDateCurrentdate);
                cmd.Parameters.Add("@editedby", editedby);
                cmd.Parameters.Add("@doe", ServerDateCurrentdate);
                cmd.Parameters.Add("@createdby", createdby);
                cmd.Parameters.Add("@remarks", Remarks);
                vdm.insert(cmd);
                string response = GetJson("Insert Successfully");
                context.Response.Write(response);
            }
            else
            {
                cmd = new SqlCommand("Update sim_carddetails set networktype=@networktype, simno=@simno, phoneno=@phoneno, typeofsim=@typeofsim, status=@status,remarks=@remarks where sno=@sno");
                cmd.Parameters.Add("@networktype", Networktype);
                cmd.Parameters.Add("@status", "A");
                cmd.Parameters.Add("@simno", Simno);
                cmd.Parameters.Add("@phoneno", Phonenumber);
                cmd.Parameters.Add("@typeofsim", Typeofsim);
                cmd.Parameters.Add("@editedon", ServerDateCurrentdate);
                cmd.Parameters.Add("@editedby", editedby);
                cmd.Parameters.Add("@doe", ServerDateCurrentdate);
                cmd.Parameters.Add("@createdby", createdby);
                cmd.Parameters.Add("@remarks", Remarks);
                cmd.Parameters.Add("@sno", sno);
                vdm.Update(cmd);
                string response = GetJson("UPDATE Successfully");
                context.Response.Write(response);
            }
        }
        catch (Exception ex)
        {
            string response = GetJson(ex.Message);
            context.Response.Write(response);
        }
    }



    public class Simdetailes
    {
        public string sno { get; set; }
        public string Networktype { get; set; }
        public string Simno { get; set; }
        public string Phonenumber { get; set; }
        public string Typeofsim { get; set; }
        public string Remarks { get; set; }
        public string status { get; set; }

    }

    private void get_sim_details(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            cmd = new SqlCommand("SELECT sno, networktype, simno, phoneno, typeofsim, status, remarks FROM  sim_carddetails ");
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<Simdetailes> Deesignationlist = new List<Simdetailes>();
            foreach (DataRow dr in routes.Rows)
            {
                Simdetailes getsim = new Simdetailes();
                getsim.sno = dr["sno"].ToString();//Convert.ToInt32(dr["designationid"].ToString());
                getsim.Networktype = dr["networktype"].ToString();
                getsim.Simno = dr["simno"].ToString();
                getsim.Phonenumber = dr["phoneno"].ToString();
                getsim.Typeofsim = dr["typeofsim"].ToString();
                getsim.Remarks = dr["remarks"].ToString();
                getsim.status = dr["status"].ToString();
                Deesignationlist.Add(getsim);
            }
            string response = GetJson(Deesignationlist);
            context.Response.Write(response);
        }
        catch
        {
        }
    }

    private void save_IssueSim_Detailes(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            string approveemp = "";
            string createdby = context.Session["empid"].ToString();
            string employeid = context.Request["employeid"];
            string usedby = context.Request["usedby"];
            string empcode = context.Request["empcode"];
            string Network = context.Request["Network"];
            string Phonenumbr = context.Request["Phonenumbr"];
            string Approveby = context.Request["Approveby"];
            string limitby = context.Request["limitby"];
            string Remarks = context.Request["Remarks"];
            DateTime ServerDateCurrentdate = DBManager.GetTime(vdm.conn);
            string sno = context.Request["sno"];
            if (Approveby == "")
            {
                approveemp = context.Request["approveemp"];
            }
            else
            {
                approveemp = Approveby;
            }
            //string editedon = context.Session["empid"].ToString();
            string btnval = context.Request["btnval"];
            if (btnval == "Save")
            {
                cmd = new SqlCommand("insert into issue_simcarddetails (networktype,empid,empcode,phoneno,status,remarks,createdby,doe,limit,aprovedby,usedby) values (@networktype,@empid,@empcode,@phoneno,@status,@remarks,@createdby,@doe,@limit,@aprovedby,@usedby)");
                cmd.Parameters.Add("@networktype", Network);
                cmd.Parameters.Add("@status", "p");
                cmd.Parameters.Add("@empid", employeid);
                cmd.Parameters.Add("@empcode", empcode);
                cmd.Parameters.Add("@phoneno", Phonenumbr);
                cmd.Parameters.Add("@aprovedby", Approveby);
                cmd.Parameters.Add("@limit", limitby);
                cmd.Parameters.Add("@doe", ServerDateCurrentdate);
                cmd.Parameters.Add("@createdby", createdby);
                cmd.Parameters.Add("@remarks", Remarks);
                cmd.Parameters.Add("@usedby", usedby);
                vdm.insert(cmd);
                string response = GetJson("Insert Successfully");
                context.Response.Write(response);
            }
            else
            {
                cmd = new SqlCommand("Update issue_simcarddetails set networktype=@networktype, empid=@empid, phoneno=@phoneno, empcode=@empcode,aprovedby=@aprovedby, limit=@limit, status=@status,remarks=@remarks,usedby=@usedby where sno=@sno");
                cmd.Parameters.Add("@networktype", Network);
                cmd.Parameters.Add("@status", "A");
                cmd.Parameters.Add("@empcode", empcode);
                cmd.Parameters.Add("@empid", employeid);
                cmd.Parameters.Add("@phoneno", Phonenumbr);
                cmd.Parameters.Add("@aprovedby", approveemp);
                cmd.Parameters.Add("@limit", limitby);
                cmd.Parameters.Add("@doe", ServerDateCurrentdate);
                cmd.Parameters.Add("@createdby", createdby);
                cmd.Parameters.Add("@remarks", Remarks);
                cmd.Parameters.Add("@sno", sno);
                cmd.Parameters.Add("@usedby", usedby);
                vdm.Update(cmd);
                string response = GetJson("UPDATE Successfully");
                context.Response.Write(response);
            }
        }
        catch (Exception ex)
        {
            string response = GetJson(ex.Message);
            context.Response.Write(response);
        }
    }
    public class issuedetailes
    {
        public string sno { get; set; }
        public string Networktype { get; set; }
        public string limit { get; set; }
        public string Phonenumber { get; set; }
        public string empcode { get; set; }
        public string Remarks { get; set; }
        public string status { get; set; }
        public string employeid { get; set; }
        public string empname { get; set; }
        public string empname1 { get; set; }
        public string empid1 { get; set; }
        public string usedby { get; set; }
    }

    private void get_Issue_details(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            cmd = new SqlCommand("SELECT issue_simcarddetails.sno, issue_simcarddetails.usedby, issue_simcarddetails.aprovedby, issue_simcarddetails.empid, issue_simcarddetails.empcode, issue_simcarddetails.networktype,issue_simcarddetails.phoneno, issue_simcarddetails.status, issue_simcarddetails.limit, issue_simcarddetails.remarks, employedetails.fullname,employedetails.employee_num, employedetails_1.fullname AS fullname1 FROM issue_simcarddetails LEFT OUTER JOIN employedetails ON issue_simcarddetails.empid = employedetails.empid LEFT OUTER JOIN employedetails AS employedetails_1 ON issue_simcarddetails.aprovedby = employedetails_1.empid");
            // cmd = new SqlCommand("SELECT  issue_simcarddetails.sno,issue_simcarddetails.aprovedby, issue_simcarddetails.empid, issue_simcarddetails.empcode, issue_simcarddetails.networktype, issue_simcarddetails.phoneno, issue_simcarddetails.status, issue_simcarddetails.limit, issue_simcarddetails.remarks, employedetails.fullname, employedetails.employee_num FROM issue_simcarddetails INNER JOIN employedetails ON issue_simcarddetails.empid = employedetails.empid where issue_simcarddetails.status='P'");
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<issuedetailes> Deesignationlist = new List<issuedetailes>();
            foreach (DataRow dr in routes.Rows)
            {
                issuedetailes getiissue = new issuedetailes();
                getiissue.sno = dr["sno"].ToString();//Convert.ToInt32(dr["designationid"].ToString());
                getiissue.empname = dr["fullname"].ToString();
                getiissue.empname1 = dr["fullname1"].ToString();
                getiissue.empid1 = dr["aprovedby"].ToString();
                getiissue.Networktype = dr["networktype"].ToString();
                getiissue.limit = dr["limit"].ToString();
                getiissue.Phonenumber = dr["phoneno"].ToString();
                getiissue.employeid = dr["empid"].ToString();
                getiissue.empcode = dr["empcode"].ToString();
                getiissue.Remarks = dr["remarks"].ToString();
                getiissue.usedby = dr["usedby"].ToString();
                string approvestatus = dr["status"].ToString();
                if (approvestatus == "P")
                {
                    approvestatus = "Pending";

                }
                else if (approvestatus == "A")
                {
                    approvestatus = "Approved";

                }
                else if (approvestatus == "R")
                {
                    approvestatus = "Reject";

                }
                getiissue.status = approvestatus;
                //getiissue.status = dr["status"].ToString();
                Deesignationlist.Add(getiissue);
            }
            string response = GetJson(Deesignationlist);
            context.Response.Write(response);
        }
        catch
        {
        }
    }

    private void get_approveissue_details(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            cmd = new SqlCommand("SELECT issue_simcarddetails.sno, issue_simcarddetails.aprovedby, issue_simcarddetails.empid, issue_simcarddetails.empcode, issue_simcarddetails.networktype,issue_simcarddetails.phoneno, issue_simcarddetails.status, issue_simcarddetails.limit, issue_simcarddetails.remarks, employedetails.fullname,employedetails.employee_num, employedetails_1.fullname AS fullname1 FROM issue_simcarddetails INNER JOIN employedetails ON issue_simcarddetails.empid = employedetails.empid INNER JOIN employedetails AS employedetails_1 ON issue_simcarddetails.aprovedby = employedetails_1.empid where issue_simcarddetails.status='P'");
            // cmd = new SqlCommand("SELECT  issue_simcarddetails.sno,issue_simcarddetails.aprovedby, issue_simcarddetails.empid, issue_simcarddetails.empcode, issue_simcarddetails.networktype, issue_simcarddetails.phoneno, issue_simcarddetails.status, issue_simcarddetails.limit, issue_simcarddetails.remarks, employedetails.fullname, employedetails.employee_num FROM issue_simcarddetails INNER JOIN employedetails ON issue_simcarddetails.empid = employedetails.empid where issue_simcarddetails.status='P'");
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<issuedetailes> Deesignationlist = new List<issuedetailes>();
            foreach (DataRow dr in routes.Rows)
            {
                issuedetailes getiissue = new issuedetailes();
                getiissue.sno = dr["sno"].ToString();//Convert.ToInt32(dr["designationid"].ToString());
                getiissue.empname = dr["fullname"].ToString();
                getiissue.empname1 = dr["fullname1"].ToString();
                getiissue.empid1 = dr["aprovedby"].ToString();
                getiissue.Networktype = dr["networktype"].ToString();
                getiissue.limit = dr["limit"].ToString();
                getiissue.Phonenumber = dr["phoneno"].ToString();
                getiissue.employeid = dr["empid"].ToString();
                getiissue.empcode = dr["empcode"].ToString();
                getiissue.Remarks = dr["remarks"].ToString();
                getiissue.status = dr["status"].ToString();
                Deesignationlist.Add(getiissue);
            }
            string response = GetJson(Deesignationlist);
            context.Response.Write(response);
        }
        catch
        {
        }
    }

    private void save_Issuesim_approve_click(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            DateTime ServerDateCurrentdate = DBManager.GetTime(vdm.conn);
            string sno = context.Request["sno"];
            string reason = context.Request["reason"];
            cmd = new SqlCommand("update issue_simcarddetails set doe=@doe,status=@status  where sno=@sno");
            cmd.Parameters.Add("@doe", ServerDateCurrentdate);
            cmd.Parameters.Add("@status", "A");
            cmd.Parameters.Add("@sno", sno);
            vdm.Update(cmd);
            string msg = "sim Aporval successfully Approved";
            string Response = GetJson(msg);
            context.Response.Write(Response);
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);

        }
    }

    private void save_Issuesim_Reject_click(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            DateTime ServerDateCurrentdate = DBManager.GetTime(vdm.conn);
            string sno = context.Request["sno"];
            string reason = context.Request["reason"];
            cmd = new SqlCommand("update issue_simcarddetails set doe=@doe,status=@status, remarks=@reason where sno=@sno");
            cmd.Parameters.Add("@doe", ServerDateCurrentdate);
            cmd.Parameters.Add("@status", "P");
            cmd.Parameters.Add("@reason", reason);
            cmd.Parameters.Add("@sno", sno);
            vdm.Update(cmd);
            string msg = " sim Issue successfully rejected";
            string Response = GetJson(msg);
            context.Response.Write(Response);
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);

        }
    }
    private void save_Return_Master(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            string employeid = context.Request["employeid"];
            string empcode = context.Request["empcode"];
            string Phonenumber = context.Request["Phonenumber"];
            string Remarks = context.Request["Remarks"];
            //string returndate = context.Request["returndate"];
            DateTime ServerDateCurrentdate = DBManager.GetTime(vdm.conn);
            string createdby = context.Session["empid"].ToString();
            string sno = context.Request["sno"];
            //string editedon = context.Session["empid"].ToString();
            string btnval = context.Request["btnval"];
            if (btnval == "Save")
            {
                cmd = new SqlCommand("insert into return_simcarddetails (returndate,empid,empcode,phoneno,remarks,createdby) values (@returndate,@empid,@empcode,@phoneno,@remarks,@createdby)");
                cmd.Parameters.Add("@returndate", ServerDateCurrentdate);
                cmd.Parameters.Add("@empid", employeid);
                cmd.Parameters.Add("@empcode", empcode);
                cmd.Parameters.Add("@phoneno", Phonenumber);
                cmd.Parameters.Add("@createdby", createdby);
                cmd.Parameters.Add("@remarks", Remarks);
                vdm.insert(cmd);
                cmd = new SqlCommand("update sim_carddetails set  status=@status  where phoneno=@phoneno");
                cmd.Parameters.Add("@status", "A");
                cmd.Parameters.Add("@phoneno", Phonenumber);
                vdm.Update(cmd);
                cmd = new SqlCommand("insert into return_simlogdetails (doe,empid,empcode,phoneno,createdby) values (@returndate,@empid,@empcode,@phoneno,@createdby)");
                cmd.Parameters.Add("@returndate", ServerDateCurrentdate);
                cmd.Parameters.Add("@empid", employeid);
                cmd.Parameters.Add("@empcode", empcode);
                cmd.Parameters.Add("@phoneno", Phonenumber);
                cmd.Parameters.Add("@createdby", createdby);
                vdm.insert(cmd);
                string response = GetJson("Insert Successfully");
                context.Response.Write(response);
            }
            else
            {
                cmd = new SqlCommand("Update return_simcarddetails set  empid=@empid, phoneno=@phoneno, empcode=@empcode,remarks=@remarks where sno=@sno");
                cmd.Parameters.Add("@empid", employeid);
                cmd.Parameters.Add("@empcode", empcode);
                cmd.Parameters.Add("@phoneno", Phonenumber);
                cmd.Parameters.Add("@doe", ServerDateCurrentdate);
                cmd.Parameters.Add("@createdby", createdby);
                cmd.Parameters.Add("@remarks", Remarks);
                cmd.Parameters.Add("@sno", sno);
                vdm.Update(cmd);
                string response = GetJson("UPDATE Successfully");
                context.Response.Write(response);
            }
        }
        catch (Exception ex)
        {
            string response = GetJson(ex.Message);
            context.Response.Write(response);
        }
    }

    public class returndetailes
    {
        public string sno { get; set; }
        public string returndate { get; set; }
        public string limit { get; set; }
        public string Phonenumber { get; set; }
        public string empcode { get; set; }
        public string Remarks { get; set; }
        public string status { get; set; }
        public string employeid { get; set; }
        public string empname { get; set; }
        //public string status { get; set; }

    }

    private void get_return_details(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            cmd = new SqlCommand("SELECT employedetails.fullname, employedetails.employee_num, return_simcarddetails.sno,return_simcarddetails.returndate, return_simcarddetails.phoneno, return_simcarddetails.remarks,return_simcarddetails.empcode,return_simcarddetails.empid FROM employedetails INNER JOIN return_simcarddetails ON employedetails.empid = return_simcarddetails.empid");
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<returndetailes> Deesignationlist = new List<returndetailes>();
            foreach (DataRow dr in routes.Rows)
            {
                returndetailes getreturn = new returndetailes();
                getreturn.sno = dr["sno"].ToString();//Convert.ToInt32(dr["designationid"].ToString());
                getreturn.empname = dr["fullname"].ToString();
                getreturn.returndate = dr["returndate"].ToString();
                getreturn.Phonenumber = dr["phoneno"].ToString();
                getreturn.employeid = dr["empid"].ToString();
                getreturn.empcode = dr["empcode"].ToString();
                getreturn.Remarks = dr["remarks"].ToString();
                Deesignationlist.Add(getreturn);
            }
            string response = GetJson(Deesignationlist);
            context.Response.Write(response);
        }
        catch
        {
        }
    }


    private void save_edit_bulletin(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            string title = context.Request["title"];
            string description = context.Request["description"];
            DateTime ServerDateCurrentdate = DBManager.GetTime(vdm.conn);
            string createdby = context.Session["empid"].ToString();
            string btnval = context.Request["btnval"];
            if (btnval == "Save")
            {
                cmd = new SqlCommand("insert into bulletinboard (title,discription,doe,createdby) values (@title,@description,@doe,@createdby)");
                cmd.Parameters.Add("@title", title);
                cmd.Parameters.Add("@description", description);
                cmd.Parameters.Add("@doe", ServerDateCurrentdate);
                cmd.Parameters.Add("@createdby", createdby);
                vdm.insert(cmd);
                string response = GetJson("New Bulletin successfully created");
                context.Response.Write(response);
            }
            else
            {
                string sno = context.Request["sno"];
                cmd = new SqlCommand("Update bulletinboard set title=@title,discription=@description where sno=@sno");
                cmd.Parameters.Add("@title", title);
                cmd.Parameters.Add("@description", description);
                cmd.Parameters.Add("@sno", sno);
                vdm.Update(cmd);
                string response = GetJson("Modified or changes updated Successfully");
                context.Response.Write(response);
            }
        }
        catch (Exception ex)
        {
            string response = GetJson(ex.Message);
            context.Response.Write(response);
        }
    }


    public class bullentin
    {
        public string sno { get; set; }
        public string description { get; set; }
        public string title { get; set; }
        //public string Reason { get; set; }
    }

    private void get_bullentin_details(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            cmd = new SqlCommand("SELECT sno, title, discription FROM bulletinboard ");
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<bullentin> Deesignationlist = new List<bullentin>();
            foreach (DataRow dr in routes.Rows)
            {
                bullentin getbullentin = new bullentin();
                getbullentin.sno = dr["sno"].ToString();//Convert.ToInt32(dr["designationid"].ToString());
                getbullentin.description = dr["discription"].ToString();
                getbullentin.title = dr["title"].ToString();
                //getdegination.Reason = dr["reason"].ToString();
                Deesignationlist.Add(getbullentin);
            }
            string response = GetJson(Deesignationlist);
            context.Response.Write(response);
        }
        catch
        {
        }
    }


    private void save_rejion_detailes(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            DateTime ServerDateCurrentdate = DBManager.GetTime(vdm.conn);
            string empid = context.Request["empid"];
            string rejoiningdate = context.Request["rejoiningdate"];
            string reportingto = context.Request["reportingto"];
            string Department = context.Request["Department"];
            string Designation = context.Request["Designation"];
            string username = context.Request["username"];
            string password = context.Request["password"];
            string login_check = context.Request["login_check"];
            //string Deptid = context.Request["Deptid"];
            string btnval = context.Request["btnval"];
            if (btnval == "save")
            {
                cmd = new SqlCommand("insert into emprejoiningdetails (empid,rejoiningdate,reportingto,status,designationid,deptid,doe) values (@empid, @rejoiningdate,@reportingto,@status,@designationid,@deptid,@doe)");
                cmd.Parameters.Add("@empid", empid);
                cmd.Parameters.Add("@rejoiningdate", rejoiningdate);
                cmd.Parameters.Add("@reportingto", reportingto);
                cmd.Parameters.Add("@designationid", Department);
                cmd.Parameters.Add("@deptid", Department);
                cmd.Parameters.Add("@doe", ServerDateCurrentdate);
                cmd.Parameters.Add("@status", "P");
                vdm.insert(cmd);
                if (login_check == "checked")
                {

                    cmd = new SqlCommand("update employe_logins set  username=@username , password=@password  where empid=@empid");
                    cmd.Parameters.Add("@empid", empid);
                    cmd.Parameters.Add("@username", username);
                    cmd.Parameters.Add("@password", password);
                    vdm.Update(cmd);
                }
                string response = GetJson("Insert Successfully");
                context.Response.Write(response);
            }

            else
            {
                //cmd = new SqlCommand("Update departments set department=@department, status=@status, reason=@reason where deptid=@Deptid");
                //cmd.Parameters.Add("@department", Department);
                //cmd.Parameters.Add("@status", status);
                //cmd.Parameters.Add("@reason", Reason);
                //cmd.Parameters.Add("@Deptid", Deptid);
                //vdm.Update(cmd);
                //string response = GetJson("UPDATE");
                //context.Response.Write(response);
            }
        }
        catch (Exception ex)
        {
            string response = GetJson(ex.Message);
            context.Response.Write(response);
        }
    }



    //private void get_Role_details(HttpContext context)
    //{
    //    try
    //    {
    //        vdm = new DBManager();
    //        cmd = new SqlCommand("SELECT roleid, role, status FROM role");
    //        DataTable routes = vdm.SelectQuery(cmd).Tables[0];
    //        List<Roles> Roleslist = new List<Roles>();
    //        foreach (DataRow dr in routes.Rows)
    //        {
    //            Roles getRoles = new Roles();
    //            getRoles.RoleId = Convert.ToInt32(dr["roleid"].ToString());
    //            getRoles.Role = dr["role"].ToString();
    //            getRoles.status = dr["status"].ToString();
    //            //getRoles.Reason = dr["reason"].ToString();
    //            Roleslist.Add(getRoles);
    //        }
    //        string response = GetJson(Roleslist);
    //        context.Response.Write(response);
    //    }
    //    catch
    //    {
    //    }
    //}

    //private void save_Role_click(HttpContext context)
    //{
    //    try
    //    {
    //        vdm = new DBManager();
    //        string Role = context.Request["Role"];
    //        //string Reason = context.Request["Reason"];
    //        string status = context.Request["status"];
    //        string RoleId = context.Request["Roleid"];
    //        string btnval = context.Request["btnval"];
    //        if (btnval == "Save")
    //        {
    //            cmd = new SqlCommand("insert into role (role,status) values (@Role, @status)");
    //            cmd.Parameters.Add("@Role", Role);
    //            cmd.Parameters.Add("@status", status);
    //            //cmd.Parameters.Add("@reason", Reason);
    //            vdm.insert(cmd);
    //            string response = GetJson("Insert Successfully");
    //            context.Response.Write(response);
    //        }
    //        else
    //        {
    //            cmd = new SqlCommand("Update role set role=@Role, status=@status where roleid=@RoleId");
    //            cmd.Parameters.Add("@Role", Role);
    //            cmd.Parameters.Add("@status", status);
    //            //cmd.Parameters.Add("@reason", Reason);
    //            cmd.Parameters.Add("@RoleId", RoleId);
    //            vdm.Update(cmd);
    //            string response = GetJson("UPDATE Successfully");
    //            context.Response.Write(response);
    //        }
    //    }
    //    catch (Exception ex)
    //    {
    //        string response = GetJson(ex.Message);
    //        context.Response.Write(response);
    //    }
    //}

    private void save_leavetype_click(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            string leavetype = context.Request["leavetype"];

            string leavetypecode = context.Request["leavetypecode"];
            string monthlyaccum = context.Request["monthlyaccum"];
            string maximumaccum = context.Request["maximumaccum"];

            string Reason = context.Request["Reason"];
            string status = context.Request["status"];
            string leavetypeId = context.Request["leavetypeId"];
            string btnval = context.Request["btnval"];
            if (btnval == "Save")
            {
                cmd = new SqlCommand("insert into leavetypes (leavetype,leavetypecode, monthlyaccumulation, maximumaccumulation, status,reason) values (@leavetype,@leavetypecode,@monthlyaccum,@maximumaccum, @status,@reason)");
                cmd.Parameters.Add("@leavetype", leavetype);
                cmd.Parameters.Add("@leavetypecode", leavetypecode);
                cmd.Parameters.Add("@monthlyaccum", monthlyaccum);
                cmd.Parameters.Add("@maximumaccum", maximumaccum);
                cmd.Parameters.Add("@status", status);
                cmd.Parameters.Add("@reason", Reason);
                vdm.insert(cmd);
                string response = GetJson("New Leave type  Successfully created");
                context.Response.Write(response);
            }
            else
            {
                cmd = new SqlCommand("Update leavetypes set leavetype=@leavetype,leavetypecode=@leavetypecode, monthlyaccumulation=@monthlyaccum, maximumaccumulation=@maximumaccum, status=@status, reason=@reason where leavetypeid=@leavetypeId");
                cmd.Parameters.Add("@leavetype", leavetype);
                cmd.Parameters.Add("@leavetypecode", leavetypecode);
                cmd.Parameters.Add("@monthlyaccum", monthlyaccum);
                cmd.Parameters.Add("@maximumaccum", maximumaccum);
                cmd.Parameters.Add("@status", status);
                cmd.Parameters.Add("@reason", Reason);
                cmd.Parameters.Add("@leavetypeId", leavetypeId);
                vdm.Update(cmd);
                string response = GetJson("Modified or changes updated Successfully");
                context.Response.Write(response);
            }
        }
        catch (Exception ex)
        {
            string response = GetJson(ex.Message);
            context.Response.Write(response);
        }
    }

    private void get_leavetype_details(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            cmd = new SqlCommand("SELECT leavetypeid, leavetype, leavetypecode, monthlyaccumulation, maximumaccumulation, status, reason FROM leavetypes");
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<leavetypes> leavetypeslist = new List<leavetypes>();
            foreach (DataRow dr in routes.Rows)
            {
                leavetypes getleavetypes = new leavetypes();
                getleavetypes.leavetypeId = Convert.ToInt32(dr["leavetypeid"].ToString());
                getleavetypes.leavetype = dr["leavetype"].ToString();
                getleavetypes.leavetypecode = dr["leavetypecode"].ToString();
                getleavetypes.monthlyaccumulation = dr["monthlyaccumulation"].ToString();
                getleavetypes.maximumaccumulation = dr["maximumaccumulation"].ToString();
                getleavetypes.status = dr["status"].ToString();
                getleavetypes.Reason = dr["reason"].ToString();
                leavetypeslist.Add(getleavetypes);
            }
            string response = GetJson(leavetypeslist);
            context.Response.Write(response);
        }
        catch
        {
        }
    }

    private void get_IDProof_details(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            cmd = new SqlCommand("SELECT idproofid, idproof, status FROM idproof");
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<IDProofs> IDProofslist = new List<IDProofs>();
            foreach (DataRow dr in routes.Rows)
            {
                IDProofs getIDProofs = new IDProofs();
                getIDProofs.IDProofId = Convert.ToInt32(dr["idproofid"].ToString());
                getIDProofs.IDProof = dr["idproof"].ToString();
                getIDProofs.status = dr["status"].ToString();
                // getIDProofs.Reason = dr["reason"].ToString();
                IDProofslist.Add(getIDProofs);
            }
            string response = GetJson(IDProofslist);
            context.Response.Write(response);
        }
        catch
        {
        }
    }

    private void save_IDProof_click(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            string IDProof = context.Request["IDProof"];
            //string Reason = context.Request["Reason"];
            string status = context.Request["status"];
            string IDProofId = context.Request["IDProofId"];
            string btnval = context.Request["btnval"];
            if (btnval == "Save")
            {
                cmd = new SqlCommand("insert into idproof (idproof,status) values (@idproof, @status)");
                cmd.Parameters.Add("@idproof", IDProof);
                cmd.Parameters.Add("@status", status);
                //cmd.Parameters.Add("@reason", Reason);
                vdm.insert(cmd);
                string response = GetJson("Insert Successfully");
                context.Response.Write(response);
            }
            else
            {
                cmd = new SqlCommand("Update idproof set idproof=@idproof, status=@status where idproofid=@IDProofId");
                cmd.Parameters.Add("@idproof", IDProof);
                cmd.Parameters.Add("@status", status);
                //cmd.Parameters.Add("@reason", Reason);
                cmd.Parameters.Add("@IDProofId", IDProofId);
                vdm.Update(cmd);
                string response = GetJson("UPDATE Successfully");
                context.Response.Write(response);
            }
        }
        catch (Exception ex)
        {
            string response = GetJson(ex.Message);
            context.Response.Write(response);
        }
    }

    private void get_Shift_details(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            cmd = new SqlCommand("SELECT shiftid, shifttype, status FROM shiftmaster");
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<Shifttypes> Shifttypeslist = new List<Shifttypes>();
            foreach (DataRow dr in routes.Rows)
            {
                Shifttypes getShifttypes = new Shifttypes();
                getShifttypes.shiftid = Convert.ToInt32(dr["shiftid"].ToString());
                getShifttypes.shifttype = dr["shifttype"].ToString();
                getShifttypes.status = dr["status"].ToString();
                // getShifttypes.Reason = dr["reason"].ToString();
                Shifttypeslist.Add(getShifttypes);
            }
            string response = GetJson(Shifttypeslist);
            context.Response.Write(response);
        }
        catch
        {
        }
    }

    private void for_save_edit_shifttype(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            string shifttype = context.Request["shifttype"];
            //string Reason = context.Request["Reason"];
            string status = context.Request["status"];
            string shifttypeid = context.Request["shifttypeid"];
            string btnval = context.Request["btnval"];
            if (btnval == "Save")
            {
                cmd = new SqlCommand("insert into shiftmaster (shifttype,status) values (@shifttype, @status)");
                cmd.Parameters.Add("@shifttype", shifttype);
                cmd.Parameters.Add("@status", status);
                //cmd.Parameters.Add("@reason", Reason);
                vdm.insert(cmd);
                string response = GetJson("Insert Successfully");
                context.Response.Write(response);
            }
            else
            {
                cmd = new SqlCommand("Update shiftmaster set shifttype=@shifttype, status=@status where shiftid=@shifttypeId");
                cmd.Parameters.Add("@shifttype", shifttype);
                cmd.Parameters.Add("@status", status);
                //cmd.Parameters.Add("@reason", Reason);
                cmd.Parameters.Add("@shifttypeId", shifttypeid);
                vdm.Update(cmd);
                string response = GetJson("UPDATE Successfully");
                context.Response.Write(response);
            }
        }
        catch (Exception ex)
        {
            string response = GetJson(ex.Message);
            context.Response.Write(response);
        }
    }

    private void save_employeedetails(HttpContext context)
    {
        vdm = new DBManager();
        string Name = context.Request["empName"];
        string FName = context.Request["empfname"];
        string EmailId = context.Request["emailid"];
        string Gender = context.Request["Gender"];
        string DOB = context.Request["dob"];
        string MaritalStatus = context.Request["maritalstatus"];
        string Department = context.Request["department"];
        string designation = context.Request["designation"];
        string PContactNo = context.Request["pcontactno"];
        string SContactNo = context.Request["scontactno"];
        string Caddress = context.Request["caddress"];
        string Paddress = context.Request["paddress"];
        string SOName = context.Request["ssconame"];
        string IOName = context.Request["interoname"];
        string GOName = context.Request["goname"];
        string PGOName = context.Request["poname"];
        string SYP = context.Request["sscpassyear"];
        string IYP = context.Request["interpassyear"];
        string GYP = context.Request["gpy"];
        string pyp = context.Request["ppy"];
        string PGYP = context.Request["btnval"];
        string SP = context.Request["sscpercentage"];
        string IP = context.Request["interpecentage"];
        string GP = context.Request["gp"];
        string PGP = context.Request["pp"];
        string UserName = context.Request["username"];
        string Pwd = context.Request["pwd"];
        string Cpwd = context.Request["cpwd"];
        string status = context.Request["status"];
        string btnval = context.Request["btnval"];
        string empid = context.Request["empid"];
        cmd = new SqlCommand("insert into employedetails (empname,fothername, emailid,dob,gender,maritalstatus,departmentid,designationid,primarycontactno,secandarycontactno,currentaddress,purminentaddress,sscorganizationname,sscyearofpassout,sscpercentage,interorganizationname,interyearofpassout,interpercentage,graduationorganizatinname,graduationpassoutyear,graduationpercentage,pgorganizationname,pgyearofpassout,pgpercentage,username,password,createdby, status) values (@empname, @fothername,@emailid,@dob,@gender,@maritalstatus,@departmentid,@designationid,@primarycontactno,@secandarycontactno,@currentaddress,@purminentaddress,@sscorganizationname,@sscyearofpassout,@sscpercentage,@interorganizationname,@interyearofpassout,@interpercentage,@graduationorganizatinname,@graduationpassoutyear,@graduationpercentage, @pgorganizationname,@pgyearofpassout,@pgpercentage,@username,@password,'1',@status)");
        cmd.Parameters.Add("@empname", Name);
        cmd.Parameters.Add("@fothername", FName);
        cmd.Parameters.Add("@emailid", EmailId);
        cmd.Parameters.Add("@dob", DOB);
        cmd.Parameters.Add("@gender", Gender);
        cmd.Parameters.Add("@maritalstatus", MaritalStatus);
        cmd.Parameters.Add("@departmentid", Department);
        cmd.Parameters.Add("@designationid", designation);
        cmd.Parameters.Add("@primarycontactno", PContactNo);
        cmd.Parameters.Add("@secandarycontactno", SContactNo);
        cmd.Parameters.Add("@currentaddress", Caddress);
        cmd.Parameters.Add("@purminentaddress", Paddress);
        cmd.Parameters.Add("@sscorganizationname", SOName);
        cmd.Parameters.Add("@sscyearofpassout", SYP);
        cmd.Parameters.Add("@sscpercentage", SP);
        cmd.Parameters.Add("@interorganizationname", IOName);
        cmd.Parameters.Add("@interyearofpassout", IYP);
        cmd.Parameters.Add("@interpercentage", IP);
        cmd.Parameters.Add("@graduationorganizatinname", GOName);
        cmd.Parameters.Add("@graduationpassoutyear", GYP);
        cmd.Parameters.Add("@graduationpercentage", GP);
        cmd.Parameters.Add("@pgorganizationname", PGOName);
        cmd.Parameters.Add("@pgyearofpassout", PGYP);
        cmd.Parameters.Add("@pgpercentage", PGP);
        cmd.Parameters.Add("@username", UserName);
        cmd.Parameters.Add("@password", Pwd);
        // cmd.Parameters.Add("@createdby", UserId);
        cmd.Parameters.Add("@status", status);
        vdm.insert(cmd);

        cmd = new SqlCommand("Select  MAX(empid) as empid from employedetails");
        DataTable dtemployes = vdm.SelectQuery(cmd).Tables[0];
        int employeid = Convert.ToInt32(dtemployes.Rows[0]["empid"].ToString());

        var js = new JavaScriptSerializer();
        var title1 = context.Request.Params[1];
        WebClient client = new WebClient();
        DateTime ServerDateCurrentdate = DBManager.GetTime(vdm.conn);
        empidproof_details_list obj = js.Deserialize<empidproof_details_list>(title1);
        foreach (empidproof_details o in obj.emp_idproof_details)
        {
            int Idproofid = Convert.ToInt32(o.IdProofId);
            string path = o.path;
            cmd = new SqlCommand("insert into empidproofdetails (empid,idproofid,path) values (@empid,@idproofid,@path)");
            cmd.Parameters.Add("@empid", employeid);
            cmd.Parameters.Add("@idproofid", Idproofid);
            cmd.Parameters.Add("@path", path);
            //cmd.Parameters.Add("@entryby", UserID);
            vdm.insert(cmd);
        }

        string response = GetJson("Insert Successfully");
        context.Response.Write(response);

    }

    private void fileupload(HttpContext context)
    {
        context.Response.ContentType = "text/plain";
        try
        {
            string dirFullPath = HttpContext.Current.Server.MapPath("E:/empimages");
            string[] files;
            int numFiles;
            files = System.IO.Directory.GetFiles(dirFullPath);
            numFiles = files.Length;
            numFiles = numFiles + 1;
            string str_image = "";

            foreach (string s in context.Request.Files)
            {
                HttpPostedFile file = context.Request.Files[s];
                string fileName = file.FileName;
                string fileExtension = file.ContentType;

                if (!string.IsNullOrEmpty(fileName))
                {
                    fileExtension = Path.GetExtension(fileName);
                    str_image = "MyPHOTO_" + numFiles.ToString() + fileExtension;
                    string pathToSave_100 = HttpContext.Current.Server.MapPath("E:/empimages") + str_image;
                    file.SaveAs(pathToSave_100);
                }
            }
            //  database record update logic here  ()

            context.Response.Write(str_image);
        }
        catch (Exception ac)
        {

        }
    }
    private void get_deptemploye_details(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            string Department = context.Request["deptid"].ToString();
            //branchwise
            //cmd = new SqlCommand("SELECT employedetails.empid, employepfdetails.uannumber, employedetails.fullname, branchmaster.statename, employedetails.salarymode, employepfdetails.pfnumber, employepfdetails.estnumber, employedetails.pfeligible, employedetails.esieligible FROM employedetails LEFT OUTER JOIN employepfdetails ON employedetails.empid = employepfdetails.employeid LEFT OUTER JOIN  branchmaster ON employedetails.branchid = branchmaster.branchid where employedetails.employee_dept=@empdept");
            //branchmapping
            string mainbranch = context.Session["mainbranch"].ToString();
            cmd = new SqlCommand("SELECT  employedetails.empid, employepfdetails.uannumber, employedetails.fullname, employedetails.salarymode, employepfdetails.pfnumber,employepfdetails.estnumber, employedetails.pfeligible, employedetails.esieligible,  branchmaster.statename FROM employedetails INNER JOIN branchmapping ON employedetails.branchid = branchmapping.subbranch INNER JOIN branchmaster ON employedetails.branchid = branchmaster.branchid LEFT OUTER JOIN employepfdetails ON employedetails.empid = employepfdetails.employeid WHERE (employedetails.employee_dept = @empdept) AND (branchmapping.mainbranch = @m) AND (employedetails.status = 'No')");
            cmd.Parameters.Add("@empdept", Department);
            cmd.Parameters.Add("@m", mainbranch);
            //cmd.Parameters.Add("@empdesigination", desigination);
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<getEmployeedetailscls> Employeedetailslist = new List<getEmployeedetailscls>();
            foreach (DataRow dr in routes.Rows)
            {
                getEmployeedetailscls getEmployeedetails = new getEmployeedetailscls();
                getEmployeedetails.empsno = dr["empid"].ToString();
                getEmployeedetails.empname = dr["fullname"].ToString();
                getEmployeedetails.statename = dr["statename"].ToString();
                getEmployeedetails.salarymode = dr["salarymode"].ToString();
                getEmployeedetails.pfnumber = dr["pfnumber"].ToString();
                getEmployeedetails.estnumber = dr["estnumber"].ToString();
                getEmployeedetails.uannumber = dr["uannumber"].ToString();
                getEmployeedetails.pfeligible = dr["pfeligible"].ToString();
                getEmployeedetails.esieligible = dr["esieligible"].ToString();
                Employeedetailslist.Add(getEmployeedetails);
            }
            string response = GetJson(Employeedetailslist);
            context.Response.Write(response);
        }
        catch
        {
        }
    }
    private void save_payrollSalary_click(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            DateTime ServerDateCurrentdate = DBManager.GetTime(vdm.conn);
            string userid = context.Session["userid"].ToString();
            string department = context.Request["deptid"];
            string employeid = context.Request["employeid"];
            string monthsalary = context.Request["monthsal"];
            string basicsal = context.Request["basicsal"];
            string hre = context.Request["hra"];
            string conveyance = context.Request["conveyance"];
            string medical = context.Request["medicalernings"];
            string washing = context.Request["washingallavance"];
            string providentfound = context.Request["pf"];
            string professionaltax = context.Request["profitionaltax"];
            string esi = context.Request["esi"];
            string incometax = context.Request["incometax"];
            string canteendeduction = context.Request["canteendeduction"];
            string mobilededuction = context.Request["mobilededuction"];
            string mediclaimdeduction = context.Request["mediclaimdeduction"];
            string salaryadvance = context.Request["salaryadvance"];
            string totaldays = context.Request["noofdays"];
            string lop = context.Request["lop"];
            string extradays = context.Request["extradays"];
            string otdays = context.Request["otdays"];
            string presentdays = context.Request["presentdays"];
            string month = context.Request["month"];
            string year = context.Request["year"];
            string totalEarnings = context.Request["totalEarnings"];
            string totaldeduction = context.Request["totaldeduction"];
            double te = Convert.ToDouble(totalEarnings);
            double td = Convert.ToDouble(totaldeduction);
            double np = te - td;
            string netpay = np.ToString();
            string btnval = context.Request["btnval"];
            if (btnval == "Procedd")
            {
                cmd = new SqlCommand("insert into payrolldetails (deptid, empid, monthsalary, mobilededuction, salaryadvance, extradays, otdays, basicsal, hra, conveyanceallowance, medicalallowance, washingallowance, providentfound, professionaltax, esi, incometax, canteendeduction, totaldays, lop, presentdays, month, year, totalEarnings, totaldeduction, netpay, createdby, createddate, status) values  (@department, @employe, @monthsalary, @mobilededuction, @salaryadvance, @extradays, @otdays, @basicsal, @hre, @conveyance,@medical, @washing, @providentfound, @professionaltax, @esi, @incometax, @canteendeduction, @totaldays, @lop, @presentdays, @month, @year, @totalEarnings, @totaldeduction, @netpay, @userid, @createddate, @status)");
                cmd.Parameters.Add("@employe", employeid);
                cmd.Parameters.Add("@department", department);
                cmd.Parameters.Add("@monthsalary", monthsalary);
                cmd.Parameters.Add("@basicsal", basicsal);
                cmd.Parameters.Add("@hre", hre);
                cmd.Parameters.Add("@conveyance", conveyance);
                cmd.Parameters.Add("@medical", medical);
                cmd.Parameters.Add("@washing", washing);
                cmd.Parameters.Add("@providentfound", providentfound);
                cmd.Parameters.Add("@professionaltax", professionaltax);
                cmd.Parameters.Add("@esi", esi);
                cmd.Parameters.Add("@incometax", incometax);
                cmd.Parameters.Add("@canteendeduction", canteendeduction);
                cmd.Parameters.Add("@totaldays", totaldays);
                cmd.Parameters.Add("@lop", lop);
                cmd.Parameters.Add("@presentdays", presentdays);
                cmd.Parameters.Add("@month", month);
                cmd.Parameters.Add("@year", year);
                cmd.Parameters.Add("@totalEarnings", totalEarnings);
                cmd.Parameters.Add("@totaldeduction", totaldeduction);
                cmd.Parameters.Add("@netpay", netpay);
                cmd.Parameters.Add("@mobilededuction", mobilededuction);
                cmd.Parameters.Add("@salaryadvance", salaryadvance);
                cmd.Parameters.Add("@extradays", extradays);
                cmd.Parameters.Add("@otdays", otdays);
                cmd.Parameters.Add("@createddate", ServerDateCurrentdate);
                cmd.Parameters.Add("@userid", userid);
                cmd.Parameters.Add("@status", "completed");
                vdm.insert(cmd);
                string response = GetJson("Insert Successfully");
                context.Response.Write(response);
            }
            else
            {

            }
        }
        catch (Exception ex)
        {
            string response = GetJson(ex.Message);
            context.Response.Write(response);
        }
    }

    private void save_payrollhold_click(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            DateTime ServerDateCurrentdate = DBManager.GetTime(vdm.conn);
            string userid = context.Session["userid"].ToString();
            string department = context.Request["deptid"];
            string employeid = context.Request["employeid"];
            string monthsalary = context.Request["monthsal"];
            string basicsal = context.Request["basicsal"];
            string hre = context.Request["hra"];
            string conveyance = context.Request["conveyance"];
            string medical = context.Request["medicalernings"];
            string washing = context.Request["washingallavance"];
            string providentfound = context.Request["pf"];
            string professionaltax = context.Request["profitionaltax"];
            string esi = context.Request["esi"];
            string incometax = context.Request["incometax"];
            string canteendeduction = context.Request["canteendeduction"];
            string mobilededuction = context.Request["mobilededuction"];
            string salaryadvance = context.Request["salaryadvance"];
            string totaldays = context.Request["noofdays"];
            string lop = context.Request["lop"];
            string extradays = context.Request["extradays"];
            string otdays = context.Request["otdays"];
            string presentdays = context.Request["presentdays"];
            string month = context.Request["month"];
            string year = context.Request["year"];
            string totalEarnings = context.Request["totalEarnings"];
            string totaldeduction = context.Request["totaldeduction"];

            string medicliem = context.Request["medicliem"];
            string loandeduction = context.Request["loandeduction"];
            string otherdeduction = context.Request["otherdeduction"];

            double te = Convert.ToDouble(totalEarnings);
            double td = Convert.ToDouble(totaldeduction);
            double np = te - td;
            string netpay = np.ToString();
            string btnval = context.Request["btnval"];
            if (btnval == "Hold")
            {
                cmd = new SqlCommand("insert into payrolldetails (deptid, empid, monthsalary, mobilededuction, salaryadvance, extradays, otdays, basicsal, hra, conveyanceallowance, medicalallowance, washingallowance, providentfound, professionaltax, esi, incometax, canteendeduction, totaldays, lop, presentdays, month, year, totalEarnings, totaldeduction, netpay, createdby, createddate, status, mediclaimdeduction, otherdeduction, loanamount) values  (@department, @employe, @monthsalary, @mobilededuction, @salaryadvance, @extradays, @otdays, @basicsal, @hre, @conveyance,@medical, @washing, @providentfound, @professionaltax, @esi, @incometax, @canteendeduction, @totaldays, @lop, @presentdays, @month, @year, @totalEarnings, @totaldeduction, @netpay, @userid, @createddate, @status, @medicliem, @otheramount, @loanamount)");
                cmd.Parameters.Add("@employe", employeid);
                cmd.Parameters.Add("@department", department);
                cmd.Parameters.Add("@monthsalary", monthsalary);
                cmd.Parameters.Add("@basicsal", basicsal);
                cmd.Parameters.Add("@hre", hre);
                cmd.Parameters.Add("@conveyance", conveyance);
                cmd.Parameters.Add("@medical", medical);
                cmd.Parameters.Add("@washing", washing);
                cmd.Parameters.Add("@providentfound", providentfound);
                cmd.Parameters.Add("@professionaltax", professionaltax);
                cmd.Parameters.Add("@esi", esi);
                cmd.Parameters.Add("@incometax", incometax);
                cmd.Parameters.Add("@canteendeduction", canteendeduction);
                cmd.Parameters.Add("@totaldays", totaldays);
                cmd.Parameters.Add("@lop", lop);
                cmd.Parameters.Add("@presentdays", presentdays);
                cmd.Parameters.Add("@month", month);
                cmd.Parameters.Add("@year", year);
                cmd.Parameters.Add("@totalEarnings", totalEarnings);
                cmd.Parameters.Add("@totaldeduction", totaldeduction);
                cmd.Parameters.Add("@netpay", netpay);
                cmd.Parameters.Add("@mobilededuction", mobilededuction);
                cmd.Parameters.Add("@salaryadvance", salaryadvance);
                cmd.Parameters.Add("@extradays", extradays);
                cmd.Parameters.Add("@otdays", otdays);
                cmd.Parameters.Add("@createddate", ServerDateCurrentdate);
                cmd.Parameters.Add("@userid", userid);
                cmd.Parameters.Add("@status", "Hold");
                cmd.Parameters.Add("@medicliem", medicliem);
                cmd.Parameters.Add("@otheramount", otherdeduction);
                cmd.Parameters.Add("@loanamount", loandeduction);
                vdm.insert(cmd);
                string response = GetJson("Insert Successfully");
                context.Response.Write(response);
            }
        }
        catch (Exception ex)
        {
            string response = GetJson(ex.Message);
            context.Response.Write(response);
        }
    }

    private void Employee_details_save_solo(HttpContext context)
    {
        try
        {
            string joindate = "";
            string empname = context.Request["empname"].ToString();

            string jdate = context.Request["joindate"].ToString();
            if (jdate != "")
            {
                DateTime dt = Convert.ToDateTime(jdate);
                joindate = dt.ToString("dd-MM-yyyy");
            }
            string initials = context.Request["initials"].ToString();
            string title = context.Request["title"].ToString();

            string birthdate = "";
            string bdate = context.Request["birthdate"].ToString();
            if (bdate != "")
            {
                DateTime dt = Convert.ToDateTime(bdate);
                birthdate = dt.ToString("dd-MM-yyyy");
            }
            string gender = context.Request["gender"].ToString();
            string maritalstatus = context.Request["maritalstatus"].ToString();
            string spousename = context.Request["spousename"].ToString();
            string country = context.Request["country"].ToString();
            // string idproof = context.Request["idproof"].ToString();
            string homeaddress = context.Request["homeaddress"].ToString();
            string presentaddress = context.Request["presentaddress"].ToString();
            string homephone = context.Request["homephone"].ToString();
            string cellphone = context.Request["cellphone"].ToString();
            string email = context.Request["email"].ToString();
            string city = context.Request["city"].ToString();
            string state = context.Request["state"].ToString();
            string zipcode = context.Request["zipcode"].ToString();
            string degree = context.Request["degree"].ToString();
            string specification = context.Request["specification"].ToString();
            string experience = context.Request["experience"].ToString();
            if (experience == "")
            {
                experience = null;
            }
            string experiencedet = context.Request["experience_details"].ToString();
            //string emptype = context.Request["emptype"].ToString();
            string status = context.Request["status"].ToString();
            string btnval = context.Request["btnval"].ToString();
            string empsno = context.Request["empsno"];

            string about_me = context.Request["about_me"];
            string spouse_details = context.Request["spouse_details"];
            string voterid = context.Request["voterid"];
            string pass_check = context.Request["pass_check"];
            string re_password = context.Request["re_password"];
            string leveltype = context.Request["leveltype"];
            string aadhar_id = context.Request["aadhar_id"];

           
            

            if (context.Session["branch_id"] != null)
            {
                string branchid = context.Session["branch_id"].ToString();
                SqlCommand cmd = new SqlCommand("update employees set joinDate=@joinDate, fullname=@fullname, initials=@initials, title=@title, gender=@gender, dob=@dob, marital_status=@marital_status, spouse_fullname=@spouse_fullname, nationality=@nationality,  home_address=@home_address, presentaddress=@presentaddress, home_phone=@home_phone, cellphone=@cellphone, email=@email, city=@city, state=@state, zipcode=@zipcode, degree=@degree, specification=@specification, experience=@experiance, experience_details=@experiance_details, status=@status, branch_sno=@branch_sno, spouse_details=@spouse_details, voter_id=@voter_id, aadhaar_id=@aadhaar_id, aboutus=@aboutus where empid=@idemployees");
                cmd.Parameters.Add("@joinDate", joindate);
                cmd.Parameters.Add("@fullname", empname);
                cmd.Parameters.Add("@initials", initials);
                cmd.Parameters.Add("@title", title);
                cmd.Parameters.Add("@gender", gender);
                cmd.Parameters.Add("@dob", birthdate);
                cmd.Parameters.Add("@marital_status", maritalstatus);
                cmd.Parameters.Add("@spouse_fullname", spousename);
                cmd.Parameters.Add("@nationality", country);
                cmd.Parameters.Add("@home_address", homeaddress);
                cmd.Parameters.Add("@presentaddress", presentaddress);
                cmd.Parameters.Add("@home_phone", homephone);
                cmd.Parameters.Add("@cellphone", cellphone);
                cmd.Parameters.Add("@email", email);
                cmd.Parameters.Add("@city", city);
                cmd.Parameters.Add("@state", state);
                cmd.Parameters.Add("@zipcode", zipcode);
                cmd.Parameters.Add("@degree", degree);
                cmd.Parameters.Add("@specification", specification);
                cmd.Parameters.Add("@experiance", experience);
                cmd.Parameters.Add("@experiance_details", experiencedet);
                cmd.Parameters.Add("@status", status);
                cmd.Parameters.Add("@branch_sno", branchid);
                cmd.Parameters.Add("@idemployees", empsno);
                cmd.Parameters.Add("@spouse_details", spouse_details);
                cmd.Parameters.Add("@voter_id", voterid);
                cmd.Parameters.Add("@aadhaar_id", aadhar_id);
                cmd.Parameters.Add("@aboutus", about_me);
                vdm.Update(cmd);
                if (pass_check == "Y")
                {
                    cmd = new SqlCommand("update employee_logins set password=@password,leveltype=@leveltype where loginid=@sno");
                    cmd.Parameters.Add("@password", re_password);
                    cmd.Parameters.Add("@sno", context.Session["user_id"]);
                    cmd.Parameters.Add("@leveltype", leveltype);
                    vdm.Update(cmd);
                }
                string response = GetJson("Your Details Updated Successfully");
                context.Response.Write(response);

            }
        }
        catch (Exception ex)
        {
            string response = GetJson(ex.ToString());
            context.Response.Write(response);
        }

    }
    public class rejoiningdetailes
    {
        public string empcode { get; set; }
        public string empid { get; set; }
        public string empname { get; set; }
        public string username { get; set; }
        public string password { get; set; }
        public string department { get; set; }
        public string designation { get; set; }
        public string joindate { get; set; }
        public string resignationdate { get; set; }
        public string sno { get; set; }
        public string employeid { get; set; }
    }
    private void get_search_employee(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            //branchmapping
            string mainbranch = context.Session["mainbranch"].ToString();
            //naseema change
            //cmd = new SqlCommand("SELECT designation.designation, departments.department, employedetails.joindate, employedetails.empid, employedetails.fullname, employedetails.employee_num,employedetails.email FROM employedetails INNER JOIN designation ON employedetails.designationid = designation.designationid  LEFT OUTER JOIN departments ON employedetails.employee_dept = departments.deptid LEFT OUTER JOIN branchmapping ON employedetails.branchid = branchmapping.subbranch WHERE(employedetails.status = 'Yes') AND (branchmapping.mainbranch = @m)");
            //in before query
            cmd = new SqlCommand("SELECT designation.designation, departments.department, employedetails.joindate, employedetails.empid, employedetails.fullname, employedetails.employee_num,employedetails.email, empresignationdetails.resignationdate FROM employedetails INNER JOIN designation ON employedetails.designationid = designation.designationid INNER JOIN empresignationdetails ON employedetails.empid = empresignationdetails.empid LEFT OUTER JOIN departments ON employedetails.employee_dept = departments.deptid LEFT OUTER JOIN branchmapping ON employedetails.branchid = branchmapping.subbranch WHERE (employedetails.status = 'Yes') AND (branchmapping.mainbranch = @m)");
            cmd.Parameters.Add("@m", mainbranch);
            //branchwise
            //cmd = new SqlCommand("SELECT designation.designation, departments.department, empresignationdetails.willingtoquitdate, employedetails.joindate,employedetails.empid, employedetails.fullname,employedetails.employee_num, employedetails.email FROM employedetails INNER JOIN designation ON employedetails.designationid = designation.designationid INNER JOIN departments ON employedetails.employee_dept = departments.deptid INNER JOIN empresignationdetails ON employedetails.empid = empresignationdetails.empid where employedetails.status='Yes' ");
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<rejoiningdetailes> rejoinDetails = new List<rejoiningdetailes>();
            foreach (DataRow dr in routes.Rows)
            {
                rejoiningdetailes getrejoindetails = new rejoiningdetailes();
                getrejoindetails.employeid = dr["empid"].ToString();
                getrejoindetails.empcode = dr["employee_num"].ToString();
                getrejoindetails.empname = dr["fullname"].ToString();
                getrejoindetails.username = dr["email"].ToString();
                // getrejoindetails.password = dr["password"].ToString();
                getrejoindetails.joindate = dr["joindate"].ToString();
                getrejoindetails.designation = dr["designation"].ToString();
                getrejoindetails.department = dr["department"].ToString();
                getrejoindetails.resignationdate = dr["resignationdate"].ToString();
                //getrejoindetails.supplierid = dr["supplierid"].ToString();
                rejoinDetails.Add(getrejoindetails);
            }
            string response = GetJson(rejoinDetails);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }
    public class EmployeeRejoining
    {
        public string sno { set; get; }
        public string empid { set; get; }
        public string resignationdate { set; get; }
        public string fullname { set; get; }
        public string reportingto { set; get; }
        public string department { set; get; }
        public string empnum { set; get; }
        public string joindate { set; get; }
        public string status { set; get; }
        public string email { set; get; }
        public string designation { set; get; }
    }

    private void get_RejoiningDetails(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            //branchmapping
            string mainbranch = context.Session["mainbranch"].ToString();
            //cmd = new SqlCommand("SELECT  emprejoiningdetails.reportingto, emprejoiningdetails.sno, employedetails.fullname, employedetails.employee_num, employedetails.joindate, employedetails.email,  departments.department, designation.designation, empresignationdetails.resignationdate, emprejoiningdetails.empid, emprejoiningdetails.status FROM employedetails INNER JOIN designation ON employedetails.designationid = designation.designationid INNER JOIN empresignationdetails ON employedetails.empid = empresignationdetails.empid INNER JOIN departments ON employedetails.employee_dept = departments.deptid INNER JOIN emprejoiningdetails ON empresignationdetails.empid = emprejoiningdetails.empid INNER JOIN branchmapping ON employedetails.branchid = branchmapping.subbranch WHERE(emprejoiningdetails.status = 'P') AND (branchmapping.mainbranch = @m)");

            //branchwise
            cmd = new SqlCommand("SELECT emprejoiningdetails.reportingto, emprejoiningdetails.rejoiningdate,emprejoiningdetails.sno, employedetails.fullname, employedetails.employee_num, employedetails.joindate, employedetails.email,departments.department, designation.designation, emprejoiningdetails.empid, emprejoiningdetails.status FROM employedetails INNER JOIN designation ON employedetails.designationid = designation.designationid INNER JOIN departments ON employedetails.employee_dept = departments.deptid INNER JOIN branchmapping ON employedetails.branchid = branchmapping.subbranch INNER JOIN emprejoiningdetails ON employedetails.empid = emprejoiningdetails.empid WHERE (emprejoiningdetails.status = 'P') AND (branchmapping.mainbranch = @m)");
            cmd.Parameters.Add("@m", mainbranch);
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<EmployeeRejoining> emprejoininglist = new List<EmployeeRejoining>();
            foreach (DataRow dr in routes.Rows)
            {
                EmployeeRejoining getemprejoining = new EmployeeRejoining();
                getemprejoining.sno = dr["sno"].ToString();
                getemprejoining.empid = dr["empid"].ToString();
                getemprejoining.empnum = dr["employee_num"].ToString();
                getemprejoining.joindate = ((DateTime)dr["rejoiningdate"]).ToString("yyyy-MM-dd"); //dr["joindate"].ToString();
                getemprejoining.department = dr["department"].ToString();
                getemprejoining.designation = dr["designation"].ToString();
                getemprejoining.reportingto = dr["reportingto"].ToString();
                getemprejoining.status = "Pending";
                //getempresignation.willingtoquitearlierthannoticeperiod = dr["willingtoquitearlierthannoticeperiod"].ToString();
                //getemprejoining.resignationdate = ((DateTime)dr["resignationdate"]).ToString("yyyy-MM-dd"); //dr["willingtoquitdate"].ToString();
                getemprejoining.fullname = dr["fullname"].ToString();
                getemprejoining.email = dr["email"].ToString();
                emprejoininglist.Add(getemprejoining);
            }
            string response = GetJson(emprejoininglist);
            context.Response.Write(response);
        }
        catch
        {
        }
    }
    private void save_rejoining_approve_click(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            string sno = context.Request["sno"];
            string empid = context.Request["empid"];
            cmd = new SqlCommand("update emprejoiningdetails set  status=@status  where sno=@sno");
            cmd.Parameters.Add("@status", "A");
            cmd.Parameters.Add("@sno", sno);
            vdm.Update(cmd);
            cmd = new SqlCommand("update employedetails set  status=@status  where empid=@empid");
            cmd.Parameters.Add("@status", "No");
            cmd.Parameters.Add("@empid", empid);
            vdm.Update(cmd);
            string msg = " Rejoining successfully Approved";
            string Response = GetJson(msg);
            context.Response.Write(Response);
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }
    private void save_rejoining_reject_click(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            DateTime ServerDateCurrentdate = DBManager.GetTime(vdm.conn);
            string sno = context.Request["sno"];
            string reason = context.Request["reason"];
            cmd = new SqlCommand("update emprejoiningdetails set status=@status, reason=@reason where sno=@sno");
            cmd.Parameters.Add("@approvaldate", ServerDateCurrentdate);
            cmd.Parameters.Add("@status", "R");
            cmd.Parameters.Add("@reason", reason);
            cmd.Parameters.Add("@sno", sno);
            vdm.Update(cmd);
            string msg = " Rejoining successfully rejected";
            string Response = GetJson(msg);
            context.Response.Write(Response);
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);

        }
    }
    public class Loandetailes
    {
        public string empname { get; set; }
        public string designation { get; set; }
        public string employeid { get; set; }
        public string cellphone { get; set; }
        public string presentaddress { get; set; }
        public string dob { get; set; }
        public string addreess { get; set; }
    }

    private void get_loan_fill_Details(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            //cmd = new SqlCommand("SELECT emppaystructure.netpay, departments.department,designation.designationid, pay_structure.washingallowance, pay_structure.canteendeduction, pay_structure.salaryperyear, departments.deptid, employedetails.employee_num, employedetails.joindate, employedetails.fullname, employedetails.empid, pay_structure.providentfund, pay_structure.medicalerning, pay_structure.conveyance, pay_structure.hra,pay_structure.erningbasic, pay_structure.incometax, pay_structure.esi, pay_structure.profitionaltax, pay_structure.deductionbasic, emppaystructure.totaldeduction, emppaystructure.monthlygrosspay, emppaystructure.totalearnings, designation.designation FROM employedetails INNER JOIN emppaystructure ON employedetails.empid = emppaystructure.empid INNER JOIN departments ON employedetails.employee_dept = departments.deptid INNER JOIN pay_structure ON employedetails.empid = pay_structure.empid INNER JOIN designation ON employedetails.designationid = designation.designationid");
            cmd = new SqlCommand("SELECT designation.designationid, employedetails.empid, designation.designation,employedetails.fullname, employedetails.dob, employedetails.home_address, employedetails.cellphone, employedetails.presentaddress FROM employedetails INNER JOIN designation ON employedetails.designationid = designation.designationid");
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<Loandetailes> salaDetails = new List<Loandetailes>();
            foreach (DataRow dr in routes.Rows)
            {
                Loandetailes getapsaldetails = new Loandetailes();
                getapsaldetails.empname = dr["fullname"].ToString();
                getapsaldetails.designation = dr["designation"].ToString();
                getapsaldetails.employeid = dr["empid"].ToString();
                getapsaldetails.cellphone = dr["cellphone"].ToString();
                getapsaldetails.presentaddress = dr["presentaddress"].ToString();
                getapsaldetails.dob = dr["dob"].ToString();
                getapsaldetails.addreess = dr["home_address"].ToString();
                salaDetails.Add(getapsaldetails);
            }
            string response = GetJson(salaDetails);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }

    public class salarydetales
    {
        public string department { get; set; }
        public string employeid { get; set; }
        public string empname { get; set; }
        public string empsno { get; set; }
        public string salaryadvance { get; set; }
        public string statename { get; set; }
        public string emailid { get; set; }
        public string joindate { get; set; }
        public string branchname { get; set; }
        public string designation { get; set; }
        public string contactno { get; set; }
        public string loanamount { get; set; }
        public string otherdeduction { get; set; }
        public string mobilededuction { get; set; }
        public string salary { get; set; }
        public string totalearni { get; set; }
        public string erbasic { get; set; }
        public string hre { get; set; }
        public string conveyance { get; set; }
        public string medical { get; set; }
        public string monthsal { get; set; }
        public string providentfound { get; set; }
        public string professionaltax { get; set; }
        public string esi { get; set; }
        public string incometax { get; set; }
        public string canteendeduction { get; set; }
        public string washingallowance { get; set; }
        public string salarymode { get; set; }
        public string noofdayspaid { get; set; }
        public string noofworkingdays { get; set; }
        public string month { get; set; }
        public string MonthName { get; set; }
        public string year { get; set; }
        public string daysinmonth { get; set; }
        public string lop { get; set; }
        public string otdays { get; set; }
        public string cloroff { get; set; }
        public string effectivedays { get; set; }
        public string state { get; set; }
        public string pfeligible { get; set; }
        public string esieligible { get; set; }
        public string mediclaimdeduction { get; set; }
        public string netamount { get; set; }
        public string totaldeduction { get; set; }
        public string tdsdeduction { get; set; }
        public string gross { get; set; }
        public string Pf { get; set; }
        public string pf { get; set; }
        public string TdsAmnt { get; set; }
        public string txpaid { get; set; }
        public string empid { get; set; }
    }


    public class apprasialdetales
    {
        public string department { get; set; }
        public string employeid { get; set; }
        public string salary { get; set; }
        public string netpay { get; set; }
        public string employee_num { get; set; }
        public string fullname { get; set; }
        public string joindate { get; set; }
        public string erbasic { get; set; }
        public string hre { get; set; }
        public string conveyance { get; set; }
        public string medical { get; set; }
        public string monthsal { get; set; }
        public string providentfound { get; set; }
        public string professionaltax { get; set; }
        public string esi { get; set; }
        public string incometax { get; set; }
        public string TotalEarnings { get; set; }
        public string Totaldeduction { get; set; }
        public string netsalary { get; set; }
        public string canteendeduction { get; set; }
        public string washingallowance { get; set; }
        public string monthsarl { get; set; }
        public string changepackage { get; set; }
        public string designation { get; set; }
        public string salarymode { get; set; }
        public string branchname { get; set; }
        public string Address { get; set; }
        public string Title { get; set; }
    }


    private void get_Appraisals_fill_Details(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            string empid = context.Request["empid"];
            //string empcode1 = context.Request["empcode1"].ToString();
            cmd = new SqlCommand("SELECT        departments.department, designation.designationid, pay_structure.gross, departments.deptid, employedetails.employee_num, employedetails.joindate, employedetails.fullname, employedetails.empid, designation.designation, employedetails.salarymode, branchmaster.branchname FROM            employedetails INNER JOIN  departments ON employedetails.employee_dept = departments.deptid INNER JOIN  pay_structure ON employedetails.empid = pay_structure.empid INNER JOIN  designation ON employedetails.designationid = designation.designationid INNER JOIN   branchmaster ON employedetails.branchid = branchmaster.branchid WHERE        (employedetails.empid = @empid)");
            cmd.Parameters.Add("@empid", empid);
            // cmd.Parameters.Add("@empcode", empcode1);
            //cmd = new SqlCommand("SELECT emppaystructure.netpay, departments.department, designation.designationid, pay_structure.salaryperyear, departments.deptid, employedetails.employee_num, employedetails.joindate, employedetails.fullname, employedetails.empid, emppaystructure.totaldeduction, emppaystructure.monthlygrosspay,emppaystructure.totalearnings, designation.designation, employedetails.salarymode FROM employedetails INNER JOIN emppaystructure ON employedetails.empid = emppaystructure.empid INNER JOIN departments ON employedetails.employee_dept = departments.deptid INNER JOIN pay_structure ON employedetails.empid = pay_structure.empid INNER JOIN designation ON employedetails.designationid = designation.designationid");
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<apprasialdetales> salaDetails = new List<apprasialdetales>();
            foreach (DataRow dr in routes.Rows)
            {
                apprasialdetales getapsaldetails = new apprasialdetales();
                getapsaldetails.department = dr["department"].ToString();
                getapsaldetails.designation = dr["designation"].ToString();
                getapsaldetails.employeid = dr["empid"].ToString();
                getapsaldetails.salary = dr["gross"].ToString();
                getapsaldetails.fullname = dr["fullname"].ToString();
                getapsaldetails.joindate = dr["joindate"].ToString();
                getapsaldetails.employee_num = dr["employee_num"].ToString();
                getapsaldetails.branchname = dr["branchname"].ToString();
                getapsaldetails.netpay = dr["gross"].ToString();
                getapsaldetails.salarymode = dr["salarymode"].ToString();
                //getapsaldetails.monthsarl = dr["gross"].ToString();
                salaDetails.Add(getapsaldetails);
            }
            string response = GetJson(salaDetails);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }


    private void get_salary_fill_Details(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            string empid = context.Request["empid"];
            cmd = new SqlCommand("SELECT  pay_structure.departmentid, pay_structure.tdsdeduction, pay_structure.mediclaimdeduction, employedetails.fullname, employedetails.salarymode, departments.department, pay_structure.empid, pay_structure.gross, pay_structure.profitionaltax, pay_structure.esi, pay_structure.incometax, pay_structure.erningbasic, pay_structure.hra, pay_structure.conveyance, pay_structure.providentfund, pay_structure.medicalerning, pay_structure.washingallowance, pay_structure.travelconveyance FROM  pay_structure INNER JOIN employedetails ON pay_structure.empid = employedetails.empid INNER JOIN departments ON pay_structure.departmentid = departments.deptid WHERE (pay_structure.empid = @empid)");
            cmd.Parameters.Add("@empid", empid);
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<salarydetales> salDetails = new List<salarydetales>();
            foreach (DataRow dr in routes.Rows)
            {
                salarydetales getsaldetails = new salarydetales();
                getsaldetails.department = dr["departmentid"].ToString();
                getsaldetails.employeid = dr["empid"].ToString();
                getsaldetails.salary = dr["salary"].ToString();
                double grosssal = Convert.ToDouble(dr["salary"].ToString());
                double monthsalary = grosssal / 12;
                monthsalary = Math.Round(monthsalary, 2);
                getsaldetails.monthsal = monthsalary.ToString();
                getsaldetails.professionaltax = dr["profitionaltax"].ToString();
                getsaldetails.esi = dr["esi"].ToString();
                getsaldetails.incometax = dr["incometax"].ToString();
                getsaldetails.erbasic = dr["erningbasic"].ToString();
                getsaldetails.hre = dr["hra"].ToString();
                getsaldetails.conveyance = dr["conveyance"].ToString();
                getsaldetails.medical = dr["medicalerning"].ToString();
                getsaldetails.providentfound = dr["providentfund"].ToString();
                getsaldetails.washingallowance = dr["washingallowance"].ToString();
                getsaldetails.canteendeduction = dr["travelconveyance"].ToString();
                getsaldetails.mediclaimdeduction = dr["mediclaimdeduction"].ToString();
                getsaldetails.tdsdeduction = dr["tdsdeduction"].ToString();
                getsaldetails.salarymode = dr["salarymode"].ToString();
                salDetails.Add(getsaldetails);
            }
            string response = GetJson(salDetails);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }
    public class resignationetailes
    {
        public string empnum { get; set; }
        public string empid { get; set; }
        public string empname { get; set; }
        public string department { get; set; }
        public string designation { get; set; }
        public string joindate { get; set; }
        public string sno { get; set; }
    }
    private void get_reg_search_employee(HttpContext context)
    {
        try
        {
            //string employeename = context.Request["empname"].ToString();
            vdm = new DBManager();
            string mainbranch = context.Session["mainbranch"].ToString();
            //branchwise
            //cmd = new SqlCommand("SELECT employedetails.empid,employedetails.employee_dept, departments.department, employedetails.employee_num, employedetails.joindate, employedetails.fullname, employedetails.empid, designation.designation FROM employedetails INNER JOIN departments ON employedetails.employee_dept = departments.deptid INNER JOIN designation ON employedetails.designationid = designation.designationid");
            //cmd = new SqlCommand("SELECT  TOP (1) employedetails.employee_num, employedetails.fullname, employe_logins.username, employe_logins.password, employe_logins.role, departments.department, empresignationdetails.willingtoquitdate, employedetails.joindate, designation.designation FROM employedetails INNER JOIN empresignationdetails ON employedetails.empid = empresignationdetails.empid INNER JOIN employe_logins ON employedetails.empid = employe_logins.empid INNER JOIN designation ON employedetails.empid = designation.designationid CROSS JOIN departments");
            //branch mapping
            cmd = new SqlCommand(" SELECT employedetails.empid, employedetails.employee_dept, departments.department, employedetails.employee_num, employedetails.joindate, employedetails.fullname, employedetails.empid AS Expr1, designation.designation FROM employedetails INNER JOIN departments ON employedetails.employee_dept = departments.deptid INNER JOIN designation ON employedetails.designationid = designation.designationid INNER JOIN branchmapping ON employedetails.branchid = branchmapping.subbranch WHERE (branchmapping.mainbranch = @m)");
            cmd.Parameters.Add("@m", mainbranch);
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<resignationetailes> reginDetails = new List<resignationetailes>();
            foreach (DataRow dr in routes.Rows)
            {
                resignationetailes getregnationdetails = new resignationetailes();
                getregnationdetails.empid = dr["empid"].ToString();
                getregnationdetails.empnum = dr["employee_num"].ToString();
                getregnationdetails.empname = dr["fullname"].ToString();
                getregnationdetails.joindate = dr["joindate"].ToString();
                getregnationdetails.designation = dr["designation"].ToString();
                getregnationdetails.department = dr["department"].ToString();
                //getregnationdetails.willingtoquitearlierthannoticeperiod = dr["willingtoquitearlierthannoticeperiod"].ToString();
                //getrejoindetails.supplierid = dr["supplierid"].ToString();
                reginDetails.Add(getregnationdetails);
            }
            string response = GetJson(reginDetails);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }

    public class getEmployeedetailscls
    {
        public string empsno { set; get; }
        public string empnum { set; get; }
        public string empname { set; get; }
        public string empnamecode { get; set; }
        public string joindate { set; get; }
        public string initials { set; get; }
        public string title { set; get; }
        public string birthdate { set; get; }
        public string gender { set; get; }
        public string maritalstatus { set; get; }
        public string spousename { set; get; }
        public string country { set; get; }
        public string idproof { set; get; }
        public string homeaddress { set; get; }
        public string presentaddress { set; get; }
        public string homephone { set; get; }
        public string cellphone { set; get; }
        public string email { set; get; }
        public string city { set; get; }
        public string designation { get; set; }
        public string state { set; get; }
        public string zipcode { set; get; }
        public string degree { set; get; }
        public string specification { set; get; }
        public string experience { set; get; }
        public string experiencedet { set; get; }
        public string deptid { set; get; }
        public string status { set; get; }
        public string photo { set; get; }
        public string password { set; get; }
        public string re_password { set; get; }
        public string username { set; get; }
        public string designationid { set; get; }
        public string pass_sno { set; get; }
        public string employeetype { set; get; }
        public string eld_sno { set; get; }
        public string dept_sno { set; get; }
        public string department { set; get; }
        public string departmentid { get; set; }
        public string ftplocation { set; get; }
        public string joingdays { set; get; }
        public string joingyears { set; get; }
        public string BirthDays { set; get; }
        public string Birth_Days { set; get; }

        public string spouse_details { set; get; }
        public string voter_id { set; get; }
        public string aadhaar_id { set; get; }
        public string aboutus { set; get; }

        public string institute { set; get; }
        public string university { set; get; }
        public string graders { set; get; }
        public string duration { set; get; }
        public string remarks { set; get; }
        public string bloodgroup { set; get; }
        public string pancard { set; get; }
        public string aadarenrollnumber { set; get; }
        public string nameasforaadhar { set; get; }
        public string conformdate { set; get; }
        public string physicalchalnge { set; get; }
        public string branchname { set; get; }
        public string statename { set; get; }
        public string salarymode { set; get; }
        public string age { set; get; }
        public string currentdate { set; get; }
        public string fathername { set; get; }
        public string marriagedate { set; get; }
        public string pfnumber { get; set; }
        public string estnumber { get; set; }
        public string currentlocationsince { get; set; }
        public string currentdesignationsince { get; set; }
        public string currentdepartmentsince { get; set; }
        public string currentemployeesince { get; set; }
        public string pfeligible { get; set; }
        public string esieligible { get; set; }
        public string branchid { set; get; }
        public string uannumber { set; get; }
        public string caste { set; get; }
        public string emergencynumber { set; get; }
        public string drivinglicense { set; get; }
        public string dateofvalidilty { set; get; }
        public string Department { get; set; }
        public string Deptid { get; set; }
        public string filter { get; set; }
        public string joingmonths { get; set; }
        public string ledgercode { get; set; }
        public string ledgername { get; set; }

    }

    private void get_all_Employeedetails(HttpContext context)
    {
        try
        {
            string branchid = "1";
            if (branchid != null)
            {
                string emp_status = context.Request["emp_status"];
                string employee_type = context.Request["employee_type"];
                //string filter = context.Request["filter"].ToString();
                string mainbranch = context.Session["mainbranch"].ToString();
                SqlCommand cmd;
                if (emp_status == "No")
                {
                    //brnachmapping query
                    cmd = new SqlCommand("SELECT  ed.empid, ed.photos, ed.age, ed.ledgername,ed.ledgercode,ed.fathername, el.username, el.password AS re_password,ed.marriagedate, ed.employee_num, ed.designationid, ed.branchid, ed.joindate, ed.fullname, ed.initials, ed.title, ed.gender, ed.dob, ed.marital_status,  ed.spouse_fullname, ed.licencenumber, ed.validitydate, ed.nationality, ed.idproof, ed.home_address, ed.presentaddress, ed.home_phone, ed.cellphone, ed.currentlocationsince, ed.currentdesignationsince,ed.currentdepartmentsince, ed.currentemployeesince, ed.pfeligible, ed.esieligible, ed.email, ed.city, ed.state, ed.zipcode, ed.degree, ed.specification, ed.experience, ed.experience_details, ed.status, ed.employee_dept, el.loginid AS emp_login_sno, el.password, ed.photos AS Expr1, ed.aboutus, ed.aadhaar_id, ed.voter_id, ed.spouse_details, ed.confirmdate, ed.physicalchallange, ed.bloodgroup, ed.pancard,  ed.aadarenrollnumber, ed.caste, ed.emergencynumber, ed.nameasforaadhar, ed.remarks, ed.grades, ed.university, ed.salarymode, ed.employee_type, ed.institute, ed.durationofcourse,  branchmaster.branchname FROM  employedetails AS ed INNER JOIN branchmaster ON ed.branchid = branchmaster.branchid INNER JOIN branchmapping ON ed.branchid = branchmapping.subbranch FULL OUTER JOIN  employe_logins AS el ON el.empid = ed.empid WHERE (ed.status = 'No') AND (branchmapping.mainbranch = @m) order by ed.employee_num");
                    //cmd = new SqlCommand("SELECT ed.empid, ed.photos, ed.age, ed.fathername, ed.marriagedate, ed.employee_num, ed.designationid, ed.branchid, ed.joindate, ed.fullname, ed.initials, ed.title, ed.gender, ed.dob, ed.marital_status, ed.spouse_fullname, ed.licencenumber, ed.validitydate, ed.nationality, ed.idproof, ed.home_address, ed.presentaddress, ed.home_phone, ed.cellphone, ed.currentlocationsince, ed.currentdesignationsince, ed.currentdepartmentsince, ed.currentemployeesince, ed.pfeligible, ed.esieligible, ed.email, ed.city, ed.state, ed.zipcode, ed.degree, ed.specification, ed.experience, ed.experience_details, ed.status, ed.employee_dept, el.loginid AS emp_login_sno, el.password, ed.photos AS Expr1, ed.aboutus, ed.aadhaar_id, ed.voter_id, ed.spouse_details, ed.confirmdate, ed.physicalchallange, ed.bloodgroup, ed.pancard, ed.aadarenrollnumber, ed.caste, ed.emergencynumber, ed.nameasforaadhar, ed.remarks, ed.grades, ed.university, ed.salarymode, ed.employee_type, ed.institute, ed.durationofcourse, branchmaster.branchname FROM employedetails AS ed INNER JOIN branchmaster ON ed.branchid = branchmaster.branchid FULL OUTER JOIN  employe_logins AS el ON el.empid = ed.empid WHERE (ed.status = 'No') ");
                    // cmd.Parameters.Add("@employee_type", employee_type);
                    cmd.Parameters.Add("@m", mainbranch);
                }

                else
                {

                    //brnachmapping query
                    cmd = new SqlCommand("SELECT ed.empid, ed.photos, ed.age, ed.fathername,  ed.ledgername,ed.ledgercode,el.username, el.password AS re_password,ed.marriagedate, ed.employee_num, ed.designationid, ed.branchid, ed.joindate, ed.fullname, ed.initials, ed.title,  ed.gender, ed.dob, ed.marital_status, ed.spouse_fullname, ed.licencenumber, ed.validitydate, ed.nationality, ed.idproof, ed.home_address, ed.presentaddress,  ed.home_phone, ed.cellphone, ed.currentlocationsince, ed.currentdesignationsince, ed.currentdepartmentsince, ed.currentemployeesince, ed.pfeligible,  ed.esieligible, ed.email, ed.city, ed.state, ed.zipcode, ed.degree, ed.specification, ed.experience, ed.experience_details, ed.status, ed.employee_dept,  el.loginid AS emp_login_sno, el.password, ed.photos AS Expr1, ed.aboutus, ed.aadhaar_id, ed.voter_id, ed.spouse_details, ed.confirmdate, ed.physicalchallange,  ed.bloodgroup, ed.pancard, ed.aadarenrollnumber, ed.caste, ed.emergencynumber, ed.nameasforaadhar, ed.remarks, ed.grades, ed.university, ed.salarymode, ed.employee_type, ed.institute, ed.durationofcourse, branchmaster.branchname FROM employedetails AS ed INNER JOIN  branchmaster ON ed.branchid = branchmaster.branchid INNER JOIN branchmapping ON ed.branchid = branchmapping.subbranch FULL OUTER JOIN  employe_logins AS el ON el.empid = ed.empid WHERE (ed.status = 'Yes') AND (branchmapping.mainbranch = @m)");
                    //cmd = new SqlCommand("SELECT ed.empid, ed.photos, ed.age, ed.fathername, ed.marriagedate, ed.employee_num, ed.designationid, ed.branchid, ed.joindate, ed.fullname, ed.initials, ed.title, ed.gender, ed.dob, ed.marital_status, ed.spouse_fullname, ed.licencenumber, ed.validitydate, ed.nationality, ed.idproof, ed.home_address, ed.presentaddress, ed.home_phone, ed.cellphone, ed.currentlocationsince, ed.currentdesignationsince, ed.currentdepartmentsince, ed.currentemployeesince, ed.pfeligible, ed.esieligible, ed.email, ed.city, ed.state, ed.zipcode, ed.degree, ed.specification, ed.experience, ed.experience_details, ed.status, ed.employee_dept, el.loginid AS emp_login_sno, el.password, ed.photos AS Expr1, ed.aboutus, ed.aadhaar_id, ed.voter_id, ed.spouse_details, ed.confirmdate, ed.physicalchallange, ed.bloodgroup, ed.pancard, ed.aadarenrollnumber, ed.caste, ed.emergencynumber, ed.nameasforaadhar, ed.remarks, ed.grades, ed.university, ed.salarymode, ed.employee_type, ed.institute, ed.durationofcourse, branchmaster.branchname FROM employedetails AS ed INNER JOIN branchmaster ON ed.branchid = branchmaster.branchid FULL OUTER JOIN  employe_logins AS el ON el.empid = ed.empid WHERE (ed.status = 'Yes')");
                    //cmd.Parameters.Add("@employee_type", employee_type);
                    cmd.Parameters.Add("@m", mainbranch);
                }
                DBManager vdm = new DBManager();
                DataTable dt = vdm.SelectQuery(cmd).Tables[0];
                DataView view = dt.DefaultView;
                DataTable main = view.ToTable(true, "empid", "employee_num", "ledgercode", "ledgername", "fathername", "username", "re_password", "age", "marriagedate", "joinDate", "branchid", "designationid", "fullname", "initials", "title", "gender", "dob", "marital_status", "spouse_fullname", "nationality", "idproof", "licencenumber", "validitydate", "home_address", "presentaddress", "home_phone", "cellphone", "email", "city", "state", "zipcode", "degree", "specification", "experience", "experience_details", "status", "employee_dept", "emp_login_sno", "password", "photos", "aboutus", "aadhaar_id", "voter_id", "spouse_details", "confirmdate", "physicalchallange", "bloodgroup", "pancard", "aadarenrollnumber", "nameasforaadhar", "remarks", "grades", "university", "institute", "durationofcourse", "salarymode", "employee_type", "currentlocationsince", "currentdesignationsince", "currentdepartmentsince", "currentemployeesince", "pfeligible", "branchname", "esieligible", "caste", "emergencynumber");
                List<getEmployeedetailscls> list_getEmployeedetailscls = new List<getEmployeedetailscls>();
                foreach (DataRow dr in main.Rows)
                {
                    getEmployeedetailscls getEmployeedetails = new getEmployeedetailscls();
                    getEmployeedetails.empsno = dr["empid"].ToString();
                    getEmployeedetails.empnum = dr["employee_num"].ToString();
                    if (dr["joinDate"].ToString() != null && dr["joinDate"].ToString() != "")
                    {
                        getEmployeedetails.joindate = ((DateTime)dr["joinDate"]).ToString("yyyy-MM-dd");
                    }
                    else
                    {
                        getEmployeedetails.joindate = "";
                    }
                    getEmployeedetails.empname = dr["fullname"].ToString();
                    getEmployeedetails.initials = dr["initials"].ToString();
                    getEmployeedetails.title = dr["title"].ToString();
                    getEmployeedetails.gender = dr["gender"].ToString();
                    string dob = dr["dob"].ToString();
                    if (dob == "" || dob == null)
                    {
                        getEmployeedetails.birthdate = "";
                    }
                    else
                    {
                        DateTime date = Convert.ToDateTime(dob);
                        string strtime = date.ToString("yyyy-MM-dd");
                        getEmployeedetails.birthdate = strtime;
                    }
                    getEmployeedetails.maritalstatus = dr["marital_status"].ToString();
                    getEmployeedetails.spousename = dr["spouse_fullname"].ToString();
                    getEmployeedetails.country = dr["nationality"].ToString();
                    getEmployeedetails.idproof = dr["idproof"].ToString();
                    getEmployeedetails.homeaddress = dr["home_address"].ToString();
                    getEmployeedetails.presentaddress = dr["presentaddress"].ToString();
                    getEmployeedetails.homephone = dr["home_phone"].ToString();
                    getEmployeedetails.cellphone = dr["cellphone"].ToString();
                    getEmployeedetails.email = dr["email"].ToString();
                    getEmployeedetails.city = dr["city"].ToString();
                    getEmployeedetails.state = dr["state"].ToString();
                    getEmployeedetails.zipcode = dr["zipcode"].ToString();
                    getEmployeedetails.degree = dr["degree"].ToString();
                    getEmployeedetails.specification = dr["specification"].ToString();
                    getEmployeedetails.experience = dr["experience"].ToString();
                    getEmployeedetails.experiencedet = dr["experience_details"].ToString();
                    getEmployeedetails.status = dr["status"].ToString();
                    getEmployeedetails.photo = dr["photos"].ToString();
                    getEmployeedetails.deptid = dr["employee_dept"].ToString();
                    getEmployeedetails.designationid = dr["designationid"].ToString();
                    getEmployeedetails.branchid = dr["branchid"].ToString();
                    getEmployeedetails.branchname = dr["branchname"].ToString();
                    getEmployeedetails.password = dr["password"].ToString();
                    getEmployeedetails.username = dr["username"].ToString();
                    getEmployeedetails.re_password = dr["re_password"].ToString();
                    getEmployeedetails.pass_sno = dr["emp_login_sno"].ToString();
                    getEmployeedetails.ftplocation = "http://182.18.138.228:81/";
                    getEmployeedetails.photo = dr["photos"].ToString();
                    getEmployeedetails.aboutus = dr["aboutus"].ToString();
                    getEmployeedetails.aadhaar_id = dr["aadhaar_id"].ToString();
                    getEmployeedetails.institute = dr["institute"].ToString();
                    getEmployeedetails.university = dr["university"].ToString();
                    getEmployeedetails.duration = dr["durationofcourse"].ToString();
                    getEmployeedetails.remarks = dr["remarks"].ToString();
                    getEmployeedetails.graders = dr["grades"].ToString();
                    getEmployeedetails.bloodgroup = dr["bloodgroup"].ToString();
                    getEmployeedetails.employeetype = dr["employee_type"].ToString();
                    getEmployeedetails.ledgercode = dr["ledgercode"].ToString();
                    getEmployeedetails.ledgername = dr["ledgername"].ToString();
                    string confirmdate = dr["confirmdate"].ToString();
                    if (confirmdate == "" || confirmdate == null)
                    {
                        getEmployeedetails.conformdate = "";
                    }
                    else
                    {
                        DateTime date = Convert.ToDateTime(confirmdate);
                        string strtime = date.ToString("yyyy-MM-dd");
                        getEmployeedetails.conformdate = strtime;
                    }
                    if (dr["currentlocationsince"].ToString() != null && dr["currentlocationsince"].ToString() != "")
                    {
                        getEmployeedetails.currentlocationsince = ((DateTime)dr["currentlocationsince"]).ToString("yyyy-MM-dd");
                    }
                    else
                    {
                        getEmployeedetails.currentlocationsince = "";
                    }
                    if (dr["currentdesignationsince"].ToString() != null && dr["currentdesignationsince"].ToString() != "")
                    {
                        getEmployeedetails.currentdesignationsince = ((DateTime)dr["currentdesignationsince"]).ToString("yyyy-MM-dd");
                    }
                    else
                    {
                        getEmployeedetails.conformdate = "";
                    }
                    string currentdepartmentsince = dr["currentdepartmentsince"].ToString();
                    if (currentdepartmentsince == "" || currentdepartmentsince == null)
                    {
                        getEmployeedetails.currentdepartmentsince = "";
                    }
                    else
                    {
                        DateTime date = Convert.ToDateTime(currentdepartmentsince);
                        string strtime = date.ToString("yyyy-MM-dd");
                        getEmployeedetails.currentdepartmentsince = strtime;
                    }
                    if (dr["currentemployeesince"].ToString() != null && dr["currentemployeesince"].ToString() != "")
                    {
                        getEmployeedetails.currentemployeesince = ((DateTime)dr["currentemployeesince"]).ToString("yyyy-MM-dd");
                    }
                    else
                    {
                        getEmployeedetails.conformdate = "";
                    }
                    getEmployeedetails.pfeligible = dr["pfeligible"].ToString();
                    getEmployeedetails.esieligible = dr["esieligible"].ToString();
                    getEmployeedetails.pancard = dr["pancard"].ToString();
                    getEmployeedetails.physicalchalnge = dr["physicalchallange"].ToString();
                    getEmployeedetails.aadarenrollnumber = dr["aadarenrollnumber"].ToString();
                    getEmployeedetails.nameasforaadhar = dr["nameasforaadhar"].ToString();
                    getEmployeedetails.salarymode = dr["salarymode"].ToString();
                    getEmployeedetails.voter_id = dr["voter_id"].ToString();
                    getEmployeedetails.spouse_details = dr["spouse_details"].ToString();
                    getEmployeedetails.emergencynumber = dr["emergencynumber"].ToString();
                    getEmployeedetails.caste = dr["caste"].ToString();
                    getEmployeedetails.fathername = dr["fathername"].ToString();
                    getEmployeedetails.marriagedate = dr["marriagedate"].ToString();
                    getEmployeedetails.dateofvalidilty = dr["validitydate"].ToString();
                    getEmployeedetails.drivinglicense = dr["licencenumber"].ToString();
                    getEmployeedetails.age = dr["age"].ToString();
                    list_getEmployeedetailscls.Add(getEmployeedetails);
                }
                string returnsring = GetJson(list_getEmployeedetailscls);
                context.Response.Write(returnsring);
            }
        }
        catch (Exception ex)
        {
            string returnsring = GetJson(ex.Message);
            context.Response.Write(returnsring);
        }
    }
    private void Employee_details_save(HttpContext context)
    {
        try
        {

            string empnum = context.Request["empnum"].ToString();
            string empname = context.Request["empname"].ToString();
            string jondate = context.Request["joindate"].ToString();
            DateTime joindate = Convert.ToDateTime(jondate);
            string initials = context.Request["initials"].ToString();
            string title = context.Request["title"].ToString();
            string birhdate = context.Request["birthdate"].ToString();
            DateTime birthdate = Convert.ToDateTime(birhdate);
            string strDate = birthdate.ToString("dd/MM/yyyy");
            string gender = context.Request["gender"].ToString();
            string maritalstatus = context.Request["maritalstatus"].ToString();
            string spousename = context.Request["spousename"].ToString();
            string country = context.Request["country"].ToString();
            string branchname = context.Request["branchname"].ToString();
            string homeaddress = context.Request["homeaddress"].ToString();
            string presentaddress = context.Request["presentaddress"].ToString();
            string homephone = context.Request["homephone"].ToString();
            string cellphone = context.Request["cellphone"].ToString();
            string email = context.Request["email"].ToString();
            string city = context.Request["city"].ToString();
            string state = context.Request["state"].ToString();
            string zipcode = context.Request["zipcode"].ToString();
            string degree = context.Request["degree"].ToString();
            string specification = context.Request["specification"].ToString();
            string institute = context.Request["institute"].ToString();
            string university = context.Request["university"].ToString();
            string graders = context.Request["graders"].ToString();
            string duration = context.Request["duration"].ToString();
            string remarks = context.Request["remarks"].ToString();
            string experience = context.Request["experience"].ToString();
            string experiencedet = context.Request["experiencedetails"].ToString();
            string deptid = context.Request["deptid"].ToString();
            string designationid = context.Request["designationid"].ToString();
            string status = context.Request["status"].ToString();
            string btnval = context.Request["btnval"].ToString();
            string empsno = context.Request["empsno"];
            string username = context.Request["username"].ToString();
            string password = context.Request["password"].ToString();
            string leveltype = context.Request["leveltype"].ToString();
            string re_password = context.Request["re_password"].ToString();
            string employeetype = context.Request["employeetype"].ToString();
            string login_check = context.Request["login_check"].ToString();
            string departments = context.Request["departments"].ToString();
            string emp_login_sno = context.Request["emp_login_sno"].ToString();
            string[] depts = departments.Split(',');
            string about_me = context.Request["about_me"];
            string spouse_details = context.Request["spouse_details"];
            string voterid = context.Request["voterid"];
            string aadhar_id = context.Request["aadhar_id"];
            string aadarenrollnumber = context.Request["aadarenrollnumber"];
            string nameasforaadhar = context.Request["nameasforaadhar"];
            string pancard = context.Request["pancard"];
            string bloodgroup = context.Request["bloodgroup"];
            string physicalchalnge = context.Request["physicalchalnge"];
            string confrmdate = context.Request["conformdate"];
            DateTime conformdate = Convert.ToDateTime(confrmdate);
            string stDate = conformdate.ToString("dd/MM/yyyy");
            string currenlocationsince = context.Request["currentlocationsince"];
            DateTime currentlocationsince = Convert.ToDateTime(currenlocationsince);
            string LDate = conformdate.ToString("dd/MM/yyyy");
            string currendesignationsince = context.Request["currentdesignationsince"];
            DateTime currentdesignationsince = Convert.ToDateTime(currendesignationsince);
            string DDate = conformdate.ToString("dd/MM/yyyy");
            string currentdepartmentsince = context.Request["currentdepartmentsince"];
            string currenemployeesince = context.Request["currentemployeesince"];
            //DateTime currentemployeesince = Convert.ToDateTime(currenemployeesince);
            //string sDate = conformdate.ToString("dd/MM/yyyy");
            string pfeligible = context.Request["pfeligible"];
            string esieligible = context.Request["esieligible"];
            string caste = context.Request["caste"];
            string emergencynumber = context.Request["emergencynumber"];
            string salarymode = context.Request["salarymode"];
            string fathername = context.Request["fathername"];
            string marriagedate = context.Request["marriagedate"];
            string age = context.Request["age"];
            string drivinglicense = context.Request["drivinglicense"];
            string dateofvalidilty = context.Request["dateofvalidilty"];
            string ledgercode = context.Request["ledgercode"];
            string ledgername = context.Request["ledgername"];
            DateTime ServerDateCurrentdate = DBManager.GetTime(vdm.conn);
            string entryby = context.Session["empid"].ToString();
            string User = context.Session["empid"].ToString();
            string pfstate = context.Request["pfstate"];
            cmd = new SqlCommand("SELECT branchid, company_code FROM branchmaster where branchid=@branchid");
            cmd.Parameters.Add("@branchid", branchname);
            DataTable dtempbranch = vdm.SelectQuery(cmd).Tables[0];
            string CompanyName = dtempbranch.Rows[0]["company_code"].ToString();
            string branchid = "1";
            if (branchid != null)
            {
                if (btnval == "Save")
                {
                    cmd = new SqlCommand("insert into employedetails (employee_num, joinDate, fullname, initials, title, gender, dob, marital_status, spouse_fullname, nationality,  home_address, presentaddress, home_phone, cellphone, email, city, state, zipcode, degree, specification, experience, experience_details, status,  photos, employee_dept, designationid, spouse_details, voter_id, aadhaar_id, durationofcourse, institute, university, grades, remarks, nameasforaadhar, aadarenrollnumber, pancard, bloodgroup, physicalchallange, confirmdate, aboutus, branchid, salarymode, doe,fathername,age,marriagedate,employee_type,currentlocationsince,currentdesignationsince,currentdepartmentsince,currentemployeesince,pfeligible,esieligible,caste,emergencynumber,validitydate,licencenumber,ledgercode,ledgername,entry_by,entry_date,company_id, pfstate) values (@employee_num, @joinDate, @fullname, @initials, @title, @gender, @dob, @marital_status, @spouse_fullname, @nationality,  @home_address, @presentaddress, @home_phone, @cellphone, @email, @city, @state, @zipcode, @degree, @specification, @experiance, @experiance_details, @status,  @photos, @employee_dept, @designationid, @spouse_details, @voter_id, @aadhaar_id,@durationofcourse, @institute, @university, @graders, @remarks, @nameasforaadhar, @aadarenrollnumber, @pancard, @bloodgroup, @physicalchalnge, @conformdate, @aboutus, @branchid, @salarymode, @doe,@fathername,@age,@marriagedate,@employee_type,@currentlocationsince,@currentdesignationsince,@currentdepartmentsince,@currentemployeesince,@pfeligible,@esieligible,@caste,@emergencynumber,@validitydate,@licencenumber,@ledgercode,@ledgername,@entry_by,@entry_date,@company_id, @pfstate)");
                    cmd.Parameters.Add("@employee_num", empnum);
                    cmd.Parameters.Add("@joinDate", joindate);
                    cmd.Parameters.Add("@fullname", empname);
                    cmd.Parameters.Add("@initials", initials);
                    cmd.Parameters.Add("@title", title);
                    cmd.Parameters.Add("@gender", gender);
                    cmd.Parameters.Add("@dob", birthdate);
                    cmd.Parameters.Add("@marital_status", maritalstatus);
                    cmd.Parameters.Add("@spouse_fullname", spousename);
                    cmd.Parameters.Add("@nationality", country);
                    cmd.Parameters.Add("@branchid", branchname);
                    cmd.Parameters.Add("@home_address", homeaddress);
                    cmd.Parameters.Add("@presentaddress", presentaddress);
                    cmd.Parameters.Add("@home_phone", homephone);
                    cmd.Parameters.Add("@cellphone", cellphone);
                    cmd.Parameters.Add("@email", email);
                    cmd.Parameters.Add("@city", city);
                    cmd.Parameters.Add("@state", state);
                    cmd.Parameters.Add("@zipcode", zipcode);
                    cmd.Parameters.Add("@degree", degree);
                    cmd.Parameters.Add("@specification", specification);
                    cmd.Parameters.Add("@experiance", experience);
                    cmd.Parameters.Add("@experiance_details", experiencedet);
                    cmd.Parameters.Add("@status", status);
                    cmd.Parameters.Add("@designationid", designationid);
                    cmd.Parameters.Add("@photos", "");
                    cmd.Parameters.Add("@employee_dept", deptid);
                    cmd.Parameters.Add("@aboutus", about_me);
                    cmd.Parameters.Add("@spouse_details", spouse_details);
                    cmd.Parameters.Add("@voter_id", voterid);
                    cmd.Parameters.Add("@durationofcourse", duration);
                    cmd.Parameters.Add("@institute", institute);
                    cmd.Parameters.Add("@university", university);
                    cmd.Parameters.Add("@graders", graders);
                    cmd.Parameters.Add("@remarks", remarks);
                    cmd.Parameters.Add("@fathername", fathername);
                    cmd.Parameters.Add("@age", age);
                    cmd.Parameters.Add("@marriagedate", marriagedate);
                    cmd.Parameters.Add("@doe", ServerDateCurrentdate);
                    cmd.Parameters.Add("@nameasforaadhar", nameasforaadhar);
                    cmd.Parameters.Add("@aadarenrollnumber", aadarenrollnumber);
                    cmd.Parameters.Add("@aadhaar_id", aadhar_id);
                    cmd.Parameters.Add("@pancard", pancard);
                    cmd.Parameters.Add("@bloodgroup", bloodgroup);
                    cmd.Parameters.Add("@physicalchalnge", physicalchalnge);
                    cmd.Parameters.Add("@conformdate", conformdate);
                    cmd.Parameters.Add("@salarymode", salarymode);
                    cmd.Parameters.Add("@employee_type", employeetype);
                    cmd.Parameters.Add("@currentlocationsince", currentlocationsince);
                    cmd.Parameters.Add("@currentdesignationsince", currentdesignationsince);
                    cmd.Parameters.Add("@currentdepartmentsince", currentdepartmentsince);
                    cmd.Parameters.Add("@currentemployeesince", currenemployeesince);
                    cmd.Parameters.Add("@pfeligible", pfeligible);
                    cmd.Parameters.Add("@esieligible", esieligible);
                    cmd.Parameters.Add("@caste", caste);
                    cmd.Parameters.Add("@emergencynumber", emergencynumber);
                    cmd.Parameters.Add("@licencenumber", drivinglicense);
                    cmd.Parameters.Add("@validitydate", dateofvalidilty);
                    cmd.Parameters.Add("@ledgercode", ledgercode);
                    cmd.Parameters.Add("@ledgername", ledgername);
                    cmd.Parameters.Add("@entry_by", User);
                    cmd.Parameters.Add("@entry_date", ServerDateCurrentdate);
                    cmd.Parameters.Add("@company_id", CompanyName);
                    cmd.Parameters.Add("@pfstate", pfstate);
                    vdm.insert(cmd);
                    cmd = new SqlCommand("Select  MAX(empid) as Employeid from employedetails");
                    DataTable dtemployes = vdm.SelectQuery(cmd).Tables[0];
                    int employeid = Convert.ToInt32(dtemployes.Rows[0]["Employeid"].ToString());
                    cmd = new SqlCommand("insert into emp_designation_logs (empid, designationid, doe,startingdate,entryby) values (@employee_sno, @designationid, @doe,@startingdate,@entryby)");
                    cmd.Parameters.Add("@employee_sno", employeid);
                    cmd.Parameters.Add("@designationid", designationid);
                    cmd.Parameters.Add("@doe", ServerDateCurrentdate);
                    cmd.Parameters.Add("@startingdate", ServerDateCurrentdate);
                    cmd.Parameters.Add("@entryby", entryby);
                    vdm.insert(cmd);
                    cmd = new SqlCommand("insert into emp_dept_logs (empid, departmentid, doe,startingdate,entryby) values (@employee_sno,@departmentid, @doe,@startingdate,@entryby)");
                    cmd.Parameters.Add("@employee_sno", employeid);
                    cmd.Parameters.Add("@departmentid", deptid);
                    cmd.Parameters.Add("@doe", ServerDateCurrentdate);
                    cmd.Parameters.Add("@startingdate", ServerDateCurrentdate);
                    cmd.Parameters.Add("@entryby", entryby);
                    vdm.insert(cmd);
                    if (login_check == "checked")
                    {
                        cmd = new SqlCommand("insert into employe_logins (empid, username, password, leveltype, designationid,branchid) values (@employee_sno, @username, @password,@leveltype, @designationid,@branchid)");
                        cmd.Parameters.Add("@employee_sno", employeid);
                        cmd.Parameters.Add("@username", username);
                        cmd.Parameters.Add("@password", password);
                        cmd.Parameters.Add("@leveltype", leveltype);
                        cmd.Parameters.Add("@designationid", designationid);
                        cmd.Parameters.Add("@branchid", branchid);
                        vdm.insert(cmd);
                    }
                    string response = GetJson("Saved Successfully");
                    context.Response.Write(response);
                }
                else
                {
                    cmd = new SqlCommand("SELECT designation.designationid, employedetails.fullname, employedetails.empid, designation.designation, departments.department, departments.deptid FROM designation INNER JOIN employedetails ON designation.designationid = employedetails.designationid INNER JOIN departments ON employedetails.employee_dept = departments.deptid WHERE (employedetails.empid = @employee_sno)");
                    cmd.Parameters.Add("@employee_sno", empsno);
                    DataTable dtempdesig = vdm.SelectQuery(cmd).Tables[0];
                    string prevsdesgid = dtempdesig.Rows[0]["designationid"].ToString();
                    string prevsdeptid = dtempdesig.Rows[0]["deptid"].ToString();
                    if (prevsdesgid == designationid)
                    {

                    }
                    else
                    {
                        cmd = new SqlCommand("update emp_designation_logs set  endingdate=@endingdate where empid=@empid and endingdate IS NUll");
                        cmd.Parameters.Add("@endingdate", ServerDateCurrentdate);
                        cmd.Parameters.Add("@empid", empsno);
                        vdm.Update(cmd);
                        cmd = new SqlCommand("insert into emp_designation_logs (empid, designationid, doe,startingdate,entryby) values (@employee_sno, @designationid, @doe,@startingdate,@entryby)");
                        cmd.Parameters.Add("@employee_sno", empsno);
                        cmd.Parameters.Add("@designationid", prevsdesgid);
                        cmd.Parameters.Add("@doe", ServerDateCurrentdate);
                        cmd.Parameters.Add("@startingdate", ServerDateCurrentdate);
                        cmd.Parameters.Add("@entryby", entryby);
                        vdm.insert(cmd);
                    }
                    if (prevsdeptid == deptid)
                    {

                    }
                    else
                    {
                        cmd = new SqlCommand("update emp_dept_logs set  endingdate=@endingdate where empid=@empid and endingdate IS NUll");
                        cmd.Parameters.Add("@endingdate", ServerDateCurrentdate);
                        cmd.Parameters.Add("@empid", empsno);
                        vdm.Update(cmd);
                        cmd = new SqlCommand("insert into emp_dept_logs (empid, departmentid, doe,startingdate,entryby) values (@employee_sno,@departmentid, @doe,@startingdate,@entryby)");
                        cmd.Parameters.Add("@employee_sno", empsno);
                        cmd.Parameters.Add("@departmentid", prevsdeptid);
                        cmd.Parameters.Add("@doe", ServerDateCurrentdate);
                        cmd.Parameters.Add("@startingdate", ServerDateCurrentdate);
                        cmd.Parameters.Add("@entryby", entryby);
                        vdm.insert(cmd);
                    }
                    cmd = new SqlCommand("update employedetails set pfstate=@pfstate, employee_num=@employee_num, joindate=@joindate, fullname=@fullname, initials=@initials, title=@title, gender=@gender, dob=@dob, marital_status=@marital_status, spouse_fullname=@spouse_fullname, nationality=@nationality,  home_address=@home_address, presentaddress=@presentaddress, home_phone=@home_phone, cellphone=@cellphone, email=@email, fathername=@fathername, age=@age, marriagedate=@marriagedate, city=@city, state=@state, zipcode=@zipcode, degree=@degree, specification=@specification, experience=@experience, experience_details=@experience_details,  employee_dept=@employee_dept, designationid=@designationid, spouse_details=@spouse_details, voter_id=@voter_id, aadhaar_id=@aadhaar_id, aboutus=@aboutus , durationofcourse=@durationofcourse, institute=@institute, university=@university, grades=@grades,  nameasforaadhar=@nameasforaadhar, remarks=@remarks, pancard=@pancard, aadarenrollnumber=@aadarenrollnumber, bloodgroup=@bloodgroup, physicalchallange=@physicalchallange, confirmdate=@confirmdate, caste=@caste, emergencynumber=@emergencynumber, currentlocationsince=@currentlocationsince, currentdesignationsince=@currentdesignationsince, currentdepartmentsince=@currentdepartmentsince, currentemployeesince=@currentemployeesince, pfeligible=@pfeligible, esieligible=@esieligible, validitydate=@validitydate, licencenumber=@licencenumber,salarymode=@salarymode, employee_type=@employee_type,ledgername=@ledgername,ledgercode=@ledgercode,modify_by=@modify_by,modify_date=@modify_date where empid=@idemployees ");
                    cmd.Parameters.Add("@employee_num", empnum);
                    cmd.Parameters.Add("@joindate", joindate);
                    cmd.Parameters.Add("@fullname", empname);
                    cmd.Parameters.Add("@initials", initials);
                    cmd.Parameters.Add("@title", title);
                    cmd.Parameters.Add("@gender", gender);
                    cmd.Parameters.Add("@dob", birthdate);
                    cmd.Parameters.Add("@marital_status", maritalstatus);
                    cmd.Parameters.Add("@spouse_fullname", spousename);
                    cmd.Parameters.Add("@nationality", country);
                    //cmd.Parameters.Add("@branchid", branchname);
                    cmd.Parameters.Add("@home_address", homeaddress);
                    cmd.Parameters.Add("@presentaddress", presentaddress);
                    cmd.Parameters.Add("@home_phone", homephone);
                    cmd.Parameters.Add("@cellphone", cellphone);
                    cmd.Parameters.Add("@email", email);
                    cmd.Parameters.Add("@city", city);
                    cmd.Parameters.Add("@state", state);
                    cmd.Parameters.Add("@zipcode", zipcode);
                    cmd.Parameters.Add("@degree", degree);
                    cmd.Parameters.Add("@specification", specification);
                    cmd.Parameters.Add("@experience", experience);
                    cmd.Parameters.Add("@experience_details", experiencedet);
                    cmd.Parameters.Add("@status", status);
                    cmd.Parameters.Add("@employee_dept", deptid);
                    cmd.Parameters.Add("@designationid", designationid);
                    cmd.Parameters.Add("@idemployees", empsno);
                    cmd.Parameters.Add("@spouse_details", spouse_details);
                    cmd.Parameters.Add("@voter_id", voterid);
                    cmd.Parameters.Add("@aadhaar_id", aadhar_id);
                    cmd.Parameters.Add("@aboutus", about_me);
                    cmd.Parameters.Add("@durationofcourse", duration);
                    cmd.Parameters.Add("@institute", institute);
                    cmd.Parameters.Add("@university", university);
                    cmd.Parameters.Add("@grades", graders);
                    cmd.Parameters.Add("@remarks", remarks);
                    cmd.Parameters.Add("@nameasforaadhar", nameasforaadhar);
                    cmd.Parameters.Add("@aadarenrollnumber", aadarenrollnumber);
                    cmd.Parameters.Add("@pancard", pancard);
                    cmd.Parameters.Add("@bloodgroup", bloodgroup);
                    cmd.Parameters.Add("@physicalchallange", physicalchalnge);
                    cmd.Parameters.Add("@confirmdate", conformdate);
                    cmd.Parameters.Add("@salarymode", salarymode);
                    cmd.Parameters.Add("@fathername", fathername);
                    cmd.Parameters.Add("@age", age);
                    cmd.Parameters.Add("@marriagedate", marriagedate);
                    cmd.Parameters.Add("@employee_type", employeetype);
                    cmd.Parameters.Add("@currentlocationsince", currentlocationsince);
                    cmd.Parameters.Add("@currentdesignationsince", currentdesignationsince);
                    cmd.Parameters.Add("@currentdepartmentsince", currentdepartmentsince);
                    cmd.Parameters.Add("@currentemployeesince", currenemployeesince);
                    cmd.Parameters.Add("@pfeligible", pfeligible);
                    cmd.Parameters.Add("@esieligible", esieligible);
                    cmd.Parameters.Add("@caste", caste);
                    cmd.Parameters.Add("@emergencynumber", emergencynumber);
                    cmd.Parameters.Add("@licencenumber", drivinglicense);
                    cmd.Parameters.Add("@validitydate", dateofvalidilty);
                    cmd.Parameters.Add("@ledgercode", ledgercode);
                    cmd.Parameters.Add("@ledgername", ledgername);
                    cmd.Parameters.Add("@modify_by", User);
                    cmd.Parameters.Add("@modify_date", ServerDateCurrentdate);
                    cmd.Parameters.Add("@pfstate", pfstate);
                    vdm.Update(cmd);
                    //cmd = new SqlCommand("Select  designationid from designation");

                    if (login_check == "checked")
                    {
                        if (emp_login_sno != "")
                        {
                            cmd = new SqlCommand("update employe_logins set username=@employee_sno, password=@password ,leveltype=@leveltype where loginid=@loginid");
                            cmd.Parameters.Add("@employee_sno", empsno);
                            cmd.Parameters.Add("@password", password);
                            cmd.Parameters.Add("@loginid", emp_login_sno);
                            cmd.Parameters.Add("@leveltype", leveltype);
                            vdm.Update(cmd);
                        }
                        else
                        {
                            cmd = new SqlCommand("insert into employe_logins (username,empid, password,leveltype,designationid,branchid) values (@username,@employee_sno, @password,@leveltype,@designationid,@branchid)");
                            cmd.Parameters.Add("@employee_sno", empsno);
                            cmd.Parameters.Add("@username", username);
                            cmd.Parameters.Add("@password", password);
                            cmd.Parameters.Add("@leveltype", leveltype);
                            cmd.Parameters.Add("@designationid", designationid);
                            cmd.Parameters.Add("@branchid", branchid);
                            vdm.insert(cmd);
                            //emp_login_sno = vdm.insertScalar(cmd).ToString();
                        }
                    }
                    string response = GetJson("Modified Successfully");
                    context.Response.Write(response);
                }

                //else
                //{
                //    context.Response.Write("false");
                //}
            }
        }
        catch (Exception ex)
        {
            string response = GetJson("Employee Code Already Exists");
            context.Response.Write(response);
        }
    }

    public class emplogings
    {
        public string username { get; set; }
        public string leveltype { get; set; }
        public string empsno { get; set; }
        public string empname { get; set; }
        public string password { get; set; }
        public string loginid { get; set; }

    }


    private void get_Emplogin_details(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            cmd = new SqlCommand("SELECT loginid, username, password, empid, leveltype FROM  employe_logins");
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<emplogings> Departmentslst = new List<emplogings>();
            foreach (DataRow dr in routes.Rows)
            {
                emplogings getdepts = new emplogings();
                getdepts.empsno = dr["empid"].ToString();
                getdepts.leveltype = dr["leveltype"].ToString();
                getdepts.password = dr["password"].ToString();
                getdepts.username = dr["username"].ToString();
                getdepts.loginid = dr["loginid"].ToString();
                //getdepts.Reason = dr["reason"].ToString();
                Departmentslst.Add(getdepts);
            }
            string response = GetJson(Departmentslst);
            context.Response.Write(response);
        }
        catch
        {
        }
    }

    private void save_employeeDocument(HttpContext context)
    {
        try
        {
            //if (context.Session["branch_id"] != null)
            //{
            if (context.Request.Files.Count > 0)
            {
                string empsno = context.Request["empsno"];
                empsno = empsno.TrimEnd();
                string empcode = context.Request["empcode"];
                empcode = empcode.TrimEnd();
                string documentname = context.Request["documentname"];
                documentname = documentname.TrimEnd();
                string documentid = context.Request["documentid"];
                documentid = documentid.TrimEnd();
                string entryby = context.Session["empid"].ToString();
                HttpFileCollection files = context.Request.Files;
                DateTime ServerDateCurrentdate = DBManager.GetTime(vdm.conn);
                for (int i = 0; i < files.Count; i++)
                {
                    HttpPostedFile file = files[i];
                    string[] extension = file.FileName.Split('.');
                    string upload_filename = empcode + documentname + documentid + empsno + ".jpeg";// +extension[extension.Length - 1];
                    if (UploadToFTP(file, upload_filename))
                    {
                        SqlCommand cmd = new SqlCommand("update  employee_documents set documentpath=@documentpath where empid=@empid and documentid=@documentid");
                        cmd.Parameters.Add("@empid", empsno);
                        cmd.Parameters.Add("@documentpath", upload_filename);
                        cmd.Parameters.Add("@documentid", documentid);
                        if (vdm.Update(cmd) == 0)
                        {
                            cmd = new SqlCommand("insert into employee_documents (empid,documentpath,doe,entryby,documentid) values (@empid,@documentpath,@doe,@entryby,@documentid)");
                            cmd.Parameters.Add("@empid", empsno);
                            cmd.Parameters.Add("@documentpath", upload_filename);
                            cmd.Parameters.Add("@documentid", documentid);
                            cmd.Parameters.Add("@doe", ServerDateCurrentdate);
                            cmd.Parameters.Add("@entryby", entryby);
                            vdm.insert(cmd);
                        }
                    }
                }
                context.Response.ContentType = "text/plain";
                context.Response.Write("File Uploaded Successfully!");
            }
            //}

        }
        catch (Exception ex)
        {
            string response = GetJson(ex.Message);
            context.Response.Write(response);
        }
    }

    private void emp_profile_pic_files_upload(HttpContext context)
    {
        try
        {
            //if (context.Session["branch_id"] != null)
            //{
            if (context.Request.Files.Count > 0)
            {
                string empsno = context.Request["empsno"];
                string empcode = context.Request["empcode"];

                HttpFileCollection files = context.Request.Files;
                for (int i = 0; i < files.Count; i++)
                {
                    HttpPostedFile file = files[i];
                    string[] extension = file.FileName.Split('.');
                    string upload_filename = empcode + "_profilepic_" + empsno + ".jpeg";// +extension[extension.Length - 1];
                    if (UploadToFTP(file, upload_filename))
                    {
                        SqlCommand cmd = new SqlCommand("update employedetails set photos=@photos where empid=@empid");
                        cmd.Parameters.Add("@empid", empsno);
                        cmd.Parameters.Add("@photos", upload_filename);
                        vdm.Update(cmd);
                    }
                }
                context.Response.ContentType = "text/plain";
                context.Response.Write("File Uploaded Successfully!");
            }
            //}

        }
        catch (Exception ex)
        {
            string response = GetJson(ex.Message);
            context.Response.Write(response);
        }
    }

    private bool UploadToFTP(HttpPostedFile fileToUpload, string filename)
    {
        string uploadUrl = "ftp://182.18.138.228/HRMS/";
        try
        {
            FtpWebRequest del_request = (FtpWebRequest)WebRequest.Create(uploadUrl + @"/" + filename);
            del_request.Credentials = new NetworkCredential("ftpuser", "ftpuser@123");
            del_request.Method = WebRequestMethods.Ftp.DeleteFile;
            FtpWebResponse delete_response = (FtpWebResponse)del_request.GetResponse();
            Console.WriteLine("Delete status: {0}", delete_response.StatusDescription);
            delete_response.Close();
        }
        catch
        {
        }

        FtpWebRequest request = (FtpWebRequest)WebRequest.Create(uploadUrl + @"/" + filename);
        request.Credentials = new NetworkCredential("ftpuser", "ftpuser@123");
        request.UsePassive = true;
        request.Timeout = 600000;
        request.Method = WebRequestMethods.Ftp.UploadFile;
        byte[] fileContents = null;
        using (var binaryReader = new BinaryReader(fileToUpload.InputStream))
        {
            fileContents = binaryReader.ReadBytes(fileToUpload.ContentLength);
        }
        request.ContentLength = fileContents.Length;
        Stream requestStream = request.GetRequestStream();
        requestStream.Write(fileContents, 0, fileContents.Length);
        requestStream.Close();
        FtpWebResponse response = (FtpWebResponse)request.GetResponse();
        response.Close();
        return true;
    }

    private void get_deptwiseemploye_details(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            // branchmapping
            string mainbranch = context.Session["mainbranch"].ToString();
            cmd = new SqlCommand("SELECT  employedetails.empid, employepfdetails.uannumber, employedetails.employee_num,employedetails.fullname, branchmaster.statename, employedetails.salarymode, employepfdetails.pfnumber, employepfdetails.estnumber, employedetails.pfeligible, employedetails.esieligible, branchmaster.branchname FROM employedetails INNER JOIN  branchmapping ON employedetails.branchid = branchmapping.subbranch LEFT OUTER JOIN employepfdetails ON employedetails.empid = employepfdetails.employeid LEFT OUTER JOIN branchmaster ON employedetails.branchid = branchmaster.branchid WHERE (branchmapping.mainbranch = @m) AND (employedetails.status = 'No')");
            cmd.Parameters.Add("@m", mainbranch);
            // branchwise
            //cmd = new SqlCommand("SELECT employedetails.empid, employepfdetails.uannumber, employedetails.fullname, branchmaster.statename, employedetails.salarymode, employepfdetails.pfnumber, employepfdetails.estnumber, employedetails.pfeligible, employedetails.esieligible FROM employedetails LEFT OUTER JOIN employepfdetails ON employedetails.empid = employepfdetails.employeid LEFT OUTER JOIN  branchmaster ON employedetails.branchid = branchmaster.branchid ");
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<getEmployeedetailscls> Employeedetailslist = new List<getEmployeedetailscls>();
            foreach (DataRow dr in routes.Rows)
            {
                getEmployeedetailscls getEmployeedetails = new getEmployeedetailscls();
                getEmployeedetails.empsno = dr["empid"].ToString();
                getEmployeedetails.empnum = dr["employee_num"].ToString();
                getEmployeedetails.empname = dr["fullname"].ToString();
                getEmployeedetails.statename = dr["statename"].ToString();
                getEmployeedetails.salarymode = dr["salarymode"].ToString();
                getEmployeedetails.pfnumber = dr["pfnumber"].ToString();
                getEmployeedetails.estnumber = dr["estnumber"].ToString();
                getEmployeedetails.uannumber = dr["uannumber"].ToString();
                getEmployeedetails.branchname = dr["branchname"].ToString();
                getEmployeedetails.pfeligible = dr["pfeligible"].ToString();
                getEmployeedetails.esieligible = dr["esieligible"].ToString();
                Employeedetailslist.Add(getEmployeedetails);
            }
            string response = GetJson(Employeedetailslist);
            context.Response.Write(response);
        }
        catch
        {
        }
    }

    public class employeechage
    {
        public string branchname { get; set; }
        public string branchid { get; set; }
        public string empsno { get; set; }
        public string empname { get; set; }
        public string Department { get; set; }
        public string empnum { get; set; }
        public string deptid { get; set; }
    }

    private void getdataemployeechange(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            string Department = context.Request["Department"];
            cmd = new SqlCommand("SELECT employedetails.empid, departments.deptid,branchmaster.branchid,employedetails.employee_num,employedetails.fullname,branchmaster.branchname,departments.department FROM employedetails INNER JOIN departments ON employedetails.employee_dept = departments.deptid INNER JOIN branchmaster ON employedetails.branchid = branchmaster.branchid WHERE (employedetails.employee_dept = @empdept)");
            cmd.Parameters.Add("@empdept", Department);
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<employeechage> Employeedetailslist = new List<employeechage>();
            foreach (DataRow dr in routes.Rows)
            {
                employeechage getEmployeedetails = new employeechage();
                getEmployeedetails.empsno = dr["empid"].ToString();
                getEmployeedetails.empname = dr["fullname"].ToString();
                getEmployeedetails.Department = dr["department"].ToString();
                getEmployeedetails.empnum = dr["employee_num"].ToString();
                getEmployeedetails.branchname = dr["branchname"].ToString();
                getEmployeedetails.deptid = dr["deptid"].ToString();
                getEmployeedetails.branchid = dr["branchid"].ToString();
                Employeedetailslist.Add(getEmployeedetails);
            }
            string response = GetJson(Employeedetailslist);
            context.Response.Write(response);
        }
        catch
        {
        }
    }


    public class Departmentchage
    {
        public string branchname { get; set; }
        public string branchid { get; set; }
        public string empsno { get; set; }
        public string empname { get; set; }
        public string Department { get; set; }
        public string empnum { get; set; }
        public string deptid { get; set; }
    }


    private void getdatadepchange(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            string empname = context.Request["empname"];
            cmd = new SqlCommand("SELECT employedetails.empid, departments.deptid,branchmaster.branchid,employedetails.employee_num,employedetails.fullname,branchmaster.branchname,departments.department FROM employedetails INNER JOIN departments ON employedetails.employee_dept = departments.deptid INNER JOIN branchmaster ON employedetails.branchid = branchmaster.branchid WHERE  (employedetails.empid = @empid)");
            cmd.Parameters.Add("@empid", empname);
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<Departmentchage> Employeedetailslist = new List<Departmentchage>();
            foreach (DataRow dr in routes.Rows)
            {
                Departmentchage getEmployeedetails = new Departmentchage();
                getEmployeedetails.empsno = dr["empid"].ToString();
                getEmployeedetails.empname = dr["fullname"].ToString();
                getEmployeedetails.Department = dr["department"].ToString();
                getEmployeedetails.empnum = dr["employee_num"].ToString();
                getEmployeedetails.branchname = dr["branchname"].ToString();
                getEmployeedetails.deptid = dr["deptid"].ToString();
                getEmployeedetails.branchid = dr["branchid"].ToString();
                Employeedetailslist.Add(getEmployeedetails);
            }
            string response = GetJson(Employeedetailslist);
            context.Response.Write(response);
        }
        catch
        {
        }
    }


    private void get_payrolldeptwiseemploye_details(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            string Department = context.Request["deptid"];
            cmd = new SqlCommand("SELECT employedetails.empid, employedetails.fullname, branchmaster.statename FROM employedetails LEFT OUTER JOIN branchmaster ON employedetails.branchid = branchmaster.branchid WHERE (employedetails.employee_dept = @empdept)");
            cmd.Parameters.Add("@empdept", Department);
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<getEmployeedetailscls> Employeedetailslist = new List<getEmployeedetailscls>();
            foreach (DataRow dr in routes.Rows)
            {
                getEmployeedetailscls getEmployeedetails = new getEmployeedetailscls();
                getEmployeedetails.empsno = dr["empid"].ToString();
                getEmployeedetails.empname = dr["fullname"].ToString();
                getEmployeedetails.statename = dr["statename"].ToString();
                getEmployeedetails.salarymode = dr["salarymode"].ToString();
                getEmployeedetails.pfnumber = dr["pfnumber"].ToString();
                getEmployeedetails.estnumber = dr["estnumber"].ToString();
                getEmployeedetails.uannumber = dr["uannumber"].ToString();
                Employeedetailslist.Add(getEmployeedetails);
            }
            string response = GetJson(Employeedetailslist);
            context.Response.Write(response);
        }
        catch
        {
        }
    }
    public class MeetingDetalis
    {
        public string branchname { get; set; }
        public string branchid { get; set; }
        public string statename { get; set; }
        public string emailid { get; set; }
        public string Phone { get; set; }
        public string address { get; set; }
        public string btnVal { get; set; }
        public string starttime { get; set; }
        public string endtime { get; set; }
        public string meetingdate { get; set; }
        public string participants { get; set; }
        public string subject { get; set; }
        public string conducted_by { get; set; }
        public string videopath { get; set; }
        public string department { get; set; }
        public List<submeetingdetails> fillitems { get; set; }
    }

    public class submeetingdetails
    {
        public string conclusion { get; set; }
    }


    private void SaveMeeting_conduct_Details(HttpContext context)
    {
        try
        {
            var js = new JavaScriptSerializer();
            var title1 = context.Request.Params[1];
            MeetingDetalis obj = js.Deserialize<MeetingDetalis>(title1);
            string meetingdate = obj.meetingdate;
            string starttime = obj.starttime;
            string endtime = obj.endtime;
            string participants = obj.participants;
            string subject = obj.subject;
            string conducted_by = obj.conducted_by;
            string videopath = obj.videopath;
            string department = obj.department;
            string btnSave = obj.btnVal;
            DateTime ServerDateCurrentdate = DBManager.GetTime(vdm.conn);
            if (btnSave == "Save")
            {
                cmd = new SqlCommand("insert into meeting_conduct (meeting_date,starttime,endtime,participants,subject,conducted_by, doe,videopath,departmentname) values (@meeting_date,@starttime,@endtime,@participants,@subject,@conducted_by,@doe,@videopath,@departmentname)");
                cmd.Parameters.Add("@meeting_date", meetingdate);
                cmd.Parameters.Add("@starttime", starttime);
                cmd.Parameters.Add("@endtime", endtime);
                cmd.Parameters.Add("@participants", participants);
                cmd.Parameters.Add("@subject", subject);
                cmd.Parameters.Add("@conducted_by", conducted_by);
                cmd.Parameters.Add("@departmentname", department);
                cmd.Parameters.Add("@doe", ServerDateCurrentdate);
                cmd.Parameters.Add("@videopath", videopath);
                vdm.insert(cmd);
                cmd = new SqlCommand("SELECT MAX(sno) as maxno from meeting_conduct");
                DataTable dtmeating = vdm.SelectQuery(cmd).Tables[0];
                if (dtmeating.Rows.Count > 0)
                {
                    string sno = dtmeating.Rows[0]["maxno"].ToString();
                    foreach (submeetingdetails si in obj.fillitems)
                    {
                        if (si.conclusion != "")
                        {
                            cmd = new SqlCommand("insert into submeetingdetails (meeting_no, conclusion) values (@meetingno, @conclusion)");
                            cmd.Parameters.Add("@meetingno", sno);
                            cmd.Parameters.Add("@conclusion", si.conclusion);
                            vdm.insert(cmd);
                        }
                    }
                }
                string msg = "Inserted Success fully ";
                string Response = GetJson(msg);
                context.Response.Write(Response);
            }
            else
            {
            }
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }


    private void save_Salary_Advancedetails(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            //string department = context.Request["Department"];
            string employeid = context.Request["employeid"];
            string Remarks = context.Request["Remarks"];
            string Amount = context.Request["Amount"];
            string monthofpaid = context.Request["monthofpaid"];
            string empnum = context.Request["empnum"];
            DateTime dateofaffence = Convert.ToDateTime(monthofpaid);
            string strdate = dateofaffence.ToString("dd/MM/yyyy");
            string[] str = strdate.Split('/');
            string year = str[2];
            //int yr = 0;
            string month = str[1];
            DateTime ServerDateCurrentdate = DBManager.GetTime(vdm.conn);
            string btnSave = context.Request["btnVal"];
            string User = context.Session["empid"].ToString();
            if (btnSave == "Save")
            {
                cmd = new SqlCommand("insert into salaryadvance (empid,amount,remarks,doe,monthofpaid,month,year,status, employee_num,entry_by ) values (@employe,@amount,@remarks,@doe,@monthofpaid,@month,@year,@status, @employee_num,@entry_by)");
                //cmd.Parameters.Add("@department", department);
                cmd.Parameters.Add("@employe", employeid);
                cmd.Parameters.Add("@remarks", Remarks);
                cmd.Parameters.Add("@amount", Amount);
                cmd.Parameters.Add("@doe", ServerDateCurrentdate);
                cmd.Parameters.Add("@monthofpaid", monthofpaid);
                cmd.Parameters.Add("@month", month);
                cmd.Parameters.Add("@year", year);
                cmd.Parameters.Add("@status", "p");
                cmd.Parameters.Add("@employee_num", empnum);
                cmd.Parameters.Add("@entry_by", User);
                vdm.insert(cmd);
                string Response = GetJson("Insert Successfully");
                context.Response.Write(Response);
            }
            else
            {
                string sno = context.Request["sno"];
                cmd = new SqlCommand("Update salaryadvance set empid=@employe,remarks=@remarks,amount=@amount, monthofpaid=@monthofpaid,month=@month,year=@year,modify_by=@modify_by where sno=@sno");
                cmd.Parameters.Add("@sno", sno);
                //cmd.Parameters.Add("@department", department);
                cmd.Parameters.Add("@employe", employeid);
                cmd.Parameters.Add("@remarks", Remarks);
                cmd.Parameters.Add("@amount", Amount);
                cmd.Parameters.Add("@doe", dateofaffence);
                cmd.Parameters.Add("@monthofpaid", monthofpaid);
                cmd.Parameters.Add("@month", month);
                cmd.Parameters.Add("@year", year);
                cmd.Parameters.Add("@modify_by", User);
                vdm.Update(cmd);
                string response = GetJson("UPDATE Successfully");
                context.Response.Write(response);
            }
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }

    }
    public class getsdavancedetailes
    {
        public string sno { get; set; }
        public string employeid { get; set; }
        public string fullname { get; set; }
        public string department { get; set; }
        public string Amount { get; set; }
        public string monthofpaid { get; set; }
        public string doe { get; set; }
        public string Remarks { get; set; }
        public string empcode { get; set; }
        public string deptid { get; set; }
        public string Designetion { get; set; }
        public string Department { get; set; }
        public string monthofpaidname { get; set; }
        public string joindate { get; set; }
        public string netpay { get; set; }

    }


    private void get_salaryadvance_details(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            string mainbranch = context.Session["mainbranch"].ToString();
            DateTime ServerDateCurrentdate = DBManager.GetTime(vdm.conn);
            cmd = new SqlCommand("SELECT  derivedtbl_1.empid, derivedtbl_1.Sno, salaryadvance_1.amount, salaryadvance_1.deptid, salaryadvance_1.remarks, salaryadvance_1.doe, salaryadvance_1.monthofpaid, salaryadvance_1.employee_num, salaryadvance_1.month, salaryadvance_1.status, salaryadvance_1.year, employedetails.joindate, employedetails.fullname, departments.department, designation.designation FROM  (SELECT   empid, MAX(sno) AS Sno FROM   salaryadvance WHERE    (empid <> 0) GROUP BY empid) AS derivedtbl_1 INNER JOIN salaryadvance AS salaryadvance_1 ON derivedtbl_1.Sno = salaryadvance_1.sno INNER JOIN employedetails ON salaryadvance_1.empid = employedetails.empid INNER JOIN departments ON employedetails.employee_dept = departments.deptid INNER JOIN designation ON employedetails.designationid = designation.designationid INNER JOIN branchmapping ON employedetails.branchid = branchmapping.subbranch WHERE    (employedetails.status = 'No') AND (salaryadvance_1.amount <> 0) AND (salaryadvance_1.doe BETWEEN @D1 AND @D2) AND (branchmapping.mainbranch = @m) ORDER BY  derivedtbl_1.Sno DESC");
            cmd.Parameters.Add("@m", mainbranch);
            cmd.Parameters.Add("@D1", GetLowDate(ServerDateCurrentdate).AddMonths(-1));
            cmd.Parameters.Add("@D2", GetLowDate(ServerDateCurrentdate));
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<getsdavancedetailes> bankMasterlist = new List<getsdavancedetailes>();
            foreach (DataRow dr in routes.Rows)
            {
                getsdavancedetailes getadvancdedetailes = new getsdavancedetailes();
                getadvancdedetailes.sno = dr["sno"].ToString();
                getadvancdedetailes.empcode = dr["employee_num"].ToString();
                getadvancdedetailes.employeid = dr["empid"].ToString();
                getadvancdedetailes.fullname = dr["fullname"].ToString();
                getadvancdedetailes.Designetion = dr["designation"].ToString();
                getadvancdedetailes.Department = dr["department"].ToString();
                getadvancdedetailes.Remarks = dr["remarks"].ToString();
                getadvancdedetailes.joindate = dr["joindate"].ToString();
                string monthofpaid = dr["monthofpaid"].ToString();
                if (monthofpaid != "")
                {
                    //getadvancdedetailes.netpay = dr["netpay"].ToString();
                    getadvancdedetailes.monthofpaid = ((DateTime)dr["monthofpaid"]).ToString("dd-MMM-yyyy");
                    getadvancdedetailes.monthofpaidname = ((DateTime)dr["monthofpaid"]).ToString("MMM");
                }
                else
                {
                    getadvancdedetailes.monthofpaid = monthofpaid;
                    getadvancdedetailes.monthofpaidname = monthofpaid;
                }
                //dr["monthofpaid"].ToString();//((DateTime)dr["monthofpaid"]).ToString("yyyy-MM-dd");
                getadvancdedetailes.doe = ((DateTime)dr["doe"]).ToString("dd-MMM-yyyy");//dr["monthofpaid"].ToString();//((DateTime)dr["monthofpaid"]).ToString("yyyy-MM-dd");
                getadvancdedetailes.Amount = dr["amount"].ToString();

                bankMasterlist.Add(getadvancdedetailes);
            }
            string response = GetJson(bankMasterlist);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }

    private void get_salaryadvance_generate(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            //branchmapping
            string employeid = context.Request["employeid"];
            string frmdate = context.Request["fromdate"];
            DateTime fromdate = Convert.ToDateTime(frmdate);
            string tdate = context.Request["todate"];
            DateTime todate = Convert.ToDateTime(tdate);
            string mainbranch = context.Session["mainbranch"].ToString();
            if (employeid != "")
            {
                cmd = new SqlCommand("SELECT employedetails.employee_num, employedetails.fullname, salaryadvance.sno, salaryadvance.doe, salaryadvance.amount, salaryadvance.remarks, salaryadvance.empid, salaryadvance.monthofpaid,designation.designation, departments.department, employedetails.joindate FROM employedetails INNER JOIN salaryadvance ON employedetails.empid = salaryadvance.empid INNER JOIN branchmapping ON employedetails.branchid = branchmapping.subbranch INNER JOIN designation ON employedetails.designationid = designation.designationid INNER JOIN departments ON employedetails.employee_dept = departments.deptid WHERE (employedetails.status = 'No') AND (branchmapping.mainbranch = @m) AND (salaryadvance.amount <> 0) AND (salaryadvance.doe BETWEEN @d1 AND @d2) AND (salaryadvance.empid=@SEMPID)");
                cmd.Parameters.Add("@SEMPID", employeid);
                cmd.Parameters.Add("@d1", GetLowDate(fromdate));
                cmd.Parameters.Add("@d2", GetHighDate(todate));
            }
            else
            {
                cmd = new SqlCommand("SELECT employedetails.employee_num, employedetails.fullname, salaryadvance.sno, salaryadvance.doe, salaryadvance.amount, salaryadvance.remarks, salaryadvance.empid, salaryadvance.monthofpaid,designation.designation, departments.department, employedetails.joindate FROM employedetails INNER JOIN salaryadvance ON employedetails.empid = salaryadvance.empid INNER JOIN branchmapping ON employedetails.branchid = branchmapping.subbranch INNER JOIN designation ON employedetails.designationid = designation.designationid INNER JOIN departments ON employedetails.employee_dept = departments.deptid WHERE (employedetails.status = 'No') AND (branchmapping.mainbranch = @m) AND (salaryadvance.amount <> 0) AND (salaryadvance.doe BETWEEN @d1 AND @d2)");
                cmd.Parameters.Add("@d1", GetLowDate(fromdate));
                cmd.Parameters.Add("@d2", GetHighDate(todate));
            }
            cmd.Parameters.Add("@m", mainbranch);
            //branchwise
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<getsdavancedetailes> bankMasterlist = new List<getsdavancedetailes>();
            foreach (DataRow dr in routes.Rows)
            {
                getsdavancedetailes getadvancdedetailes = new getsdavancedetailes();
                getadvancdedetailes.sno = dr["sno"].ToString();
                getadvancdedetailes.empcode = dr["employee_num"].ToString();
                getadvancdedetailes.employeid = dr["empid"].ToString();
                getadvancdedetailes.fullname = dr["fullname"].ToString();
                getadvancdedetailes.Designetion = dr["designation"].ToString();
                getadvancdedetailes.Department = dr["department"].ToString();
                getadvancdedetailes.Remarks = dr["remarks"].ToString();
                getadvancdedetailes.joindate = dr["joindate"].ToString();
                string monthofpaid = dr["monthofpaid"].ToString();
                if (monthofpaid != "")
                {
                    //getadvancdedetailes.netpay = dr["netpay"].ToString();
                    getadvancdedetailes.monthofpaid = ((DateTime)dr["monthofpaid"]).ToString("dd-MM-yyyy");
                    getadvancdedetailes.monthofpaidname = ((DateTime)dr["monthofpaid"]).ToString("MMM");
                }
                else
                {
                    getadvancdedetailes.monthofpaid = monthofpaid;
                    getadvancdedetailes.monthofpaidname = monthofpaid;
                }
                //dr["monthofpaid"].ToString();//((DateTime)dr["monthofpaid"]).ToString("yyyy-MM-dd");
                getadvancdedetailes.doe = ((DateTime)dr["doe"]).ToString("dd-MM-yyyy");//dr["monthofpaid"].ToString();//((DateTime)dr["monthofpaid"]).ToString("yyyy-MM-dd");
                getadvancdedetailes.Amount = dr["amount"].ToString();

                bankMasterlist.Add(getadvancdedetailes);
            }
            string response = GetJson(bankMasterlist);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);

        }
    }
    public class getsdavancedetailess
    {
        public string sno { get; set; }
        public string employeid { get; set; }
        public string fullname { get; set; }
        public string department { get; set; }
        public string Amount { get; set; }
        public string monthofpaid { get; set; }
        public string doe { get; set; }
        public string Remarks { get; set; }
        public string empcode { get; set; }
        public string deptid { get; set; }
        public string Designetion { get; set; }
        public string Department { get; set; }
        public string monthofpaidname { get; set; }
        public string joindate { get; set; }
        public string netpay { get; set; }
        public string amount { get; set; }

    }
    private void get_salaryadvance(HttpContext context)
    {
        try
        {
            string Empcode = context.Request["empid"];
            vdm = new DBManager();
            cmd = new SqlCommand("SELECT employedetails.employee_num, employedetails.fullname, salaryadvance.sno, salaryadvance.doe, salaryadvance.amount, salaryadvance.remarks, salaryadvance.empid, salaryadvance.monthofpaid, designation.designation, departments.department, employedetails.joindate FROM employedetails INNER JOIN  salaryadvance ON employedetails.empid = salaryadvance.empid INNER JOIN  branchmapping ON employedetails.branchid = branchmapping.subbranch INNER JOIN designation ON employedetails.designationid = designation.designationid INNER JOIN departments ON employedetails.employee_dept = departments.deptid WHERE (employedetails.employee_num = @Empcode)");
            cmd.Parameters.Add("@Empcode", Empcode);

            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<getsdavancedetailess> bankMasterlist = new List<getsdavancedetailess>();
            foreach (DataRow dr in routes.Rows)
            {
                getsdavancedetailess getadvancdedetailes = new getsdavancedetailess();
                getadvancdedetailes.sno = dr["sno"].ToString();
                getadvancdedetailes.empcode = dr["employee_num"].ToString();
                getadvancdedetailes.employeid = dr["empid"].ToString();
                getadvancdedetailes.fullname = dr["fullname"].ToString();
                getadvancdedetailes.Designetion = dr["designation"].ToString();
                getadvancdedetailes.Department = dr["department"].ToString();
                getadvancdedetailes.Remarks = dr["remarks"].ToString();
                getadvancdedetailes.joindate = dr["joindate"].ToString();
                getadvancdedetailes.amount = dr["amount"].ToString();
                getadvancdedetailes.doe = ((DateTime)dr["doe"]).ToString("dd-MMM-yyyy");
                bankMasterlist.Add(getadvancdedetailes);
            }
            string response = GetJson(bankMasterlist);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }
    //private void get_salaryadvance_details(HttpContext context)
    //{
    //    try
    //    {
    //        vdm = new DBManager();
    //        //branchmapping
    //        DateTime ServerDateCurrentdate = DBManager.GetTime(vdm.conn);
    //        string mainbranch = context.Session["mainbranch"].ToString();
    //        cmd = new SqlCommand("SELECT   employedetails.employee_num, employedetails.fullname, salaryadvance.sno, salaryadvance.doe, salaryadvance.amount, salaryadvance.remarks, salaryadvance.empid, salaryadvance.monthofpaid,  designation.designation, departments.department FROM   employedetails INNER JOIN salaryadvance ON employedetails.empid = salaryadvance.empid INNER JOIN branchmapping ON employedetails.branchid = branchmapping.subbranch INNER JOIN designation ON employedetails.designationid = designation.designationid INNER JOIN departments ON employedetails.employee_dept = departments.deptid WHERE (employedetails.status = 'No') AND (branchmapping.mainbranch = @m) AND (salaryadvance.amount <> 0) AND (salaryadvance.doe BETWEEN @d1 AND @d2)");
    //        cmd.Parameters.Add("@m", mainbranch);
    //        cmd.Parameters.Add("@d1", GetLowDate(ServerDateCurrentdate).AddDays(-30));
    //        cmd.Parameters.Add("@d2", GetHighDate(ServerDateCurrentdate));
    //        //branchwise
    //        DataTable routes = vdm.SelectQuery(cmd).Tables[0];
    //        List<getsdavancedetailes> bankMasterlist = new List<getsdavancedetailes>();
    //        foreach (DataRow dr in routes.Rows)
    //        {
    //            getsdavancedetailes getadvancdedetailes = new getsdavancedetailes();
    //            getadvancdedetailes.sno = dr["sno"].ToString();
    //            getadvancdedetailes.empcode = dr["employee_num"].ToString();
    //            getadvancdedetailes.employeid = dr["empid"].ToString();
    //            getadvancdedetailes.fullname = dr["fullname"].ToString();
    //            getadvancdedetailes.Designetion = dr["designation"].ToString();
    //            getadvancdedetailes.Department = dr["department"].ToString();
    //            getadvancdedetailes.Remarks = dr["remarks"].ToString();
    //            getadvancdedetailes.monthofpaid = ((DateTime)dr["doe"]).ToString("dd-MMM-yyyy");//dr["monthofpaid"].ToString();//((DateTime)dr["monthofpaid"]).ToString("yyyy-MM-dd");
    //            getadvancdedetailes.doe = ((DateTime)dr["doe"]).ToString("dd-MMM-yyyy");//dr["monthofpaid"].ToString();//((DateTime)dr["monthofpaid"]).ToString("yyyy-MM-dd");
    //            getadvancdedetailes.Amount = dr["amount"].ToString();
    //            bankMasterlist.Add(getadvancdedetailes);
    //        }
    //        string response = GetJson(bankMasterlist);
    //        context.Response.Write(response);
    //    }
    //    catch (Exception ex)
    //    {
    //        string Response = GetJson(ex.Message);
    //        context.Response.Write(Response);

    //    }
    //}
    private void get_paysalary_Details(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            string empid = context.Session["empid"].ToString();
            string noofmonths = context.Request["noofmonths"];
            string branchid = context.Session["branchid"].ToString();
            DateTime ServerDateCurrentdate = DBManager.GetTime(vdm.conn);
            DateTime dtfromdate = ServerDateCurrentdate;
            DateTime dttodate = ServerDateCurrentdate;
            string amonth = "";
            string ayear = "";
            int otdays = 0;
            string bid = "";
            double mobdeduction = 0;
            double canteendeduction = 0;
            double saladvance = 0;
            double loanamount = 0;
            double medicliam = 0;
            double tds = 0;
            double otherdeduction = 0;
            double loandeduction = 0;
            double netpay = 0;
            double professionaltax = 0;
            double providentfound = 0;
            double esi = 0;
            double mobilededuction = 0;
            double salaryadvance = 0;
            double msal = 0;
            double otvalue = 0;
            double loan = 0;
            double sal = 0;
            double grossbasic = 0;
            double erbasic = 0;
            double canten = 0;
            double incometax = 0;
            double medical = 0;
            double medicalallavance = 0;
            double conveyanceallavance = 0;
            double washingallowance = 0;
            double grossmedicalallavance = 0;
            double conveyance = 0;
            double grossconveyanceallavance = 0;
            double washing = 0;
            double grosswashingallowance = 0;
            double grosshra = 0;
            double hre = 0;
            double totalernings = 0;
            double grosstotalernings = 0;
            double totaldeduction = 0;
            double netsal = 0;
            double losofprofitionaltax = 0;
            double pt = 0;
            double medicalcilam = 0;
            double tdsdeduction = 0;
            cmd = new SqlCommand("SELECT branchid From employedetails where empid=@eid");
            cmd.Parameters.Add("@eid", empid);
            DataTable dtbranches = vdm.SelectQuery(cmd).Tables[0];
            if (dtbranches.Rows.Count > 0)
            {
                bid = dtbranches.Rows[0]["branchid"].ToString();
            }
            cmd = new SqlCommand("SELECT fromdate, todate FROM branchmaster where branchid=@branchid");
            cmd.Parameters.Add("@branchid", bid);
            DataTable dtroutes = vdm.SelectQuery(cmd).Tables[0];
            int noofmnts = Convert.ToInt32(noofmonths);
            int i = 0;
            for (i = 1; i <= noofmnts; i++)
            {
                if (dtroutes.Rows.Count > 0)
                {
                    DateTime fromdate = ServerDateCurrentdate;
                    //DateTime todate = DateTime.Now;
                    if (i == 1)
                    {
                        DateTime dtfrom = fromdate.AddMonths(-1);
                        string frmdate = dtfrom.ToString("MM/dd/yyyy");
                        string[] str = frmdate.Split('/');
                        int lastmonth = Convert.ToInt32(dtroutes.Rows[0]["fromdate"].ToString());
                        int years = Convert.ToInt32(str[2]);
                        int months = Convert.ToInt32(str[0]);
                        dtfromdate = new DateTime(years, months, lastmonth);
                        amonth = str[0];
                        ayear = str[2];
                        DateTime dtto = fromdate.AddMonths(-2);
                        string todate = dtto.ToString("MM/dd/yyyy");
                        string[] strto = todate.Split('/');
                        int prasentdate = Convert.ToInt32(dtroutes.Rows[0]["todate"].ToString());
                        int prasentyears = Convert.ToInt32(strto[2]);
                        int prasentmonths = Convert.ToInt32(strto[0]);
                        dttodate = new DateTime(prasentyears, prasentmonths, prasentdate);
                    }
                    else
                    {
                        DateTime dtfrom = fromdate.AddMonths(-i);
                        string frmdate = dtfrom.ToString("MM/dd/yyyy");
                        string[] str = frmdate.Split('/');
                        int lastmonth = Convert.ToInt32(dtroutes.Rows[0]["fromdate"].ToString());
                        int years = Convert.ToInt32(str[2]);
                        int months = Convert.ToInt32(str[0]);
                        dtfromdate = new DateTime(years, months, lastmonth);
                        amonth = str[0];
                        ayear = str[2];
                        int k = i - 1;
                        DateTime dtto = fromdate.AddMonths(-k);
                        string todate = dtto.ToString("MM/dd/yyyy");
                        string[] strto = todate.Split('/');
                        int prasentdate = Convert.ToInt32(dtroutes.Rows[0]["todate"].ToString());
                        int prasentyears = Convert.ToInt32(strto[2]);
                        int prasentmonths = Convert.ToInt32(strto[0]);
                        dttodate = new DateTime(prasentyears, prasentmonths, prasentdate);
                    }
                }
                cmd = new SqlCommand("SELECT  employedetails.employee_num, employedetails.email, employedetails.empid, employepfdetails.estnumber, employedetails.salarymode, branchmaster.statename, employedetails.pfeligible, employedetails.esieligible, employedetails.fullname, monthly_attendance.lop, monthly_attendance.numberofworkingdays, monthly_attendance.otdays, monthly_attendance.clorwo, monthly_attendance.extradays, monthly_attendance.month, monthly_attendance.year, employedetails.joindate, branchmaster.branchname, employepfdetails.pfnumber, employepfdetails.uannumber, employedetails.pancard, employebankdetails.accountno, designation.designation, departments.department, bankmaster.bankname, salaryappraisals.gross, salaryappraisals.erningbasic,salaryappraisals.salaryperyear,salaryappraisals.hra, salaryappraisals.profitionaltax, salaryappraisals.esi, salaryappraisals.providentfund, salaryappraisals.conveyance, salaryappraisals.medicalerning, salaryappraisals.washingallowance, salaryappraisals.travelconveyance,employedetails.cellphone FROM employebankdetails INNER JOIN bankmaster ON employebankdetails.bankid = bankmaster.sno INNER JOIN employedetails INNER JOIN monthly_attendance ON employedetails.empid = monthly_attendance.empid INNER JOIN designation ON employedetails.designationid = designation.designationid INNER JOIN departments ON employedetails.employee_dept = departments.deptid ON employebankdetails.employeid = employedetails.empid INNER JOIN branchmaster ON employedetails.branchid = branchmaster.branchid INNER JOIN salaryappraisals ON employedetails.empid = salaryappraisals.empid LEFT OUTER JOIN employepfdetails ON employedetails.empid = employepfdetails.employeid WHERE (monthly_attendance.month = @month) AND (monthly_attendance.year = @year) AND (employedetails.empid = @empid) AND (salaryappraisals.endingdate IS NULL)  AND (salaryappraisals.startingdate <= @d1) OR (monthly_attendance.month = @month) AND (monthly_attendance.year = @year) AND (employedetails.empid = @empid) AND (salaryappraisals.endingdate > @d1) AND (salaryappraisals.startingdate <= @d1)");
                //paystrure
                // cmd = new SqlCommand("SELECT employedetails.employee_num, branchmaster.statename, employedetails.email, employedetails.empid, employepfdetails.estnumber, employedetails.salarymode,employedetails.pfeligible, employedetails.esieligible, employedetails.fullname, monthly_attendance.lop, monthly_attendance.numberofworkingdays, monthly_attendance.otdays, monthly_attendance.clorwo, monthly_attendance.extradays, monthly_attendance.month, monthly_attendance.year, pay_structure.salaryperyear, employedetails.joindate, branchmaster.branchname, employepfdetails.pfnumber, employepfdetails.uannumber, employedetails.pancard, pay_structure.erningbasic, pay_structure.hra, pay_structure.conveyance, pay_structure.medicalerning,pay_structure.washingallowance FROM employepfdetails RIGHT OUTER JOIN employedetails INNER JOIN monthly_attendance ON employedetails.empid = monthly_attendance.empid INNER JOIN pay_structure ON employedetails.empid = pay_structure.empid INNER JOIN branchmaster ON employedetails.branchid = branchmaster.branchid ON employepfdetails.employeid = employedetails.empid WHERE (employedetails.empid = @empid) AND (monthly_attendance.month = @month) AND (monthly_attendance.year = @year)");
                cmd.Parameters.Add("@empid", empid);
                cmd.Parameters.Add("@month", amonth);
                cmd.Parameters.Add("@year", ayear);
                cmd.Parameters.Add("@d1", dtfromdate);
                DataTable routes = vdm.SelectQuery(cmd).Tables[0];
                List<salarydetales> salDetails = new List<salarydetales>();
                foreach (DataRow dr in routes.Rows)
                {
                    salarydetales getsaldetails = new salarydetales();
                    cmd = new SqlCommand("SELECT deductionamount from mobile_deduction where empid=@eempid AND month = @emonth AND year= @eyear");
                    cmd.Parameters.Add("@eempid", empid);
                    cmd.Parameters.Add("@emonth", amonth);
                    cmd.Parameters.Add("@eyear", ayear);
                    DataTable dtmobile = vdm.SelectQuery(cmd).Tables[0];
                    if (dtmobile.Rows.Count > 0)
                    {
                        foreach (DataRow drmobile in dtmobile.Rows)
                        {
                            getsaldetails.mobilededuction = drmobile["deductionamount"].ToString();
                            mobdeduction = Convert.ToDouble(drmobile["deductionamount"].ToString());
                        }
                    }
                    else
                    {
                        getsaldetails.mobilededuction = "0";
                    }
                    cmd = new SqlCommand("SELECT amount from canteendeductions where empid=@cempid AND month = @cmonth AND year= @cyear");
                    cmd.Parameters.Add("@cempid", empid);
                    cmd.Parameters.Add("@cmonth", amonth);
                    cmd.Parameters.Add("@cyear", ayear);
                    DataTable dtcantenn = vdm.SelectQuery(cmd).Tables[0];
                    if (dtcantenn.Rows.Count > 0)
                    {
                        foreach (DataRow drcanteen in dtcantenn.Rows)
                        {
                            getsaldetails.canteendeduction = drcanteen["amount"].ToString();
                            canteendeduction = Convert.ToDouble(drcanteen["amount"].ToString());
                        }
                    }
                    else
                    {
                        getsaldetails.canteendeduction = "0";
                        canteendeduction = 0;
                    }

                    cmd = new SqlCommand("SELECT amount from salaryadvance where empid=@Sempid AND month = @Smonth AND year= @Syear");
                    cmd.Parameters.Add("@Sempid", empid);
                    cmd.Parameters.Add("@Smonth", amonth);
                    cmd.Parameters.Add("@Syear", ayear);
                    DataTable dtsalary = vdm.SelectQuery(cmd).Tables[0];
                    if (dtsalary.Rows.Count > 0)
                    {
                        foreach (DataRow drsal in dtsalary.Rows)
                        {
                            getsaldetails.salaryadvance = drsal["amount"].ToString();
                            saladvance = Convert.ToDouble(drsal["amount"].ToString());
                        }
                    }
                    else
                    {
                        getsaldetails.salaryadvance = "0";
                    }
                    //getsaldetails.salaryadvance = "3000";
                    cmd = new SqlCommand("SELECT loanemimonth from loan_request where empid=@lempid AND month = @lmonth AND year= @lyear");
                    cmd.Parameters.Add("@lempid", empid);
                    cmd.Parameters.Add("@lmonth", amonth);
                    cmd.Parameters.Add("@lyear", ayear);
                    DataTable dtloan = vdm.SelectQuery(cmd).Tables[0];
                    if (dtloan.Rows.Count > 0)
                    {
                        foreach (DataRow drloan in dtloan.Rows)
                        {
                            getsaldetails.loanamount = drloan["loanemimonth"].ToString();
                            loanamount = Convert.ToDouble(drloan["loanemimonth"].ToString());
                        }
                    }
                    else
                    {
                        getsaldetails.loanamount = "0";
                    }

                    cmd = new SqlCommand("SELECT medicliamamount from mediclaimdeduction where empid=@mempid");
                    cmd.Parameters.Add("@mempid", empid);
                    DataTable dtmediclim = vdm.SelectQuery(cmd).Tables[0];
                    if (dtmediclim.Rows.Count > 0)
                    {
                        foreach (DataRow drmedi in dtmediclim.Rows)
                        {
                            getsaldetails.mediclaimdeduction = drmedi["medicliamamount"].ToString();
                            medicliam = Convert.ToDouble(drmedi["medicliamamount"].ToString());
                        }
                    }
                    else
                    {
                        getsaldetails.mediclaimdeduction = "0";
                    }

                    cmd = new SqlCommand("SELECT otherdeductionamount from otherdeduction where empid=@odempid AND month = @odmonth AND year= @odyear");
                    cmd.Parameters.Add("@odempid", empid);
                    cmd.Parameters.Add("@odmonth", amonth);
                    cmd.Parameters.Add("@odyear", ayear);
                    DataTable dtother = vdm.SelectQuery(cmd).Tables[0];
                    if (dtother.Rows.Count > 0)
                    {
                        foreach (DataRow drod in dtother.Rows)
                        {
                            getsaldetails.otherdeduction = drod["otherdeductionamount"].ToString();
                            otherdeduction = Convert.ToDouble(drod["otherdeductionamount"].ToString());
                        }
                    }
                    else
                    {
                        getsaldetails.otherdeduction = "0";
                    }

                    cmd = new SqlCommand("SELECT tdsamount from tds_deduction where empid=@mempid");
                    cmd.Parameters.Add("@mempid", empid);
                    DataTable dttds = vdm.SelectQuery(cmd).Tables[0];
                    if (dttds.Rows.Count > 0)
                    {
                        foreach (DataRow drtds in dttds.Rows)
                        {
                            getsaldetails.tdsdeduction = drtds["tdsamount"].ToString();
                            tds = Convert.ToDouble(drtds["tdsamount"].ToString());
                        }
                    }
                    else
                    {
                        getsaldetails.tdsdeduction = "0";
                    }

                    getsaldetails.empsno = empid;
                    getsaldetails.empname = dr["fullname"].ToString();
                    getsaldetails.statename = dr["statename"].ToString();
                    getsaldetails.emailid = dr["email"].ToString();
                    getsaldetails.joindate = dr["joindate"].ToString();
                    getsaldetails.branchname = dr["branchname"].ToString();
                    getsaldetails.designation = dr["designation"].ToString();
                    getsaldetails.contactno = dr["cellphone"].ToString();
                    getsaldetails.emailid = dr["email"].ToString();
                    getsaldetails.pfeligible = dr["pfeligible"].ToString();
                    getsaldetails.esieligible = dr["esieligible"].ToString();
                    getsaldetails.salarymode = dr["salarymode"].ToString();
                    getsaldetails.employeid = dr["employee_num"].ToString();
                    getsaldetails.month = dr["month"].ToString();
                    int year = Convert.ToInt32(dr["year"].ToString());
                    int month = Convert.ToInt32(dr["month"].ToString());
                    string strMonthName = CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(month);
                    getsaldetails.MonthName = strMonthName;
                    double days = Convert.ToDouble(dr["lop"].ToString());
                    //int daysInmonth = DateTime.DaysInMonth(year, month);
                    getsaldetails.year = dr["year"].ToString();
                    TimeSpan t = dtfromdate - dttodate;
                    int NrOfDays = int.Parse(t.TotalDays.ToString());
                    // double NrOfDays = t.TotalDays;
                    getsaldetails.daysinmonth = NrOfDays.ToString();
                    List<DateTime> dates = new List<DateTime>();
                    int countsundays = 0;
                    countsundays = Convert.ToInt32(dr["clorwo"].ToString());
                    double noofsundays = countsundays;
                    double effectiveworkingdays = NrOfDays - noofsundays;
                    double noofdays = Convert.ToDouble(days);
                    double totaldays = NrOfDays;
                    getsaldetails.cloroff = countsundays.ToString();
                    getsaldetails.noofworkingdays = effectiveworkingdays.ToString();
                    getsaldetails.noofdayspaid = (effectiveworkingdays - noofdays).ToString();
                    double dayspaid = effectiveworkingdays - noofdays;
                    double effectiveworkdays = dayspaid + countsundays;
                    getsaldetails.effectivedays = effectiveworkdays.ToString();
                    getsaldetails.lop = days.ToString();
                    string lop = days.ToString();
                    double lossofpay = Convert.ToDouble(lop);
                    getsaldetails.salary = dr["salaryperyear"].ToString();
                    double grosssal = Convert.ToDouble(dr["salaryperyear"].ToString());
                    double monthsalary = grosssal / 12;
                    monthsalary = Math.Round(monthsalary, 2);
                    string monthsal = monthsalary.ToString();
                    getsaldetails.monthsal = monthsalary.ToString();
                    // getsaldetails.attandancedays = monthsalary.ToString();
                    double otval = Convert.ToDouble(20000);
                    if (monthsalary < otval)
                    {
                        getsaldetails.otdays = dr["otdays"].ToString();
                    }
                    else
                    {
                        getsaldetails.otdays = "0";
                    }
                    getsaldetails.salarymode = dr["salarymode"].ToString();
                    double salary = monthsalary;
                    string statename = dr["statename"].ToString();
                    string pfeligible = dr["pfeligible"].ToString();
                    string esieligible = dr["esieligible"].ToString();
                    if (getsaldetails.salarymode == "0")
                    {
                        if (getsaldetails.lop == "0")
                        {
                            msal = Convert.ToDouble(monthsal);
                            double perdayamount = msal / NrOfDays;
                            double lossofamount = lossofpay * perdayamount;
                            double totalsal = msal - lossofamount;
                            otvalue = Convert.ToDouble(otdays) * perdayamount;
                            sal = 50;
                            grossbasic = (msal * sal) / 100;
                            erbasic = Math.Round(totalsal * sal) / 100;
                            providentfound = 0;
                            esi = 0;
                            if (pfeligible == "No")
                            {
                                providentfound = 0;
                            }
                            else
                            {
                                double pf = 6;
                                providentfound = Math.Round(totalsal * pf) / 100;
                                if (providentfound > 1800)
                                {
                                    providentfound = 1800;
                                }
                                //double pf = 12;
                                //providentfound = Math.Round(erbasic * pf) / 100;
                            }
                            if (esieligible == "No")
                            {
                                esi = 0;
                            }
                            else
                            {
                                double esiper = 1.75;
                                esi = Math.Round(totalsal * esiper) / 100;
                            }
                            canten = Convert.ToDouble(canteendeduction);
                            incometax = 0;

                            medical = 1250;
                            medicalallavance = 1250;
                            grossmedicalallavance = 1250;

                            conveyanceallavance = 1600;
                            conveyance = 1600;
                            grossconveyanceallavance = conveyance;

                            washing = 1000;
                            washingallowance = 1000;
                            grosswashingallowance = washing;

                            double tot = 0;
                            tot = Math.Round(medical + conveyance + washing + erbasic);
                            double ghtotal = Math.Round(grossbasic + grossconveyanceallavance + grosswashingallowance + grossmedicalallavance);
                            grosshra = Math.Round(msal - ghtotal);
                            hre = 0;
                            hre = Math.Round(totalsal - tot);
                            if (hre > 0)
                            {
                            }
                            else
                            {
                                hre = 0;
                            }
                            // professionaltax = 0;
                            if (statename == "AndraPrdesh")
                            {
                                if (salary > 1000 && salary <= 15000)
                                {
                                    professionaltax = 0;
                                }
                                else if (salary >= 15001 && salary <= 20000)
                                {
                                    professionaltax = 150;
                                }
                                else if (salary >= 20001)
                                {
                                    professionaltax = 200;
                                }
                            }
                            if (statename == "Tamilnadu")
                            {
                                if (salary < 7000)
                                {
                                    professionaltax = 0;
                                }
                                else if (salary >= 7001 && salary <= 10000)
                                {
                                    professionaltax = 115;
                                }
                                else if (salary >= 10001 && salary <= 11000)
                                {
                                    professionaltax = 171;
                                }
                                else if (salary >= 11001 && salary <= 12000)
                                {
                                    professionaltax = 171;
                                }
                                else if (salary >= 12001)
                                {
                                    professionaltax = 208;
                                }
                            }
                            if (statename == "karnataka")
                            {
                                if (salary <= 15000 && salary <= 15001)
                                {
                                    professionaltax = 0;
                                }
                                else if (salary >= 15001)
                                {
                                    professionaltax = 200;
                                }
                            }
                            pt = professionaltax;
                            totalernings = tot + hre;
                            grosstotalernings = Math.Round(ghtotal + grosshra);
                            totaldeduction = Math.Round(pt + providentfound + esi + canten + saladvance + incometax + loanamount + medicliam + otherdeduction + tds);
                            netsal = Math.Round(totalernings - totaldeduction);
                        }
                        else
                        {
                            msal = Convert.ToDouble(monthsal);
                            double perdayamount = msal / NrOfDays;
                            double lossofamount = lossofpay * perdayamount;
                            double totalsal = Math.Round(msal - lossofamount);
                            otvalue = Convert.ToDouble(otdays) * perdayamount;
                            sal = 50;
                            grossbasic = (msal * sal) / 100;
                            erbasic = (totalsal * sal) / 100;
                            providentfound = 0;
                            esi = 0;
                            if (pfeligible == "No")
                            {
                                providentfound = 0;
                            }
                            else
                            {
                                double pf = 6;
                                providentfound = Math.Round(totalsal * pf) / 100;
                                if (providentfound > 1800)
                                {
                                    providentfound = 1800;
                                }
                            }
                            if (esieligible == "No")
                            {
                                esi = 0;
                            }
                            else
                            {
                                double esiper = 1.75;
                                esi = Math.Round(totalsal * esiper) / 100;
                            }
                            canten = Convert.ToDouble(canteendeduction);
                            incometax = 0;

                            medical = 1250;
                            double perdaymedical = 1250 / NrOfDays;
                            double lossofmedical = lossofpay * perdaymedical;
                            medicalallavance = Math.Round(medical - lossofmedical);
                            grossmedicalallavance = 1250;

                            conveyance = 1600;
                            double perdayconveyance = 1600 / NrOfDays;
                            double lossofconveyance = lossofpay * perdayconveyance;
                            conveyanceallavance = Math.Round(conveyance - lossofconveyance);
                            grossconveyanceallavance = 1600;

                            washing = 1000;
                            double perdaywashing = 1000 / NrOfDays;
                            double lossofwashing = lossofpay * perdaywashing;
                            washingallowance = Math.Round(washing - lossofwashing);
                            grosswashingallowance = 1000;


                            double tot = 0;
                            tot = medicalallavance + conveyanceallavance + washingallowance + erbasic;
                            double ghtotal = grossbasic + grossconveyanceallavance + grosswashingallowance + grossmedicalallavance;
                            grosshra = Math.Round(msal - ghtotal);
                            hre = 0;
                            hre = totalsal - tot;
                            if (hre > 0)
                            {
                            }
                            else
                            {
                                hre = 0;
                            }
                            professionaltax = 0;
                            if (statename == "AndraPrdesh")
                            {
                                if (msal > 1000 && msal <= 15000)
                                {
                                    professionaltax = 0;
                                }
                                else if (msal >= 15001 && msal <= 20000)
                                {
                                    professionaltax = 150;
                                }
                                else if (msal >= 20001)
                                {
                                    professionaltax = 200;
                                }
                            }
                            if (statename == "Tamilnadu")
                            {
                                if (msal < 7000)
                                {
                                    professionaltax = 0;
                                }
                                else if (msal >= 7001 && msal <= 10000)
                                {
                                    professionaltax = 115;
                                }
                                else if (msal >= 10001 && msal <= 11000)
                                {
                                    professionaltax = 171;
                                }
                                else if (msal >= 11001 && msal <= 12000)
                                {
                                    professionaltax = 171;
                                }
                                else if (msal >= 12001)
                                {
                                    professionaltax = 208;
                                }
                            }
                            if (statename == "karnataka")
                            {
                                if (msal <= 15000 && msal <= 15001)
                                {
                                    professionaltax = 0;
                                }
                                else if (msal >= 15001)
                                {
                                    professionaltax = 200;
                                }
                            }
                            double perdaprofitionaltax = professionaltax / NrOfDays;
                            losofprofitionaltax = lossofpay * perdaprofitionaltax;
                            pt = Math.Round(professionaltax - losofprofitionaltax);
                            totalernings = Math.Round(tot + hre);
                            grosstotalernings = ghtotal + grosshra;
                            totaldeduction = Math.Round(mobdeduction + canteendeduction + saladvance + professionaltax + providentfound + loanamount + medicliam + otherdeduction + tds + esi);
                            //totaldeduction = Math.Round(pt + providentfound + esi + canten + incometax + salaryadvance + loan + medicalcilam + otherdeduction + tdsdeduction);
                            netsal = Math.Round(totalernings - totaldeduction);
                        }
                    }
                    else
                    {
                        sal = Convert.ToDouble(monthsal);
                        double perdayamount = sal / noofdays;
                        otvalue = Convert.ToDouble(otdays) * perdayamount;
                        erbasic = 0;
                        providentfound = 0;
                        conveyanceallavance = 0;
                        medicalallavance = 0;
                        washingallowance = 0;
                        professionaltax = 0;
                        hre = 0;
                        esi = 0;
                        double totalotval = sal + otvalue;
                        double cantendeductin = 0;
                    }

                    totaldeduction = Math.Round(mobdeduction + canteendeduction + saladvance + professionaltax + providentfound + loanamount + medicliam + otherdeduction + tds + esi);
                    netpay = totalernings - totaldeduction;
                    getsaldetails.totaldeduction = totaldeduction.ToString();
                    getsaldetails.netamount = netpay.ToString();
                    salDetails.Add(getsaldetails);
                    //pay_structure.erningbasic, pay_structure.hra, pay_structure.conveyance, pay_structure.medicalerning, pay_structure.washingallowance
                    getsaldetails.erbasic = dr["erningbasic"].ToString();
                    getsaldetails.conveyance = dr["conveyance"].ToString();
                    getsaldetails.washingallowance = dr["washingallowance"].ToString();
                    getsaldetails.hre = dr["hra"].ToString();
                    getsaldetails.medical = dr["medicalerning"].ToString();
                    getsaldetails.professionaltax = professionaltax.ToString();
                    getsaldetails.providentfound = providentfound.ToString();
                    getsaldetails.esi = esi.ToString();
                    getsaldetails.salaryadvance = saladvance.ToString();
                    getsaldetails.loanamount = loanamount.ToString();
                    getsaldetails.canteendeduction = canteendeduction.ToString();
                    getsaldetails.mobilededuction = mobdeduction.ToString();
                    getsaldetails.otherdeduction = otherdeduction.ToString();
                    getsaldetails.mediclaimdeduction = medicliam.ToString();
                    getsaldetails.tdsdeduction = tds.ToString();
                    getsaldetails.totaldeduction = totaldeduction.ToString();
                    getsaldetails.netamount = netpay.ToString();

                    salDetails.Add(getsaldetails);
                }
                string response = GetJson(salDetails);
                context.Response.Write(response);
            }
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }

    private void get_anualsalary_Details(HttpContext context)
    {
        vdm = new DBManager();
        string empid = context.Session["empid"].ToString();
        string branchid = context.Session["branchid"].ToString();
        DateTime ServerDateCurrentdate = DBManager.GetTime(vdm.conn);
        DateTime dtfromdate = ServerDateCurrentdate;
        DateTime dttodate = ServerDateCurrentdate;
        DateTime dtapril = new DateTime();
        DateTime dtmarch = new DateTime();
        int currentyear = ServerDateCurrentdate.Year;
        int nextyear = ServerDateCurrentdate.Year + 1;
        if (ServerDateCurrentdate.Month > 3)
        {
            string apr = "4/1/" + currentyear;
            dtapril = DateTime.Parse(apr);
            string march = "3/31/" + nextyear;
            dtmarch = DateTime.Parse(march);
        }
        if (ServerDateCurrentdate.Month <= 3)
        {
            string apr = "4/1/" + (currentyear - 1);
            dtapril = DateTime.Parse(apr);
            string march = "3/31/" + (nextyear - 1);
            dtmarch = DateTime.Parse(march);
        }
        cmd = new SqlCommand("SELECT Sum(isnull(cast(gross as float),0)) as gross, Sum(isnull(cast(totaldeduction as float),0)) as totaldeduction, Sum(isnull(cast(netpay as float),0)) as netpay, SUM(ISNULL(CAST(pf AS float), 0)) AS Pf FROM monthlysalarystatement where empid=@eid AND dateofclosing BETWEEN @d1 AND @d2");
        cmd.Parameters.Add("@eid", empid);
        cmd.Parameters.Add("@d1", GetLowDate(dtapril));
        cmd.Parameters.Add("@d2", GetHighDate(dtmarch));
        DataTable dttotal = vdm.SelectQuery(cmd).Tables[0];
        List<salarydetales> salDetails = new List<salarydetales>();
        if (dttotal.Rows.Count > 0)
        {
            foreach (DataRow dr in dttotal.Rows)
            {
                salarydetales sal = new salarydetales();
                sal.gross = dr["gross"].ToString();
                sal.totaldeduction = dr["totaldeduction"].ToString();
                sal.netamount = dr["netpay"].ToString();
                sal.Pf = dr["Pf"].ToString();
                salDetails.Add(sal);
            }
        }
        string response = GetJson(salDetails);
        context.Response.Write(response);
    }



    //---------shiva-------------------//


    private void get_anualit_Details(HttpContext context)
    {
        vdm = new DBManager();
        string empid = context.Session["empid"].ToString();
        DateTime ServerDateCurrentdate = DBManager.GetTime(vdm.conn);
        DateTime dtfromdate = ServerDateCurrentdate;
        DateTime dttodate = ServerDateCurrentdate;
        DateTime dtapril = new DateTime();
        DateTime dtmarch = new DateTime();
        int currentyear = ServerDateCurrentdate.Year;
        int priviousyear = ServerDateCurrentdate.Year - 1;
        int nextyear = ServerDateCurrentdate.Year + 1;
        if (ServerDateCurrentdate.Month > 3)
        {
            string apr = "4/1/" + currentyear;
            dtapril = DateTime.Parse(apr);
            string march = "3/31/" + nextyear;
            dtmarch = DateTime.Parse(march);
        }
        if (ServerDateCurrentdate.Month <= 3)
        {
            string apr = "4/1/" + (currentyear - 1);
            dtapril = DateTime.Parse(apr);
            string march = "3/31/" + (nextyear - 1);
            dtmarch = DateTime.Parse(march);
        }
        cmd = new SqlCommand("SELECT monthlysalarystatement.empid, SUM(ISNULL(CAST(monthlysalarystatement.tdsdeduction AS float), 0)) AS txpaid, tds_deduction.tdsamount FROM  monthlysalarystatement INNER JOIN tds_deduction ON monthlysalarystatement.empid = tds_deduction.empid WHERE (monthlysalarystatement.empid = @empid) AND (monthlysalarystatement.year = @year) GROUP BY monthlysalarystatement.empid, tds_deduction.tdsamount, monthlysalarystatement.year");
        cmd.Parameters.Add("@empid", empid);
        cmd.Parameters.Add("@year", priviousyear);
        DataTable dttotal = vdm.SelectQuery(cmd).Tables[0];
        List<salarydetales> salDetails = new List<salarydetales>();
        if (dttotal.Rows.Count > 0)
        {
            foreach (DataRow dr in dttotal.Rows)
            {
                salarydetales sal = new salarydetales();
                sal.TdsAmnt = dr["tdsamount"].ToString();
                sal.txpaid = dr["txpaid"].ToString();
                salDetails.Add(sal);
            }
        }
        string response = GetJson(salDetails);
        context.Response.Write(response);
    }



    private void get_salaryytd_Details(HttpContext context)
    {
        vdm = new DBManager();
        string empid = context.Session["empid"].ToString();
        string branchid = context.Session["branchid"].ToString();
        DateTime ServerDateCurrentdate = DBManager.GetTime(vdm.conn);
        DateTime dtfromdate = ServerDateCurrentdate;
        DateTime dttodate = ServerDateCurrentdate;
        DateTime dtapril = new DateTime();
        DateTime dtmarch = new DateTime();
        int currentyear = ServerDateCurrentdate.Year;
        int nextyear = ServerDateCurrentdate.Year + 1;
        if (ServerDateCurrentdate.Month > 3)
        {
            string apr = "4/1/" + currentyear;
            dtapril = DateTime.Parse(apr);
            string march = "3/31/" + nextyear;
            dtmarch = DateTime.Parse(march);
        }
        if (ServerDateCurrentdate.Month <= 3)
        {
            string apr = "4/1/" + (currentyear - 1);
            dtapril = DateTime.Parse(apr);
            string march = "3/31/" + (nextyear - 1);
            dtmarch = DateTime.Parse(march);
        }
        cmd = new SqlCommand("SELECT  gross, totaldeduction, netpay, month, year, empname,pf FROM monthlysalarystatement where empid=@eid AND dateofclosing BETWEEN @d1 AND @d2");
        cmd.Parameters.Add("@eid", empid);
        cmd.Parameters.Add("@d1", GetLowDate(dtapril));
        cmd.Parameters.Add("@d2", GetHighDate(dtmarch));
        DataTable dttotal = vdm.SelectQuery(cmd).Tables[0];
        List<salarydetales> salDetails = new List<salarydetales>();
        if (dttotal.Rows.Count > 0)
        {
            foreach (DataRow dr in dttotal.Rows)
            {
                salarydetales sal = new salarydetales();
                sal.empname = dr["empname"].ToString();
                sal.month = dr["month"].ToString();
                sal.year = dr["year"].ToString();
                sal.gross = dr["gross"].ToString();
                sal.totaldeduction = dr["totaldeduction"].ToString();
                sal.netamount = dr["netpay"].ToString();
                sal.pf = dr["pf"].ToString();
                salDetails.Add(sal);
            }
        }
        string response = GetJson(salDetails);
        context.Response.Write(response);
    }
    private void get_pf_Details(HttpContext context)
    {
        vdm = new DBManager();
        string empid = context.Session["empid"].ToString();
        string branchid = context.Session["branchid"].ToString();
        DateTime ServerDateCurrentdate = DBManager.GetTime(vdm.conn);
        DateTime dtfromdate = ServerDateCurrentdate;
        DateTime dttodate = ServerDateCurrentdate;
        DateTime dtapril = new DateTime();
        DateTime dtmarch = new DateTime();
        int currentyear = ServerDateCurrentdate.Year;
        int nextyear = ServerDateCurrentdate.Year + 1;
        if (ServerDateCurrentdate.Month > 3)
        {
            string apr = "4/1/" + currentyear;
            dtapril = DateTime.Parse(apr);
            string march = "3/31/" + nextyear;
            dtmarch = DateTime.Parse(march);
        }
        if (ServerDateCurrentdate.Month <= 3)
        {
            string apr = "4/1/" + (currentyear - 1);
            dtapril = DateTime.Parse(apr);
            string march = "3/31/" + (nextyear - 1);
            dtmarch = DateTime.Parse(march);
        }
        cmd = new SqlCommand("SELECT  gross, totaldeduction, netpay, month, year, empname,pf FROM monthlysalarystatement where empid=@eid AND dateofclosing BETWEEN @d1 AND @d2");
        cmd.Parameters.Add("@eid", empid);
        cmd.Parameters.Add("@d1", GetLowDate(dtapril));
        cmd.Parameters.Add("@d2", GetHighDate(dtmarch));
        DataTable dttotal = vdm.SelectQuery(cmd).Tables[0];
        List<salarydetales> salDetails = new List<salarydetales>();
        if (dttotal.Rows.Count > 0)
        {
            foreach (DataRow dr in dttotal.Rows)
            {
                salarydetales sal = new salarydetales();
                sal.empname = dr["empname"].ToString();
                sal.month = dr["month"].ToString();
                sal.year = dr["year"].ToString();
                sal.pf = dr["pf"].ToString();
                salDetails.Add(sal);
            }
        }
        string response = GetJson(salDetails);
        context.Response.Write(response);
    }



    private void get_incmtax_Details(HttpContext context)
    {
        vdm = new DBManager();
        string empid = context.Session["empid"].ToString();
        string branchid = context.Session["branchid"].ToString();
        DateTime ServerDateCurrentdate = DBManager.GetTime(vdm.conn);
        DateTime dtfromdate = ServerDateCurrentdate;
        DateTime dttodate = ServerDateCurrentdate;
        DateTime dtapril = new DateTime();
        DateTime dtmarch = new DateTime();
        int currentyear = ServerDateCurrentdate.Year;
        int nextyear = ServerDateCurrentdate.Year + 1;
        if (ServerDateCurrentdate.Month > 3)
        {
            string apr = "4/1/" + currentyear;
            dtapril = DateTime.Parse(apr);
            string march = "3/31/" + nextyear;
            dtmarch = DateTime.Parse(march);
        }
        if (ServerDateCurrentdate.Month <= 3)
        {
            string apr = "4/1/" + (currentyear - 1);
            dtapril = DateTime.Parse(apr);
            string march = "3/31/" + (nextyear - 1);
            dtmarch = DateTime.Parse(march);
        }
        cmd = new SqlCommand("SELECT month, year, empname, empid, totaldeduction FROM   monthlysalarystatement WHERE  (empid = @eid) AND (dateofclosing BETWEEN @d1 AND @d2)");
        cmd.Parameters.Add("@eid", empid);
        cmd.Parameters.Add("@d1", GetLowDate(dtapril));
        cmd.Parameters.Add("@d2", GetHighDate(dtmarch));
        DataTable dttotal = vdm.SelectQuery(cmd).Tables[0];
        List<salarydetales> salDetails = new List<salarydetales>();
        if (dttotal.Rows.Count > 0)
        {
            foreach (DataRow dr in dttotal.Rows)
            {
                salarydetales sal = new salarydetales();
                sal.empid = dr["empid"].ToString();
                sal.empname = dr["empname"].ToString();
                sal.month = dr["month"].ToString();
                sal.year = dr["year"].ToString();
                sal.totaldeduction = dr["totaldeduction"].ToString();
                salDetails.Add(sal);
            }
        }
        string response = GetJson(salDetails);
        context.Response.Write(response);
    }



    public class BranchDetalis
    {
        public string branchname { get; set; }
        public string branchid { get; set; }
        public string statename { get; set; }
        public string emailid { get; set; }
        public string Phone { get; set; }
        public string address { get; set; }
        public string fromdate { get; set; }
        public string todate { get; set; }
        public string nightallowance { get; set; }
        public string branchtype { get; set; }
        public string company_code { get; set; }
        public string companyname { get; set; }
        public string btnVal { get; set; }
        public string branchcode { get; set; }
        public string sapcode { get; set; }
    }
    private void saveBranchDetails(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            string mainbranch = context.Session["mainbranch"].ToString();
            string branchname = context.Request["branchname"];
            string statename = context.Request["statename"];
            string emailid = context.Request["emailid"];
            string Phone = context.Request["Phone"];
            string address = context.Request["address"];
            string fromdate = context.Request["fromdate"];
            string todate = context.Request["todate"];
            string type = context.Request["type"];
            string nightallowance = context.Request["nightallowance"];
            string branchtype = context.Request["branchtype"];
            string branchcode = context.Request["branchcode"];
            string CompanyName = context.Request["CompanyName"];
            string sapcode = context.Request["sapcode"];
            string btnSave = context.Request["btnVal"];
            if (btnSave == "Save")
            {
                cmd = new SqlCommand("insert into branchmaster (branchname,statename,emailid,phone,address,fromdate,todate,night_allowance,branchtype,company_code,branchcode,sapcode) values (@branchname,@statename,@emailid,@phone,@address,@fromdate,@todate,@nightallowance,@branchtype,@company_code,@branchcode,@sapcode)");
                cmd.Parameters.Add("@branchname", branchname);
                cmd.Parameters.Add("@statename", statename);
                cmd.Parameters.Add("@emailid", emailid);
                cmd.Parameters.Add("@phone", Phone);
                cmd.Parameters.Add("@address", address);
                cmd.Parameters.Add("@fromdate", fromdate);
                cmd.Parameters.Add("@todate", todate);
                cmd.Parameters.Add("@nightallowance", nightallowance);
                cmd.Parameters.Add("@branchtype", branchtype);
                cmd.Parameters.Add("@company_code", CompanyName);
                cmd.Parameters.Add("@branchcode", branchcode);
                cmd.Parameters.Add("@sapcode", sapcode);
                vdm.insert(cmd);
                cmd = new SqlCommand("select MAX(branchid) AS branchid from branchmaster");
                DataTable dtroutes = vdm.SelectQuery(cmd).Tables[0];
                if (dtroutes.Rows.Count > 0)
                {
                    string branchid = dtroutes.Rows[0]["branchid"].ToString();
                    cmd = new SqlCommand("insert into branchmapping (subbranch, mainbranch) values (@subbranch, @mainbranch)");
                    cmd.Parameters.Add("@subbranch", branchid);
                    cmd.Parameters.Add("@mainbranch", mainbranch);
                    vdm.insert(cmd);
                }
                string Response = GetJson("Insert Successfully");
                context.Response.Write(Response);
            }
            else
            {
                string branchid = context.Request["branchid"];
                cmd = new SqlCommand("Update branchmaster set company_code=@company_code, branchname=@branchname, branchcode=@branchcode, statename=@statename,emailid=@emailid,phone=@phone,fromdate=@fromdate,todate=@todate,address=@address,branchtype=@branchtype,night_allowance=@nightallowance,sapcode=@sapcode where branchid=@branchid ");
                cmd.Parameters.Add("@branchname", branchname);
                cmd.Parameters.Add("@branchid", branchid);
                cmd.Parameters.Add("@statename", statename);
                cmd.Parameters.Add("@emailid", emailid);
                cmd.Parameters.Add("@phone", Phone);
                cmd.Parameters.Add("@address", address);
                cmd.Parameters.Add("@fromdate", fromdate);
                cmd.Parameters.Add("@todate", todate);
                cmd.Parameters.Add("@nightallowance", nightallowance);
                cmd.Parameters.Add("@branchtype", branchtype);
                cmd.Parameters.Add("@company_code", CompanyName);
                cmd.Parameters.Add("@branchcode", branchcode);
                cmd.Parameters.Add("@sapcode", sapcode);
                vdm.Update(cmd);
                string response = GetJson("UPDATE Successfully");
                context.Response.Write(response);
            }
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }
    private void get_Branch_details(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            string mainbranch = context.Session["mainbranch"].ToString();
            //cmd = new SqlCommand("SELECT branchname,branchid,statename,emailid,phone,address,todate,fromdate,branchtype,night_allowance FROM branchmaster order by branchname");
            cmd = new SqlCommand("SELECT branchmaster.branchname,branchmaster.sapcode, branchmaster.company_code, branchmaster.branchcode, branchmaster.branchid, branchmaster.statename, branchmaster.emailid, branchmaster.phone, branchmaster.address,  branchmaster.todate, branchmaster.fromdate, branchmaster.branchtype, branchmaster.night_allowance, company_master.companyname FROM  branchmaster INNER JOIN company_master ON branchmaster.company_code = company_master.sno INNER JOIN branchmapping ON branchmaster.branchid = branchmapping.subbranch WHERE (branchmapping.mainbranch = @m) ORDER BY branchmaster.branchname");
            cmd.Parameters.Add("@m", mainbranch);
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<BranchDetalis> EmployeDetalis = new List<BranchDetalis>();
            foreach (DataRow dr in routes.Rows)
            {
                BranchDetalis getbrcdetails = new BranchDetalis();
                getbrcdetails.branchname = dr["branchname"].ToString();
                getbrcdetails.companyname = dr["companyname"].ToString();
                getbrcdetails.company_code = dr["company_code"].ToString();
                getbrcdetails.branchid = dr["branchid"].ToString();
                getbrcdetails.statename = dr["statename"].ToString();
                getbrcdetails.emailid = dr["emailid"].ToString();
                getbrcdetails.Phone = dr["phone"].ToString();
                getbrcdetails.address = dr["address"].ToString();
                getbrcdetails.todate = dr["todate"].ToString();
                getbrcdetails.fromdate = dr["fromdate"].ToString();
                getbrcdetails.nightallowance = dr["night_allowance"].ToString();
                getbrcdetails.branchtype = dr["branchtype"].ToString();
                getbrcdetails.branchcode = dr["branchcode"].ToString();
                getbrcdetails.sapcode = dr["sapcode"].ToString();

                EmployeDetalis.Add(getbrcdetails);
            }
            string response = GetJson(EmployeDetalis);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }

    private void save_assign_task_click(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            //string department = context.Request["department"];
            string employeid = context.Request["employeid"];
            string project = context.Request["project"];
            string module = context.Request["module"];
            string task = context.Request["task"];
            string dateofassign = context.Request["dateofassign"];
            string dateoffinshing = context.Request["dateoffinshing"];
            //string task = context.Request["task"];
            string btnval = context.Request["btnval"];
            DateTime ServerDateCurrentdate = DBManager.GetTime(vdm.conn);
            if (btnval == "Save")
            {
                //cmd = new SqlCommand("insert into emppaystructure (departmentid,empid,salaryperyear,profitionaltax,esi,incometax,erningbasic,hra,conveyance,medicalerning,providentfund,monthlygrosspay,totalearnings,totaldeduction,netpay) values (@department, @employe,@salaryperyear,@profitionaltax,@esi,@incometax,@erningbasic,@hra,@conveyance,@medicalerning,@providentfund,@monthlygrosspay,@totalearnings,@totaldeduction,@netpay)");
                cmd = new SqlCommand("insert into taskassign (empid,project,module,task,dateofassigntask,dateoffinshingtask,doe) values (@employe,@project,@module,@task,@dateofassigntask,@dateoffinshingtask,@doe)");
                //cmd.Parameters.Add("@department", department);
                cmd.Parameters.Add("@employe", employeid);
                cmd.Parameters.Add("@project", project);
                cmd.Parameters.Add("@module", module);
                cmd.Parameters.Add("@task", task);
                cmd.Parameters.Add("@dateofassigntask", dateofassign);
                cmd.Parameters.Add("@dateoffinshingtask", dateoffinshing);
                cmd.Parameters.Add("@doe", ServerDateCurrentdate);
                vdm.insert(cmd);
                string response = GetJson("Insert Successfully");
                context.Response.Write(response);
            }
            else
            {
            }
        }

        catch (Exception ex)
        {
            string response = GetJson(ex.Message);
            context.Response.Write(response);
        }
    }
    private void save_Loan_Request_click(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            //string department = context.Request["department"];
            string employeid = context.Request["employeid"];
            string experience = context.Request["experience"];
            string age = context.Request["age"];
            string salarydate = context.Request["salarydate"];
            string purpose_of_loan = context.Request["purpose_of_loan"];
            string previousloan = context.Request["previousloan"];
            string loanamount = context.Request["loanamount"];
            string loanemi = context.Request["loanemi"];
            string months = context.Request["months"];
            string refemp1 = context.Request["refemp1"];
            string refemp2 = context.Request["refemp2"];
            string fathername = context.Request["fathername"];
            string Cheque1 = context.Request["Cheque1"];
            string Cheque2 = context.Request["Cheque2"];
            string startdate = context.Request["startdate"];
            DateTime ServerDateCurrentdate = DBManager.GetTime(vdm.conn);
            string btnval = context.Request["btnval"];
            string User = context.Session["empid"].ToString();
            if (btnval == "Save")
            {
                cmd = new SqlCommand("insert into loan_request_form (doe,empid,experience,age,salarydate,purpose_of_loan,previousloan,loanamount,months,refemp1,refemp2,fathername,chequeno1,chequeno2,status,startdate,loanemimonth,entry_by) values (@doe,@employe,@experience,@age,@salarydate,@purpose_of_loan,@previousloan,@loanamount,@months,@refemp1,@refemp2,@fathername,@chequeno1,@chequeno2,@status,@startdate,@loanemimonth,@entry_by)"); ;
                // cmd.Parameters.Add("@department", department);
                cmd.Parameters.Add("@employe", employeid);
                cmd.Parameters.Add("@experience", experience);
                cmd.Parameters.Add("@age", age);
                cmd.Parameters.Add("@salarydate", salarydate);
                cmd.Parameters.Add("@purpose_of_loan", purpose_of_loan);
                cmd.Parameters.Add("@loanamount", loanamount);
                cmd.Parameters.Add("@previousloan", previousloan);
                cmd.Parameters.Add("@months", months);
                cmd.Parameters.Add("@refemp1", refemp1);
                cmd.Parameters.Add("@refemp2", refemp2);
                cmd.Parameters.Add("@fathername", fathername);
                cmd.Parameters.Add("@chequeno1", Cheque1);
                cmd.Parameters.Add("@chequeno2", Cheque2);
                cmd.Parameters.Add("@status", 'P');
                cmd.Parameters.Add("@doe", ServerDateCurrentdate);
                cmd.Parameters.Add("@startdate", startdate);
                cmd.Parameters.Add("@loanemimonth", loanemi);
                cmd.Parameters.Add("@entry_by", User);
                vdm.insert(cmd);
                string response = GetJson("Insert Successfully");
                context.Response.Write(response);
            }
            else
            {
            }
        }

        catch (Exception ex)
        {
            string response = GetJson(ex.Message);
            context.Response.Write(response);
        }
    }

    public class Employeeloan
    {
        public string sno { set; get; }
        public string empid { set; get; }
        public string employee_num { set; get; }
        public string fullname { set; get; }
        public string fathername { set; get; }
        public string presentaddress { set; get; }
        public string home_address { set; get; }
        public string cellphone { set; get; }
        public string dob { set; get; }
        public string designation { set; get; }
        public string experience { set; get; }
        public string purpose_of_loan { set; get; }
        public string salarydate { set; get; }
        public string previousloan { set; get; }
        public string months { set; get; }
        public string startdate { set; get; }
        public string refemp1 { set; get; }
        public string designation1 { set; get; }
        public string address1 { set; get; }
        public string refemp2 { set; get; }
        public string designation2 { set; get; }
        public string address2 { set; get; }
        public string loanemimonth { set; get; }
        public string loanamount { set; get; }
        public string refphone1 { set; get; }
        public string refphone2 { set; get; }
        public string chequeno2 { set; get; }
        public string chequeno1 { set; get; }
        public string emprefnum2 { set; get; }
        public string emprefnum1 { set; get; }
        public string empdept { get; set; }
        public string empdept1 { get; set; }
        public string empdept2 { get; set; }
        public string refemp2exp { get; set; }
        public string refemp1exp { get; set; }

    }

    private void get_Loan_Request_details_click(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            DateTime ServerDateCurrentdate = DBManager.GetTime(vdm.conn);
            string empid = context.Request["empid"];
            cmd = new SqlCommand("SELECT  TOP (1) loan_request_form.sno, employedetails_1.joindate AS joindate1, employedetails_2.joindate AS joindate2, departments.department AS empdept, departments_1.department AS empdept1, departments_2.department AS empdept2, employedetails.empid, employedetails.employee_num, employedetails_1.employee_num AS emprefnum1, employedetails_2.employee_num AS emprefnum2, employedetails_1.home_address AS emprefaddress1, employedetails_2.home_address AS emprefaddress2, employedetails_2.cellphone AS emprefphone2, employedetails_1.cellphone AS emprefphone1, employedetails.fullname, employedetails.cellphone, employedetails.dob, employedetails.home_address, employedetails.presentaddress, employedetails.nameasforaadhar, employedetails.designationid, designation.designation, loan_request_form.experience, loan_request_form.age, loan_request_form.salarydate, loan_request_form.purpose_of_loan, loan_request_form.previousloan, loan_request_form.loanamount, loan_request_form.months, loan_request_form.fathername, loan_request_form.status, loan_request_form.rejectremarks, loan_request_form.startdate, loan_request_form.loanemimonth, loan_request_form.chequeno1, loan_request_form.chequeno2, employedetails_1.fullname AS refemployeename1, employedetails_2.fullname AS refemployeename2, designation_1.designation AS refemployeDeSignation1, designation_2.designation AS refemployeDeSignation2 FROM   employedetails INNER JOIN designation ON employedetails.designationid = designation.designationid INNER JOIN loan_request_form ON employedetails.empid = loan_request_form.empid INNER JOIN employedetails AS employedetails_1 ON loan_request_form.refemp1 = employedetails_1.empid INNER JOIN employedetails AS employedetails_2 ON loan_request_form.refemp2 = employedetails_2.empid INNER JOIN designation AS designation_1 ON employedetails_1.designationid = designation_1.designationid INNER JOIN designation AS designation_2 ON employedetails_2.designationid = designation_2.designationid INNER JOIN departments ON employedetails.employee_dept = departments.deptid INNER JOIN departments AS departments_1 ON employedetails_1.employee_dept = departments_1.deptid INNER JOIN departments AS departments_2 ON employedetails_2.employee_dept = departments_2.deptid WHERE     (employedetails.empid = @empid) ORDER BY loan_request_form.sno DESC");
            //cmd = new SqlCommand("SELECT loan_request.sno, employedetails.employee_num, loan_request.empid, loan_request.doe, employedetails.fullname, employedetails.cellphone, loan_request.experience, loan_request.age,loan_request.salarydate, loan_request.purpose_of_loan, loan_request.previousloan, loan_request.loanamount, loan_request.months, loan_request.refemp1,loan_request.designation1, loan_request.mobno1, loan_request.refemp2, loan_request.designation2, loan_request.mobno2, loan_request.fathername, loan_request.address1, loan_request.address2, loan_request.status, loan_request.rejectremarks, loan_request.startdate, employedetails.dob, employedetails.home_address, employedetails.presentaddress, employedetails.nameasforaadhar, employedetails.designationid, designation.designation FROM loan_request INNER JOIN  employedetails ON loan_request.empid = employedetails.empid INNER JOIN designation ON employedetails.designationid = designation.designationid where employedetails.empid=@empid ");
            cmd.Parameters.Add("@empid", empid);
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<Employeeloan> emploanlist = new List<Employeeloan>();
            foreach (DataRow dr in routes.Rows)
            {
                Employeeloan getloan = new Employeeloan();
                getloan.sno = dr["sno"].ToString();
                getloan.empid = dr["empid"].ToString();
                getloan.employee_num = dr["employee_num"].ToString();
                getloan.fullname = dr["fullname"].ToString();
                getloan.fathername = dr["fathername"].ToString();
                getloan.presentaddress = dr["presentaddress"].ToString();
                getloan.home_address = dr["home_address"].ToString();
                getloan.cellphone = dr["cellphone"].ToString();
                string dob = dr["dob"].ToString();
                if (dob == "" || dob == null)
                {
                    getloan.dob = "";
                }
                else
                {
                    DateTime date = Convert.ToDateTime(dob);
                    string strtime = date.ToString("dd-MMM-yyyy");
                    getloan.dob = strtime;
                }
                //getloan.dob = ((DateTime)dr["dob"]).ToString("dd-MM-yyyy"); //dr["dob"].ToString();
                getloan.designation = dr["designation"].ToString();
                getloan.experience = dr["experience"].ToString();
                getloan.salarydate = ((DateTime)dr["salarydate"]).ToString("dd-MMM-yyyy"); //dr["salarydate"].ToString();
                getloan.purpose_of_loan = dr["purpose_of_loan"].ToString();
                getloan.previousloan = dr["previousloan"].ToString();
                getloan.months = dr["months"].ToString();
                getloan.loanamount = dr["loanamount"].ToString();
                getloan.startdate = ((DateTime)dr["startdate"]).ToString("dd-MMM-yyyy"); //dr["startdate"].ToString();
                getloan.refemp1 = dr["refemployeename1"].ToString();
                getloan.designation1 = dr["refemployeDeSignation1"].ToString();
                getloan.address1 = dr["emprefaddress1"].ToString();
                getloan.refemp2 = dr["refemployeename2"].ToString();
                getloan.designation2 = dr["refemployeDeSignation2"].ToString();
                getloan.address2 = dr["emprefaddress2"].ToString();
                getloan.refphone1 = dr["emprefphone1"].ToString();
                getloan.refphone2 = dr["emprefphone2"].ToString();
                getloan.loanemimonth = dr["loanemimonth"].ToString();
                getloan.chequeno1 = dr["chequeno1"].ToString();
                getloan.chequeno2 = dr["chequeno2"].ToString();

                getloan.emprefnum2 = dr["emprefnum2"].ToString();
                getloan.emprefnum1 = dr["emprefnum1"].ToString();
                getloan.empdept = dr["empdept"].ToString();
                getloan.empdept1 = dr["empdept1"].ToString();
                getloan.empdept2 = dr["empdept2"].ToString();


                DateTime dtjoindate1 = Convert.ToDateTime(dr["joindate1"].ToString());
                DateTime dtjoindate2 = Convert.ToDateTime(dr["joindate2"].ToString());

                string diff1 = (ServerDateCurrentdate - dtjoindate1).TotalDays.ToString();
                string diff2 = (ServerDateCurrentdate - dtjoindate2).TotalDays.ToString();
                double dif1 = Convert.ToDouble(diff1);
                double dif2 = Convert.ToDouble(diff2);

                string totalyear1 = Math.Round((dif1 / 365), 1).ToString();
                string totalyear2 = Math.Round((dif2 / 365), 1).ToString();

                getloan.refemp1exp = totalyear1;
                getloan.refemp2exp = totalyear2;



                emploanlist.Add(getloan);
            }
            string response = GetJson(emploanlist);
            context.Response.Write(response);
        }
        catch
        {
        }
    }
    public class EmployeeloanRequest
    {
        public string sno { set; get; }
        public string empid { set; get; }
        public string dateofentry { set; get; }
        public string purpose_of_loan { set; get; }
        public string loanamount { set; get; }
        public string fullname { set; get; }
        public string status { set; get; }
        public string designation { set; get; }
        public string branchname { set; get; }
        public string Empcode { set; get; }
    }

    private void get_LoanRequest_Details(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            //branchmapping
            string mainbranch = context.Session["mainbranch"].ToString();
            string status = context.Request["status"].ToString();
            cmd = new SqlCommand("SELECT employedetails.joindate, employedetails.fullname, designation.designation, loan_request_form.loanamount, loan_request_form.purpose_of_loan, loan_request_form.status, loan_request_form.empid,  loan_request_form.sno, employedetails.employee_num, branchmaster.branchname, loan_request_form.doe FROM   employedetails INNER JOIN designation ON employedetails.designationid = designation.designationid INNER JOIN  branchmapping ON employedetails.branchid = branchmapping.subbranch INNER JOIN   loan_request_form ON employedetails.empid = loan_request_form.empid INNER JOIN branchmaster ON employedetails.branchid = branchmaster.branchid WHERE  (employedetails.status = 'No') AND (branchmapping.mainbranch = @m) AND (loan_request_form.status =@status)");
            cmd.Parameters.Add("@m", mainbranch);
            cmd.Parameters.Add("@status", status);
            //barachnwise
            //cmd = new SqlCommand("SELECT employedetails.joindate, employedetails.fullname,designation.designation, loan_request.sno, loan_request.empid, loan_request.purpose_of_loan, loan_request.loanamount, loan_request.status FROM employedetails INNER JOIN designation ON employedetails.designationid = designation.designationid INNER JOIN loan_request ON employedetails.empid = loan_request.empid  WHERE (loan_request.status = 'R')");
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<EmployeeloanRequest> emploanlist = new List<EmployeeloanRequest>();
            foreach (DataRow dr in routes.Rows)
            {
                EmployeeloanRequest getloanrequest = new EmployeeloanRequest();
                getloanrequest.sno = dr["sno"].ToString();
                getloanrequest.empid = dr["empid"].ToString();
                getloanrequest.Empcode = dr["employee_num"].ToString();
                getloanrequest.branchname = dr["branchname"].ToString();
                getloanrequest.loanamount = dr["loanamount"].ToString();
                getloanrequest.dateofentry = ((DateTime)dr["doe"]).ToString("yyyy-MM-dd");
                getloanrequest.purpose_of_loan = dr["purpose_of_loan"].ToString();
                getloanrequest.designation = dr["designation"].ToString();
                getloanrequest.fullname = dr["fullname"].ToString();
                // getloanrequest.status = "Pending";
                string loanstatus = dr["status"].ToString();
                if (loanstatus == "P")
                {
                    loanstatus = "Pending";

                }
                else if (loanstatus == "A")
                {
                    loanstatus = "Approved";

                }
                else if (loanstatus == "R")
                {
                    loanstatus = "Reject";

                }
                getloanrequest.status = loanstatus;
                emploanlist.Add(getloanrequest);
            }
            string response = GetJson(emploanlist);
            context.Response.Write(response);
        }
        catch
        {
        }
    }
    //test

    private void get_view_loanreq_details(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            string empid = context.Request["empid"].ToString();
            string mainbranch = context.Session["mainbranch"].ToString();
            cmd = new SqlCommand("SELECT employedetails.joindate, employedetails.fullname, designation.designation, loan_request_form.loanamount, loan_request_form.purpose_of_loan, loan_request_form.status, loan_request_form.empid,  loan_request_form.sno, employedetails.employee_num, branchmaster.branchname, loan_request_form.doe FROM   employedetails INNER JOIN designation ON employedetails.designationid = designation.designationid INNER JOIN  branchmapping ON employedetails.branchid = branchmapping.subbranch INNER JOIN   loan_request_form ON employedetails.empid = loan_request_form.empid INNER JOIN branchmaster ON employedetails.branchid = branchmaster.branchid WHERE  (employedetails.status = 'No') AND (branchmapping.mainbranch = @m) AND (loan_request_form.empid =@empid)");
            cmd.Parameters.Add("@m", mainbranch);
            cmd.Parameters.Add("@empid", empid);
            DataTable dtemp = vdm.SelectQuery(cmd).Tables[0];
            List<EmployeeloanRequest> employe_loan_list = new List<EmployeeloanRequest>();
            if (dtemp.Rows.Count > 0)
            {
                foreach (DataRow dr in dtemp.Rows)
                {
                    EmployeeloanRequest GetEmployee_loan = new EmployeeloanRequest();
                    GetEmployee_loan.empid = dr["Empid"].ToString();
                    GetEmployee_loan.fullname = dr["fullname"].ToString();
                    //GetEmployee_loan.branchname = dr["branchname"].ToString();
                    //GetEmployee_loan.designation = dr["designation"].ToString();
                    //GetEmployee_loan.LoanAmount = dr["LoanAmount"].ToString();
                    //GetEmployee_loan.PurposeOfLoan = dr["PurposeOfLoan"].ToString();
                    //GetEmployee_loan.ReportingTo = dr["reportingto"].ToString();
                    //GetEmployee_loan.reportingtoid = dr["reportingtoid"].ToString();
                    //GetEmployee_loan.repoemail = dr["repoemail"].ToString();
                    //string date = Convert.ToDateTime(dr["Doe"].ToString()).ToString("dd-MMM-yyyy");
                    //GetEmployee_loan.Doe = date;
                    //GetEmployee_loan.PreviousLoans = dr["PreviousLoans"].ToString();
                    employe_loan_list.Add(GetEmployee_loan);
                }
            }
            string response = GetJson(employe_loan_list);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }
    private void save_loanrequest_approve_click(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            DateTime ServerDateCurrentdate = DBManager.GetTime(vdm.conn);
            string sno = context.Request["sno"];
            string User = context.Session["empid"].ToString();
            string purpose_of_loan = context.Request["purpose_of_loan"];
            cmd = new SqlCommand("update loan_request_form set doe=@doe,status=@status,approvedby=@User  where sno=@sno");
            cmd.Parameters.Add("@doe", ServerDateCurrentdate);
            cmd.Parameters.Add("@status", "A");
            cmd.Parameters.Add("@sno", sno);
            cmd.Parameters.Add("@User", User);
            vdm.Update(cmd);
            string msg = " loan Aporval successfully Approved";
            string Response = GetJson(msg);
            context.Response.Write(Response);
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);

        }
    }

    private void save_loanrequest_reject_click(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            DateTime ServerDateCurrentdate = DBManager.GetTime(vdm.conn);
            string sno = context.Request["sno"];
            string User = context.Session["empid"].ToString();
            cmd = new SqlCommand("update loan_request_form set doe=@doe,status=@status,rejectedby=@User  where sno=@sno");
            cmd.Parameters.Add("@doe", ServerDateCurrentdate);
            cmd.Parameters.Add("@status", "R");
            cmd.Parameters.Add("@User", User);
            cmd.Parameters.Add("@sno", sno);
            vdm.Update(cmd);
            string msg = " loan Aporval successfully rejected";
            string Response = GetJson(msg);
            context.Response.Write(Response);
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);

        }
    }
    private void save_Apprasial_Salary_click(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            string department = context.Request["department"];
            string employeid = context.Request["employeid"];
            string empcode1 = context.Request["empcode1"];
            string designation = context.Request["designation"];
            string effectivedate = context.Request["effectivedate"];
            string erbasic = context.Request["erbasic"];
            string hre = context.Request["hre"];
            string conveyance = context.Request["conveyance"];
            string medical = context.Request["medical"];
            string providentfound = context.Request["providentfound"];
            string professionaltax = context.Request["professionaltax"];
            string esi = context.Request["esi"];
            string incometax = context.Request["incometax"];
            string grosspay = context.Request["grosspay"];
            double gpay = Convert.ToDouble(grosspay);
            gpay = Math.Round(gpay, 2);
            string totalEarnings = context.Request["totalEarnings"];
            double salaryperyear = 0;
            double.TryParse(totalEarnings, out salaryperyear);
            double salyear = salaryperyear * 12;
            string totaldeduction = context.Request["totaldeduction"];
            string changedpackage = context.Request["changedpackage"];
            string appraisal = context.Request["appraisal"];
            string netpay = context.Request["netpay"];
            string washingallowance = context.Request["washingallowance"];
            string canteendeduction = context.Request["canteendeduction"];
            //string canteendeduction = context.Request["canteendeduction"];
            string createdby = context.Session["empid"].ToString();
            string btnval = context.Request["btnval"];
            DateTime createdon = DateTime.Now;
            DateTime ServerDateCurrentdate = DBManager.GetTime(vdm.conn);
            cmd = new SqlCommand("update pay_structure set  departmentid=@departmentid,gross=@monthlygrosspay,profitionaltax=@profitionaltax,esi=@esi,incometax=@incometax,erningbasic=@erningbasic,hra=@hra,conveyance=@conveyance,medicalerning=@medicalerning,providentfund=@providentfund,salaryperyear=@salaryperyear,washingallowance=@washingallowance,empcode=@empcode where empid=@empid");
            cmd.Parameters.Add("@departmentid", department);
            cmd.Parameters.Add("@empid", employeid);
            cmd.Parameters.Add("@empcode", empcode1);
            cmd.Parameters.Add("@erningbasic", erbasic);
            cmd.Parameters.Add("@hra", hre);
            cmd.Parameters.Add("@esi", esi);
            cmd.Parameters.Add("@conveyance", conveyance);
            cmd.Parameters.Add("@medicalerning", medical);
            cmd.Parameters.Add("@providentfund", providentfound);
            cmd.Parameters.Add("@salaryperyear", salyear);
            cmd.Parameters.Add("@profitionaltax", professionaltax);
            cmd.Parameters.Add("@incometax", incometax);
            cmd.Parameters.Add("@monthlygrosspay", totalEarnings);
            cmd.Parameters.Add("@netpay", netpay);
            cmd.Parameters.Add("@washingallowance", washingallowance);
            vdm.Update(cmd);
            cmd = new SqlCommand("update salaryappraisals set  endingdate=@endingdate where empid=@empid and endingdate IS NUll");
            cmd.Parameters.Add("@endingdate", effectivedate);
            cmd.Parameters.Add("@empid", employeid);
            vdm.Update(cmd);
            cmd = new SqlCommand("insert into salaryappraisals (departmentid,empid, changedpackage,gross,appraisal,profitionaltax,esi,incometax,erningbasic,hra,conveyance,medicalerning,providentfund,totalearnings,totaldeduction,netpay,doe,createdon,createdby,washingallowance,empcode,salaryperyear,startingdate) values (@department,@employe, @changedpackage,@monthlygrosspay,@appraisal,@profitionaltax,@esi,@incometax,@erningbasic,@hra,@conveyance,@medicalerning,@providentfund,@totalearnings,@totaldeduction,@netpay,@doe,@createdon,@createdby,@washingallowance,@empcode,@salaryperyear,@startingdate)");
            cmd.Parameters.Add("@department", department);
            cmd.Parameters.Add("@empcode", empcode1);
            cmd.Parameters.Add("@employe", employeid);
            cmd.Parameters.Add("@doe", ServerDateCurrentdate);
            cmd.Parameters.Add("@createdon", createdon);
            cmd.Parameters.Add("@createdby", createdby);
            cmd.Parameters.Add("@changedpackage", changedpackage);
            cmd.Parameters.Add("@appraisal", appraisal);
            cmd.Parameters.Add("@erningbasic", erbasic);
            cmd.Parameters.Add("@hra", hre);
            cmd.Parameters.Add("@esi", esi);
            cmd.Parameters.Add("@conveyance", conveyance);
            cmd.Parameters.Add("@medicalerning", medical);
            cmd.Parameters.Add("@providentfund", providentfound);
            cmd.Parameters.Add("@profitionaltax", professionaltax);
            cmd.Parameters.Add("@incometax", incometax);
            cmd.Parameters.Add("@monthlygrosspay", gpay);
            cmd.Parameters.Add("@totalearnings", totalEarnings);
            cmd.Parameters.Add("@totaldeduction", totaldeduction);
            cmd.Parameters.Add("@netpay", netpay);
            cmd.Parameters.Add("@washingallowance", washingallowance);
            cmd.Parameters.Add("@salaryperyear", salyear);
            cmd.Parameters.Add("@startingdate", effectivedate);
            vdm.insert(cmd);
            string response = GetJson("Insert Successfully");
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string response = GetJson(ex.Message);
            context.Response.Write(response);
        }
    }


    private void save_edit_Salary_click(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            string department = context.Request["department"];
            string employeid = context.Request["employeid"];
            string empcode1 = context.Request["empcode1"];
            string gross = context.Request["gross"];
            string erbasic = context.Request["erbasic"];
            string hre = context.Request["hre"];
            string conveyance = context.Request["conveyance"];
            string medical = context.Request["medical"];
            string providentfound = context.Request["providentfound"];
            string professionaltax = context.Request["professionaltax"];
            string esi = context.Request["esi"];
            string incometax = context.Request["incometax"];
            string travelconveyance = context.Request["travelconveyance"];
            string washingallowance = context.Request["washingallowance"];
            string mediclaimdeduction = context.Request["mediclaimdeduction"];
            string tdsdeduction = context.Request["tdsdeduction"];
            string salaryPer = context.Request["salaryPer"];
            string btnval = context.Request["btnval"];
            string createdby = context.Session["empid"].ToString();
            string User = context.Session["empid"].ToString();
            DateTime ServerDateCurrentdate = DBManager.GetTime(vdm.conn);
            DateTime createdon = DateTime.Now;
            if (btnval == "Save")
            {
                cmd = new SqlCommand("insert into pay_structure (departmentid,empid,gross,profitionaltax,esi,incometax,erningbasic,hra,conveyance,medicalerning,providentfund,washingallowance,travelconveyance,salaryperyear,mediclaimdeduction,tdsdeduction,empcode,entry_by,entry_date) values (@department, @employe,@gross,@profitionaltax,@esi,@incometax,@erningbasic,@hra,@conveyance,@medicalerning,@providentfund,@washingallowance,@travelconveyance,@salaryperyear,@mediclaimdeduction,@tdsdeduction,@empcode,@entry_by,@entry_date)"); ;
                cmd.Parameters.Add("@department", department);
                cmd.Parameters.Add("@employe", employeid);
                cmd.Parameters.Add("@empcode", empcode1);
                cmd.Parameters.Add("@gross", gross);
                cmd.Parameters.Add("@erningbasic", erbasic);
                cmd.Parameters.Add("@hra", hre);
                cmd.Parameters.Add("@esi", esi);
                cmd.Parameters.Add("@conveyance", conveyance);
                cmd.Parameters.Add("@medicalerning", medical);
                cmd.Parameters.Add("@providentfund", providentfound);
                cmd.Parameters.Add("@profitionaltax", professionaltax);
                cmd.Parameters.Add("@incometax", incometax);
                cmd.Parameters.Add("@washingallowance", washingallowance);
                cmd.Parameters.Add("@travelconveyance", travelconveyance);
                cmd.Parameters.Add("@salaryperyear", salaryPer);
                cmd.Parameters.Add("@mediclaimdeduction", mediclaimdeduction);
                cmd.Parameters.Add("@tdsdeduction", tdsdeduction);
                cmd.Parameters.Add("@entry_by", User);
                cmd.Parameters.Add("@entry_date", ServerDateCurrentdate);
                vdm.insert(cmd);
                double changedpackage = 0;
                double appraisal = 0;
                double totaldeduction = 0;
                double totalearnings = 0;
                double netpay = 0;
                cmd = new SqlCommand("insert into salaryappraisals (empid, departmentid,  changedpackage, gross, appraisal, erningbasic, hra, profitionaltax, esi,incometax, providentfund ,totaldeduction, conveyance, medicalerning, totalearnings, netpay, doe, createdby, createdon, washingallowance, empcode, startingdate, travelconveyance, salaryperyear) values (@empid, @departmentid, @changedpackage, @gross, @appraisal, @erningbasic, @hra, @profitionaltax,@esi, @incometax, @providentfund, @totaldeduction, @conveyance, @medicalerning, @totalearnings, @netpay, @doe, @createdby, @createdon, @washingallowance, @empcode, @startingdate, @travelconveyance, @salaryperyear)");
                cmd.Parameters.Add("@empid", employeid);
                cmd.Parameters.Add("@departmentid", department);
                cmd.Parameters.Add("@changedpackage", changedpackage);
                cmd.Parameters.Add("@gross", gross);
                cmd.Parameters.Add("@appraisal", appraisal);
                cmd.Parameters.Add("@erningbasic", erbasic);
                cmd.Parameters.Add("@hra", hre);
                cmd.Parameters.Add("@profitionaltax", professionaltax);
                cmd.Parameters.Add("@esi", esi);
                cmd.Parameters.Add("@incometax", incometax);
                cmd.Parameters.Add("@providentfund", providentfound);
                cmd.Parameters.Add("@totaldeduction", totaldeduction);
                cmd.Parameters.Add("@conveyance", conveyance);
                cmd.Parameters.Add("@medicalerning", medical);
                cmd.Parameters.Add("@totalearnings", totalearnings);
                cmd.Parameters.Add("@netpay", netpay);
                cmd.Parameters.Add("@doe", ServerDateCurrentdate);
                cmd.Parameters.Add("@createdby", createdby);
                cmd.Parameters.Add("@createdon", createdon);
                cmd.Parameters.Add("@washingallowance", washingallowance);
                cmd.Parameters.Add("@empcode", empcode1);
                cmd.Parameters.Add("@startingdate", ServerDateCurrentdate.AddMonths(-2));
                cmd.Parameters.Add("@travelconveyance", travelconveyance);
                cmd.Parameters.Add("@salaryperyear", salaryPer);
                vdm.insert(cmd);
                string response = GetJson("Insert Successfully");
                context.Response.Write(response);
            }
            else
            {
                string sno = context.Request["sno"];
                cmd = new SqlCommand("Update pay_structure set departmentid=@department,empid=@employe, gross = @gross,profitionaltax=@profitionaltax,esi=@esi,incometax=@incometax,erningbasic=@erningbasic,hra=@hra,conveyance=@conveyance,medicalerning=@medicalerning,providentfund=@providentfund,washingallowance=@washingallowance,travelconveyance=@travelconveyance,salaryperyear=@salaryperyear,mediclaimdeduction=@mediclaimdeduction,tdsdeduction=@tdsdeduction,empcode=@empcode,modify_by=@modify_by,modify_date=@modify_date where sno=@sno");
                cmd.Parameters.Add("@department", department);
                cmd.Parameters.Add("@employe", employeid);
                cmd.Parameters.Add("@gross", gross);
                cmd.Parameters.Add("@empcode", empcode1);
                cmd.Parameters.Add("@erningbasic", erbasic);
                cmd.Parameters.Add("@hra", hre);
                cmd.Parameters.Add("@esi", esi);
                cmd.Parameters.Add("@conveyance", conveyance);
                cmd.Parameters.Add("@medicalerning", medical);
                cmd.Parameters.Add("@providentfund", providentfound);
                cmd.Parameters.Add("@profitionaltax", professionaltax);
                cmd.Parameters.Add("@incometax", incometax);
                cmd.Parameters.Add("@washingallowance", washingallowance);
                cmd.Parameters.Add("@travelconveyance", travelconveyance);
                cmd.Parameters.Add("@salaryperyear", salaryPer);
                cmd.Parameters.Add("@mediclaimdeduction", mediclaimdeduction);
                cmd.Parameters.Add("@tdsdeduction", tdsdeduction);
                cmd.Parameters.Add("@sno", sno);
                cmd.Parameters.Add("@modify_by", User);
                cmd.Parameters.Add("@modify_date", ServerDateCurrentdate);
                vdm.Update(cmd);
                string response = GetJson("UPDATE successfully");
                context.Response.Write(response);
            }
        }

        catch (Exception ex)
        {
            string response = GetJson("Employee Paystructure Already Exists");
            context.Response.Write(response);
        }
    }

    public class getEmployeepaystructuredetails
    {
        public string employeid { get; set; }
        public string department { get; set; }
        public string fullname { get; set; }
        public string gross { get; set; }
        public string profitionaltax { get; set; }
        public string esi { get; set; }
        public string incometax { get; set; }
        public string erningbasic { get; set; }
        public string hra { get; set; }
        public string conveyance { get; set; }
        public string empcode1 { get; set; }
        public string medicalearning { get; set; }
        public string pf { get; set; }
        public string washingallowance { get; set; }
        public string mediclaimdeduction { get; set; }
        public string tdsdeduction { get; set; }
        public string salaryperyear { get; set; }
        public string travelconveyance { get; set; }
        public string departmentid { get; set; }
        public string sno { get; set; }
    }

    private void get_emppaystructure_details(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            //branchmapping
            string mainbranch = context.Session["mainbranch"].ToString();
            cmd = new SqlCommand("SELECT  pay_structure.sno, pay_structure.departmentid, pay_structure.empid, pay_structure.gross, pay_structure.profitionaltax, pay_structure.esi, pay_structure.incometax, pay_structure.erningbasic, pay_structure.hra, pay_structure.conveyance, pay_structure.medicalerning, pay_structure.providentfund, pay_structure.washingallowance, pay_structure.travelconveyance, pay_structure.salaryperyear, pay_structure.mediclaimdeduction, pay_structure.tdsdeduction, departments.department, employedetails.fullname, employedetails.employee_num FROM  pay_structure INNER JOIN departments ON pay_structure.departmentid = departments.deptid INNER JOIN employedetails ON pay_structure.empid = employedetails.empid INNER JOIN  branchmapping ON employedetails.branchid = branchmapping.subbranch WHERE (employedetails.status = 'No') AND (branchmapping.mainbranch = @m)ORDER BY pay_structure.sno DESC");
            cmd.Parameters.Add("@m", mainbranch);
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<getEmployeepaystructuredetails> bankdetaillist = new List<getEmployeepaystructuredetails>();
            foreach (DataRow dr in routes.Rows)
            {
                getEmployeepaystructuredetails getpaystructurelist = new getEmployeepaystructuredetails();
                getpaystructurelist.empcode1 = dr["employee_num"].ToString();
                getpaystructurelist.sno = dr["sno"].ToString();
                getpaystructurelist.department = dr["department"].ToString();
                //getpaystructurelist.department = dr["department"].ToString();
                getpaystructurelist.employeid = dr["empid"].ToString();
                getpaystructurelist.fullname = dr["fullname"].ToString();
                getpaystructurelist.gross = dr["gross"].ToString();
                getpaystructurelist.erningbasic = dr["erningbasic"].ToString();
                getpaystructurelist.profitionaltax = dr["profitionaltax"].ToString();
                getpaystructurelist.esi = dr["esi"].ToString();
                getpaystructurelist.incometax = dr["incometax"].ToString();
                getpaystructurelist.hra = dr["hra"].ToString();
                getpaystructurelist.conveyance = dr["conveyance"].ToString();
                getpaystructurelist.medicalearning = dr["medicalerning"].ToString();
                getpaystructurelist.pf = dr["providentfund"].ToString();
                getpaystructurelist.washingallowance = dr["washingallowance"].ToString();
                getpaystructurelist.mediclaimdeduction = dr["mediclaimdeduction"].ToString();
                getpaystructurelist.tdsdeduction = dr["tdsdeduction"].ToString();
                getpaystructurelist.salaryperyear = dr["salaryperyear"].ToString();
                getpaystructurelist.travelconveyance = dr["travelconveyance"].ToString();
                getpaystructurelist.departmentid = dr["departmentid"].ToString();
                bankdetaillist.Add(getpaystructurelist);
            }
            string response = GetJson(bankdetaillist);
            context.Response.Write(response);
        }
        catch
        {
        }
    }
    //   
    private void save_damages(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            //string department = context.Request["Department"];
            string employeid = context.Request["employeid"];
            string dateofdamages = context.Request["dateofdamages"];
            string Partculkardamage = context.Request["Partculkardamage"];
            string againstsatus = context.Request["againstsatus"];
            string NameofPerson = context.Request["NameofPerson"];
            string empcode = context.Request["empcode"];
            DateTime ServerDateCurrentdate = DBManager.GetTime(vdm.conn);
            string AmountOfDeduction = context.Request["AmountOfDeduction"];
            string Noofinstaliments = context.Request["Noofinstaliments"];
            string dateofrecoryfirst = context.Request["dateofrecoryfirst"];
            string dateofrecorylast = context.Request["dateofrecorylast"];
            string createdby = context.Session["empid"].ToString();
            string remarks = context.Request["remarks"];
            string btnval = context.Request["btnval"];
            if (btnval == "Save")
            {
                cmd = new SqlCommand("insert into employeedamages (empid,dateofdamages,particularsofamageorloss,whetherworkmanshowedcauseagainstdeduction,explainationwasheard,amountofdeductionimposed, noofinstallments, dateofrecoveryfirst, dateofrecoverylast,empcode,remarks,doe,createdby) values (@employe,@dateofdamages,@particularsofamageorloss, @whetherworkmanshowedcauseagainstdeduction,@explainationwasheard,@amountofdeductionimposed, @noofinstallments, @dateofrecoveryfirst, @dateofrecoverylast, @empcode,@remarks,@doe,@createdby)");
                //cmd.Parameters.Add("@department", department);
                cmd.Parameters.Add("@employe", employeid);
                cmd.Parameters.Add("@dateofdamages", dateofdamages);
                cmd.Parameters.Add("@particularsofamageorloss", Partculkardamage);
                cmd.Parameters.Add("@whetherworkmanshowedcauseagainstdeduction", againstsatus);
                cmd.Parameters.Add("@explainationwasheard", NameofPerson);
                cmd.Parameters.Add("@amountofdeductionimposed", AmountOfDeduction);
                cmd.Parameters.Add("@dateofrecoveryfirst", dateofrecoryfirst);
                cmd.Parameters.Add("@noofinstallments", Noofinstaliments);
                cmd.Parameters.Add("@dateofrecoverylast", dateofrecorylast);
                cmd.Parameters.Add("@remarks", remarks);
                cmd.Parameters.Add("@empcode", empcode);
                cmd.Parameters.Add("@doe", ServerDateCurrentdate);
                cmd.Parameters.Add("@createdby", createdby);
                vdm.insert(cmd);
                string response = GetJson("Insert successfully");
                context.Response.Write(response);
            }
            else
            {
                string sno = context.Request["sno"];
                cmd = new SqlCommand("Update employeedamages set empid=@employe, empcode=@empcode,dateofdamages = @dateofdamages,particularsofamageorloss=@particularsofamageorloss,whetherworkmanshowedcauseagainstdeduction=@whetherworkmanshowedcauseagainstdeduction,amountofdeductionimposed=@amountofdeductionimposed,explainationwasheard=@explainationwasheard,noofinstallments=@noofinstallments,dateofrecoveryfirst=@dateofrecoveryfirst, dateofrecoverylast=@dateofrecoverylast,remarks=@remarks where sno=@sno");
                // cmd.Parameters.Add("@department", department);
                cmd.Parameters.Add("@employe", employeid);
                cmd.Parameters.Add("@dateofdamages", dateofdamages);
                cmd.Parameters.Add("@particularsofamageorloss", Partculkardamage);
                cmd.Parameters.Add("@whetherworkmanshowedcauseagainstdeduction", againstsatus);
                cmd.Parameters.Add("@explainationwasheard", NameofPerson);
                cmd.Parameters.Add("@amountofdeductionimposed", AmountOfDeduction);
                cmd.Parameters.Add("@dateofrecoveryfirst", dateofrecoryfirst);
                cmd.Parameters.Add("@noofinstallments", Noofinstaliments);
                cmd.Parameters.Add("@dateofrecoverylast", dateofrecorylast);
                cmd.Parameters.Add("@remarks", remarks);
                cmd.Parameters.Add("@empcode", empcode);
                cmd.Parameters.Add("@sno", sno);
                vdm.Update(cmd);
                string response = GetJson("UPDATE successfully");
                context.Response.Write(response);
            }
        }
        catch (Exception ex)
        {
            string response = GetJson(ex.Message);
            context.Response.Write(response);
        }

    }
    public class getdamagedetailes
    {
        //public string deptid { get; set; }
        public string employeid { get; set; }
        //public string department { get; set; }
        public string fullname { get; set; }
        public string dateofdamages { get; set; }
        public string Partculkardamage { get; set; }
        public string againstsatus { get; set; }
        public string NameofPerson { get; set; }
        public string AmountOfDeduction { get; set; }
        public string dateofrecoryfirst { get; set; }
        public string sno { get; set; }
        public string Noofinstaliments { get; set; }
        public string dateofrecorylast { get; set; }
        public string remarks { get; set; }
        public string empcode { get; set; }
    }
    private void get_Damage_details(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            //cmd = new SqlCommand("SELECT employedetails.fullname, employebankdetails.departmentid,employebankdetails.employeid,employebankdetails.bankid, employebankdetails.accountno, employebankdetails.branchname, employebankdetails.ifsccode,  employebankdetails.nameasforbankrecord, employebankdetails.paymenttype, employebankdetails.currentaddress, employebankdetails.perminantaddress,  employebankdetails.empcode, bankmaster.bankname FROM employedetails INNER JOIN employebankdetails ON employedetails.empid = employebankdetails.employeid INNER JOIN bankmaster ON employebankdetails.bankid = bankmaster.sno");
            //branchwise
            //cmd = new SqlCommand("SELECT employedetails.fullname,employeedamages.sno, employeedamages.empid, employeedamages.dateofdamages, employeedamages.whetherworkmanshowedcauseagainstdeduction, employeedamages.particularsofamageorloss, employeedamages.explainationwasheard, employeedamages.amountofdeductionimposed, employeedamages.noofinstallments, employeedamages.dateofrecoveryfirst, employeedamages.dateofrecoverylast, employeedamages.remarks, employeedamages.empcode FROM employedetails INNER JOIN employeedamages ON employedetails.empid = employeedamages.empid");
            //branchmapping
            string mainbranch = context.Session["mainbranch"].ToString();
            cmd = new SqlCommand("SELECT employedetails.fullname, employeedamages.sno, employeedamages.empid, employeedamages.dateofdamages, employeedamages.whetherworkmanshowedcauseagainstdeduction, employeedamages.particularsofamageorloss, employeedamages.explainationwasheard, employeedamages.amountofdeductionimposed, employeedamages.noofinstallments, employeedamages.dateofrecoveryfirst, employeedamages.dateofrecoverylast, employeedamages.remarks, employeedamages.empcode FROM employedetails INNER JOIN  employeedamages ON employedetails.empid = employeedamages.empid INNER JOIN branchmapping ON employedetails.branchid = branchmapping.subbranch WHERE (employedetails.status = 'No') AND (branchmapping.mainbranch = @m)");
            cmd.Parameters.Add("@m", mainbranch);
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<getdamagedetailes> damegelist = new List<getdamagedetailes>();
            foreach (DataRow dr in routes.Rows)
            {
                getdamagedetailes getdamagelist = new getdamagedetailes();
                getdamagelist.sno = dr["sno"].ToString();
                getdamagelist.empcode = dr["empcode"].ToString();
                getdamagelist.employeid = dr["empid"].ToString();
                getdamagelist.fullname = dr["fullname"].ToString();
                getdamagelist.Partculkardamage = dr["particularsofamageorloss"].ToString();
                getdamagelist.againstsatus = dr["whetherworkmanshowedcauseagainstdeduction"].ToString();
                getdamagelist.NameofPerson = dr["explainationwasheard"].ToString();
                getdamagelist.AmountOfDeduction = dr["amountofdeductionimposed"].ToString();
                getdamagelist.dateofrecoryfirst = ((DateTime)dr["dateofrecoveryfirst"]).ToString("yyyy-MM-dd");  //dr["dateofrecoveryfirst"].ToString();
                getdamagelist.dateofdamages = ((DateTime)dr["dateofdamages"]).ToString("yyyy-MM-dd");  //dr["dateofdamages"].ToString();
                getdamagelist.Noofinstaliments = dr["noofinstallments"].ToString();
                getdamagelist.dateofrecorylast = ((DateTime)dr["dateofrecoverylast"]).ToString("yyyy-MM-dd");  //dr["dateofrecoverylast"].ToString();
                getdamagelist.remarks = dr["remarks"].ToString();
                damegelist.Add(getdamagelist);
            }
            string response = GetJson(damegelist);
            context.Response.Write(response);
        }
        catch
        {
        }
    }
    private void save_edit_Fines(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            //string department = context.Request["Department"];
            string employeid = context.Request["employeid"];
            string empcode = context.Request["empcode"];
            string dateofOfference = context.Request["dateofOfference"];
            string Actwhichfine = context.Request["Actwhichfine"];
            string Finestatus = context.Request["Finestatus"];
            string NameofPerson = context.Request["NameofPerson"];
            string AmountOffine = context.Request["AmountOffine"];
            string daterelised = context.Request["daterelised"];
            DateTime ServerDateCurrentdate = DBManager.GetTime(vdm.conn);
            string remarks = context.Request["remarks"];
            string createdby = context.Session["empid"].ToString();
            string btnval = context.Request["btnval"];
            if (btnval == "Save")
            {
                cmd = new SqlCommand("insert into employeefines (empid,dateofoffence,actforwhichfineimposed,whetherworkmanshowedcauseagainstfine,nameofthepersoninwhosepresenceemployeesexplainationwasheard,amountoffineimposed, dateonwhichfinerealized, remarks, empcode,doe,createdby) values (@employe,@dateofoffence,@actforwhichfineimposed, @whetherworkmanshowedcauseagainstfine,@nameofthepersoninwhosepresenceemployeesexplainationwasheard,@amountoffineimposed, @dateonwhichfinerealized, @remarks, @empcode,@doe,@createdby)");
                //cmd.Parameters.Add("@department", department);
                cmd.Parameters.Add("@employe", employeid);
                cmd.Parameters.Add("@dateofoffence", dateofOfference);
                cmd.Parameters.Add("@actforwhichfineimposed", Actwhichfine);
                cmd.Parameters.Add("@whetherworkmanshowedcauseagainstfine", Finestatus);
                cmd.Parameters.Add("@nameofthepersoninwhosepresenceemployeesexplainationwasheard", NameofPerson);
                cmd.Parameters.Add("@amountoffineimposed", AmountOffine);
                //cmd.Parameters.Add("@paddress", paddress);
                cmd.Parameters.Add("@dateonwhichfinerealized", daterelised);
                cmd.Parameters.Add("@remarks", remarks);
                cmd.Parameters.Add("@doe", ServerDateCurrentdate);
                cmd.Parameters.Add("@empcode", empcode);
                cmd.Parameters.Add("@createdby", createdby);
                vdm.insert(cmd);
                string response = GetJson("Insert successfully");
                context.Response.Write(response);
            }
            else
            {
                string sno = context.Request["sno"];
                cmd = new SqlCommand("Update employeefines set empid=@employe, empcode=@empcode,actforwhichfineimposed = @actforwhichfineimposed,whetherworkmanshowedcauseagainstfine=@whetherworkmanshowedcauseagainstfine,dateofoffence=@dateofoffence,nameofthepersoninwhosepresenceemployeesexplainationwasheard=@nameofthepersoninwhosepresenceemployeesexplainationwasheard,amountoffineimposed=@amountoffineimposed,dateonwhichfinerealized=@dateonwhichfinerealized,remarks=@remarks where sno=@sno");
                // cmd.Parameters.Add("@department", department);
                cmd.Parameters.Add("@employe", employeid);
                cmd.Parameters.Add("@dateofoffence", dateofOfference);
                cmd.Parameters.Add("@actforwhichfineimposed", Actwhichfine);
                cmd.Parameters.Add("@whetherworkmanshowedcauseagainstfine", Finestatus);
                cmd.Parameters.Add("@nameofthepersoninwhosepresenceemployeesexplainationwasheard", NameofPerson);
                cmd.Parameters.Add("@amountoffineimposed", AmountOffine);
                //cmd.Parameters.Add("@paddress", paddress);
                cmd.Parameters.Add("@dateonwhichfinerealized", daterelised);
                cmd.Parameters.Add("@remarks", remarks);
                cmd.Parameters.Add("@empcode", empcode);
                cmd.Parameters.Add("@sno", sno);
                vdm.Update(cmd);
                string response = GetJson("UPDATE successfully");
                context.Response.Write(response);
            }
        }
        catch (Exception ex)
        {
            string response = GetJson(ex.Message);
            context.Response.Write(response);
        }

    }


    public class getfinedetailes
    {
        //public string deptid { get; set; }
        public string employeid { get; set; }
        //public string department { get; set; }
        public string fullname { get; set; }
        public string dateofOfference { get; set; }
        public string Actwhichfine { get; set; }
        public string Finestatus { get; set; }
        public string NameofPerson { get; set; }
        public string AmountOffine { get; set; }
        public string daterelised { get; set; }
        public string sno { get; set; }
        public string remarks { get; set; }
        public string empcode { get; set; }
    }
    private void get_fine_details(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            //brnchmapping
            string mainbranch = context.Session["mainbranch"].ToString();
            cmd = new SqlCommand("SELECT  employedetails.fullname, employeefines.dateofoffence, employeefines.actforwhichfineimposed, employeefines.whetherworkmanshowedcauseagainstfine,  employeefines.nameofthepersoninwhosepresenceemployeesexplainationwasheard, employeefines.amountoffineimposed, employeefines.remarks, employeefines.dateonwhichfinerealized, employeefines.empcode, employeefines.empid, employeefines.sno FROM employedetails INNER JOIN employeefines ON employedetails.empid = employeefines.empid INNER JOIN branchmapping ON employedetails.branchid = branchmapping.subbranch WHERE (employedetails.status = 'No') AND (branchmapping.mainbranch = @m)");
            cmd.Parameters.Add("@m", mainbranch);
            //branchwise
            //cmd = new SqlCommand("SELECT  employedetails.fullname, employeefines.dateofoffence, employeefines.actforwhichfineimposed, employeefines.whetherworkmanshowedcauseagainstfine, employeefines.nameofthepersoninwhosepresenceemployeesexplainationwasheard, employeefines.amountoffineimposed, employeefines.remarks, employeefines.dateonwhichfinerealized, employeefines.empcode, employeefines.empid, employeefines.sno FROM employedetails INNER JOIN employeefines ON employedetails.empid = employeefines.empid");
            //cmd = new SqlCommand("SELECT employebankdetails.bankid, employebankdetails.paymenttype, employebankdetails.nameasforbankrecord, employebankdetails.departmentid, employebankdetails.employeid, employebankdetails.bankname, employebankdetails.branchname, employebankdetails.ifsccode, employebankdetails.currentaddress, employebankdetails.perminantaddress, employebankdetails.accountno, employedetails.fullname, departments.department FROM employebankdetails INNER JOIN employedetails ON employebankdetails.bankid = employedetails.empid INNER JOIN departments ON employebankdetails.departmentid = departments.deptid");
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<getfinedetailes> finedetaileslist = new List<getfinedetailes>();
            foreach (DataRow dr in routes.Rows)
            {
                getfinedetailes getfines = new getfinedetailes();
                getfines.sno = dr["sno"].ToString();
                getfines.empcode = dr["empcode"].ToString();
                getfines.employeid = dr["empid"].ToString();
                getfines.fullname = dr["fullname"].ToString();
                getfines.dateofOfference = ((DateTime)dr["dateofoffence"]).ToString("yyyy-MM-dd"); //dr["dateofoffence"].ToString();
                getfines.Actwhichfine = dr["actforwhichfineimposed"].ToString();
                getfines.Finestatus = dr["whetherworkmanshowedcauseagainstfine"].ToString();
                getfines.NameofPerson = dr["nameofthepersoninwhosepresenceemployeesexplainationwasheard"].ToString();
                getfines.AmountOffine = dr["amountoffineimposed"].ToString();
                getfines.daterelised = ((DateTime)dr["dateonwhichfinerealized"]).ToString("yyyy-MM-dd"); //dr["dateonwhichfinerealized"].ToString();
                getfines.remarks = dr["remarks"].ToString();
                finedetaileslist.Add(getfines);
            }
            string response = GetJson(finedetaileslist);
            context.Response.Write(response);
        }
        catch
        {
        }
    }
    private void save_edit_empbankdetails(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            //string department = context.Request["Department"];
            string employe = context.Request["employeid"];
            string accountno = context.Request["AccountNo"];
            string branch = context.Request["Branch"];
            string ifsc = context.Request["IFSC"];
            string caddress = context.Request["Caddress"];
            string empcode = context.Request["empcode"];
            string paymenttype = context.Request["paymenttype"];
            string nameasforbank = context.Request["nameasforbank"];
            string bankid = context.Request["bankid"];
            string User = context.Session["empid"].ToString();
            DateTime ServerDateCurrentdate = DBManager.GetTime(vdm.conn);
            if (bankid == "Select bank")
            {
                bankid = "";
            }
            string btnval = context.Request["btnval"];
            if (btnval == "Save")
            {
                if (paymenttype == "Cash")
                {
                    cmd = new SqlCommand("insert into employebankdetails (employeid, paymenttype, empcode,entry_by,entry_date) values (@employe, @paymenttype, @empcode,@entry_by,@entry_date)");
                    cmd.Parameters.Add("@employe", employe);
                    cmd.Parameters.Add("@paymenttype", paymenttype);
                    cmd.Parameters.Add("@empcode", empcode);
                    cmd.Parameters.Add("@entry_by", User);
                    cmd.Parameters.Add("@entry_date", ServerDateCurrentdate);
                }
                else
                {
                    cmd = new SqlCommand("insert into employebankdetails (employeid,accountno,bankid,branchname,ifsccode,currentaddress, paymenttype, nameasforbankrecord, empcode,entry_by,entry_date) values (@employe,@accountno,@bankid, @branch,@ifsc,@caddress, @paymenttype, @nameasforbankrecord, @empcode,@entry_by,@entry_date)");
                    cmd.Parameters.Add("@employe", employe);
                    cmd.Parameters.Add("@accountno", accountno);
                    cmd.Parameters.Add("@bankid", bankid);
                    cmd.Parameters.Add("@branch", branch);
                    cmd.Parameters.Add("@ifsc", ifsc);
                    cmd.Parameters.Add("@caddress", caddress);
                    cmd.Parameters.Add("@paymenttype", paymenttype);
                    cmd.Parameters.Add("@nameasforbankrecord", nameasforbank);
                    cmd.Parameters.Add("@empcode", empcode);
                    cmd.Parameters.Add("@entry_by", User);
                    cmd.Parameters.Add("@entry_date", ServerDateCurrentdate);
                }
                vdm.insert(cmd);
                string response = GetJson("Insert successfully");
                context.Response.Write(response);
            }
            else
            {
                string sno = context.Request["sno"];
                cmd = new SqlCommand("Update employebankdetails set employeid=@employe, empcode=@empcode,accountno = @accountno,bankid=@bankid,branchname=@branch,ifsccode=@ifsc,currentaddress=@caddress,paymenttype=@paymenttype,nameasforbankrecord=@nameasforbankrecord,modify_by=@modify_by,modify_date=@modify_date where sno=@sno");
                cmd.Parameters.Add("@employe", employe);
                cmd.Parameters.Add("@accountno", accountno);
                cmd.Parameters.Add("@bankid", bankid);
                cmd.Parameters.Add("@branch", branch);
                cmd.Parameters.Add("@ifsc", ifsc);
                cmd.Parameters.Add("@caddress", caddress);
                cmd.Parameters.Add("@empcode", empcode);
                cmd.Parameters.Add("@paymenttype", paymenttype);
                cmd.Parameters.Add("@nameasforbankrecord", nameasforbank);
                cmd.Parameters.Add("@sno", sno);
                cmd.Parameters.Add("@modify_by", User);
                cmd.Parameters.Add("@modify_date", ServerDateCurrentdate);
                vdm.Update(cmd);
                string response = GetJson("UPDATE successfully");
                context.Response.Write(response);
            }
        }
        catch (Exception ex)
        {
            string response = GetJson("Employee Bank Details Already Added");
            context.Response.Write(response);
        }

    }
    public class getbankEmployeedetails
    {
        //public string deptid { get; set; }
        public string employeid { get; set; }
        //public string department { get; set; }
        public string fullname { get; set; }
        public string accountno { get; set; }
        public string bankid { get; set; }
        public string branch { get; set; }
        public string ifsc { get; set; }
        public string caddress { get; set; }
        public string paddress { get; set; }
        public string sno { get; set; }
        public string paymenttype { get; set; }
        public string nameasforbank { get; set; }
        public string bankname { get; set; }
        public string empcode { get; set; }
    }
    private void get_empbank_details(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            string mainbranch = context.Session["mainbranch"].ToString();
            //branchmaping
            cmd = new SqlCommand("SELECT employebankdetails.sno, employedetails.fullname, employebankdetails.empcode, employebankdetails.employeid, employebankdetails.bankid,employebankdetails.accountno, employebankdetails.branchname, employebankdetails.ifsccode, employebankdetails.nameasforbankrecord, employebankdetails.paymenttype, employebankdetails.currentaddress, employebankdetails.empcode AS Expr1, bankmaster.bankname FROM employedetails INNER JOIN employebankdetails ON employedetails.empid = employebankdetails.employeid LEFT OUTER JOIN bankmaster ON employebankdetails.bankid = bankmaster.sno INNER JOIN branchmapping ON employedetails.branchid = branchmapping.subbranch WHERE (branchmapping.mainbranch = @m) AND (employedetails.status = 'No')");
            //cmd = new SqlCommand("SELECT employebankdetails.sno, employedetails.fullname, employebankdetails.empcode, employebankdetails.employeid, employebankdetails.bankid,employebankdetails.accountno, employebankdetails.branchname, employebankdetails.ifsccode, employebankdetails.nameasforbankrecord, employebankdetails.paymenttype, employebankdetails.currentaddress, employebankdetails.empcode AS Expr1, bankmaster.bankname FROM employedetails INNER JOIN employebankdetails ON employedetails.empid = employebankdetails.employeid RIGHT OUTER JOIN bankmaster ON employebankdetails.bankid = bankmaster.sno INNER JOIN branchmapping ON employedetails.branchid = branchmapping.subbranch WHERE (branchmapping.mainbranch = @m) AND (employedetails.status = 'No')");
            cmd.Parameters.Add("@m", mainbranch);
            //branchwise
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<getbankEmployeedetails> bankdetaillist = new List<getbankEmployeedetails>();
            foreach (DataRow dr in routes.Rows)
            {
                getbankEmployeedetails getbankdetaillist = new getbankEmployeedetails();
                getbankdetaillist.sno = dr["sno"].ToString();
                getbankdetaillist.empcode = dr["empcode"].ToString();
                // getbankdetaillist.department = dr["department"].ToString();
                getbankdetaillist.employeid = dr["employeid"].ToString();
                getbankdetaillist.fullname = dr["fullname"].ToString();
                getbankdetaillist.bankid = dr["bankid"].ToString();
                getbankdetaillist.bankname = dr["bankname"].ToString();
                getbankdetaillist.branch = dr["branchname"].ToString();
                getbankdetaillist.ifsc = dr["ifsccode"].ToString();
                getbankdetaillist.caddress = dr["currentaddress"].ToString();
                //getbankdetaillist.paddress = dr["perminantaddress"].ToString();
                getbankdetaillist.accountno = dr["accountno"].ToString();
                getbankdetaillist.paymenttype = dr["paymenttype"].ToString();
                getbankdetaillist.nameasforbank = dr["nameasforbankrecord"].ToString();
                bankdetaillist.Add(getbankdetaillist);
            }
            string response = GetJson(bankdetaillist);
            context.Response.Write(response);
        }
        catch
        {
        }
    }

    private void get_Employeedetails(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            //brnchmapping 
            string mainbranch = context.Session["mainbranch"].ToString();
            string status = context.Request["status"];
            string leveltype = context.Session["leveltype"].ToString();
            if (status == "payslipgenration")
            {
                if (leveltype == "user")
                {
                    cmd = new SqlCommand("SELECT employedetails.empid, employedetails.fullname, employedetails.employee_num, employedetails.salarymode, employedetails.pfeligible, employedetails.esieligible, employedetails.state, employedetails.branchid, branchmaster.branchname,employedetails.employee_type FROM employedetails INNER JOIN branchmapping ON employedetails.branchid = branchmapping.subbranch INNER JOIN branchmaster ON employedetails.branchid = branchmaster.branchid INNER JOIN employe_logins ON employedetails.empid = employe_logins.empid WHERE(employedetails.status = 'No') AND (branchmapping.mainbranch = @m) AND (employe_logins.empid = @userid)");
                    cmd.Parameters.Add("@userid", context.Session["empid"].ToString());
                }
                else
                {
                    cmd = new SqlCommand("SELECT  employedetails.empid, employedetails.fullname, employedetails.employee_num, employedetails.salarymode, employedetails.pfeligible, employedetails.esieligible, employedetails.state, employedetails.branchid, branchmaster.branchname,employedetails.employee_type FROM employedetails INNER JOIN branchmapping ON employedetails.branchid = branchmapping.subbranch INNER JOIN branchmaster ON employedetails.branchid = branchmaster.branchid WHERE (employedetails.status = 'No') AND (branchmapping.mainbranch = @m)");

                }
            }
            else
            {
                cmd = new SqlCommand("SELECT  employedetails.empid, employedetails.fullname, employedetails.employee_num, employedetails.salarymode, employedetails.pfeligible, employedetails.esieligible, employedetails.state, employedetails.branchid, branchmaster.branchname,employedetails.employee_type FROM employedetails INNER JOIN branchmapping ON employedetails.branchid = branchmapping.subbranch INNER JOIN branchmaster ON employedetails.branchid = branchmaster.branchid WHERE (employedetails.status = 'No') AND (branchmapping.mainbranch = @m)");

            }//cmd = new SqlCommand("SELECT employedetails.empid,employedetails.branchid, employedetails.fullname, employedetails.employee_num, employedetails.salarymode, employedetails.pfeligible, employedetails.esieligible, employedetails.state FROM employedetails INNER JOIN branchmapping ON employedetails.branchid = branchmapping.subbranch WHERE (employedetails.status = 'No') AND (branchmapping.mainbranch = @m)");
            cmd.Parameters.Add("@m", mainbranch);
            //branchwise
            //cmd = new SqlCommand("SELECT empid, fullname, employee_num, salarymode, pfeligible, esieligible, state FROM employedetails");
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<getEmployeedetailscls> empdetaillist = new List<getEmployeedetailscls>();
            foreach (DataRow dr in routes.Rows)
            {
                getEmployeedetailscls getempdetaillist = new getEmployeedetailscls();
                getempdetaillist.empsno = dr["empid"].ToString();
                getempdetaillist.empname = dr["fullname"].ToString();
                getempdetaillist.branchid = dr["branchid"].ToString();
                getempdetaillist.branchname = dr["branchname"].ToString();
                getempdetaillist.empnum = dr["employee_num"].ToString();
                getempdetaillist.salarymode = dr["salarymode"].ToString();
                getempdetaillist.pfeligible = dr["pfeligible"].ToString();
                getempdetaillist.esieligible = dr["esieligible"].ToString();
                getempdetaillist.employeetype = dr["employee_type"].ToString();
                getempdetaillist.state = dr["esieligible"].ToString();
                string empname = dr["fullname"].ToString();
                string empcode = dr["employee_num"].ToString();
                getempdetaillist.empnamecode = empname + "[" + empcode + "]";
                empdetaillist.Add(getempdetaillist);
            }
            string response = GetJson(empdetaillist);
            context.Response.Write(response);
        }
        catch
        {
        }
    }
    private void save_resignation_approve_click(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            DateTime ServerDateCurrentdate = DBManager.GetTime(vdm.conn);
            string sno = context.Request["sno"];
            string empid = context.Request["empid"];
            string reason = context.Request["reason"];
            cmd = new SqlCommand("update empresignationdetails set approvaldate=@approvaldate,status=@status  where sno=@sno");
            cmd.Parameters.Add("@approvaldate", ServerDateCurrentdate);
            cmd.Parameters.Add("@status", "A");
            cmd.Parameters.Add("@sno", sno);
            vdm.Update(cmd);
            cmd = new SqlCommand("update employedetails set status='Yes' where empid=@empid");
            cmd.Parameters.Add("@empid", empid);
            vdm.Update(cmd);
            string msg = " Regination Approval successfully Approved";
            string Response = GetJson(msg);
            context.Response.Write(Response);
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);

        }
    }

    private void save_resignation_reject_click(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            DateTime ServerDateCurrentdate = DBManager.GetTime(vdm.conn);
            string sno = context.Request["sno"];
            string reason = context.Request["reason"];
            cmd = new SqlCommand("update empresignationdetails set approvaldate=@approvaldate,status=@status, reason=@reason where sno=@sno");
            cmd.Parameters.Add("@approvaldate", ServerDateCurrentdate);
            cmd.Parameters.Add("@status", "R");
            cmd.Parameters.Add("@reason", reason);
            cmd.Parameters.Add("@sno", sno);
            vdm.Update(cmd);
            string msg = " Regination successfully rejected";
            string Response = GetJson(msg);
            context.Response.Write(Response);
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);

        }
    }
    private void save_approve_leave_click(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            DateTime ServerDateCurrentdate = DBManager.GetTime(vdm.conn);
            string todate = context.Request["todate"];
            string fromdate = context.Request["fromdate"];
            string approve_remarks = context.Request["approve_remarks"];
            string leave_days = context.Request["leave_days"];
            string leavetype = context.Request["leave_days"];
            string leaveapplicationid = context.Request["leaveapplicationid"];
            cmd = new SqlCommand("update leave_application set request_date=@request_date,leave_satus=@leave_satus,leave_from_dt=@leave_from_dt,leave_to_dt=@leave_to_dt,leave_days=@leave_days,approve_remarks=@approve_remarks where leaveapplicationid=@ApplicationID");
            cmd.Parameters.Add("@request_date", ServerDateCurrentdate);
            cmd.Parameters.Add("@leave_satus", "A");
            cmd.Parameters.Add("@ApplicationID", leaveapplicationid);
            cmd.Parameters.Add("@leave_from_dt", fromdate);
            cmd.Parameters.Add("@leave_to_dt", todate);
            cmd.Parameters.Add("@leave_days", leave_days);
            cmd.Parameters.Add("@approve_remarks", approve_remarks);
            vdm.Update(cmd);

            cmd = new SqlCommand("SELECT employee_no, leave_days, leave_type_id FROM leave_application WHERE (leaveapplicationid = @APPID) AND (leave_satus=@satus)");
            cmd.Parameters.Add("@APPID", leaveapplicationid);
            cmd.Parameters.Add("@satus", "A");
            DataTable ldata = vdm.SelectQuery(cmd).Tables[0];
            if (ldata.Rows.Count > 0)
            {
                string empid = ldata.Rows[0]["employee_no"].ToString();
                string leavedays = ldata.Rows[0]["leave_days"].ToString();
                string leavetypeid = ldata.Rows[0]["leave_type_id"].ToString();
                cmd = new SqlCommand("update leavemonitor set count=count-@count where empid=@empid AND leavetype=@leavetype");
                cmd.Parameters.Add("@count", leavedays);
                cmd.Parameters.Add("@leavetype", leavetypeid);
                cmd.Parameters.Add("@empid", empid);
                vdm.Update(cmd);
            }
            cmd = new SqlCommand("SELECT leave_application.leave_description, leave_application.employee_no, employedetails.fullname, employedetails.email , employedetails.cellphone FROM leave_application INNER JOIN  employedetails ON leave_application.employee_no = employedetails.empid WHERE (leave_application.leaveapplicationid = @ApplicationID)");
            cmd.Parameters.Add("@ApplicationID", leaveapplicationid);
            DataTable empdata = vdm.SelectQuery(cmd).Tables[0];
            string empname = "";
            string phoneno = "";
            string fullname = "";
            string emilid = "";
            if (empdata.Rows.Count > 0)
            {
                empname = empdata.Rows[0]["fullname"].ToString();
                emilid = empdata.Rows[0]["email"].ToString();
                phoneno = empdata.Rows[0]["cellphone"].ToString();
                if (approve_remarks == "")
                {
                    approve_remarks = empdata.Rows[0]["leave_description"].ToString();
                }
            }

            DateTime dtfrom = Convert.ToDateTime(fromdate);
            string strfrom = dtfrom.ToString("dd/MM/yyyy");
            DateTime dtto = Convert.ToDateTime(todate);
            string strto = dtto.ToString("dd/MM/yyyy");
            string content = "Dear " + empname + " From " + strfrom + " To " + strto + ", For the purpose of " + approve_remarks + ". your leave has been approved";
            WebClient client = new WebClient();
            if (phoneno.Length >= 10)
            {
                string baseurl = "http://103.16.101.52:8080/sendsms/bulksms?username=kapd-vyshnavi&password=vysavi&type=0&dlr=1&destination=" + phoneno + "&source=VYSHRM&message=" + content + "";
                Stream data = client.OpenRead(baseurl);
                StreamReader reader = new StreamReader(data);
                string ResponseID = reader.ReadToEnd();
                data.Close();
                reader.Close();
            }
            send_leave_mail(context, emilid, empname, content);
            string msg = " Leave successfully Approved";
            string Response = GetJson(msg);
            context.Response.Write(Response);
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);

        }
    }
    private void save_Reject_leave_click(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            DateTime ServerDateCurrentdate = DBManager.GetTime(vdm.conn);
            string leaveapplicationid = context.Request["leaveapplicationid"];
            string approve_remarks = context.Request["approve_remarks"];
            cmd = new SqlCommand("update leave_application set request_date=@request_date,leave_satus=@leave_satus,approve_remarks=@approve_remarks where leaveapplicationid=@sno");
            cmd.Parameters.Add("@request_date", ServerDateCurrentdate);
            cmd.Parameters.Add("@leave_satus", "R");
            cmd.Parameters.Add("@sno", leaveapplicationid);
            cmd.Parameters.Add("@approve_remarks", approve_remarks);
            vdm.Update(cmd);
            cmd = new SqlCommand("SELECT employedetails.fullname, leave_application.leave_description,employedetails.email , employedetails.cellphone FROM leave_application INNER JOIN  employedetails ON leave_application.employee_no = employedetails.empid WHERE (leave_application.leaveapplicationid = @ApplicationID)");
            cmd.Parameters.Add("@ApplicationID", leaveapplicationid);
            DataTable empdata = vdm.SelectQuery(cmd).Tables[0];
            string empname = "";
            string phoneno = "";
            string fullname = "";
            string emilid = "";
            if (empdata.Rows.Count > 0)
            {
                empname = empdata.Rows[0]["fullname"].ToString();
                emilid = empdata.Rows[0]["email"].ToString();
                phoneno = empdata.Rows[0]["cellphone"].ToString();
                if (approve_remarks == "")
                {
                    approve_remarks = empdata.Rows[0]["leave_description"].ToString();
                }

            }
            string content = "Dear " + empname + ", For the purpose of " + approve_remarks + ". your leave rejected";
            WebClient client = new WebClient();
            if (phoneno.Length >= 10)
            {
                string baseurl = "http://103.16.101.52:8080/sendsms/bulksms?username=kapd-vyshnavi&password=vysavi&type=0&dlr=1&destination=" + phoneno + "&source=VYSHRM&message=" + content + "";
                Stream data = client.OpenRead(baseurl);
                StreamReader reader = new StreamReader(data);
                string ResponseID = reader.ReadToEnd();
                data.Close();
                reader.Close();
            }
            send_leave_mail(context, emilid, empname, content);
            string msg = " Leave successfully Rejected";
            string Response = GetJson(msg);
            context.Response.Write(Response);
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);

        }
    }
    private void saveResignationDetails(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            string empid = context.Request["empid"];
            string empcode = context.Request["empcode"];
            string reason = context.Request["reason"];
            string workingday = context.Request["workingday"];
            string quitedate = context.Request["quitedate"];
            string noticeperiod = context.Request["noticeperiod"];
            string arliernoticeperiod = context.Request["arliernoticeperiod"];
            string resignsumbiteon = context.Request["resignsumbiteon"];
            string btnval = context.Request["btnval"];
            if (btnval == "Add")
            {
                cmd = new SqlCommand("insert into empresignationdetails (empid, reason, lastworkingday,willingtoquitearlierthannoticeperiod,willingtoquitdate,status,resignationdate,resignationsumbitedon,empcode, noticeperiod) values(@empid,@reason,@lastworkingday,@willingtoquitearlierthannoticeperiod,@willingtoquitdate,@status,@noticeperiod,@resignationsumbitedon,@empcode, @noticeperiod)");
                cmd.Parameters.Add("@empid", empid);
                cmd.Parameters.Add("@empcode", empcode);
                cmd.Parameters.Add("@reason", reason);
                cmd.Parameters.Add("@lastworkingday", workingday);
                cmd.Parameters.Add("@willingtoquitearlierthannoticeperiod", arliernoticeperiod);
                cmd.Parameters.Add("@willingtoquitdate", quitedate);
                cmd.Parameters.Add("@status", 'P');
                cmd.Parameters.Add("@noticeperiod", noticeperiod);
                cmd.Parameters.Add("@resignationsumbitedon", resignsumbiteon);
                vdm.insert(cmd);
                string response = GetJson("Insert Successfully");
                context.Response.Write(response);
            }
            else
            {
                string sno = context.Request["sno"];
                cmd = new SqlCommand("update empresignationdetails set reason=@reason, lastworkingday=@lastworkingday, willingtoquitearlierthannoticeperiod=@willingtoquitearlierthannoticeperiod,willingtoquitdate=@willingtoquitdate ,resignationsumbitedon=@resignationsumbitedon,noticeperiod=@noticeperiod,empcode=@empcode,empid=@empid WHERE sno=@sno");
                cmd.Parameters.Add("@empid", empid);
                cmd.Parameters.Add("@sno", sno);
                cmd.Parameters.Add("@empcode", empcode);
                cmd.Parameters.Add("@reason", reason);
                cmd.Parameters.Add("@lastworkingday", workingday);
                cmd.Parameters.Add("@willingtoquitearlierthannoticeperiod", arliernoticeperiod);
                cmd.Parameters.Add("@willingtoquitdate", quitedate);
                cmd.Parameters.Add("@resignationsumbitedon", resignsumbiteon);
                cmd.Parameters.Add("@noticeperiod", noticeperiod);
                vdm.Update(cmd);
                string response = GetJson("UPDATE");
                context.Response.Write(response);
            }
        }
        catch (Exception ex)
        {
            string response = GetJson(ex.Message);
            context.Response.Write(response);
        }

    }
    public class EmployeeResignation
    {
        public string sno { set; get; }
        public string empid { set; get; }
        public string lastworkingday { set; get; }
        public string willingtoquitearlierthannoticeperiod { set; get; }
        public string willingtoquitdate { set; get; }
        public string fullname { set; get; }
        public string reason { set; get; }
        public string department { set; get; }
        public string empnum { set; get; }
        public string joindate { set; get; }
        public string status { set; get; }
        public string noticeperiod { set; get; }
        public string designation { set; get; }
        public string resignsumbiteon { set; get; }
        public string resignationdate { set; get; }
    }

    private void get_ResignationDetails(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            string mainbranch = context.Session["mainbranch"].ToString();
            cmd = new SqlCommand("SELECT empresignationdetails.sno, empresignationdetails.empid, empresignationdetails.resignationdate,empresignationdetails.noticeperiod, empresignationdetails.resignationsumbitedon,  empresignationdetails.status, empresignationdetails.reason, empresignationdetails.lastworkingday, empresignationdetails.willingtoquitearlierthannoticeperiod,  empresignationdetails.willingtoquitdate, employedetails.fullname, employedetails.joindate, employedetails.employee_num, departments.department,  designation.designation FROM departments LEFT OUTER JOIN employedetails ON departments.deptid = employedetails.employee_dept INNER JOIN empresignationdetails ON employedetails.empid = empresignationdetails.empid INNER JOIN  designation ON employedetails.designationid = designation.designationid INNER JOIN  branchmapping ON employedetails.branchid = branchmapping.subbranch WHERE(empresignationdetails.status = 'P') AND (branchmapping.mainbranch = @m)");
            cmd.Parameters.Add("@m", mainbranch);
            //cmd = new SqlCommand("SELECT empresignationdetails.sno, empresignationdetails.empid, empresignationdetails.noticeperiod, empresignationdetails.resignationsumbitedon, empresignationdetails.status, empresignationdetails.reason, empresignationdetails.lastworkingday, empresignationdetails.willingtoquitearlierthannoticeperiod, empresignationdetails.willingtoquitdate, employedetails.fullname, employedetails.joindate, employedetails.employee_num, departments.department, designation.designation FROM   departments INNER JOIN employedetails ON departments.deptid = employedetails.employee_dept INNER JOIN empresignationdetails ON employedetails.empid = empresignationdetails.empid INNER JOIN designation ON employedetails.designationid = designation.designationid WHERE (empresignationdetails.status = 'P')");
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<EmployeeResignation> emprsignationlist = new List<EmployeeResignation>();
            foreach (DataRow dr in routes.Rows)
            {
                EmployeeResignation getempresignation = new EmployeeResignation();
                getempresignation.sno = dr["sno"].ToString();
                getempresignation.empid = dr["empid"].ToString();
                getempresignation.empnum = dr["employee_num"].ToString();
                getempresignation.joindate = ((DateTime)dr["joindate"]).ToString("yyyy-MM-dd"); //dr["joindate"].ToString();
                getempresignation.department = dr["department"].ToString();
                getempresignation.designation = dr["designation"].ToString();
                getempresignation.lastworkingday = dr["lastworkingday"].ToString();
                getempresignation.status = "Pending";
                getempresignation.resignationdate = ((DateTime)dr["resignationdate"]).ToString("yyyy-MM-dd"); //dr["willingtoquitdate"].ToString();
                getempresignation.willingtoquitearlierthannoticeperiod = dr["willingtoquitearlierthannoticeperiod"].ToString();
                getempresignation.willingtoquitdate = ((DateTime)dr["willingtoquitdate"]).ToString("yyyy-MM-dd"); //dr["willingtoquitdate"].ToString();
                getempresignation.noticeperiod = ((DateTime)dr["noticeperiod"]).ToString("yyyy-MM-dd"); //dr["noticeperiod"].ToString();
                getempresignation.resignsumbiteon = ((DateTime)dr["resignationsumbitedon"]).ToString("yyyy-MM-dd"); //dr["resignationsumbitedon"].ToString();
                getempresignation.fullname = dr["fullname"].ToString();
                getempresignation.reason = dr["reason"].ToString();
                emprsignationlist.Add(getempresignation);
            }
            string response = GetJson(emprsignationlist);
            context.Response.Write(response);
        }
        catch
        {
        }
    }
    public class getEmployeedeductiondetails
    {
        //public string Department { get; set; }
        public string employeid { get; set; }
        public string fullname { get; set; }
        public string clhoildays { get; set; }
        public string lop { get; set; }
        public string extradays { get; set; }
        public string otdays { get; set; }
        public string night_days { get; set; }
        public string convenancedays { get; set; }
        public string salaryadvance { get; set; }
        public string loan { get; set; }
        public string mobilededuction { get; set; }
        public string canteenamount { get; set; }
        public string gross { get; set; }
        public string medicliamdeduction { get; set; }
        public string otherdeduction { get; set; }
        public string tdsdeduction { get; set; }
        public string numberofworkingdays { get; set; }
        public string employee_num { get; set; }
        public string othours { get; set; }
        public string monthdays { get; set; }
        public string fromdate { get; set; }
        public string todate { get; set; }
    }
    private void get_Deductiondetailes_details(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            DateTime ServerDateCurrentdate = DBManager.GetTime(vdm.conn);
            string mainbranch = context.Session["mainbranch"].ToString();
            DateTime dtfromdate = ServerDateCurrentdate;
            DateTime dttodate = ServerDateCurrentdate;
            string month = context.Request["month"];
            string year = context.Request["year"];
            DateTime dtfrom = DateTime.Now;
            string frmdate = dtfrom.ToString("MM/dd/yyyy");
            string[] str = frmdate.Split('/');
            string day = (dtfrom.Day).ToString();
            string date = month + "/" + day + "/" + year;
            string empid = context.Request["empid"].ToString();
            cmd = new SqlCommand("SELECT empid, fullname, branchid,employee_num FROM employedetails where employedetails.empid=@empid");
            cmd.Parameters.Add("@empid", empid);
            DataTable dtemp = vdm.SelectQuery(cmd).Tables[0];
            //int empid = 0; int branchid = 0;
            cmd = new SqlCommand("SELECT employedetails.fullname, employedetails.branchid, employedetails.employee_num, employedetails.employee_type, employedetails.empid, employedetails.employee_num AS Expr1, employedetails.fullname AS Expr2, designation.designation, employebankdetails.accountno, monthly_attendance.month, monthly_attendance.year, salaryappraisals.gross, salaryappraisals.erningbasic, salaryappraisals.hra, salaryappraisals.profitionaltax, salaryappraisals.esi, salaryappraisals.providentfund, salaryappraisals.conveyance, salaryappraisals.medicalerning, salaryappraisals.washingallowance, salaryappraisals.travelconveyance, salaryappraisals.salaryperyear FROM employedetails INNER JOIN designation ON employedetails.designationid = designation.designationid INNER JOIN monthly_attendance ON employedetails.empid = monthly_attendance.empid INNER JOIN salaryappraisals ON employedetails.empid = salaryappraisals.empid LEFT OUTER JOIN employebankdetails ON employedetails.empid = employebankdetails.employeid WHERE (employedetails.status = 'No') AND (monthly_attendance.month = @month) AND (monthly_attendance.year = @year) AND (employedetails.empid = @empid) AND (salaryappraisals.endingdate IS NULL) AND (salaryappraisals.startingdate <= @d1) OR (employedetails.status = 'No') AND (monthly_attendance.month = @month) AND (monthly_attendance.year = @year) AND (employedetails.empid = @empid) AND (salaryappraisals.endingdate > @d1) AND (salaryappraisals.startingdate <= @d1)");
            //paystructure
            //cmd = new SqlCommand("SELECT employedetails.fullname, employedetails.branchid, employedetails.employee_num, employedetails.employee_type, employedetails.empid, employedetails.employee_num, pay_structure.erningbasic, pay_structure.esi, pay_structure.providentfund, pay_structure.mediclaimdeduction,pay_structure.tdsdeduction, employedetails.fullname, designation.designation, pay_structure.gross, pay_structure.hra, pay_structure.conveyance, pay_structure.washingallowance, pay_structure.medicalerning, pay_structure.profitionaltax, employebankdetails.accountno, monthly_attendance.month, monthly_attendance.year FROM employedetails INNER JOIN designation ON employedetails.designationid = designation.designationid INNER JOIN pay_structure ON employedetails.empid = pay_structure.empid INNER JOIN  monthly_attendance ON employedetails.empid = monthly_attendance.empid LEFT OUTER JOIN employebankdetails ON employedetails.empid = employebankdetails.employeid WHERE  (employedetails.status = 'No')  AND (monthly_attendance.month = @month) AND (monthly_attendance.year = @year) and (employedetails.empid=@empid)");
            cmd.Parameters.Add("@month", month);
            cmd.Parameters.Add("@year", year);
            cmd.Parameters.Add("@empid", empid);
            cmd.Parameters.Add("@d1", date);
            DataTable dtsalary = vdm.SelectQuery(cmd).Tables[0];
            cmd = new SqlCommand("SELECT monthly_attendance.sno, monthly_attendance.empid,monthly_attendance.clorwo, monthly_attendance.doe, monthly_attendance.month, monthly_attendance.year, monthly_attendance.numberofworkingdays, monthly_attendance.night_days,monthly_attendance.otdays, employedetails.employee_num, branchmaster.fromdate, branchmaster.todate, monthly_attendance.lop, branchmaster.branchid,  monthly_attendance.extradays, employedetails.branchid, monthly_attendance.convenancedays FROM  monthly_attendance INNER JOIN  employedetails ON monthly_attendance.empid = employedetails.empid INNER JOIN branchmaster ON employedetails.branchid = branchmaster.branchid WHERE  (monthly_attendance.month = @month) AND (monthly_attendance.year = @year) and (employedetails.empid=@empid)");
            //cmd = new SqlCommand("SELECT monthly_attendance.sno, monthly_attendance.empid, monthly_attendance.doe, monthly_attendance.month, monthly_attendance.year, monthly_attendance.otdays, employedetails.employee_num, branchmaster.fromdate, branchmaster.todate, monthly_workingdays.numberofworkingdays, monthly_attendance.lop,  branchmaster.branchid FROM  monthly_attendance INNER JOIN employedetails ON monthly_attendance.empid = employedetails.empid INNER JOIN branchmaster ON employedetails.branchid = branchmaster.branchid INNER JOIN monthly_workingdays ON branchmaster.branchid = monthly_workingdays.branchid WHERE (monthly_attendance.month = @month) AND (monthly_attendance.year = @year) AND (employedetails.branchid=@branchid)");
            cmd.Parameters.Add("@month", month);
            cmd.Parameters.Add("@year", year);
            cmd.Parameters.Add("@empid", empid);
            DataTable dtattendence = vdm.SelectQuery(cmd).Tables[0];
            cmd = new SqlCommand("SELECT  employedetails.employee_num, salaryadvance.amount, salaryadvance.monthofpaid, employedetails.fullname, salaryadvance.empid FROM   salaryadvance INNER JOIN  employedetails ON salaryadvance.empid = employedetails.empid where  (salaryadvance.month = @month) AND (salaryadvance.year = @year) and (employedetails.empid=@empid)");
            cmd.Parameters.Add("@month", month);
            cmd.Parameters.Add("@year", year);
            cmd.Parameters.Add("@empid", empid);
            DataTable dtsa = vdm.SelectQuery(cmd).Tables[0];
            cmd = new SqlCommand("SELECT employedetails.employee_num, loan_request.loanemimonth, loan_request.month FROM employedetails INNER JOIN  loan_request ON employedetails.empid = loan_request.empid where  (loan_request.month = @month) AND (loan_request.year = @year) and (employedetails.empid=@empid)");
            cmd.Parameters.Add("@month", month);
            cmd.Parameters.Add("@year", year);
            cmd.Parameters.Add("@empid", empid);
            DataTable dtloan = vdm.SelectQuery(cmd).Tables[0];
            cmd = new SqlCommand("SELECT  employedetails.employee_num, mobile_deduction.deductionamount, employedetails.fullname, employedetails.empid FROM  mobile_deduction INNER JOIN employedetails ON mobile_deduction.employee_num = employedetails.employee_num   where  (mobile_deduction.month = @month) AND (mobile_deduction.year = @year) and (employedetails.empid=@empid)");
            cmd.Parameters.Add("@month", month);
            cmd.Parameters.Add("@year", year);
            cmd.Parameters.Add("@empid", empid);
            DataTable dtmobile = vdm.SelectQuery(cmd).Tables[0];
            cmd = new SqlCommand("SELECT  employedetails.employee_num, canteendeductions.amount, employedetails.fullname, employedetails.empid FROM  canteendeductions INNER JOIN employedetails ON canteendeductions.employee_num = employedetails.employee_num where (canteendeductions.month = @month) AND (canteendeductions.year = @year) and (employedetails.empid=@empid)");
            cmd.Parameters.Add("@month", month);
            cmd.Parameters.Add("@year", year);
            cmd.Parameters.Add("@empid", empid);
            DataTable dtcanteen = vdm.SelectQuery(cmd).Tables[0];
            cmd = new SqlCommand("SELECT employedetails.employee_num, employedetails.fullname, employedetails.empid, otherdeduction.otherdeductionamount FROM employedetails INNER JOIN otherdeduction ON employedetails.empid = otherdeduction.empid WHERE (employedetails.empid=@empid) AND (otherdeduction.month = @month) AND (otherdeduction.year = @year)");
            cmd.Parameters.Add("@empid", empid);
            cmd.Parameters.Add("@month", month);
            cmd.Parameters.Add("@year", year);
            DataTable dtotherdeduction = vdm.SelectQuery(cmd).Tables[0];
            List<getEmployeedeductiondetails> bankMasterlist = new List<getEmployeedeductiondetails>();
            getEmployeedeductiondetails getdeductiondetailes = new getEmployeedeductiondetails();
            foreach (DataRow dr in dtemp.Rows)
            {
                string empbid = dr["branchid"].ToString();
                getdeductiondetailes.employeid = dr["empid"].ToString();
                getdeductiondetailes.employee_num = dr["employee_num"].ToString();
                getdeductiondetailes.fullname = dr["fullname"].ToString();
                if (mainbranch == "6")
                {
                    //cmd = new SqlCommand("select fromdate,todate from branchmaster where branchid=@ebranchid");
                    //cmd.Parameters.Add("@ebranchid", empbid);
                    //DataTable dtdates = vdm.SelectQuery(cmd).Tables[0];
                    //if (dtdates.Rows.Count > 0)
                    //{
                    //    int cmonth = Convert.ToInt32(month);
                    //    int cyear = Convert.ToInt32(year);
                    //    int prasentdate = Convert.ToInt32(dtdates.Rows[0]["todate"].ToString());
                    //    dttodate = new DateTime(cyear, cmonth+1, prasentdate);
                    //    //DateTime dtmonthfrom = dtfromdate;
                    //    //string mnthfrmdate = dtmonthfrom.ToString("MM/dd/yyyy");
                    //    //int lastmonth = Convert.ToInt32(dtdates.Rows[0]["fromdate"].ToString());
                    //    //string[] strfrom = mnthfrmdate.Split('/');
                    //    //int years = Convert.ToInt32(strfrom[2]);
                    //    //int months = Convert.ToInt32(strfrom[0]);
                    //    dtfromdate = new DateTime(cyear, cmonth, prasentdate);
                    //    TimeSpan t = dttodate - dtfromdate;
                    //    int NrOfDays = int.Parse(t.TotalDays.ToString());
                    //    // double NrOfDays = t.TotalDays;
                    //    getdeductiondetailes.monthdays = NrOfDays.ToString();
                    //}
                    int days = System.DateTime.DaysInMonth(Convert.ToInt32(year), Convert.ToInt32(month));
                    getdeductiondetailes.numberofworkingdays = days.ToString();
                    getdeductiondetailes.monthdays = days.ToString();
                }
                else
                {
                    int days = System.DateTime.DaysInMonth(Convert.ToInt32(year), Convert.ToInt32(month));
                    getdeductiondetailes.numberofworkingdays = days.ToString();
                    getdeductiondetailes.monthdays = days.ToString();
                }
                if (dtsalary.Rows.Count > 0)
                {
                    getdeductiondetailes.gross = dtsalary.Rows[0]["gross"].ToString();
                    //getdeductiondetailes.fromdate = dtsalary.Rows[0]["fromdate"].ToString();
                    //getdeductiondetailes.todate = dtsalary.Rows[0]["todate"].ToString();
                    //string branchid = dtattendence.Rows[0]["branchid"].ToString();
                }
                else
                {
                    getdeductiondetailes.gross = "0";
                    //getdeductiondetailes.monthdays = NrOfDays.ToString();
                }
                if (dtcanteen.Rows.Count > 0)
                {
                    getdeductiondetailes.canteenamount = dtcanteen.Rows[0]["amount"].ToString();
                }
                else
                {
                    getdeductiondetailes.canteenamount = "0";
                }
                if (dtattendence.Rows.Count > 0)
                {
                    getdeductiondetailes.lop = dtattendence.Rows[0]["lop"].ToString();
                    getdeductiondetailes.extradays = dtattendence.Rows[0]["extradays"].ToString();
                    getdeductiondetailes.night_days = dtattendence.Rows[0]["night_days"].ToString();
                    string convenancedays = dtattendence.Rows[0]["convenancedays"].ToString();
                    if (convenancedays != "")
                    {
                        getdeductiondetailes.convenancedays = dtattendence.Rows[0]["convenancedays"].ToString();
                    }
                    else
                    {
                        getdeductiondetailes.convenancedays = "0";
                    }
                    getdeductiondetailes.clhoildays = dtattendence.Rows[0]["clorwo"].ToString();
                    double otdays = 0;
                    double.TryParse(dtattendence.Rows[0]["otdays"].ToString(), out otdays);

                    getdeductiondetailes.otdays = otdays.ToString();
                    string branchid = dtattendence.Rows[0]["branchid"].ToString();
                    // double otdays = Convert.ToDouble(dtattendence.Rows[0]["otdays"].ToString());
                    double othours = otdays * 8;
                    getdeductiondetailes.othours = othours.ToString();
                    if (branchid == "7" || branchid == "22")
                    {
                        //getdeductiondetailes.monthdays = "31";
                        getdeductiondetailes.numberofworkingdays = dtattendence.Rows[0]["numberofworkingdays"].ToString();
                    }
                    else
                    {
                        getdeductiondetailes.numberofworkingdays = dtattendence.Rows[0]["numberofworkingdays"].ToString();
                        //int days = System.DateTime.DaysInMonth(Convert.ToInt32(year), Convert.ToInt32(month));
                        //getdeductiondetailes.monthdays = days.ToString();
                    }
                }
                else
                {
                    getdeductiondetailes.lop = "0";
                    getdeductiondetailes.extradays = "0";
                    getdeductiondetailes.clhoildays = "0";
                    getdeductiondetailes.night_days = "0";
                    getdeductiondetailes.othours = "0";
                    getdeductiondetailes.convenancedays = "0";
                    //getdeductiondetailes.numberofworkingdays = dtattendence.Rows[0]["numberofworkingdays"].ToString();
                    int days = System.DateTime.DaysInMonth(Convert.ToInt32(year), Convert.ToInt32(month));
                    getdeductiondetailes.numberofworkingdays = days.ToString();
                    //getdeductiondetailes.monthdays = days.ToString();
                }
                if (dtmobile.Rows.Count > 0)
                {
                    getdeductiondetailes.mobilededuction = dtmobile.Rows[0]["deductionamount"].ToString();
                }
                else
                {
                    getdeductiondetailes.mobilededuction = "0";
                }
                if (dtsa.Rows.Count > 0)
                {
                    getdeductiondetailes.salaryadvance = dtsa.Rows[0]["amount"].ToString();
                }
                else
                {
                    getdeductiondetailes.salaryadvance = "0";
                }
                if (dtotherdeduction.Rows.Count > 0)
                {
                    getdeductiondetailes.otherdeduction = dtotherdeduction.Rows[0]["otherdeductionamount"].ToString();
                }
                else
                {
                    getdeductiondetailes.otherdeduction = "0";
                }
                if (dtloan.Rows.Count > 0)
                {
                    getdeductiondetailes.loan = dtloan.Rows[0]["loanemimonth"].ToString();
                }
                else
                {
                    getdeductiondetailes.loan = "0";
                }
                bankMasterlist.Add(getdeductiondetailes);
            }
            string response = GetJson(bankMasterlist);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }
    private void save_edit_deduction_details(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            DateTime ServerDateCurrentdate = DBManager.GetTime(vdm.conn);
            string month = context.Request["month"];
            string year = context.Request["year"];
            string employeid = context.Request["employeid"];
            string clhoildays = context.Request["clhoildays"];
            string lop = context.Request["lop"];
            string night_days = context.Request["night_days"];
            string convenancedays = context.Request["convenancedays"];
            string othours = context.Request["othours"];
            double othours1 = 0;
            double.TryParse(othours, out othours1);
            double otdays = 0;
            string designation = "";
            string branchid = "";
            string company_code = "";
            string employee_num = context.Request["employee_num"];
            cmd = new SqlCommand("SELECT employedetails.empid, employedetails.employee_num, employedetails.fullname, designation.designation, branchmaster.branchname,employedetails.branchid,company_master.companyname, branchmaster.company_code FROM employedetails INNER JOIN branchmaster ON employedetails.branchid = branchmaster.branchid INNER JOIN designation ON employedetails.designationid = designation.designationid INNER JOIN company_master ON branchmaster.company_code = company_master.sno WHERE (employedetails.employee_num = @employee_num)");
            cmd.Parameters.Add("@employee_num", employee_num);
            DataTable dtOT = vdm.SelectQuery(cmd).Tables[0];
            if (dtOT.Rows.Count > 0)
            {
                designation = dtOT.Rows[0]["designation"].ToString();
                branchid = dtOT.Rows[0]["branchid"].ToString();
                company_code = dtOT.Rows[0]["company_code"].ToString();
                if (company_code == "1" || company_code == "2")
                {
                    if (designation == "Casual" || designation == "Casuals")
                    {
                        if (branchid == "26")
                        {
                            otdays = othours1 / 8;
                        }
                        else
                        {
                            otdays = othours1 / 12;

                        }
                    }
                    else
                    {
                        otdays = othours1 / 8;
                    }
                }
                else
                {
                    otdays = othours1 / 8;
                }
            }
            //string otdays = otdays.ToString();
            //otdays = Math.Round(otdays, 2);
            //string otdays = context.Request["otdays"];
            string extradays = context.Request["extradays"];
            string numberofdays = context.Request["numberofworkingdays"];
            double numberofworkingdays = Convert.ToDouble(numberofdays);
            double mobile = 0;
            string mobilededuction = context.Request["mobilededuction"];
            mobile = Convert.ToDouble(mobilededuction);
            double saladv = 0;
            string salaryadvance = context.Request["salaryadvance"];
            saladv = Convert.ToDouble(salaryadvance);
            double loanamount = 0;
            string loan = context.Request["loan"];
            loanamount = Convert.ToDouble(loan);
            double canteen = 0;
            string canteenamount = context.Request["canteenamount"];
            canteen = Convert.ToDouble(canteenamount);
            double otherdedu = 0;
            string otherdeduction = context.Request["otherdeduction"];
            otherdedu = Convert.ToDouble(otherdeduction);
            string btnval = context.Request["btnval"];
            string User = context.Session["empid"].ToString();
            cmd = new SqlCommand("update monthly_attendance set  modify_by=@modify_by,modify_date=@modify_date,otdays=@otdays,lop=@lop,clorwo=@clorwo,doe=@doe,night_days=@night_days,extradays=@extradays,numberofworkingdays=@numberofworkingdays, convenancedays=@convenancedays where month=@amonth and year=@ayear and empid=@empid and employee_num=@employee_num");
            cmd.Parameters.Add("@employee_num", employee_num);
            cmd.Parameters.Add("@empid", employeid);
            cmd.Parameters.Add("@clorwo", clhoildays);
            cmd.Parameters.Add("@lop", lop);
            cmd.Parameters.Add("@night_days", night_days);
            cmd.Parameters.Add("@otdays", otdays);
            cmd.Parameters.Add("@numberofworkingdays", numberofworkingdays);
            cmd.Parameters.Add("@extradays", extradays);
            cmd.Parameters.Add("@amonth", month);
            cmd.Parameters.Add("@doe", ServerDateCurrentdate);
            cmd.Parameters.Add("@ayear", year);
            cmd.Parameters.Add("@modify_by", User);
            cmd.Parameters.Add("@modify_date", ServerDateCurrentdate);
            cmd.Parameters.Add("@convenancedays", convenancedays);
            if (vdm.Update(cmd) == 0)
            {
                cmd = new SqlCommand("insert into monthly_attendance (otdays,empid, employee_num, clorwo, lop, extradays, numberofworkingdays, month, year,night_days,doe,entry_by,convenancedays) values (@otdays,@empid,@employee_num,@clorwo,@lop, @extradays,@numberofworkingdays, @amonth, @ayear,@night_days,@doe,@entry_by,@convenancedays)");
                cmd.Parameters.Add("@employee_num", employee_num);
                cmd.Parameters.Add("@empid", employeid);
                cmd.Parameters.Add("@clorwo", clhoildays);
                cmd.Parameters.Add("@lop", lop);
                cmd.Parameters.Add("@otdays", otdays);
                cmd.Parameters.Add("@night_days", night_days);
                cmd.Parameters.Add("@extradays", extradays);
                cmd.Parameters.Add("@numberofworkingdays", numberofworkingdays);
                cmd.Parameters.Add("@doe", ServerDateCurrentdate);
                cmd.Parameters.Add("@amonth", month);
                cmd.Parameters.Add("@ayear", year);
                cmd.Parameters.Add("@entry_by", User);
                cmd.Parameters.Add("@convenancedays", convenancedays);
                vdm.insert(cmd);

            }
            cmd = new SqlCommand("update  otherdeduction set otherdeductionamount=@amount, doe=@doe,modify_by=@modify_by,modify_date=@modify_date where month=@omonth and year=@oyear and empid=@empid and employee_num=@employee_num");
            cmd.Parameters.Add("@employee_num", employee_num);
            cmd.Parameters.Add("@empid", employeid);
            cmd.Parameters.Add("@amount", otherdeduction);
            cmd.Parameters.Add("@doe", ServerDateCurrentdate);
            cmd.Parameters.Add("@omonth", month);
            cmd.Parameters.Add("@oyear", year);
            cmd.Parameters.Add("@modify_by", User);
            cmd.Parameters.Add("@modify_date", ServerDateCurrentdate);
            if (vdm.Update(cmd) == 0)
            {

                cmd = new SqlCommand("insert into otherdeduction (empid,employee_num,otherdeductionamount,doe, month, year,entry_by) values (@empid,@employee_num,@amount,@doe,@omonth,@oyear,@entry_by)");
                cmd.Parameters.Add("@employee_num", employee_num);
                cmd.Parameters.Add("@empid", employeid);
                cmd.Parameters.Add("@amount", otherdeduction);
                cmd.Parameters.Add("@doe", ServerDateCurrentdate);
                cmd.Parameters.Add("@omonth", month);
                cmd.Parameters.Add("@oyear", year);
                cmd.Parameters.Add("@entry_by", User);
                if (otherdedu > 0)
                {
                    vdm.insert(cmd);
                }
            }

            cmd = new SqlCommand("update salaryadvance set amount=@amount,doe=@doe,modify_by=@modify_by, status='A' where month=@smonth and year=@syear and empid=@empid and employee_num=@employee_num");
            cmd.Parameters.Add("@employee_num", employee_num);
            cmd.Parameters.Add("@empid", employeid);
            cmd.Parameters.Add("@amount", salaryadvance);
            cmd.Parameters.Add("@doe", ServerDateCurrentdate);
            cmd.Parameters.Add("@smonth", month);
            cmd.Parameters.Add("@syear", year);
            cmd.Parameters.Add("@modify_by", User);
            if (vdm.Update(cmd) == 0)
            {
                cmd = new SqlCommand("insert into salaryadvance (empid,employee_num,amount,doe, month, year,entry_by,status) values (@empid,@employee_num,@amount,@doe,@smonth,@syear,@entry_by,'A')");
                cmd.Parameters.Add("@employee_num", employee_num);
                cmd.Parameters.Add("@empid", employeid);
                cmd.Parameters.Add("@amount", salaryadvance);
                cmd.Parameters.Add("@doe", ServerDateCurrentdate);
                cmd.Parameters.Add("@smonth", month);
                cmd.Parameters.Add("@syear", year);
                cmd.Parameters.Add("@entry_by", User);
                if (saladv > 0)
                {
                    vdm.insert(cmd);
                }
            }

            cmd = new SqlCommand("update canteendeductions set amount=@amount,date=@doe where month=@cmonth and year=@cyear and empid=@empid and employee_num=@employee_num");
            cmd.Parameters.Add("@employee_num", employee_num);
            cmd.Parameters.Add("@empid", employeid);
            cmd.Parameters.Add("@amount", canteenamount);
            cmd.Parameters.Add("@doe", ServerDateCurrentdate);
            cmd.Parameters.Add("@cmonth", month);
            cmd.Parameters.Add("@cyear", year);
            if (vdm.Update(cmd) == 0)
            {

                cmd = new SqlCommand("insert into canteendeductions (empid,employee_num,amount,date, month, year) values (@empid,@employee_num,@amount,@doe,@cmonth,@cyear)");
                cmd.Parameters.Add("@employee_num", employee_num);
                cmd.Parameters.Add("@empid", employeid);
                cmd.Parameters.Add("@amount", canteenamount);
                cmd.Parameters.Add("@doe", ServerDateCurrentdate);
                cmd.Parameters.Add("@cmonth", month);
                cmd.Parameters.Add("@cyear", year);
                if (canteen > 0)
                {
                    vdm.insert(cmd);
                }
            }
            cmd = new SqlCommand("update  mobile_deduction set deductionamount=@deductionamount,date=@doe where month=@mmonth and year=@myear and empid=@empid and employee_num=@employee_num");
            cmd.Parameters.Add("@employee_num", employee_num);
            cmd.Parameters.Add("@empid", employeid);
            cmd.Parameters.Add("@deductionamount", mobilededuction);
            cmd.Parameters.Add("@doe", ServerDateCurrentdate);
            cmd.Parameters.Add("@mmonth", month);
            cmd.Parameters.Add("@myear", year);
            if (vdm.Update(cmd) == 0)
            {

                cmd = new SqlCommand("insert into mobile_deduction (empid, employee_num, deductionamount, doe, month, year,entryby) values (@empid,@employee_num,@deductionamount,@doe, @mmonth, @myear,@entryby)");
                cmd.Parameters.Add("@employee_num", employee_num);
                cmd.Parameters.Add("@empid", employeid);
                cmd.Parameters.Add("@deductionamount", mobilededuction);
                cmd.Parameters.Add("@doe", ServerDateCurrentdate);
                cmd.Parameters.Add("@mmonth", month);
                cmd.Parameters.Add("@myear", year);
                cmd.Parameters.Add("@entryby", User);
                if (mobile > 0)
                {
                    vdm.insert(cmd);
                }

            }

            cmd = new SqlCommand("update  loan_request set loanemimonth=@loanemimonth,doe=@doe,modify_by=@modify_by,modify_date=@modify_date where month=@lmonth and year=@lyear and empid=@empid and employee_num=@employee_num");
            cmd.Parameters.Add("@employee_num", employee_num);
            cmd.Parameters.Add("@empid", employeid);
            cmd.Parameters.Add("@loanemimonth", loan);
            cmd.Parameters.Add("@doe", ServerDateCurrentdate);
            cmd.Parameters.Add("@lmonth", month);
            cmd.Parameters.Add("@lyear", year);
            cmd.Parameters.Add("@modify_by", User);
            cmd.Parameters.Add("@modify_date", ServerDateCurrentdate);
            if (vdm.Update(cmd) == 0)
            {
                //
                cmd = new SqlCommand("insert into loan_request (empid, employee_num, loanemimonth, doe, month, year,entry_by) values (@empid,@employee_num,@loanemimonth,@doe,@lmonth,@lyear,@entry_by)");
                cmd.Parameters.Add("@employee_num", employee_num);
                cmd.Parameters.Add("@empid", employeid);
                cmd.Parameters.Add("@loanemimonth", loan);
                cmd.Parameters.Add("@doe", ServerDateCurrentdate);
                cmd.Parameters.Add("@lmonth", month);
                cmd.Parameters.Add("@lyear", year);
                cmd.Parameters.Add("@entry_by", User);
                if (loanamount > 0)
                {
                    vdm.insert(cmd);
                }
            }

            string msg = "saved successfully";
            string Response = GetJson(msg);
            context.Response.Write(Response);
        }
        catch (Exception ex)
        {

            string Response = GetJson("Employee Details Already Exists");
            context.Response.Write(Response);
        }
    }


    private void save_edit_supply_details(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            DateTime ServerDateCurrentdate = DBManager.GetTime(vdm.conn);
            string month = context.Request["month"];
            string year = context.Request["year"];
            string employeid = context.Request["employeid"];
            string clhoildays = context.Request["clhoildays"];
            string lop = context.Request["lop"];
            string night_days = context.Request["night_days"];
            string othours = context.Request["othours"];
            double othours1 = 0;
            double.TryParse(othours, out othours1);
            double otdays = 0;
            string designation = "";
            string branchid = "";
            string company_code = "";
            string employee_num = context.Request["employee_num"];
            cmd = new SqlCommand("SELECT employedetails.empid, employedetails.employee_num, employedetails.fullname, designation.designation, branchmaster.branchname,employedetails.branchid,company_master.companyname, branchmaster.company_code FROM employedetails INNER JOIN branchmaster ON employedetails.branchid = branchmaster.branchid INNER JOIN designation ON employedetails.designationid = designation.designationid INNER JOIN company_master ON branchmaster.company_code = company_master.sno WHERE (employedetails.employee_num = @employee_num)");
            cmd.Parameters.Add("@employee_num", employee_num);
            DataTable dtOT = vdm.SelectQuery(cmd).Tables[0];
            if (dtOT.Rows.Count > 0)
            {
                designation = dtOT.Rows[0]["designation"].ToString();
                branchid = dtOT.Rows[0]["branchid"].ToString();
                company_code = dtOT.Rows[0]["company_code"].ToString();
                if (company_code == "1" || company_code == "2")
                {
                    if (designation == "Casual" || designation == "Casuals")
                    {
                        if (branchid == "26")
                        {
                            otdays = othours1 / 8;
                        }
                        else
                        {
                            otdays = othours1 / 12;

                        }
                    }
                    else
                    {
                        otdays = othours1 / 8;
                    }
                }
                else
                {
                    otdays = othours1 / 8;
                }
            }
            //string otdays = otdays.ToString();
            //otdays = Math.Round(otdays, 2);
            //string otdays = context.Request["otdays"];
            string extradays = context.Request["extradays"];
            string numberofdays = context.Request["numberofworkingdays"];
            double numberofworkingdays = Convert.ToDouble(numberofdays);
            double mobile = 0;
            string mobilededuction = context.Request["mobilededuction"];
            mobile = Convert.ToDouble(mobilededuction);
            double saladv = 0;
            string salaryadvance = context.Request["salaryadvance"];
            saladv = Convert.ToDouble(salaryadvance);
            double loanamount = 0;
            string loan = context.Request["loan"];
            loanamount = Convert.ToDouble(loan);
            double canteen = 0;
            string canteenamount = context.Request["canteenamount"];
            canteen = Convert.ToDouble(canteenamount);
            double otherdedu = 0;
            string otherdeduction = context.Request["otherdeduction"];
            otherdedu = Convert.ToDouble(otherdeduction);
            string btnval = context.Request["btnval"];
            string User = context.Session["empid"].ToString();

            cmd = new SqlCommand();

            cmd = new SqlCommand("update supply_attendance set  modify_by=@modify_by,modify_date=@modify_date,otdays=@otdays,lop=@lop,clorwo=@clorwo,doe=@doe,night_days=@night_days,extradays=@extradays,numberofworkingdays=@numberofworkingdays where month=@amonth and year=@ayear and empid=@empid and employee_num=@employee_num");
            cmd.Parameters.Add("@employee_num", employee_num);
            cmd.Parameters.Add("@empid", employeid);
            cmd.Parameters.Add("@clorwo", clhoildays);
            cmd.Parameters.Add("@lop", lop);
            cmd.Parameters.Add("@night_days", night_days);
            cmd.Parameters.Add("@otdays", otdays);
            cmd.Parameters.Add("@numberofworkingdays", numberofworkingdays);
            cmd.Parameters.Add("@extradays", extradays);
            cmd.Parameters.Add("@amonth", month);
            cmd.Parameters.Add("@doe", ServerDateCurrentdate);
            cmd.Parameters.Add("@ayear", year);
            cmd.Parameters.Add("@modify_by", User);
            cmd.Parameters.Add("@modify_date", ServerDateCurrentdate);
            if (vdm.Update(cmd) == 0)
            {
                cmd = new SqlCommand("insert into supply_attendance (otdays,empid, employee_num, clorwo, lop, extradays, numberofworkingdays, month, year,night_days,doe,entry_by) values (@otdays,@empid,@employee_num,@clorwo,@lop, @extradays,@numberofworkingdays, @amonth, @ayear,@night_days,@doe,@entry_by)");
                cmd.Parameters.Add("@employee_num", employee_num);
                cmd.Parameters.Add("@empid", employeid);
                cmd.Parameters.Add("@clorwo", clhoildays);
                cmd.Parameters.Add("@lop", lop);
                cmd.Parameters.Add("@otdays", otdays);
                cmd.Parameters.Add("@night_days", night_days);
                cmd.Parameters.Add("@extradays", extradays);
                cmd.Parameters.Add("@numberofworkingdays", numberofworkingdays);
                cmd.Parameters.Add("@doe", ServerDateCurrentdate);
                cmd.Parameters.Add("@amonth", month);
                cmd.Parameters.Add("@ayear", year);
                cmd.Parameters.Add("@entry_by", User);
                vdm.insert(cmd);
            }
            string msg = "saved successfully";
            string Response = GetJson(msg);
            context.Response.Write(Response);
        }
        catch (Exception ex)
        {

            string Response = GetJson("Employee Details Already Exists");
            context.Response.Write(Response);
        }
    }



    private void get_Payslip_details(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            string month = context.Request["month"];
            string year = context.Request["year"];
            string empid = context.Request["empid"].ToString();
            cmd = new SqlCommand("SELECT empid, fullname, employee_num FROM employedetails where employedetails.empid=@empid");
            cmd.Parameters.Add("@empid", empid);
            DataTable dtemp = vdm.SelectQuery(cmd).Tables[0];
            //int empid = 0; int branchid = 0;
            cmd = new SqlCommand("SELECT employedetails.fullname, employedetails.employee_num, employedetails.employee_type, employedetails.empid, employedetails.employee_num, pay_structure.erningbasic, pay_structure.esi, pay_structure.providentfund, employedetails.fullname, designation.designation, pay_structure.gross, pay_structure.hra, pay_structure.conveyance, pay_structure.washingallowance, pay_structure.medicalerning, pay_structure.profitionaltax, employebankdetails.accountno, monthly_attendance.month, monthly_attendance.year FROM employedetails INNER JOIN designation ON employedetails.designationid = designation.designationid INNER JOIN pay_structure ON employedetails.empid = pay_structure.empid INNER JOIN  monthly_attendance ON employedetails.empid = monthly_attendance.empid LEFT OUTER JOIN employebankdetails ON employedetails.empid = employebankdetails.employeid WHERE  (employedetails.status = 'No')  AND (monthly_attendance.month = @month) AND (monthly_attendance.year = @year) and (employedetails.empid=@empid)");
            cmd.Parameters.Add("@month", month);
            cmd.Parameters.Add("@year", year);
            cmd.Parameters.Add("@empid", empid);
            DataTable dtsalary = vdm.SelectQuery(cmd).Tables[0];
            cmd = new SqlCommand("SELECT monthly_attendance.sno, monthly_attendance.empid,monthly_attendance.clorwo, monthly_attendance.doe, monthly_attendance.month, monthly_attendance.year, monthly_attendance.otdays, employedetails.employee_num, branchmaster.fromdate, branchmaster.todate, monthly_attendance.lop, branchmaster.branchid, monthly_attendance.numberofworkingdays FROM  monthly_attendance INNER JOIN  employedetails ON monthly_attendance.empid = employedetails.empid INNER JOIN branchmaster ON employedetails.branchid = branchmaster.branchid WHERE  (monthly_attendance.month = @month) AND (monthly_attendance.year = @year) and (employedetails.empid=@empid)");
            //cmd = new SqlCommand("SELECT monthly_attendance.sno, monthly_attendance.empid, monthly_attendance.doe, monthly_attendance.month, monthly_attendance.year, monthly_attendance.otdays, employedetails.employee_num, branchmaster.fromdate, branchmaster.todate, monthly_workingdays.numberofworkingdays, monthly_attendance.lop,  branchmaster.branchid FROM  monthly_attendance INNER JOIN employedetails ON monthly_attendance.empid = employedetails.empid INNER JOIN branchmaster ON employedetails.branchid = branchmaster.branchid INNER JOIN monthly_workingdays ON branchmaster.branchid = monthly_workingdays.branchid WHERE (monthly_attendance.month = @month) AND (monthly_attendance.year = @year) AND (employedetails.branchid=@branchid)");
            cmd.Parameters.Add("@month", month);
            cmd.Parameters.Add("@year", year);
            cmd.Parameters.Add("@empid", empid);
            DataTable dtattendence = vdm.SelectQuery(cmd).Tables[0];
            cmd = new SqlCommand("SELECT  employedetails.employee_num, salaryadvance.amount, salaryadvance.monthofpaid, employedetails.fullname, salaryadvance.empid FROM   salaryadvance INNER JOIN  employedetails ON salaryadvance.empid = employedetails.empid where  (salaryadvance.month = @month) AND (salaryadvance.year = @year) and (employedetails.empid=@empid)");
            cmd.Parameters.Add("@month", month);
            cmd.Parameters.Add("@year", year);
            cmd.Parameters.Add("@empid", empid);
            DataTable dtsa = vdm.SelectQuery(cmd).Tables[0];
            cmd = new SqlCommand("SELECT employedetails.employee_num, loan_request.loanemimonth, loan_request.months FROM employedetails INNER JOIN  loan_request ON employedetails.empid = loan_request.empid where  (loan_request.month = @month) AND (loan_request.year = @year) and (employedetails.empid=@empid)");
            cmd.Parameters.Add("@month", month);
            cmd.Parameters.Add("@year", year);
            cmd.Parameters.Add("@empid", empid);
            DataTable dtloan = vdm.SelectQuery(cmd).Tables[0];
            cmd = new SqlCommand("SELECT  employedetails.employee_num, mobile_deduction.deductionamount, employedetails.fullname, employedetails.empid FROM  mobile_deduction INNER JOIN employedetails ON mobile_deduction.employee_num = employedetails.employee_num   where  (mobile_deduction.month = @month) AND (mobile_deduction.year = @year) and (employedetails.empid=@empid)");
            cmd.Parameters.Add("@month", month);
            cmd.Parameters.Add("@year", year);
            cmd.Parameters.Add("@empid", empid);
            DataTable dtmobile = vdm.SelectQuery(cmd).Tables[0];
            cmd = new SqlCommand("SELECT  employedetails.employee_num, canteendeductions.amount, employedetails.fullname, employedetails.empid FROM  canteendeductions INNER JOIN employedetails ON canteendeductions.employee_num = employedetails.employee_num where (canteendeductions.month = @month) AND (canteendeductions.year = @year) and (employedetails.empid=@empid)");
            cmd.Parameters.Add("@month", month);
            cmd.Parameters.Add("@year", year);
            cmd.Parameters.Add("@empid", empid);
            DataTable dtcanteen = vdm.SelectQuery(cmd).Tables[0];
            List<getEmployeedeductiondetails> bankMasterlist = new List<getEmployeedeductiondetails>();
            getEmployeedeductiondetails getdeductiondetailes = new getEmployeedeductiondetails();
            foreach (DataRow dr in dtemp.Rows)
            {
                getdeductiondetailes.employeid = dr["empid"].ToString();
                getdeductiondetailes.employee_num = dr["employee_num"].ToString();
                getdeductiondetailes.fullname = dr["fullname"].ToString();
                if (dtsalary.Rows.Count > 0)
                {
                    getdeductiondetailes.gross = dtsalary.Rows[0]["gross"].ToString();
                }
                else
                {
                    getdeductiondetailes.gross = "0";
                }
                if (dtcanteen.Rows.Count > 0)
                {
                    getdeductiondetailes.canteenamount = dtcanteen.Rows[0]["amount"].ToString();
                }
                else
                {
                    getdeductiondetailes.canteenamount = "0";
                }
                if (dtattendence.Rows.Count > 0)
                {
                    getdeductiondetailes.lop = dtattendence.Rows[0]["lop"].ToString();
                    getdeductiondetailes.extradays = dtattendence.Rows[0]["otdays"].ToString();
                    getdeductiondetailes.clhoildays = dtattendence.Rows[0]["clorwo"].ToString();
                }
                else
                {
                    getdeductiondetailes.lop = "0";
                    getdeductiondetailes.extradays = "0";
                    getdeductiondetailes.clhoildays = "0";
                }
                if (dtmobile.Rows.Count > 0)
                {
                    getdeductiondetailes.mobilededuction = dtmobile.Rows[0]["deductionamount"].ToString();
                }
                else
                {
                    getdeductiondetailes.mobilededuction = "0";
                }
                if (dtsa.Rows.Count > 0)
                {
                    getdeductiondetailes.salaryadvance = dtsa.Rows[0]["amount"].ToString();
                }
                else
                {
                    getdeductiondetailes.salaryadvance = "0";
                }
                if (dtloan.Rows.Count > 0)
                {
                    getdeductiondetailes.loan = dtloan.Rows[0]["loanemimonth"].ToString();
                }
                else
                {
                    getdeductiondetailes.loan = "0";
                }
                bankMasterlist.Add(getdeductiondetailes);
            }
            string response = GetJson(bankMasterlist);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }
    #region LeaveDetails
    private void leavedetails_save(HttpContext context)
    {
        try
        {
            string branchid = "1";
            if (branchid != null)
            {
                // string branchid = context.Session["branch_id"].ToString();
                string leaveType = context.Request["leaveType"];
                string empid = context.Request["empid"];
                string MobileNumber = context.Request["MobileNumber"];
                string todate = context.Request["todate"];
                string fromdate = context.Request["fromdate"];
                string totaldays = context.Request["totaldays"];
                string reason = context.Request["reason"];
                string reportingempid = context.Request["reportingempid"];
                string operation = context.Request["operation"];
                string sno = context.Request["leavetypesno"];
                DateTime ServerDateCurrentdate = DBManager.GetTime(vdm.conn);
                string login_id = context.Session["userid"].ToString();
                SqlCommand cmd;
                if (operation == "SAVE")
                {
                    cmd = new SqlCommand("INSERT INTO leave_application (leave_type_id, employee_no, leave_description, leave_from_dt, leave_to_dt, request_to,mobile_number,leave_days,leave_satus,request_date) VALUES (@leave_type_id, @employee_no, @leave_description, @leave_from_dt, @leave_to_dt, @request_to,@mobile_number,@leave_days,@leave_satus,@request_date)");
                    cmd.Parameters.Add("@leave_type_id", leaveType);
                    cmd.Parameters.Add("@employee_no", empid);
                    cmd.Parameters.Add("@leave_description", reason);
                    cmd.Parameters.Add("@leave_from_dt", fromdate);
                    cmd.Parameters.Add("@leave_to_dt", todate);
                    cmd.Parameters.Add("@request_to", reportingempid);
                    cmd.Parameters.Add("@mobile_number", MobileNumber);
                    cmd.Parameters.Add("@leave_days", totaldays);
                    cmd.Parameters.Add("@request_date", ServerDateCurrentdate);
                    cmd.Parameters.Add("@leave_satus", "P");//branch_sno
                    vdm.insert(cmd);

                }
                else
                {
                }
                cmd = new SqlCommand("SELECT empid, employee_num, fullname, cellphone, email FROM employedetails WHERE (empid = @Emp_ID) ");
                cmd.Parameters.Add("@Emp_ID", empid);
                DataTable empdata = vdm.SelectQuery(cmd).Tables[0];
                string empname = "";
                if (empdata.Rows.Count > 0)
                {
                    empname = empdata.Rows[0]["fullname"].ToString();

                }
                cmd = new SqlCommand("SELECT empid, employee_num, fullname, cellphone, email FROM employedetails WHERE (empid = @EmpID) ");
                cmd.Parameters.Add("@EmpID", reportingempid);
                DataTable Approve_empdata = vdm.SelectQuery(cmd).Tables[0];
                string phoneno = "";
                string fullname = "";
                string emilid = "";
                if (Approve_empdata.Rows.Count > 0)
                {
                    phoneno = Approve_empdata.Rows[0]["cellphone"].ToString();
                    fullname = Approve_empdata.Rows[0]["fullname"].ToString();
                    emilid = Approve_empdata.Rows[0]["email"].ToString();

                }
                cmd = new SqlCommand("SELECT    employedetails.empid, employedetails.fullname, employedetails.designationid, employedetails.employee_dept, employedetails.status, employedetails.email, employedetails.cellphone, employedetails.company_id, branchmapping.mainbranch FROM  employedetails INNER JOIN branchmapping ON employedetails.branchid = branchmapping.subbranch WHERE     (employedetails.employee_dept = 2) AND (employedetails.status = 'No') AND (branchmapping.mainbranch = @main)");
                cmd.Parameters.Add("@main", context.Session["mainbranch"].ToString());
                DataTable dtemp = vdm.SelectQuery(cmd).Tables[0];
                DateTime dtfrom = Convert.ToDateTime(fromdate);
                string strfrom = dtfrom.ToString("dd/MM/yyyy");
                DateTime dtto = Convert.ToDateTime(todate);
                string strto = dtto.ToString("dd/MM/yyyy");
                if (dtemp.Rows.Count > 0)
                {
                    foreach (DataRow dr in dtemp.Rows)
                    {
                        string eid = dr["email"].ToString();
                        string toAddress = eid;
                        string subject = "Leave Request";
                        var st = new StackTrace(ex, true);
                        var frame = st.GetFrame(0);
                        var line = frame.GetFileLineNumber();

                        string body = "Dear Sir, I am " + empname + " applying for leave From " + strfrom + " To " + strto + ", For the purpose of " + reason + ".  Please approve my leave";
                        SendEmail(toAddress, subject, body);
                    }
                }
                string content = "Dear Sir, I am " + empname + " applying for leave From " + strfrom + " To " + strto + ", For the purpose of " + reason + ".  Please approve my leave";
                WebClient client = new WebClient();
                if (phoneno.Length >= 10)
                {
                    string baseurl = "http://www.smsstriker.com/API/sms.php?username=vaishnavidairy&password=vyshnavi@123&from=VYSNVI&to=" + phoneno + "&source=VYSHRM&message=" + content + "";
                    Stream data = client.OpenRead(baseurl);
                    StreamReader reader = new StreamReader(data);
                    string ResponseID = reader.ReadToEnd();
                    data.Close();
                    reader.Close();
                }
                send_leave_mail(context, emilid, empname, content);
                string msg = "Data Successfully Saved";
                string response = GetJson(msg);
                context.Response.Write(response);
            }
            else
            {
                context.Response.Write("false");
            }
        }
        catch (Exception ex)
        {
            string response = GetJson(ex.ToString());
            context.Response.Write(response);
        }
    }
    public void send_leave_mail(HttpContext context, string emilid, string empname, string content)
    {
        string subject = "Leave Application For " + empname;
        string toAddress = emilid;
        string result = "Success";
        string senderID = "no-reply@vyshnavi.in";// use sender's email id here..
        const string senderPassword = "Vyshnavi@123"; // sender password here...
        try
        {
            SmtpClient smtp = new SmtpClient
            {
                Host = "czismtp.logix.in", // smtp server address here...
                Port = 587,
                //security type=tsl;
                EnableSsl = true,
                DeliveryMethod = SmtpDeliveryMethod.Network,
                Credentials = new System.Net.NetworkCredential(senderID, senderPassword),
                Timeout = 30000,
            };
            MailMessage message = new MailMessage(senderID, toAddress, subject, "<html><body>" + content + "<br></body></html>");
            message.IsBodyHtml = true;
            smtp.Send(message);
        }
        catch (Exception ex)
        {
            result = "Error sending data please try again.!!!";
        }
    }
    public class myleave
    {
        public string employee_no { set; get; }
        public string leave_type { set; get; }
        public string fromdate { set; get; }
        public string todate { set; get; }
        public string sno { set; get; }
        public string status { set; get; }
        public string branchsno { set; get; }
        public string Reporting_manager { set; get; }
        public string leave_days { set; get; }
        public string aproved_by { set; get; }
        public string remarks { set; get; }
        public string empname { set; get; }
    }
    private void MyleaverequestDetails(HttpContext context)
    {
        try
        {
            string branchid = "1";
            DateTime fromdate = new DateTime();
            DateTime todate = new DateTime();
            string frmdate = context.Request["fromdate"];
            fromdate = Convert.ToDateTime(frmdate);
            string tdate = context.Request["todate"];
            todate = Convert.ToDateTime(tdate);
            if (branchid != null)
            {
                string login_id = context.Session["userid"].ToString();
                string mainbranch = context.Session["mainbranch"].ToString();
                SqlCommand cmd;
                string status = context.Request["status"];
                if (status == "MyLeaveRequest")
                {
                    //branchmapping
                    cmd = new SqlCommand("SELECT la.leaveapplicationid, la.employee_no, la.remarks, la.leave_description, la.request_to, la.request_date, la.leave_from_dt, la.leave_to_dt, la.leave_satus, la.employee_no AS Expr1, la.aproved_by, la.operated_by, la.leave_type_id, la.mobile_number, la.leave_days, ed.fullname, lt.leavetypecode,   et.fullname AS approvedby FROM  leave_application AS la INNER JOIN  leavetypes AS lt ON la.leave_type_id = lt.leavetypeid INNER JOIN employedetails AS et ON et.empid = la.request_to INNER JOIN employedetails AS ed ON la.employee_no = ed.empid INNER JOIN branchmapping ON et.branchid = branchmapping.subbranch WHERE  (la.employee_no = @userID) AND (branchmapping.mainbranch = @m) AND (et.status = 'No') AND (la.request_date BETWEEN @d1 AND @d2)");
                    cmd.Parameters.Add("@m", mainbranch);
                    cmd.Parameters.Add("@d1", GetLowDate(fromdate));
                    cmd.Parameters.Add("@d2", GetHighDate(todate));
                }
                else
                {
                    //branchmapping
                    cmd = new SqlCommand("SELECT la.leaveapplicationid, la.employee_no, la.remarks, la.leave_description, la.request_to, la.request_date, la.leave_from_dt, la.leave_to_dt, la.leave_satus,  la.employee_no AS Expr1, la.aproved_by, la.operated_by, la.leave_type_id, la.mobile_number, la.leave_days, ed.fullname, lt.leavetypecode,  et.fullname AS approvedby FROM leave_application AS la INNER JOIN leavetypes AS lt ON la.leave_type_id = lt.leavetypeid INNER JOIN employedetails AS et ON et.empid = la.request_to INNER JOIN employedetails AS ed ON la.employee_no = ed.empid INNER JOIN branchmapping ON et.branchid = branchmapping.subbranch WHERE (la.leave_satus = 'p') AND (la.request_to = @userID) AND (et.status = 'No') AND (branchmapping.mainbranch = @m)");
                    cmd.Parameters.Add("@m", mainbranch);
                }
                cmd.Parameters.Add("@userID", context.Session["empid"].ToString());
                DataTable sessiondata = vdm.SelectQuery(cmd).Tables[0];
                List<myleave> getsessionlist = new List<myleave>();
                foreach (DataRow dr in sessiondata.Rows)
                {
                    myleave ss = new myleave();
                    ss.sno = dr["leaveapplicationid"].ToString();
                    ss.employee_no = dr["employee_no"].ToString();
                    ss.leave_type = dr["leavetypecode"].ToString();
                    ss.fromdate = ((DateTime)dr["leave_from_dt"]).ToString("yyyy-MM-dd");
                    ss.todate = ((DateTime)dr["leave_to_dt"]).ToString("yyyy-MM-dd");
                    string leavestatus = dr["leave_satus"].ToString();
                    if (leavestatus == "P")
                    {
                        leavestatus = "Pending";

                    }
                    else if (leavestatus == "A")
                    {
                        leavestatus = "Approved";

                    }
                    else if (leavestatus == "R")
                    {
                        leavestatus = "Reject";

                    }
                    ss.status = leavestatus;
                    // ss.branchsno = dr["branch_sno"].ToString();
                    ss.leave_days = dr["leave_days"].ToString();
                    ss.empname = dr["fullname"].ToString();
                    ss.Reporting_manager = dr["approvedby"].ToString();
                    ss.remarks = dr["leave_description"].ToString();
                    getsessionlist.Add(ss);
                }
                string response = GetJson(getsessionlist);
                context.Response.Write(response);
            }


            else
            {
                context.Response.Write("false");
            }
        }
        catch (Exception ex)
        {
            string response = GetJson(ex.ToString());
            context.Response.Write(response);
        }
    }
    public class odapply
    {
        public string employee_no { set; get; }
        public string leave_type { set; get; }
        public string fromdate { set; get; }
        public string todate { set; get; }
        public string sno { set; get; }
        public string status { set; get; }
        public string branchsno { set; get; }
        public string Reporting_manager { set; get; }
        public string leave_days { set; get; }
        public string aproved_by { set; get; }
        public string remarks { set; get; }
        public string empname { set; get; }
    }

    private void ODrequestDetails(HttpContext context)
    {
        try
        {
            string branchid = "1";
            DateTime fromdate = new DateTime();
            DateTime todate = new DateTime();
            string frmdate = context.Request["fromdate"];
            fromdate = Convert.ToDateTime(frmdate);
            string tdate = context.Request["todate"];
            todate = Convert.ToDateTime(tdate);
            if (branchid != null)
            {
                // string branchid = context.Session["branch_id"].ToString();
                string login_id = context.Session["userid"].ToString();
                string mainbranch = context.Session["mainbranch"].ToString();
                SqlCommand cmd;
                string status = context.Request["status"];
                if (status == "MyLeaveRequest")
                {
                    //branchmapping
                    cmd = new SqlCommand("SELECT ed.fullname, oddetails.empid, oddetails.sno, oddetails.noofdays, oddetails.fromdate, oddetails.todate, oddetails.reportingto, oddetails.reason, oddetails.status, oddetails.mobileno, et.fullname AS reportingname, employe_logins.loginid FROM employedetails AS et INNER JOIN  branchmapping ON et.branchid = branchmapping.subbranch INNER JOIN oddetails ON et.empid = oddetails.reportingto INNER JOIN employedetails AS ed ON oddetails.empid = ed.empid INNER JOIN employe_logins ON et.empid = employe_logins.empid WHERE (et.status = 'No') AND (branchmapping.mainbranch = @m) AND (oddetails.empid = @userID) AND (oddetails.doe BETWEEN @d1 AND @d2)");
                    cmd.Parameters.Add("@m", mainbranch);
                    cmd.Parameters.Add("@d1", GetLowDate(fromdate));
                    cmd.Parameters.Add("@d2", GetHighDate(todate));
                }
                else
                {
                    //branchmapping
                    cmd = new SqlCommand("SELECT ed.fullname, oddetails.empid, oddetails.sno, oddetails.noofdays, oddetails.fromdate, oddetails.todate, oddetails.reportingto, oddetails.reason, oddetails.status, oddetails.mobileno, et.fullname AS reportingname FROM employedetails AS et INNER JOIN branchmapping ON et.branchid = branchmapping.subbranch INNER JOIN oddetails ON et.empid = oddetails.reportingto INNER JOIN employedetails AS ed ON oddetails.empid = ed.empid WHERE (et.status = 'No') AND (branchmapping.mainbranch = @m) AND (oddetails.status = 'P') AND (oddetails.reportingto = @userID)");
                    cmd.Parameters.Add("@m", mainbranch);
                }
                cmd.Parameters.Add("@userID", context.Session["empid"].ToString());
                DataTable sessiondata = vdm.SelectQuery(cmd).Tables[0];
                List<myleave> getsessionlist = new List<myleave>();
                foreach (DataRow dr in sessiondata.Rows)
                {
                    myleave ss = new myleave();
                    ss.sno = dr["sno"].ToString();
                    ss.employee_no = dr["empid"].ToString();
                    //ss.leave_type = dr["leavetypecode"].ToString();
                    ss.fromdate = ((DateTime)dr["fromdate"]).ToString("yyyy-MM-dd");
                    ss.todate = ((DateTime)dr["todate"]).ToString("yyyy-MM-dd");
                    string leavestatus = dr["status"].ToString();
                    if (leavestatus == "P")
                    {
                        leavestatus = "Pending";

                    }
                    else if (leavestatus == "A")
                    {
                        leavestatus = "Approved";

                    }
                    else if (leavestatus == "R")
                    {
                        leavestatus = "Reject";

                    }
                    ss.status = leavestatus;
                    // ss.branchsno = dr["branch_sno"].ToString();
                    ss.leave_days = dr["noofdays"].ToString();
                    ss.empname = dr["fullname"].ToString();
                    ss.Reporting_manager = dr["reportingname"].ToString();
                    ss.remarks = dr["reason"].ToString();
                    getsessionlist.Add(ss);
                }
                string response = GetJson(getsessionlist);
                context.Response.Write(response);
            }


            else
            {
                context.Response.Write("false");
            }
        }
        catch (Exception ex)
        {
            string response = GetJson(ex.ToString());
            context.Response.Write(response);
        }
    }

    #endregion LeaveDetails


    private void save_approve_OD_click(HttpContext context)
    {
        try
        {

            vdm = new DBManager();
            DateTime ServerDateCurrentdate = DBManager.GetTime(vdm.conn);
            string todate = context.Request["todate"];
            string fromdate = context.Request["fromdate"];
            string approve_remarks = context.Request["approve_remarks"];
            string leave_days = context.Request["leave_days"];
            string odid = context.Request["odid"];
            cmd = new SqlCommand("update oddetails set fromdate=@fromdate,todate=@todate,noofdays=@noofdays,appremarks=@appremarks,doe=@doe,status=@status where sno=@sno");
            cmd.Parameters.Add("@doe", ServerDateCurrentdate);
            cmd.Parameters.Add("@status", "A");
            cmd.Parameters.Add("@sno", odid);
            cmd.Parameters.Add("@fromdate", fromdate);
            cmd.Parameters.Add("@todate", todate);
            cmd.Parameters.Add("@noofdays", leave_days);
            cmd.Parameters.Add("@appremarks", approve_remarks);
            vdm.Update(cmd);
            cmd = new SqlCommand("SELECT employedetails.fullname, employedetails.email, employedetails.cellphone, oddetails.reason FROM employedetails INNER JOIN oddetails ON employedetails.empid = oddetails.empid WHERE (oddetails.sno = @ApplicationID)");
            cmd.Parameters.Add("@ApplicationID", odid);
            DataTable empdata = vdm.SelectQuery(cmd).Tables[0];
            string empname = "";
            string phoneno = "";
            string fullname = "";
            string emilid = "";
            if (empdata.Rows.Count > 0)
            {
                empname = empdata.Rows[0]["fullname"].ToString();
                emilid = empdata.Rows[0]["email"].ToString();
                phoneno = empdata.Rows[0]["cellphone"].ToString();
                if (approve_remarks == "")
                {
                    approve_remarks = empdata.Rows[0]["reason"].ToString();
                }
            }

            DateTime dtfrom = Convert.ToDateTime(fromdate);
            string strfrom = dtfrom.ToString("dd/MM/yyyy");
            DateTime dtto = Convert.ToDateTime(todate);
            string strto = dtto.ToString("dd/MM/yyyy");
            string content = "Dear " + empname + " From " + strfrom + " To " + strto + ", For the purpose of " + approve_remarks + ". your OD has been approved";
            WebClient client = new WebClient();
            if (phoneno.Length >= 10)
            {
                string baseurl = "http://103.16.101.52:8080/sendsms/bulksms?username=kapd-vyshnavi&password=vysavi&type=0&dlr=1&destination=" + phoneno + "&source=VYSHRM&message=" + content + "";
                Stream data = client.OpenRead(baseurl);
                StreamReader reader = new StreamReader(data);
                string ResponseID = reader.ReadToEnd();
                data.Close();
                reader.Close();
            }
            send_leave_mail(context, emilid, empname, content);
            string msg = " OD successfully Approved";
            string Response = GetJson(msg);
            context.Response.Write(Response);
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);

        }
    }


    private void save_Reject_OD_click(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            DateTime ServerDateCurrentdate = DBManager.GetTime(vdm.conn);
            string odid = context.Request["odid"];
            string approve_remarks = context.Request["approve_remarks"];
            cmd = new SqlCommand("update oddetails set appremarks=@appremarks,doe=@doe,status=@status where sno=@sno");
            cmd.Parameters.Add("@appremarks", approve_remarks);
            cmd.Parameters.Add("@doe", ServerDateCurrentdate);
            cmd.Parameters.Add("@status", "R");
            cmd.Parameters.Add("@sno", odid);
            vdm.Update(cmd);
            cmd = new SqlCommand("SELECT employedetails.fullname, employedetails.email, employedetails.cellphone, oddetails.reason FROM employedetails INNER JOIN oddetails ON employedetails.empid = oddetails.empid WHERE (oddetails.sno = @ApplicationID)");
            //cmd = new SqlCommand("SELECT employedetails.fullname, employedetails.email , employedetails.cellphone FROM leave_application INNER JOIN  employedetails ON leave_application.employee_no = employedetails.empid WHERE (leave_application.leaveapplicationid = @ApplicationID)");
            cmd.Parameters.Add("@ApplicationID", odid);
            DataTable empdata = vdm.SelectQuery(cmd).Tables[0];
            string empname = "";
            string phoneno = "";
            string fullname = "";
            string emilid = "";
            if (empdata.Rows.Count > 0)
            {
                empname = empdata.Rows[0]["fullname"].ToString();
                emilid = empdata.Rows[0]["email"].ToString();
                phoneno = empdata.Rows[0]["cellphone"].ToString();
                if (approve_remarks == "")
                {
                    approve_remarks = empdata.Rows[0]["reason"].ToString();
                }

            }
            string content = "Dear " + empname + ", For the purpose of " + approve_remarks + ". your OD rejected";
            WebClient client = new WebClient();
            if (phoneno.Length >= 10)
            {
                string baseurl = "http://103.16.101.52:8080/sendsms/bulksms?username=kapd-vyshnavi&password=vysavi&type=0&dlr=1&destination=" + phoneno + "&source=VYSHRM&message=" + content + "";
                Stream data = client.OpenRead(baseurl);
                StreamReader reader = new StreamReader(data);
                string ResponseID = reader.ReadToEnd();
                data.Close();
                reader.Close();
            }
            send_leave_mail(context, emilid, empname, content);
            string msg = " OD successfully Rejected";
            string Response = GetJson(msg);
            context.Response.Write(Response);
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);

        }
    }

    private void get_birthday_details(HttpContext context)
    {
        try
        {
            string branchid = "1";
            if (branchid != null)
            {
                SqlCommand cmd;
                DBManager vdm = new DBManager();
                DateTime ServerDateCurrentdate = DBManager.GetTime(vdm.conn);
                //branchmapping
                string mainbranch = context.Session["mainbranch"].ToString();
                cmd = new SqlCommand(" SELECT ed.empid, ed.photos, ed.age, ed.fathername, ed.marriagedate, ed.employee_num, ed.designationid, ed.branchid, ed.joindate, ed.fullname, ed.initials, ed.title, ed.gender, ed.dob, ed.marital_status, ed.spouse_fullname, ed.nationality, ed.idproof, ed.home_address, ed.presentaddress, ed.home_phone, ed.cellphone,  ed.currentlocationsince, ed.currentdesignationsince, ed.currentdepartmentsince, ed.currentemployeesince, ed.pfeligible, ed.esieligible, ed.email, ed.city, ed.state, ed.zipcode, ed.degree, ed.specification, ed.experience, ed.experience_details, ed.status, ed.employee_dept, el.loginid AS emp_login_sno, el.password, ed.photos AS Expr1, ed.aboutus, ed.aadhaar_id, ed.voter_id, ed.spouse_details, ed.confirmdate, ed.physicalchallange, ed.bloodgroup, ed.pancard,  ed.aadarenrollnumber, ed.nameasforaadhar, ed.remarks, ed.grades, ed.university, ed.salarymode, ed.employee_type, ed.institute, ed.durationofcourse,  branchmaster.branchname FROM  employedetails AS ed INNER JOIN branchmaster ON ed.branchid = branchmaster.branchid INNER JOIN branchmapping ON ed.branchid = branchmapping.subbranch FULL OUTER JOIN employe_logins AS el ON el.empid = ed.empid WHERE (ed.status = 'No') AND (branchmapping.mainbranch = @m)");
                cmd.Parameters.Add("@m", mainbranch);
                //branchwise
                //cmd = new SqlCommand(" SELECT ed.empid, ed.photos, ed.age, ed.fathername, ed.marriagedate, ed.employee_num, ed.designationid, ed.branchid, ed.joindate, ed.fullname, ed.initials, ed.title, ed.gender, ed.dob, ed.marital_status, ed.spouse_fullname, ed.nationality, ed.idproof, ed.home_address, ed.presentaddress, ed.home_phone, ed.cellphone, ed.currentlocationsince, ed.currentdesignationsince, ed.currentdepartmentsince, ed.currentemployeesince, ed.pfeligible, ed.esieligible, ed.email, ed.city, ed.state, ed.zipcode, ed.degree, ed.specification, ed.experience, ed.experience_details, ed.status, ed.employee_dept, el.loginid AS emp_login_sno, el.password, ed.photos, ed.aboutus, ed.aadhaar_id, ed.voter_id, ed.spouse_details, ed.confirmdate, ed.physicalchallange, ed.bloodgroup, ed.pancard, ed.aadarenrollnumber,   ed.nameasforaadhar, ed.remarks, ed.grades, ed.university, ed.salarymode, ed.employee_type, ed.institute, ed.durationofcourse, branchmaster.branchname FROM  employedetails AS ed INNER JOIN branchmaster ON ed.branchid = branchmaster.branchid FULL OUTER JOIN employe_logins AS el ON el.empid = ed.empid");
                DataTable dt = vdm.SelectQuery(cmd).Tables[0];
                DataView view = dt.DefaultView;
                DataTable main = view.ToTable(true, "empid", "employee_num", "fathername", "age", "marriagedate", "joinDate", "branchid", "designationid", "fullname", "initials", "title", "gender", "dob", "marital_status", "spouse_fullname", "nationality", "idproof", "home_address", "presentaddress", "home_phone", "cellphone", "email", "city", "state", "zipcode", "degree", "specification", "experience", "experience_details", "status", "employee_dept", "emp_login_sno", "password", "photos", "aboutus", "aadhaar_id", "voter_id", "spouse_details", "confirmdate", "physicalchallange", "bloodgroup", "pancard", "aadarenrollnumber", "nameasforaadhar", "remarks", "grades", "university", "institute", "durationofcourse", "salarymode", "employee_type", "currentlocationsince", "currentdesignationsince", "currentdepartmentsince", "currentemployeesince", "pfeligible", "branchname", "esieligible");
                List<getEmployeedetailscls> list_getEmployeedetailscls = new List<getEmployeedetailscls>();
                foreach (DataRow dr in main.Rows)
                {
                    getEmployeedetailscls getEmployeedetails = new getEmployeedetailscls();
                    string dob = dr["dob"].ToString();
                    if (dob == "" || dob == null)
                    {
                        getEmployeedetails.birthdate = "";
                        getEmployeedetails.BirthDays = "";
                    }
                    else
                    {
                        DateTime date = Convert.ToDateTime(dob);
                        string strtime = date.ToString("yyyy-MM-dd");
                        string strBirthtime = date.ToString("dd-MMM");
                        string currentdate = ServerDateCurrentdate.ToString("dd-MMM");
                        if (strBirthtime == currentdate)
                        {
                            getEmployeedetails.birthdate = strBirthtime;
                            getEmployeedetails.empsno = dr["empid"].ToString();
                            getEmployeedetails.empnum = dr["employee_num"].ToString();
                            string empname = dr["fullname"].ToString();
                            getEmployeedetails.empname = empname;
                            getEmployeedetails.initials = dr["initials"].ToString();
                            getEmployeedetails.title = dr["title"].ToString();
                            getEmployeedetails.gender = dr["gender"].ToString();
                            getEmployeedetails.ftplocation = "http://182.18.138.228:81/";
                            getEmployeedetails.photo = dr["photos"].ToString();
                            DateTime dtBirth = Convert.ToDateTime(strBirthtime);
                            getEmployeedetails.Birth_Days = strBirthtime.ToString();
                            list_getEmployeedetailscls.Add(getEmployeedetails);
                        }
                    }
                }
                string response = GetJson(list_getEmployeedetailscls);
                context.Response.Write(response);
            }
        }
        catch (Exception EX)
        {

        }
    }

    private void get_leave_details(HttpContext context)
    {
        try
        {
            string branchid = "1";
            if (branchid != null)
            {
                SqlCommand cmd;
                DBManager vdm = new DBManager();
                DateTime ServerDateCurrentdate = DBManager.GetTime(vdm.conn);
                //branchmapping
                string mainbranch = context.Session["mainbranch"].ToString();
                cmd = new SqlCommand(" SELECT  leave_application.leave_from_dt, leave_application.leave_to_dt, leave_application.leave_satus, employedetails.employee_num, employedetails.fullname, employedetails.photos FROM leave_application INNER JOIN employedetails ON employedetails.empid = leave_application.employee_no INNER JOIN branchmapping ON employedetails.branchid = branchmapping.subbranch WHERE (employedetails.status = 'No') AND (branchmapping.mainbranch = @m)");
                cmd.Parameters.Add("@m", mainbranch);
                //branchwise
                //cmd = new SqlCommand(" SELECT leave_application.leave_from_dt, leave_application.leave_to_dt, leave_application.leave_satus, employedetails.employee_num, employedetails.fullname, employedetails.photos FROM leave_application INNER JOIN employedetails ON employedetails.empid = leave_application.employee_no");
                DataTable dt = vdm.SelectQuery(cmd).Tables[0];
                List<getEmployeedetailscls> list_getEmployeedetailscls = new List<getEmployeedetailscls>();
                foreach (DataRow dr in dt.Rows)
                {
                    string fromdate = dr["leave_from_dt"].ToString();
                    string todate = dr["leave_to_dt"].ToString();
                    DateTime fdate = Convert.ToDateTime(fromdate);
                    string frmtime = fdate.ToString("yyyy-MM-dd");
                    DateTime tdate = Convert.ToDateTime(todate);
                    string totime = tdate.ToString("yyyy-MM-dd");
                    if (tdate >= ServerDateCurrentdate)
                    {
                        getEmployeedetailscls getEmployeedetails = new getEmployeedetailscls();
                        getEmployeedetails.ftplocation = "http://182.18.138.228:81/";
                        getEmployeedetails.photo = dr["photos"].ToString();
                        string empname = dr["fullname"].ToString();
                        getEmployeedetails.empnum = dr["employee_num"].ToString();
                        getEmployeedetails.empname = empname;
                        TimeSpan t = tdate - fdate;
                        int NrOfDays = int.Parse(t.TotalDays.ToString());
                        NrOfDays = NrOfDays + 1;
                        getEmployeedetails.conformdate = NrOfDays.ToString();
                        list_getEmployeedetailscls.Add(getEmployeedetails);
                    }
                }
                string response = GetJson(list_getEmployeedetailscls);
                context.Response.Write(response);
            }
        }
        catch (Exception EX)
        {

        }
    }
    private void get_holiday_details(HttpContext context)
    {
        try
        {
            string branchid = "1";
            if (branchid != null)
            {
                SqlCommand cmd;
                DBManager vdm = new DBManager();
                DateTime ServerDateCurrentdate = DBManager.GetTime(vdm.conn);
                cmd = new SqlCommand("SELECT holidaydate, holidaydescription FROM holiday");
                DataTable dt = vdm.SelectQuery(cmd).Tables[0];
                List<getEmployeedetailscls> list_getEmployeedetailscls = new List<getEmployeedetailscls>();
                foreach (DataRow dr in dt.Rows)
                {
                    getEmployeedetailscls getEmployeedetails = new getEmployeedetailscls();
                    string empname = dr["holidaydescription"].ToString();
                    string holidaydate = dr["holidaydate"].ToString();
                    DateTime hdate = Convert.ToDateTime(holidaydate);
                    string date = hdate.ToString("dd-MM-yyyy");
                    string currentdate = ServerDateCurrentdate.ToString("dd-MM-yyyy");
                    if (hdate >= ServerDateCurrentdate)
                    {
                        string hdetails = empname + "(" + date + ")";
                        getEmployeedetails.empname = hdetails;
                        list_getEmployeedetailscls.Add(getEmployeedetails);
                    }
                }
                string response = GetJson(list_getEmployeedetailscls);
                context.Response.Write(response);
            }
        }
        catch (Exception EX)
        {

        }
    }

    private void save_organisation_tree_save_click(HttpContext context)
    {
        try
        {
            DBManager vdm = new DBManager();
            var js = new JavaScriptSerializer();
            DateTime ServerDateCurrentdate = DBManager.GetTime(vdm.conn);
            var title1 = context.Request.Params[1];
            Orders obj = js.Deserialize<Orders>(title1);
            string mainempid = obj.empid;
            foreach (Gatepasssubclass o in obj.gridBinding)
            {
                cmd = new SqlCommand("insert into  organisationtree(empid,subempid) values(@empid,@subempid)");
                cmd.Parameters.Add("@empid", mainempid);
                cmd.Parameters.Add("@subempid", o.empid);
                vdm.insert(cmd);
            }
            string msg = "Saved successfully";
            string returnsring = GetJson(msg);
            context.Response.Write(returnsring);
        }
        catch (Exception ex)
        {
            string returnsring = GetJson(ex.Message);
            context.Response.Write(returnsring);
        }
    }



    public class origimnation
    {
        public string sno { get; set; }
        public string empcode { get; set; }
        public string employeid { get; set; }
        public string empcode1 { get; set; }
        public string employeid1 { get; set; }
        public string fullname { get; set; }
        public string fullname1 { get; set; }
    }

    private void get_organisation_tree_details(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            //branchmapping
            string mainbranch = context.Session["mainbranch"].ToString();
            cmd = new SqlCommand("SELECT employedetails.fullname AS Mainemployee, employedetails.employee_num AS Mainemployeecode, employedetails_1.fullname AS Subemployee, employedetails_1.employee_num AS Subemployeecode, employedetails.empid AS mainempid, employedetails_1.empid AS subempid FROM organisationtree INNER JOIN   employedetails ON organisationtree.empid = employedetails.empid INNER JOIN  employedetails AS employedetails_1 ON organisationtree.subempid = employedetails_1.empid INNER JOIN branchmapping ON employedetails.branchid = branchmapping.subbranch WHERE (employedetails.status = 'No') AND (branchmapping.mainbranch = @m)");
            cmd.Parameters.Add("@m", mainbranch);
            //branchwise
            //cmd = new SqlCommand("SELECT employedetails.fullname AS Mainemployee, employedetails.employee_num AS Mainemployeecode, employedetails_1.fullname AS Subemployee, employedetails_1.employee_num AS Subemployeecode, employedetails.empid AS mainempid, employedetails_1.empid AS subempid FROM  organisationtree INNER JOIN  employedetails ON organisationtree.empid = employedetails.empid INNER JOIN employedetails AS employedetails_1 ON organisationtree.subempid = employedetails_1.empid");
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<origimnation> organisiondetailes = new List<origimnation>();
            foreach (DataRow dr in routes.Rows)
            {
                origimnation getorgination = new origimnation();
                //getorgination.sno = dr["sno"].ToString();
                getorgination.empcode = dr["Mainemployeecode"].ToString();
                getorgination.employeid = dr["mainempid"].ToString();
                getorgination.fullname = dr["Mainemployee"].ToString();
                getorgination.empcode1 = dr["Subemployeecode"].ToString();
                getorgination.employeid1 = dr["subempid"].ToString();
                getorgination.fullname1 = dr["Subemployee"].ToString();
                //getorgination.AmountOffine = dr["amountoffineimposed"].ToString();
                organisiondetailes.Add(getorgination);
            }
            string response = GetJson(organisiondetailes);
            context.Response.Write(response);
        }
        catch
        {
        }
    }
    //get_organisation_tree_details

    class Orders
    {
        public string empid { set; get; }
        public List<Gatepasssubclass> gridBinding { set; get; }
    }
    public class Gatepasssubclass
    {
        public string empid { set; get; }

    }

    public void get_employewise_deptdetails(HttpContext context)
    {
        try
        {
            string branchid = "1";
            if (branchid != null)
            {
                SqlCommand cmd;
                DBManager vdm = new DBManager();
                DateTime ServerDateCurrentdate = DBManager.GetTime(vdm.conn);
                string empid = context.Request["empid"].ToString();
                //branchmappingwise
                string mainbranch = context.Session["mainbranch"].ToString();
                cmd = new SqlCommand("SELECT employedetails.empid, employedetails.employee_dept, departments.department FROM employedetails INNER JOIN departments ON departments.deptid = employedetails.employee_dept INNER JOIN branchmapping ON employedetails.branchid = branchmapping.subbranch WHERE (employedetails.empid = @empid) AND (employedetails.status = 'No') AND (branchmapping.mainbranch = @m)");
                cmd.Parameters.Add("@m", mainbranch);
                //branchwise
                //cmd = new SqlCommand("SELECT  employedetails.empid, employedetails.employee_dept, departments.department FROM  employedetails INNER JOIN  departments ON departments.deptid = employedetails.employee_dept WHERE employedetails.empid=@empid");
                cmd.Parameters.Add("@empid", empid);
                DataTable dt = vdm.SelectQuery(cmd).Tables[0];
                List<getEmployeedetailscls> list_getEmployeedetailscls = new List<getEmployeedetailscls>();
                if (dt.Rows.Count > 0)
                {
                    foreach (DataRow dr in dt.Rows)
                    {
                        getEmployeedetailscls getEmployeedetails = new getEmployeedetailscls();
                        getEmployeedetails.Deptid = dr["employee_dept"].ToString();
                        getEmployeedetails.Department = dr["department"].ToString();
                        list_getEmployeedetailscls.Add(getEmployeedetails);
                    }
                }
                string response = GetJson(list_getEmployeedetailscls);
                context.Response.Write(response);
            }
        }
        catch (Exception EX)
        {

        }
    }


    public class ContactMaster
    {
        public string ContactType { get; set; }

    }
    public void save_contact_details(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            string ContactType = context.Request["ContactType"];
            string btn_save = context.Request["btnval"];
            DateTime ServerDateCurrentdate = DBManager.GetTime(vdm.conn);

            if (btn_save == "Save")
            {
                cmd = new SqlCommand("insert into contacttype (ContactType,doe) values (@ContactType,@doe)");
                cmd.Parameters.Add("@ContactType", ContactType);
                cmd.Parameters.Add("@doe", ServerDateCurrentdate);
                vdm.insert(cmd);
                string msg = "Details successfully saved";
                string Response = GetJson(msg);
                context.Response.Write(Response);
            }
            else
            {
                string sno = context.Request["sno"];
                cmd = new SqlCommand("Update contacttype set ContactType=@ContactType,doe=@doe where sno=@sno");
                cmd.Parameters.Add("@ContactType", ContactType);
                cmd.Parameters.Add("@doe", ServerDateCurrentdate);
                cmd.Parameters.Add("@sno", sno);
                vdm.Update(cmd);
                string msg = "Details successfully updated";
                string Response = GetJson(msg);
                context.Response.Write(Response);
            }
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }

    public class Contacttype
    {
        public string ContactType { get; set; }
        public string sno { get; set; }
    }

    private void get_contact_type(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            cmd = new SqlCommand("SELECT sno, ContactType, doe FROM contacttype");
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<Contacttype> ContactMasterlist = new List<Contacttype>();
            foreach (DataRow dr in routes.Rows)
            {
                Contacttype getcontacttype = new Contacttype();
                getcontacttype.ContactType = dr["ContactType"].ToString();
                getcontacttype.sno = dr["sno"].ToString();
                ContactMasterlist.Add(getcontacttype);
            }
            string response = GetJson(ContactMasterlist);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }

    public class ContactForm
    {

        public string empid { get; set; }
        public string contacttype { get; set; }
        public string nameofcontact { get; set; }
        public string phoneno { get; set; }
        public string emailid { get; set; }
        public string address { get; set; }
        public string btnval { get; set; }
    }

    private void save_contactform_details(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            string empid = context.Session["empid"].ToString();
            string contacttype = context.Request["contacttype"];
            string nameofcontact = context.Request["nameofcontact"];
            string phoneno = context.Request["phoneno"];
            string emailid = context.Request["emailid"];
            string address = context.Request["address"];
            string btn_save = context.Request["btnval"];
            //string photo = context.Request["photo"];
            DateTime ServerDateCurrentdate = DBManager.GetTime(vdm.conn);
            string sno = context.Request["sno"];
            if (btn_save == "Save")
            {
                cmd = new SqlCommand("insert into contactdetails (empid,contacttype,nameofcontact,phoneno,emailid,address,doe,createdby) values (@empid,@contacttype,@nameofcontact,@phoneno,@emailid,@address,@doe,@createdby)");
                cmd.Parameters.Add("@empid", empid);
                cmd.Parameters.Add("@contacttype", contacttype);
                cmd.Parameters.Add("@nameofcontact", nameofcontact);
                cmd.Parameters.Add("@phoneno", phoneno);
                cmd.Parameters.Add("@emailid", emailid);
                cmd.Parameters.Add("@address", address);
                //cmd.Parameters.Add("@photo", photo);
                cmd.Parameters.Add("@doe", ServerDateCurrentdate);
                cmd.Parameters.Add("@createdby", empid);
                vdm.insert(cmd);
                cmd = new SqlCommand("Select MAX(sno) as sno from contactdetails");
                DataTable dtpic = vdm.SelectQuery(cmd).Tables[0];
                if (dtpic.Rows.Count > 0)
                {
                    string picsno = dtpic.Rows[0]["sno"].ToString();
                    if (context.Request.Files.Count > 0)
                    {
                        HttpFileCollection files = context.Request.Files;
                        for (int i = 0; i < files.Count; i++)
                        {
                            HttpPostedFile file = files[i];
                            string[] extension = file.FileName.Split('.');
                            string upload_pics = "Contact_" + empid + ".jpeg";// +extension[extension.Length - 1];
                            if (UploadToFTPContacts(file, upload_pics))
                            {
                                cmd = new SqlCommand("update contactdetails set photo=@photo where sno=@sno");
                                cmd.Parameters.Add("@sno", picsno);
                                cmd.Parameters.Add("@photo", upload_pics);
                                vdm.Update(cmd);
                            }
                            context.Response.ContentType = "text/plain";
                            // context.Response.Write("File Updated Successfully!");
                        }
                    }
                }
                string msg = "Details successfully saved";
                string Response = GetJson(msg);
                context.Response.Write(Response);
            }
            else
            {
                cmd = new SqlCommand("Update contactdetails set empid=@empid,contacttype=@contacttype,nameofcontact=@nameofcontact,phoneno=@phoneno,emailid=@emailid,address=@address,doe=@doe where sno=@sno");
                cmd.Parameters.Add("@empid", empid);
                cmd.Parameters.Add("@contacttype", contacttype);
                cmd.Parameters.Add("@nameofcontact", nameofcontact);
                cmd.Parameters.Add("@phoneno", phoneno);
                cmd.Parameters.Add("@emailid", emailid);
                cmd.Parameters.Add("@address", address);
                cmd.Parameters.Add("@doe", ServerDateCurrentdate);
                cmd.Parameters.Add("@sno", sno);
                vdm.Update(cmd);
                if (context.Request.Files.Count > 0)
                {
                    HttpFileCollection files = context.Request.Files;
                    for (int i = 0; i < files.Count; i++)
                    {
                        HttpPostedFile file = files[i];
                        string[] extension = file.FileName.Split('.');
                        string upload_pics = "Contact_" + empid + ".jpeg";// +extension[extension.Length - 1];
                        if (UploadToFTPContacts(file, upload_pics))
                        {
                            cmd = new SqlCommand("update contactdetails set photo=@photo where sno=@sno");
                            cmd.Parameters.Add("@sno", sno);
                            cmd.Parameters.Add("@photo", upload_pics);
                            vdm.Update(cmd);
                        }
                        context.Response.ContentType = "text/plain";
                    }
                }
                string msg = "Details successfully updated";
                string Response = GetJson(msg);
                context.Response.Write(Response);
            }
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }

    

    


    public class Contactmaster
    {
        public string sno { get; set; }
        public string empid { get; set; }
        public string contacttype { get; set; }
        public string nameofcontact { get; set; }
        public string phoneno { get; set; }
        public string emailid { get; set; }
        public string address { get; set; }
        public string btnval { get; set; }
        public string fullname { get; set; }
        public string contact { get; set; }
        public string ftplocation { get; set; }
        public string photo { get; set; }
    }

    private void get_contactform_type(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            string location = "ftp://182.18.138.228/MyContacts/";
            cmd = new SqlCommand("SELECT contactdetails.sno, contactdetails.empid, contactdetails.photo, employedetails.fullname, contacttype.contacttype as contact, contactdetails.contacttype,  contactdetails.nameofcontact, contactdetails.phoneno, contactdetails.emailid, contactdetails.address,contactdetails.doe,contactdetails.createdby FROM contactdetails INNER JOIN employedetails ON employedetails.empid=contactdetails.empid INNER JOIN contacttype ON contacttype.sno = contactdetails.contacttype");
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<Contactmaster> getcontacttypelist = new List<Contactmaster>();
            foreach (DataRow dr in routes.Rows)
            {
                Contactmaster getcontacttype = new Contactmaster();
                getcontacttype.empid = dr["empid"].ToString();
                getcontacttype.contacttype = dr["contacttype"].ToString();
                getcontacttype.nameofcontact = dr["nameofcontact"].ToString();
                getcontacttype.phoneno = dr["phoneno"].ToString();
                getcontacttype.emailid = dr["emailid"].ToString();
                getcontacttype.address = dr["address"].ToString();
                getcontacttype.fullname = dr["fullname"].ToString();
                getcontacttype.contact = dr["contact"].ToString();
                getcontacttype.sno = dr["sno"].ToString();
                getcontacttype.photo = dr["photo"].ToString();
                getcontacttype.ftplocation = location;
                getcontacttypelist.Add(getcontacttype);
            }
            string response = GetJson(getcontacttypelist);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }

    private void emp_login_click(HttpContext context)
    {
        try
        {
            string username = context.Request["username"];
            string password = context.Request["password"];
            cmd = new SqlCommand("SELECT  el.loginid, el.leveltype, el.username, ed.fullname, ed.company_id, ed.photos, ed.empid, designation.designation, branchmaster.branchid, branchmapping.mainbranch FROM  employe_logins AS el INNER JOIN employedetails AS ed ON ed.empid = el.empid INNER JOIN  branchmaster ON ed.branchid = branchmaster.branchid INNER JOIN  designation ON ed.designationid = designation.designationid INNER JOIN branchmapping ON branchmaster.branchid = branchmapping.subbranch WHERE  (el.username = @UN) AND (el.password = @Pwd)");
            cmd.Parameters.Add("@Pwd", password);
            cmd.Parameters.Add("@UN", username);
            DataTable dt = vdm.SelectQuery(cmd).Tables[0];
            if (dt.Rows.Count > 0)
            {
                context.Session["TitleName"] = "SRI VYSHNAVI DAIRY SPECIALITIES (P) LTD";
                context.Session["TinNo"] = "37921042267";
                context.Session["empid"] = dt.Rows[0]["empid"].ToString();
                context.Session["fullname"] = dt.Rows[0]["fullname"].ToString();
                context.Session["branchid"] = dt.Rows[0]["branchid"].ToString();
                context.Session["mainbranch"] = dt.Rows[0]["mainbranch"].ToString();
                context.Session["company_id"] = dt.Rows[0]["company_id"].ToString();
                context.Session["leveltype"] = dt.Rows[0]["leveltype"].ToString();
                context.Session["photo"] = dt.Rows[0]["photos"].ToString();
                context.Session["Address"] = "Survey No.381-2, Punabaka (V), Pellakur (M), SPSR Nellore Dt - 524129.";// dt.Rows[0]["brnch_address"].ToString();
                context.Session["UserName"] = username;
                context.Session["userid"] = dt.Rows[0]["loginid"].ToString();
                context.Session["designation"] = dt.Rows[0]["designation"].ToString();
                string leveltype = context.Session["leveltype"].ToString();
                context.Response.Cookies["empid"].Value = HttpUtility.UrlEncode(dt.Rows[0]["empid"].ToString());
                context.Response.Cookies["empid"].Path = "/";
                context.Response.Cookies["empid"].Expires = DateTime.Now.AddDays(1);

                context.Response.Cookies["UserName"].Value = HttpUtility.UrlEncode(dt.Rows[0]["UserName"].ToString());
                context.Response.Cookies["UserName"].Path = "/";
                context.Response.Cookies["UserName"].Expires = DateTime.Now.AddDays(1);
                if (leveltype == "User")
                {

                }
                if (leveltype == "Admin" || leveltype == "SuperAdmin")
                {

                }
                string response = GetJson("Valid");
                context.Response.Write(response);
            }
            else
            {
                string response = GetJson("Not Valid");
                context.Response.Write(response);
            }
        }
        catch (Exception ex)
        {
            string response = GetJson("Error");
            context.Response.Write(response);
        }
    }
    private void log_out(HttpContext context)
    {
        try
        {
            context.Session["TitleName"] = null;
            context.Session["TinNo"] = null;
            context.Session["empid"] = null;
            context.Session["fullname"] = null;
            context.Session["branchid"] = null;
            context.Session["mainbranch"] = null;
            context.Session["company_id"] = null;
            context.Session["leveltype"] = null;
            context.Session["photo"] = null;
            context.Session["Address"] = null;
            context.Session["UserName"] = null;
            context.Session["userid"] = null;
            context.Session["designation"] = null;
            context.Response.Cookies["UserName"].Expires = DateTime.Now.AddDays(-1);
            context.Response.Cookies["empid"].Expires = DateTime.Now.AddDays(-1);
        }
        catch (Exception ex)
        {
            string response = GetJson("Error");
            context.Response.Write(response);
        }
    }

    private bool UploadToFTPContacts(HttpPostedFile fileToUpload, string filename)
    {
        string uploadUrl = "ftp://182.18.138.228/MyContacts/";
        try
        {
            FtpWebRequest del_request = (FtpWebRequest)WebRequest.Create(uploadUrl + @"/" + filename);
            del_request.Credentials = new NetworkCredential("ftpuser", "ftpuser@123");
            del_request.Method = WebRequestMethods.Ftp.DeleteFile;
            FtpWebResponse delete_response = (FtpWebResponse)del_request.GetResponse();
            Console.WriteLine("Delete status: {0}", delete_response.StatusDescription);
            delete_response.Close();
        }
        catch
        {
        }

        FtpWebRequest request = (FtpWebRequest)WebRequest.Create(uploadUrl + @"/" + filename);
        request.Credentials = new NetworkCredential("ftpuser", "ftpuser@123");
        request.Method = WebRequestMethods.Ftp.UploadFile;
        byte[] fileContents = null;
        using (var binaryReader = new BinaryReader(fileToUpload.InputStream))
        {
            fileContents = binaryReader.ReadBytes(fileToUpload.ContentLength);
        }
        request.ContentLength = fileContents.Length;
        Stream requestStream = request.GetRequestStream();
        requestStream.Write(fileContents, 0, fileContents.Length);
        requestStream.Close();
        FtpWebResponse response = (FtpWebResponse)request.GetResponse();
        response.Close();
        return true;
    }

    public class tdsmedi
    {
        public string sno { get; set; }
        public string empid { get; set; }
        public string contacttype { get; set; }
        public string nameofcontact { get; set; }
        public string phoneno { get; set; }
        public string emailid { get; set; }
        public string address { get; set; }
        public string btnval { get; set; }
        public string fullname { get; set; }
        public string contact { get; set; }
        public string ftplocation { get; set; }
        public string photo { get; set; }
    }

    private void save_edit_tds(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            // string userid = context.Session["empid"].ToString();
            string empid = context.Request["employeid"];
            string empcode = context.Request["empcode"];
            string date = context.Request["date"];


            //DateTime dateofaffence = Convert.ToDateTime(date);
            // string strdate = dateofaffence.ToString("dd/MM/yyyy");
            // string[] str = strdate.Split('/');
            // string year = str[2];
            // //int yr = 0;
            // string month = str[1];


            string amount = context.Request["amount"];
            string remarks = context.Request["remarks"];
            string btn_save = context.Request["btnval"];
            DateTime ServerDateCurrentdate = DBManager.GetTime(vdm.conn);
            string sno = context.Request["sno"];
            if (btn_save == "save")
            {
                cmd = new SqlCommand("insert into  tds_deduction (empid, employee_num, tdsamount, doe, remarks) values (@empid, @empcode, @amount, @doe, @remarks)");
                cmd.Parameters.Add("@empid", empid);
                cmd.Parameters.Add("@empcode", empcode);
                cmd.Parameters.Add("@doe", date);
                cmd.Parameters.Add("@amount", amount);
                cmd.Parameters.Add("@remarks", remarks);
                //cmd.Parameters.Add("@month", month);
                //cmd.Parameters.Add("@year", year);
                vdm.insert(cmd);
                string msg = "Details successfully saved";
                string Response = GetJson(msg);
                context.Response.Write(Response);
            }
            else
            {
                cmd = new SqlCommand("Update tds_deduction set empid=@empid,employee_num=@empcode,tdsamount=@amount,doe=@doe,remarks=@remarks where sno=@sno");
                cmd.Parameters.Add("@empid", empid);
                cmd.Parameters.Add("@empcode", empcode);
                cmd.Parameters.Add("@doe", date);
                cmd.Parameters.Add("@amount", amount);
                cmd.Parameters.Add("@remarks", remarks);
                cmd.Parameters.Add("@sno", sno);
                //cmd.Parameters.Add("@month", month);
                //cmd.Parameters.Add("@year", year);
                vdm.Update(cmd);
                string msg = "Details successfully updated";
                string Response = GetJson(msg);
                context.Response.Write(Response);
            }
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }
    public class gettdsdetailes
    {
        //public string deptid { get; set; }
        public string employeid { get; set; }
        public string fullname { get; set; }
        public string dateofOfference { get; set; }
        public string date { get; set; }
        public string AmountOffine { get; set; }
        public string month { get; set; }
        public string sno { get; set; }
        public string remarks { get; set; }
        public string empcode { get; set; }
    }
    private void get_tds_details(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            //brnchmapping
            string mainbranch = context.Session["mainbranch"].ToString();
            cmd = new SqlCommand("SELECT employedetails.fullname,tds_deduction.remarks, tds_deduction.sno,tds_deduction.empid, tds_deduction.doe,tds_deduction.employee_num, tds_deduction.tdsamount FROM employedetails INNER JOIN branchmapping ON employedetails.branchid = branchmapping.subbranch INNER JOIN tds_deduction ON employedetails.empid = tds_deduction.empid WHERE (employedetails.status = 'No')  and (branchmapping.mainbranch = @m) and (tds_deduction.tdsamount<>0)");
            cmd.Parameters.Add("@m", mainbranch);
            //branchwise
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<gettdsdetailes> tdsdetaileslist = new List<gettdsdetailes>();
            foreach (DataRow dr in routes.Rows)
            {
                gettdsdetailes gettds = new gettdsdetailes();
                gettds.sno = dr["sno"].ToString();
                gettds.empcode = dr["employee_num"].ToString();
                gettds.employeid = dr["empid"].ToString();
                gettds.fullname = dr["fullname"].ToString();
                //gettds.month = dr["month"].ToString();
                gettds.date = ((DateTime)dr["doe"]).ToString("yyyy-MM-dd"); //dr["dateofoffence"].ToString();
                gettds.AmountOffine = dr["tdsamount"].ToString();
                gettds.remarks = dr["remarks"].ToString();
                tdsdetaileslist.Add(gettds);
            }
            string response = GetJson(tdsdetaileslist);
            context.Response.Write(response);
        }
        catch
        {
        }
    }
    private void save_edit_medicliems(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            string userid = context.Session["empid"].ToString();
            string empid = context.Request["employeid"];
            string empcode = context.Request["empcode"];
            string date = context.Request["date"];
            //DateTime dateofaffence = Convert.ToDateTime(date);
            //string strdate = dateofaffence.ToString("dd/MM/yyyy");
            //string[] str = strdate.Split('/');
            //string year = str[2];
            ////int yr = 0;
            //string month = str[1];
            string AmountOfDeduction = context.Request["AmountOfDeduction"];
            string remarks = context.Request["remarks"];
            string flag = context.Request["flag"];
            string btn_save = context.Request["btnval"];
            DateTime ServerDateCurrentdate = DBManager.GetTime(vdm.conn);
            string sno = context.Request["sno"];
            if (btn_save == "Save")
            {
                cmd = new SqlCommand("insert into  mediclaimdeduction (empid, employee_num, medicliamamount, doe, remarks,flag) values (@empid, @empcode, @amount, @doe, @remarks,@flag)");
                cmd.Parameters.Add("@empid", empid);
                cmd.Parameters.Add("@empcode", empcode);
                cmd.Parameters.Add("@doe", date);
                cmd.Parameters.Add("@amount", AmountOfDeduction);
                cmd.Parameters.Add("@remarks", remarks);
                cmd.Parameters.Add("@flag", flag);
                //cmd.Parameters.Add("@year", year);
                vdm.insert(cmd);
                string msg = "Details successfully saved";
                string Response = GetJson(msg);
                context.Response.Write(Response);
            }
            else
            {
                cmd = new SqlCommand("Update mediclaimdeduction set empid=@empid,employee_num=@empcode, medicliamamount=@amount,doe=@doe,remarks=@remarks,flag=@flag where sno=@sno");
                cmd.Parameters.Add("@empid", empid);
                cmd.Parameters.Add("@empcode", empcode);
                cmd.Parameters.Add("@doe", date);
                cmd.Parameters.Add("@amount", AmountOfDeduction);
                cmd.Parameters.Add("@remarks", remarks);
                cmd.Parameters.Add("@sno", sno);
                cmd.Parameters.Add("@flag", flag);
                //cmd.Parameters.Add("@year", year);
                vdm.Update(cmd);
                string msg = "Details successfully updated";
                string Response = GetJson(msg);
                context.Response.Write(Response);
            }
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }
    private void save_edit_travel(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            string userid = context.Session["empid"].ToString();
            string empid = context.Request["employeid"];
            string empcode = context.Request["empcode"];
            string date = context.Request["date"];
            string AmountOfDeduction = context.Request["AmountOfDeduction"];
            string remarks = context.Request["remarks"];
            string flag = context.Request["flag"];
            string btn_save = context.Request["btnval"];
            DateTime ServerDateCurrentdate = DBManager.GetTime(vdm.conn);
            string sno = context.Request["sno"];
            if (btn_save == "Save")
            {
                cmd = new SqlCommand("UPDATE salaryappraisals  SET   travelconveyance = @tconve  WHERE (empid = @empid) AND (travelconveyance IS NULL)");
                cmd.Parameters.Add("@empid", empid);
                cmd.Parameters.Add("@tconve", AmountOfDeduction);
                vdm.Update(cmd);
                string msg = "Details successfully Updated";
                string Response = GetJson(msg);
                context.Response.Write(Response);
            }
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }


    


    public class getmedicliamdetailes
    {
        //public string deptid { get; set; }
        public string employeid { get; set; }
        public string flag { get; set; }
        public string fullname { get; set; }
        public string dateofOfference { get; set; }
        public string date { get; set; }
        public string AmountOfDeduction { get; set; }
        public string month { get; set; }
        public string sno { get; set; }
        public string remarks { get; set; }
        public string empcode { get; set; }
    }
    private void get_medicliem_details(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            //brnchmapping
            string mainbranch = context.Session["mainbranch"].ToString();
            cmd = new SqlCommand("SELECT  employedetails.fullname, mediclaimdeduction.doe, mediclaimdeduction.empid, mediclaimdeduction.employee_num, mediclaimdeduction.medicliamamount,  mediclaimdeduction.remarks, mediclaimdeduction.sno, mediclaimdeduction.flag FROM employedetails INNER JOIN branchmapping ON employedetails.branchid = branchmapping.subbranch LEFT OUTER JOIN mediclaimdeduction ON employedetails.empid = mediclaimdeduction.empid WHERE (employedetails.status = 'No')  and (branchmapping.mainbranch = @m)and (mediclaimdeduction.medicliamamount<>0)");
            cmd.Parameters.Add("@m", mainbranch);
            //branchwise
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<getmedicliamdetailes> medicliamdetaileslist = new List<getmedicliamdetailes>();
            foreach (DataRow dr in routes.Rows)
            {
                getmedicliamdetailes getmedicliam = new getmedicliamdetailes();
                getmedicliam.sno = dr["sno"].ToString();
                getmedicliam.empcode = dr["employee_num"].ToString();
                getmedicliam.employeid = dr["empid"].ToString();
                getmedicliam.fullname = dr["fullname"].ToString();
                getmedicliam.date = ((DateTime)dr["doe"]).ToString("yyyy-MM-dd"); //dr["doe"].ToString();//((DateTime)dr["doe"]).ToString("yyyy-MM-dd"); //dr["dateofoffence"].ToString();
                getmedicliam.AmountOfDeduction = dr["medicliamamount"].ToString();
                getmedicliam.remarks = dr["remarks"].ToString();
                getmedicliam.flag = dr["flag"].ToString();
                medicliamdetaileslist.Add(getmedicliam);
            }
            string response = GetJson(medicliamdetaileslist);
            context.Response.Write(response);
        }
        catch
        {
        }
    }

    private void btn_sendfeedback_click(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            string name = context.Request["name"];
            string phno = context.Request["phno"];
            string email = context.Request["email"];
            string remarks = context.Request["remarks"];
            string subject = "Quary";
            string toAddress = "naveen15444@gmail.com";
            string result = "Success";
            string senderID = "no-reply@vyshnavi.in";// use sender's email id here..
            const string senderPassword = "Vyshnavi@123"; // sender password here...
            SmtpClient smtp = new SmtpClient
            {
                Host = "czismtp.logix.in", // smtp server address here...
                Port = 587,
                //security type=tsl;
                EnableSsl = true,
                DeliveryMethod = SmtpDeliveryMethod.Network,
                Credentials = new System.Net.NetworkCredential(senderID, senderPassword),
                Timeout = 30000,
            };
            MailMessage message = new MailMessage(senderID, toAddress, subject, "<html><body>" + name + "<br>" + phno + "<br>" + email + "<br>" + remarks + "<br></body></html>");
            message.IsBodyHtml = true;
            smtp.Send(message);
            string msg = "Message send successfully";
            string Response = GetJson(msg);
            context.Response.Write(Response);
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }

    public class employeeclass
    {
        public string employecode { get; set; }
        public string vehiclemake { get; set; }
        public string vehiclemodel { get; set; }
        public string vehicletype { get; set; }
        public string Routename { get; set; }
        public string TripSheetNo { get; set; }
        public string month { get; set; }
        public string InsExpDate { get; set; }
        public string InsExpcolor { get; set; }
        public string branchname { get; set; }
        public string statusalert { get; set; }
    }
    private void GetFinalizesalaryDeatails(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            string mainbranch = context.Session["mainbranch"].ToString();
            string month = context.Request["month"];
            string year = context.Request["year"];
            //DateTime ServerDateCurrentdate = DBManager.GetTime(vdm.conn);
            //DateTime dateofaffence = Convert.ToDateTime(ServerDateCurrentdate.AddMonths(-1));
            //string strdate = dateofaffence.ToString("dd/MM/yyyy");
            //string[] str = strdate.Split('/');
            //string year = str[2];
            //string month = str[1];
            cmd = new SqlCommand("SELECT branchmaster.branchname, monthlysalarystatement.branchid, monthlysalarystatement.month FROM branchmaster INNER JOIN monthlysalarystatement ON branchmaster.branchid = monthlysalarystatement.branchid INNER JOIN branchmapping ON branchmaster.branchid = branchmapping.subbranch WHERE(monthlysalarystatement.month = @month) AND (monthlysalarystatement.year = @year) AND (branchmapping.mainbranch = @m)GROUP BY monthlysalarystatement.branchid, branchmaster.branchname,monthlysalarystatement.month ");
            cmd.Parameters.Add("@month", month);
            cmd.Parameters.Add("@year", year);
            cmd.Parameters.Add("@m", mainbranch);
            DataTable dtVehicles = vdm.SelectQuery(cmd).Tables[0];

            cmd = new SqlCommand("SELECT branchmaster.branchname, branchmaster.branchid FROM branchmaster INNER JOIN branchmapping ON branchmapping.subbranch = branchmaster.branchid WHERE branchmapping.mainbranch = @mainbranch ");
            cmd.Parameters.Add("@mainbranch", mainbranch);
            DataTable dtbranches = vdm.SelectQuery(cmd).Tables[0];
            List<employeeclass> Vehicleslist = new List<employeeclass>();
            if (dtbranches.Rows.Count > 0)
            {
                foreach (DataRow dr in dtbranches.Rows)
                {
                    employeeclass Getvehicle = new employeeclass();
                    foreach (DataRow dra in dtVehicles.Select("branchid='" + dr["branchid"].ToString() + "'"))
                    {
                        Getvehicle.branchname = dra["branchname"].ToString();
                        string status = string.Empty;
                        status = "Complete";
                        Getvehicle.statusalert = status.ToString();
                    }
                    Getvehicle.branchname = dr["branchname"].ToString();
                    Vehicleslist.Add(Getvehicle);
                }
                string response = GetJson(Vehicleslist);
                context.Response.Write(response);
            }
        }
        catch
        {
        }
    }

    public class LineChartValuesclass
    {
        public List<string> Mileageltr { get; set; }
        public List<string> ActMileage { get; set; }
        public List<string> Status { get; set; }
        public string TripDate { get; set; }
        public string AvgLtr { get; set; }
    }


    public class Locationwiswsalary
    {
        public List<string> xvalueL { get; set; }
        public List<string> yvalueL { get; set; }
        public List<string> StatusL { get; set; }
        public string xvaluestr { get; set; }
        public string yvaluestr { get; set; }
        public string ymonthstr { get; set; }
        public string Status { get; set; }
    }


    private void Gettotalysalarywiselick(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            string mainbranch = context.Session["mainbranch"].ToString();
            //string branchid = context.Session["branchid"].ToString();
            string name = context.Request["name"];
            string ChartType = context.Request["ChartType"];
            string FormName = context.Request["FormName"];

            string fromdate = context.Request["startDate"];
            DateTime dateofaffence = Convert.ToDateTime(fromdate);
            string strfromdate = dateofaffence.ToString("dd/MM/yyyy");
            string[] str = strfromdate.Split('/');
            string fromyear = str[2];
            //int yr = 0;
            string frommonth = str[1];


            string todate = context.Request["enddate"];
            DateTime dateofaffenceto = Convert.ToDateTime(todate);
            string strtodate = dateofaffenceto.ToString("dd/MM/yyyy");
            string[] str1 = strtodate.Split('/');
            string toyear = str1[2];
            string tomonth = str1[1];
            string xvaluestr = string.Empty;
            string yvaluestr = string.Empty;
            string Status = string.Empty;
            Locationwiswsalary LocationwiswsalC = new Locationwiswsalary();
            List<Locationwiswsalary> LocationwiswsalL = new List<Locationwiswsalary>();

            if (ChartType == "All Location")
            {
                cmd = new SqlCommand("SELECT  t1.bid, t2.branchname, t1.Netpay FROM branchmapping INNER JOIN (SELECT branchid, branchname FROM branchmaster) AS t2 ON branchmapping.subbranch = t2.branchid RIGHT OUTER JOIN(SELECT SUM(CAST(netpay AS numeric(9, 2))) AS Netpay, branchid AS bid FROM  monthlysalarystatement WHERE (month BETWEEN @d1 AND @d2) AND (year BETWEEN @y1 AND @y2) AND (branchid IS NOT NULL) GROUP BY branchid) AS t1 ON t2.branchid = t1.bid WHERE (branchmapping.mainbranch = @m)ORDER BY t1.bid ");
                cmd.Parameters.Add("@m", mainbranch);
                cmd.Parameters.Add("@d1", frommonth);
                cmd.Parameters.Add("@d2", tomonth);
                cmd.Parameters.Add("@y1", fromyear);
                cmd.Parameters.Add("@y2", toyear);
            }

            else if (ChartType == "Location Wise")
            {
                cmd = new SqlCommand("SELECT t1.bid, t2.branchname, t1.Netpay FROM branchmapping INNER JOIN(SELECT branchid, branchname FROM  branchmaster) AS t2 ON branchmapping.subbranch = t2.branchid RIGHT OUTER JOIN (SELECT  SUM(CAST(netpay AS numeric(9, 2))) AS Netpay, branchid AS bid  FROM monthlysalarystatement  WHERE (month BETWEEN @d1 AND @d2) AND (year BETWEEN @y1 AND @y2) AND (branchid IS NOT NULL) AND (branchid = @branchid)GROUP BY branchid) AS t1 ON t2.branchid = t1.bid WHERE (branchmapping.mainbranch = @m)ORDER BY t1.bid");
                //cmd = new SqlCommand("SELECT derivedtbl_1.tripsheetno AS TripSheet,derivedtbl_1.employname, DATE_FORMAT(derivedtbl_1.tripdate, '%d-%m-%Y %h:%i %p') AS StartDate, DATE_FORMAT(derivedtbl_1.enddate, '%d-%m-%Y') AS EndDate, derivedtbl_1.gpskms, derivedtbl_1.registration_no AS VehicleNo,  derivedtbl_1.endfuelvalue AS InsideFuel, SUM(triplogs.fuel) AS OutsideFuel, derivedtbl_1.qty, IFNULL(ROUND(derivedtbl_1.TripKMS / (derivedtbl_1.endfuelvalue + SUM(triplogs.fuel)), 2), 0) AS TodayMileage, derivedtbl_1.sno,derivedtbl_1.act_mileage,derivedtbl_1.routeid,derivedtbl_1.employid FROM (SELECT     vehicel_master.act_mileage,   tripdata.tripsheetno, tripdata.tripdate, tripdata.enddate, vehicel_master.registration_no, tripdata.endodometerreading - tripdata.vehiclestartreading AS TripKMS, tripdata.gpskms, tripdata.loadtype, tripdata.qty, tripdata.routeid, vehicel_master.Capacity, tripdata.sno, tripdata.endfuelvalue,employdata.employid, employdata.employname FROM tripdata INNER JOIN vehicel_master ON tripdata.vehicleno = vehicel_master.vm_sno INNER JOIN employdata ON tripdata.driverid = employdata.emp_sno WHERE        (tripdata.enddate BETWEEN @d1 AND @d2) AND (tripdata.userid = @BranchID) AND (tripdata.vehicleno = @VehicleNo) AND (tripdata.status = 'C')) derivedtbl_1 INNER JOIN triplogs ON derivedtbl_1.sno = triplogs.tripsno AND triplogs.fuel_type <> 'OWN'GROUP BY derivedtbl_1.tripsheetno ORDER BY derivedtbl_1.sno");
                cmd.Parameters.Add("@m", mainbranch);
                cmd.Parameters.Add("@branchid", name);
                cmd.Parameters.Add("@d1", frommonth);
                cmd.Parameters.Add("@d2", tomonth);
                cmd.Parameters.Add("@y1", fromyear);
                cmd.Parameters.Add("@y2", toyear);
            }
            else if (ChartType == "Department Wise")
            {
                cmd = new SqlCommand("SELECT t1.did, t2.department, t1.Netpay, t1.Netpay AS Expr1 FROM (SELECT SUM(CAST(netpay AS numeric(9, 2))) AS Netpay, deptid AS did FROM monthlysalarystatement WHERE (month BETWEEN @d1 AND @d2) AND (year BETWEEN @y1 AND @y2) AND (branchid = @branchid) GROUP BY deptid) AS t1 LEFT OUTER JOIN (SELECT deptid, department FROM departments) AS t2 ON t1.did = t2.deptid WHERE (t1.did > 0)ORDER BY t1.did");
                cmd.Parameters.Add("@branchid", name);
                cmd.Parameters.Add("@m", mainbranch);
                cmd.Parameters.Add("@d1", frommonth);
                cmd.Parameters.Add("@d2", tomonth);
                cmd.Parameters.Add("@y1", fromyear);
                cmd.Parameters.Add("@y2", toyear);
            }

            DataTable dtble = vdm.SelectQuery(cmd).Tables[0];
            if (dtble.Rows.Count > 0)
            {
                foreach (DataRow dr in dtble.Rows)
                {
                    string Date = "";
                    int count = 0;
                    if (FormName == "salarywiseLinechart")
                    {
                        if (ChartType == "All Location")
                        {
                            xvaluestr += dr["branchname"].ToString() + ',';
                            yvaluestr += dr["Netpay"].ToString() + ',';
                            count++;
                        }

                        else if (ChartType == "Location Wise")
                        {
                            xvaluestr += dr["branchname"].ToString() + ',';
                            yvaluestr += dr["gros"].ToString() + ',';
                            count++;
                        }
                        else if (ChartType == "Department Wise")
                        {
                            xvaluestr += dr["department"].ToString() + ',';
                            yvaluestr += dr["Netpay"].ToString() + ',';
                            count++;
                        }
                        //else
                        //{
                        //    xvaluestr += dr["department"].ToString() + ',';
                        //    yvaluestr += dr["Netpay"].ToString() + ',';
                        //    count++;
                        //}
                    }
                }
                xvaluestr = xvaluestr.Substring(0, xvaluestr.Length - 1);
                yvaluestr = yvaluestr.Substring(0, yvaluestr.Length - 1);
                Status = "NetSalary";
                LocationwiswsalC.xvaluestr = xvaluestr;
                LocationwiswsalC.yvaluestr = yvaluestr;
                LocationwiswsalC.Status = Status;
                LocationwiswsalL.Add(LocationwiswsalC);
                string respnceString = GetJson(LocationwiswsalL);
                context.Response.Write(respnceString);
            }
        }
        catch
        {
        }
    }
    public class PieValues
    {
        public List<string> branchname { get; set; }
        public List<string> netpay { get; set; }
        public List<string> DeliveryQty { get; set; }
        public List<string> AverageyQty { get; set; }
        public string totalqty { get; set; }
        public string year { get; set; }
        public string month { get; set; }
        public List<PieValues> EmployeDetalis { get; set; }
    }
    public class PieValues22
    {
        public string branchname { get; set; }
        public string netpay { get; set; }
        public List<string> DeliveryQty { get; set; }
        public List<string> AverageyQty { get; set; }
        public string totalqty { get; set; }
        public string year { get; set; }
        public string month { get; set; }
        public List<PieValues22> EmployeDetalis { get; set; }
        public List<PieValues22> lPieValueslist { get; set; }
    }
    private void GetPieChartValues(HttpContext context)
    {
        try
        {
            //vdm = new DBManager();
            //DateTime FromDate = DateTime.Now;
            //string mainbranch = context.Session["mainbranch"].ToString();
            ////string branchid = context.Session["branchid"].ToString();
            //string type = context.Request["type"];
            //string name = context.Request["name"];
            //string ChartType = context.Request["ChartType"];
            //string FormName = context.Request["FormName"];



            //string fromdate = context.Request["startDate"];
            //DateTime dateofaffence = Convert.ToDateTime(fromdate);
            //string strfromdate = dateofaffence.ToString("dd/MM/yyyy");
            //string[] str = strfromdate.Split('/');
            //string fromyear = str[2];
            ////int yr = 0;
            //string frommonth = str[1];


            //string todate = context.Request["enddate"];
            //DateTime dateofaffenceto = Convert.ToDateTime(todate);
            //string strtodate = dateofaffenceto.ToString("dd/MM/yyyy");
            //string[] str1 = strtodate.Split('/');
            //string toyear = str1[2];
            ////int yr = 0;
            //string tomonth = str1[1];
            //string xvaluestr = string.Empty;
            //List<PieValues> lPieValueslist = new List<PieValues>();
            //List<string> branchnameList = new List<string>();
            //List<string> netpayList = new List<string>();
            //string yvaluestr = string.Empty;
            //string Status = string.Empty;
            //Locationwiswsalary LocationwiswsalC = new Locationwiswsalary();
            //List<Locationwiswsalary> LocationwiswsalL = new List<Locationwiswsalary>();
            vdm = new DBManager();
            DateTime FromDate = DateTime.Now;
            string mainbranch = context.Session["mainbranch"].ToString();
            //string branchid = context.Session["branchid"].ToString();
            string type = context.Request["type"];
            string name = context.Request["name"];
            string ChartType = context.Request["ChartType"];
            string FormName = context.Request["FormName"];
            string month = context.Request["month"];
            DateTime dateofaffence = Convert.ToDateTime(FromDate);
            string fromyear = "";
            int i = 0;
            string frommonth = "";
            string xvaluestr = string.Empty;
            List<PieValues> lPieValueslist = new List<PieValues>();
            List<PieValues> EmployeDetalis = new List<PieValues>();
            List<string> branchnameList = new List<string>();
            List<string> netpayList = new List<string>();
            string yvaluestr = string.Empty;
            string ymonthstr = string.Empty;
            string Status = string.Empty;
            Locationwiswsalary LocationwiswsalC = new Locationwiswsalary();
            List<Locationwiswsalary> LocationwiswsalL = new List<Locationwiswsalary>();
            int noofmnts = Convert.ToInt32(month);
            DateTime ServerDateCurrentdate = DBManager.GetTime(vdm.conn);
            DateTime dtfromdate = ServerDateCurrentdate;
            DateTime dttodate = ServerDateCurrentdate;
            DateTime fromdate = ServerDateCurrentdate;
            for (i = 1; i <= noofmnts; i++)
            {

                if (month == "3" || month == "6")
                {
                    DateTime dtfrom = fromdate.AddMonths(-i);
                    string frmdate = dtfrom.ToString("MM/dd/yyyy");
                    string[] str = frmdate.Split('/');
                    int years = Convert.ToInt32(str[2]);
                    int months = Convert.ToInt32(str[0]);
                    frommonth = str[0];
                    fromyear = str[2];
                    //DateTime dtto = fromdate.AddMonths(-i);
                    //if (mainbranch == "42")
                    //{
                    //    dtto = dtfromdate.AddMonths(1);
                    //}
                    //else
                    //{
                    //    dtto = dtfromdate.AddMonths(-1);
                    //    dtfromdate = dtto.AddMonths(1);
                    //}
                    //string todate = dtto.ToString("MM/dd/yyyy");
                    //string[] strto = todate.Split('/');
                    //int prasentyears = Convert.ToInt32(strto[2]);
                    //int prasentmonths = Convert.ToInt32(strto[0]);
                }
                DateTime dtstartingmontm = fromdate.AddMonths(-i);

                if (type == "Pie Chart")
                {

                    if (ChartType == "All Location")
                    {
                        cmd = new SqlCommand("SELECT  SUM(CAST(monthlysalarystatement.netpay AS numeric(9, 2))) AS Netpay, monthlysalarystatement.month, monthlysalarystatement.year FROM monthlysalarystatement INNER JOIN  branchmapping ON monthlysalarystatement.branchid = branchmapping.subbranch WHERE        (monthlysalarystatement.month = @month) AND (monthlysalarystatement.year = @year) AND (monthlysalarystatement.branchid IS NOT NULL) AND (branchmapping.mainbranch = @mainbranch)GROUP BY monthlysalarystatement.month, monthlysalarystatement.year");
                        //cmd = new SqlCommand("SELECT  t1.bid, t2.branchname, t1.Netpay,t1.month,t1.year FROM branchmapping INNER JOIN (SELECT branchid, branchname FROM branchmaster) AS t2 ON branchmapping.subbranch = t2.branchid RIGHT OUTER JOIN(SELECT SUM(CAST(netpay AS numeric(9, 2))) AS Netpay, branchid AS bid ,month,year FROM  monthlysalarystatement WHERE (month=@month) AND (year=@year) AND (branchid IS NOT NULL) GROUP BY branchid, month, year) AS t1 ON t2.branchid = t1.bid WHERE (branchmapping.mainbranch = @m)ORDER BY t1.bid ");
                        cmd.Parameters.Add("@mainbranch", mainbranch);
                        cmd.Parameters.Add("@month", frommonth);
                        cmd.Parameters.Add("@year", fromyear);
                    }

                    else if (ChartType == "Location Wise")
                    {
                        cmd = new SqlCommand("SELECT t1.bid, t2.branchname, t1.Netpay,t1.month,t1.year FROM branchmapping INNER JOIN(SELECT branchid, branchname FROM  branchmaster) AS t2 ON branchmapping.subbranch = t2.branchid RIGHT OUTER JOIN (SELECT  SUM(CAST(netpay AS numeric(9, 2))) AS Netpay, branchid AS bid ,month,year FROM monthlysalarystatement  WHERE (month=@month) AND (year=@year) AND (branchid IS NOT NULL) AND (branchid = @branchid)GROUP BY branchid, month, year) AS t1 ON t2.branchid = t1.bid WHERE (branchmapping.mainbranch = @m)ORDER BY t1.bid");
                        //cmd = new SqlCommand("SELECT derivedtbl_1.tripsheetno AS TripSheet,derivedtbl_1.employname, DATE_FORMAT(derivedtbl_1.tripdate, '%d-%m-%Y %h:%i %p') AS StartDate, DATE_FORMAT(derivedtbl_1.enddate, '%d-%m-%Y') AS EndDate, derivedtbl_1.gpskms, derivedtbl_1.registration_no AS VehicleNo,  derivedtbl_1.endfuelvalue AS InsideFuel, SUM(triplogs.fuel) AS OutsideFuel, derivedtbl_1.qty, IFNULL(ROUND(derivedtbl_1.TripKMS / (derivedtbl_1.endfuelvalue + SUM(triplogs.fuel)), 2), 0) AS TodayMileage, derivedtbl_1.sno,derivedtbl_1.act_mileage,derivedtbl_1.routeid,derivedtbl_1.employid FROM (SELECT     vehicel_master.act_mileage,   tripdata.tripsheetno, tripdata.tripdate, tripdata.enddate, vehicel_master.registration_no, tripdata.endodometerreading - tripdata.vehiclestartreading AS TripKMS, tripdata.gpskms, tripdata.loadtype, tripdata.qty, tripdata.routeid, vehicel_master.Capacity, tripdata.sno, tripdata.endfuelvalue,employdata.employid, employdata.employname FROM tripdata INNER JOIN vehicel_master ON tripdata.vehicleno = vehicel_master.vm_sno INNER JOIN employdata ON tripdata.driverid = employdata.emp_sno WHERE        (tripdata.enddate BETWEEN @d1 AND @d2) AND (tripdata.userid = @BranchID) AND (tripdata.vehicleno = @VehicleNo) AND (tripdata.status = 'C')) derivedtbl_1 INNER JOIN triplogs ON derivedtbl_1.sno = triplogs.tripsno AND triplogs.fuel_type <> 'OWN'GROUP BY derivedtbl_1.tripsheetno ORDER BY derivedtbl_1.sno");
                        cmd.Parameters.Add("@m", mainbranch);
                        cmd.Parameters.Add("@branchid", name);
                        cmd.Parameters.Add("@month", frommonth);
                        cmd.Parameters.Add("@year", fromyear);
                    }
                    else if (ChartType == "Department Wise")
                    {

                        cmd = new SqlCommand("SELECT t1.did, t2.department, t1.Netpay, t1.Netpay AS Expr1,t1.month,t1.year FROM (SELECT SUM(CAST(netpay AS numeric(9, 2))) AS Netpay, deptid AS did ,month,year FROM monthlysalarystatement WHERE (month=@month) AND (year=@year) AND (branchid = @branchid) GROUP BY deptid, month, year) AS t1 LEFT OUTER JOIN (SELECT deptid, department FROM departments) AS t2 ON t1.did = t2.deptid WHERE (t1.did > 0)ORDER BY t1.did");
                        cmd.Parameters.Add("@branchid", name);
                        cmd.Parameters.Add("@m", mainbranch);
                        cmd.Parameters.Add("@month", frommonth);
                        cmd.Parameters.Add("@year", fromyear);
                    }
                    DataTable dtble = vdm.SelectQuery(cmd).Tables[0];
                    if (dtble.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dtble.Rows)
                        {
                            string Date = "";
                            int count = 0;
                            if (FormName == "salarywiseLinechart")
                            {
                                if (ChartType == "All Location")
                                {
                                    //branchnameList.Add(dr["branchname"].ToString());
                                    branchnameList.Add(dr["month"].ToString());
                                    //xvaluestr += dr["branchname"].ToString() + ',';
                                    string netpay = dr["Netpay"].ToString();
                                    if (netpay == "")
                                    {
                                        netpay = "0";
                                    }

                                    //CultureInfo hindi = new CultureInfo("hi-IN");
                                    //if (netpay == "" || netpay == null || netpay == "null")
                                    //{
                                    //    netpayList.netpay = "0";
                                    //}
                                    //else
                                    //{
                                    //    decimal totnet = decimal.Parse(netpay, CultureInfo.InvariantCulture);
                                    //    netpayList.netpay = string.Format(hindi, "{0:#,#}", totnet);
                                    //}


                                    netpayList.Add(netpay);
                                    count++;
                                }

                                else if (ChartType == "Location Wise")
                                {
                                    PieValues getbrcdetails = new PieValues();
                                    getbrcdetails.month = dr["month"].ToString();
                                    EmployeDetalis.Add(getbrcdetails);
                                    count++;
                                    branchnameList.Add(dr["branchname"].ToString());
                                    //xvaluestr += dr["branchname"].ToString() + ',';
                                    string netpay = dr["Netpay"].ToString();
                                    if (netpay == "")
                                    {
                                        netpay = "0";
                                    }
                                    netpayList.Add(netpay);
                                    count++;
                                }
                                else if (ChartType == "Department Wise")
                                {
                                    branchnameList.Add(dr["department"].ToString());
                                    //xvaluestr += dr["branchname"].ToString() + ',';
                                    string netpay = dr["Netpay"].ToString();
                                    if (netpay == "")
                                    {
                                        netpay = "0";
                                    }
                                    netpayList.Add(netpay);
                                    count++;
                                }
                                //else
                                //{
                                //    xvaluestr += dr["department"].ToString() + ',';
                                //    yvaluestr += dr["Netpay"].ToString() + ',';
                                //    count++;
                                //}
                            }
                        }


                    }

                }

                else if (type == "Line Chart")
                {
                    if (ChartType == "All Location")
                    {
                        cmd = new SqlCommand("SELECT  SUM(CAST(monthlysalarystatement.netpay AS numeric(9, 2))) AS Netpay, monthlysalarystatement.month, monthlysalarystatement.year FROM monthlysalarystatement INNER JOIN  branchmapping ON monthlysalarystatement.branchid = branchmapping.subbranch WHERE        (monthlysalarystatement.month = @month) AND (monthlysalarystatement.year = @year) AND (monthlysalarystatement.branchid IS NOT NULL) AND (branchmapping.mainbranch = @mainbranch)GROUP BY monthlysalarystatement.month, monthlysalarystatement.year");
                        //cmd = new SqlCommand("SELECT  t1.bid, t2.branchname, t1.Netpay,t1.month,t1.year FROM branchmapping INNER JOIN (SELECT branchid, branchname FROM branchmaster) AS t2 ON branchmapping.subbranch = t2.branchid RIGHT OUTER JOIN(SELECT SUM(CAST(netpay AS numeric(9, 2))) AS Netpay, branchid AS bid ,month,year FROM  monthlysalarystatement WHERE (month=@month) AND (year=@year) AND (branchid IS NOT NULL) GROUP BY branchid, month, year) AS t1 ON t2.branchid = t1.bid WHERE (branchmapping.mainbranch = @m)ORDER BY t1.bid ");
                        cmd.Parameters.Add("@mainbranch", mainbranch);
                        cmd.Parameters.Add("@month", frommonth);
                        cmd.Parameters.Add("@year", fromyear);
                    }

                    else if (ChartType == "Location Wise")
                    {
                        cmd = new SqlCommand("SELECT t1.bid, t2.branchname, t1.Netpay,t1.month,t1.year FROM branchmapping INNER JOIN(SELECT branchid, branchname FROM  branchmaster) AS t2 ON branchmapping.subbranch = t2.branchid RIGHT OUTER JOIN (SELECT  SUM(CAST(netpay AS numeric(9, 2))) AS Netpay, branchid AS bid ,month,year FROM monthlysalarystatement  WHERE (month=@month) AND (year=@year) AND (branchid IS NOT NULL) AND (branchid = @branchid)GROUP BY branchid, month, year) AS t1 ON t2.branchid = t1.bid WHERE (branchmapping.mainbranch = @m)ORDER BY t1.bid");
                        //cmd = new SqlCommand("SELECT derivedtbl_1.tripsheetno AS TripSheet,derivedtbl_1.employname, DATE_FORMAT(derivedtbl_1.tripdate, '%d-%m-%Y %h:%i %p') AS StartDate, DATE_FORMAT(derivedtbl_1.enddate, '%d-%m-%Y') AS EndDate, derivedtbl_1.gpskms, derivedtbl_1.registration_no AS VehicleNo,  derivedtbl_1.endfuelvalue AS InsideFuel, SUM(triplogs.fuel) AS OutsideFuel, derivedtbl_1.qty, IFNULL(ROUND(derivedtbl_1.TripKMS / (derivedtbl_1.endfuelvalue + SUM(triplogs.fuel)), 2), 0) AS TodayMileage, derivedtbl_1.sno,derivedtbl_1.act_mileage,derivedtbl_1.routeid,derivedtbl_1.employid FROM (SELECT     vehicel_master.act_mileage,   tripdata.tripsheetno, tripdata.tripdate, tripdata.enddate, vehicel_master.registration_no, tripdata.endodometerreading - tripdata.vehiclestartreading AS TripKMS, tripdata.gpskms, tripdata.loadtype, tripdata.qty, tripdata.routeid, vehicel_master.Capacity, tripdata.sno, tripdata.endfuelvalue,employdata.employid, employdata.employname FROM tripdata INNER JOIN vehicel_master ON tripdata.vehicleno = vehicel_master.vm_sno INNER JOIN employdata ON tripdata.driverid = employdata.emp_sno WHERE        (tripdata.enddate BETWEEN @d1 AND @d2) AND (tripdata.userid = @BranchID) AND (tripdata.vehicleno = @VehicleNo) AND (tripdata.status = 'C')) derivedtbl_1 INNER JOIN triplogs ON derivedtbl_1.sno = triplogs.tripsno AND triplogs.fuel_type <> 'OWN'GROUP BY derivedtbl_1.tripsheetno ORDER BY derivedtbl_1.sno");
                        cmd.Parameters.Add("@m", mainbranch);
                        cmd.Parameters.Add("@branchid", name);
                        cmd.Parameters.Add("@month", frommonth);
                        cmd.Parameters.Add("@year", fromyear);
                    }
                    else if (ChartType == "Department Wise")
                    {

                        cmd = new SqlCommand("SELECT t1.did, t2.department, t1.Netpay, t1.Netpay AS Expr1,t1.month,t1.year FROM (SELECT SUM(CAST(netpay AS numeric(9, 2))) AS Netpay, deptid AS did ,month,year FROM monthlysalarystatement WHERE (month=@month) AND (year=@year) AND (branchid = @branchid) GROUP BY deptid, month, year) AS t1 LEFT OUTER JOIN (SELECT deptid, department FROM departments) AS t2 ON t1.did = t2.deptid WHERE (t1.did > 0)ORDER BY t1.did");
                        cmd.Parameters.Add("@branchid", name);
                        cmd.Parameters.Add("@m", mainbranch);
                        cmd.Parameters.Add("@month", frommonth);
                        cmd.Parameters.Add("@year", fromyear);
                    }
                    DataTable dtble1 = vdm.SelectQuery(cmd).Tables[0];
                    if (dtble1.Rows.Count > 0)
                    {
                        foreach (DataRow dr1 in dtble1.Rows)
                        {
                            string Date = "";
                            int count = 0;
                            if (FormName == "salarywiseLinechart")
                            {
                                if (ChartType == "All Location")
                                {
                                    //xvaluestr += dr1["branchname"].ToString() + ',';
                                    yvaluestr += dr1["Netpay"].ToString() + ',';
                                    ymonthstr += dr1["month"].ToString() + ',';
                                    count++;
                                }

                                else if (ChartType == "Location Wise")
                                {
                                    xvaluestr += dr1["branchname"].ToString() + ',';
                                    yvaluestr += dr1["Netpay"].ToString() + ',';
                                    ymonthstr += dr1["month"].ToString() + ',';
                                    count++;
                                }
                                else if (ChartType == "Department Wise")
                                {
                                    xvaluestr += dr1["department"].ToString() + ',';
                                    yvaluestr += dr1["Netpay"].ToString() + ',';
                                    ymonthstr += dr1["month"].ToString() + ',';
                                    count++;
                                }
                                //else
                                //{
                                //    xvaluestr += dr["department"].ToString() + ',';
                                //    yvaluestr += dr["Netpay"].ToString() + ',';
                                //    count++;
                                //}
                            }
                        }
                    }
                }
            }
            if (type == "Pie Chart")
            {
                PieValues GetPieValues = new PieValues();
                GetPieValues.branchname = branchnameList;
                GetPieValues.netpay = netpayList;
                GetPieValues.EmployeDetalis = EmployeDetalis;
                lPieValueslist.Add(GetPieValues);
                string errresponse = GetJson(lPieValueslist);
                context.Response.Write(errresponse);

            }

            else if (type == "Line Chart")
            {

                xvaluestr = xvaluestr.Substring(0, xvaluestr.Length - 1);
                yvaluestr = yvaluestr.Substring(0, yvaluestr.Length - 1);
                ymonthstr = ymonthstr.Substring(0, yvaluestr.Length - 1);
                Status = "NetSalary";
                LocationwiswsalC.xvaluestr = xvaluestr;
                LocationwiswsalC.yvaluestr = yvaluestr;
                LocationwiswsalC.ymonthstr = ymonthstr;
                LocationwiswsalC.Status = Status;
                LocationwiswsalL.Add(LocationwiswsalC);
                string respnceString = GetJson(LocationwiswsalL);
                context.Response.Write(respnceString);
            }

        }
        catch
        {
        }
    }
    private void GetNetPaymonthlyValues(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            DateTime FromDate = DateTime.Now;
            string mainbranch = context.Session["mainbranch"].ToString();
            //string branchid = context.Session["branchid"].ToString();
            string type = context.Request["type"];
            string name = context.Request["name"];
            string ChartType = context.Request["ChartType"];
            string FormName = context.Request["FormName"];
            string month = context.Request["month"];
            DateTime dateofaffence = Convert.ToDateTime(FromDate);
            string fromyear = "";
            int i = 0;
            string frommonth = "";
            string xvaluestr = string.Empty;
            List<PieValues22> lPieValueslist = new List<PieValues22>();
            List<PieValues22> EmployeDetalis = new List<PieValues22>();
            List<string> branchnameList = new List<string>();
            List<string> netpayList = new List<string>();
            string yvaluestr = string.Empty;
            string Status = string.Empty;
            Locationwiswsalary LocationwiswsalC = new Locationwiswsalary();
            List<Locationwiswsalary> LocationwiswsalL = new List<Locationwiswsalary>();
            int noofmnts = Convert.ToInt32(month);
            DateTime ServerDateCurrentdate = DBManager.GetTime(vdm.conn);
            DateTime dtfromdate = ServerDateCurrentdate;
            DateTime dttodate = ServerDateCurrentdate;
            DateTime fromdate = ServerDateCurrentdate;
            for (i = 1; i <= noofmnts; i++)
            {

                if (month == "3" || month == "6")
                {
                    DateTime dtfrom = fromdate.AddMonths(-i);
                    string frmdate = dtfrom.ToString("MM/dd/yyyy");
                    string[] str = frmdate.Split('/');
                    int years = Convert.ToInt32(str[2]);
                    int months = Convert.ToInt32(str[0]);
                    frommonth = str[0];
                    fromyear = str[2];
                    //DateTime dtto = fromdate.AddMonths(-i);
                    //if (mainbranch == "42")
                    //{
                    //    dtto = dtfromdate.AddMonths(1);
                    //}
                    //else
                    //{
                    //    dtto = dtfromdate.AddMonths(-1);
                    //    dtfromdate = dtto.AddMonths(1);
                    //}
                    //string todate = dtto.ToString("MM/dd/yyyy");
                    //string[] strto = todate.Split('/');
                    //int prasentyears = Convert.ToInt32(strto[2]);
                    //int prasentmonths = Convert.ToInt32(strto[0]);
                }
                //DateTime dtstartingmontm = fromdate.AddMonths(-i);

                if (ChartType == "All Location")
                {
                    //cmd = new SqlCommand("SELECT t1.bid, t2.branchname, t1.Netpay FROM branchmapping INNER JOIN(SELECT branchid, branchname FROM branchmaster) AS t2 ON branchmapping.subbranch = t2.branchid RIGHT OUTER JOIN (SELECT SUM(CAST(netpay AS numeric(9, 2))) AS Netpay, branchid AS bid FROM monthlysalarystatement WHERE (dateofclosing BETWEEN @d1 AND @d2) AND (branchid IS NOT NULL) GROUP BY branchid) AS t1 ON t2.branchid = t1.bid WHERE (branchmapping.mainbranch = @m)ORDER BY t1.bid ");
                    //cmd = new SqlCommand("SELECT  t1.bid, t2.branchname, t1.Netpay FROM branchmapping INNER JOIN (SELECT branchid, branchname FROM branchmaster) AS t2 ON branchmapping.subbranch = t2.branchid RIGHT OUTER JOIN(SELECT SUM(CAST(netpay AS numeric(9, 2))) AS Netpay, branchid AS bid FROM  monthlysalarystatement WHERE (month BETWEEN @d1 AND @d2) AND (year BETWEEN @y1 AND @y2) AND (branchid IS NOT NULL) GROUP BY branchid) AS t1 ON t2.branchid = t1.bid WHERE (branchmapping.mainbranch = @m)ORDER BY t1.bid ");
                    cmd = new SqlCommand("SELECT  t1.bid, t2.branchname, t1.Netpay,t1.month,t1.year FROM branchmapping INNER JOIN (SELECT branchid, branchname FROM branchmaster) AS t2 ON branchmapping.subbranch = t2.branchid RIGHT OUTER JOIN(SELECT SUM(CAST(netpay AS numeric(9, 2))) AS Netpay, branchid AS bid ,month,year FROM  monthlysalarystatement WHERE (month=@month) AND (year=@year) AND (branchid IS NOT NULL) GROUP BY branchid, month, year) AS t1 ON t2.branchid = t1.bid WHERE (branchmapping.mainbranch = @m)ORDER BY t1.bid ");
                    cmd.Parameters.Add("@m", mainbranch);
                    cmd.Parameters.Add("@month", frommonth);
                    cmd.Parameters.Add("@year", fromyear);
                }

                else if (ChartType == "Location Wise")
                {
                    cmd = new SqlCommand("SELECT t1.bid, t2.branchname, t1.Netpay,t1.month,t1.year FROM branchmapping INNER JOIN(SELECT branchid, branchname FROM  branchmaster) AS t2 ON branchmapping.subbranch = t2.branchid RIGHT OUTER JOIN (SELECT  SUM(CAST(netpay AS numeric(9, 2))) AS Netpay, branchid AS bid ,month,year FROM monthlysalarystatement  WHERE (month=@month) AND (year=@year) AND (branchid IS NOT NULL) AND (branchid = @branchid)GROUP BY branchid, month, year) AS t1 ON t2.branchid = t1.bid WHERE (branchmapping.mainbranch = @m)ORDER BY t1.bid");
                    //cmd = new SqlCommand("SELECT derivedtbl_1.tripsheetno AS TripSheet,derivedtbl_1.employname, DATE_FORMAT(derivedtbl_1.tripdate, '%d-%m-%Y %h:%i %p') AS StartDate, DATE_FORMAT(derivedtbl_1.enddate, '%d-%m-%Y') AS EndDate, derivedtbl_1.gpskms, derivedtbl_1.registration_no AS VehicleNo,  derivedtbl_1.endfuelvalue AS InsideFuel, SUM(triplogs.fuel) AS OutsideFuel, derivedtbl_1.qty, IFNULL(ROUND(derivedtbl_1.TripKMS / (derivedtbl_1.endfuelvalue + SUM(triplogs.fuel)), 2), 0) AS TodayMileage, derivedtbl_1.sno,derivedtbl_1.act_mileage,derivedtbl_1.routeid,derivedtbl_1.employid FROM (SELECT     vehicel_master.act_mileage,   tripdata.tripsheetno, tripdata.tripdate, tripdata.enddate, vehicel_master.registration_no, tripdata.endodometerreading - tripdata.vehiclestartreading AS TripKMS, tripdata.gpskms, tripdata.loadtype, tripdata.qty, tripdata.routeid, vehicel_master.Capacity, tripdata.sno, tripdata.endfuelvalue,employdata.employid, employdata.employname FROM tripdata INNER JOIN vehicel_master ON tripdata.vehicleno = vehicel_master.vm_sno INNER JOIN employdata ON tripdata.driverid = employdata.emp_sno WHERE        (tripdata.enddate BETWEEN @d1 AND @d2) AND (tripdata.userid = @BranchID) AND (tripdata.vehicleno = @VehicleNo) AND (tripdata.status = 'C')) derivedtbl_1 INNER JOIN triplogs ON derivedtbl_1.sno = triplogs.tripsno AND triplogs.fuel_type <> 'OWN'GROUP BY derivedtbl_1.tripsheetno ORDER BY derivedtbl_1.sno");
                    cmd.Parameters.Add("@m", mainbranch);
                    cmd.Parameters.Add("@branchid", name);
                    cmd.Parameters.Add("@month", frommonth);
                    cmd.Parameters.Add("@year", fromyear);
                }
                else if (ChartType == "Department Wise")
                {
                    cmd = new SqlCommand("SELECT t1.did, t2.department, t1.Netpay, t1.Netpay AS Expr1,t1.month,t1.year FROM (SELECT SUM(CAST(netpay AS numeric(9, 2))) AS Netpay, deptid AS did ,month,year FROM monthlysalarystatement WHERE (month=@month) AND (year=@year) AND (branchid = @branchid) GROUP BY deptid, month, year) AS t1 LEFT OUTER JOIN (SELECT deptid, department FROM departments) AS t2 ON t1.did = t2.deptid WHERE (t1.did > 0)ORDER BY t1.did");
                    cmd.Parameters.Add("@branchid", name);
                    cmd.Parameters.Add("@m", mainbranch);
                    cmd.Parameters.Add("@month", frommonth);
                    cmd.Parameters.Add("@year", fromyear);
                }
                DataTable dtble = vdm.SelectQuery(cmd).Tables[0];
                if (dtble.Rows.Count > 0)
                {
                    foreach (DataRow dr in dtble.Rows)
                    {
                        string Date = "";
                        int count = 0;

                        if (FormName == "salarywiseLinechart")
                        {
                            if (ChartType == "All Location")
                            {
                                PieValues22 getbrcdetails = new PieValues22();
                                getbrcdetails.branchname = dr["branchname"].ToString();
                                getbrcdetails.year = dr["year"].ToString();
                                getbrcdetails.month = dr["month"].ToString();
                                getbrcdetails.netpay = dr["Netpay"].ToString();
                                EmployeDetalis.Add(getbrcdetails);
                                count++;
                            }

                            else if (ChartType == "Location Wise")
                            {
                                PieValues22 getbrcdetails = new PieValues22();
                                getbrcdetails.branchname = dr["branchname"].ToString();
                                getbrcdetails.year = dr["year"].ToString();
                                getbrcdetails.month = dr["month"].ToString();
                                getbrcdetails.netpay = dr["Netpay"].ToString();
                                EmployeDetalis.Add(getbrcdetails);
                                count++;
                            }
                            else if (ChartType == "Department Wise")
                            {
                                PieValues22 getbrcdetails = new PieValues22();
                                getbrcdetails.branchname = dr["department"].ToString();
                                getbrcdetails.year = dr["year"].ToString();
                                getbrcdetails.month = dr["month"].ToString();
                                getbrcdetails.netpay = dr["Netpay"].ToString();
                                EmployeDetalis.Add(getbrcdetails);
                                count++;
                            }

                        }
                    }

                }

            }
            PieValues22 GetPieValues = new PieValues22();
            GetPieValues.EmployeDetalis = EmployeDetalis;
            lPieValueslist.Add(GetPieValues);
            string errresponse = GetJson(lPieValueslist);
            context.Response.Write(errresponse);
        }
        catch
        {
        }
    }
    public class employeetypeValues
    {
        public List<string> branchname { get; set; }
        public List<string> countgen { get; set; }
        public List<string> countgen1 { get; set; }
        public List<string> DeliveryQty { get; set; }
        public List<string> AverageyQty { get; set; }
        public string totalqty { get; set; }
    }
    private void employeetypePieChartValues(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            DateTime FromDate = DateTime.Now;
            string mainbranch = context.Session["mainbranch"].ToString();
            string type = context.Request["type"];
            //string branchid = context.Session["branchid"].ToString();
            string name = context.Request["name"];
            string ChartType = context.Request["ChartType"];
            string FormName = context.Request["FormName"];
            string xvaluestr = string.Empty;
            List<employeetypeValues> lPieValueslist = new List<employeetypeValues>();
            List<string> genderList = new List<string>();
            List<string> countList = new List<string>();
            if (type == "Gender")
            {
                if (ChartType == "All Location")
                {
                    cmd = new SqlCommand("SELECT COUNT(employedetails.gender) AS Gendercount, employedetails.gender FROM employedetails INNER JOIN branchmapping ON employedetails.branchid = branchmapping.subbranch WHERE (LEN(employedetails.gender) > 0) AND (employedetails.status = 'NO')  AND (branchmapping.mainbranch = @m)GROUP BY employedetails.gender, branchmapping.mainbranch");
                    cmd.Parameters.Add("@m", mainbranch);
                }
                else if (ChartType == "Location Wise")
                {
                    cmd = new SqlCommand("SELECT COUNT(employedetails.gender) AS Gendercount, employedetails.gender, employedetails.branchid, branchmaster.branchname FROM employedetails INNER JOIN branchmaster ON employedetails.branchid = branchmaster.branchid INNER JOIN branchmapping ON employedetails.branchid = branchmapping.subbranch WHERE (LEN(employedetails.gender) > 0) AND (employedetails.branchid = @branchid) AND (employedetails.status = 'NO') and (branchmapping.mainbranch = @m)GROUP BY employedetails.gender, employedetails.branchid, branchmaster.branchname");
                    cmd.Parameters.Add("@m", mainbranch);
                    cmd.Parameters.Add("@branchid", name);
                }
            }
            else if (type == "Employee Type")
            {

                if (ChartType == "All Location")
                {
                    cmd = new SqlCommand("SELECT COUNT(employedetails.employee_type) AS typecount, employedetails.employee_type FROM employedetails INNER JOIN branchmapping ON employedetails.branchid = branchmapping.subbranch WHERE (LEN(employedetails.employee_type) > 0) AND (employedetails.status = 'NO') AND (branchmapping.mainbranch = @m)GROUP BY employedetails.employee_type");
                    cmd.Parameters.Add("@m", mainbranch);
                }
                else if (ChartType == "Location Wise")
                {
                    cmd = new SqlCommand("SELECT COUNT(employee_type) AS typecount, employee_type FROM employedetails WHERE (branchid = @branchid) AND (employedetails.status = 'NO') AND (LEN(employee_type) > 0)GROUP BY employee_type");
                    cmd.Parameters.Add("@branchid", name);
                    //cmd.Parameters.Add("@m", mainbranch);
                }
            }
            DataTable dtble = vdm.SelectQuery(cmd).Tables[0];
            if (dtble.Rows.Count > 0)
            {
                foreach (DataRow dr in dtble.Rows)
                {
                    string Date = "";
                    int count = 0;
                    if (type == "Gender")
                    {

                        if (FormName == "salarywiseLinechart")
                        {
                            if (ChartType == "All Location")
                            {
                                genderList.Add(dr["gender"].ToString());
                                //xvaluestr += dr["branchname"].ToString() + ',';
                                string countgen = dr["Gendercount"].ToString();
                                if (countgen == "")
                                {
                                    countgen = "0";
                                }
                                countList.Add(countgen);

                            }
                            else if (ChartType == "Location Wise")
                            {
                                genderList.Add(dr["gender"].ToString());
                                //xvaluestr += dr["branchname"].ToString() + ',';
                                string countgen = dr["Gendercount"].ToString();
                                if (countgen == "")
                                {
                                    countgen = "0";
                                }
                                countList.Add(countgen);

                            }
                        }
                    }

                    else if (type == "Employee Type")
                    {
                        if (FormName == "salarywiseLinechart")
                        {
                            if (ChartType == "All Location")
                            {
                                genderList.Add(dr["employee_type"].ToString());
                                //xvaluestr += dr["branchname"].ToString() + ',';
                                string countgen = dr["typecount"].ToString();
                                if (countgen == "")
                                {
                                    countgen = "0";
                                }
                                countList.Add(countgen);

                            }

                            else if (ChartType == "Location Wise")
                            {
                                genderList.Add(dr["employee_type"].ToString());
                                //xvaluestr += dr["branchname"].ToString() + ',';
                                string countgen = dr["typecount"].ToString();
                                if (countgen == "")
                                {
                                    countgen = "0";
                                }
                                countList.Add(countgen);

                            }

                        }
                    }

                }
                employeetypeValues GetPieValues = new employeetypeValues();
                GetPieValues.branchname = genderList;
                GetPieValues.countgen = countList;
                lPieValueslist.Add(GetPieValues);
                string errresponse = GetJson(lPieValueslist);
                context.Response.Write(errresponse);
            }
        }

        catch
        {
        }
    }
    public class genderValues
    {
        public List<string> branchname { get; set; }
        public List<string> countgen { get; set; }
        public List<string> DeliveryQty { get; set; }
        public List<string> AverageyQty { get; set; }
        public string totalqty { get; set; }
    }

    private void Genderwiseclick(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            string mainbranch = context.Session["mainbranch"].ToString();
            string branchid = context.Session["branchid"].ToString();
            string ChartType = context.Request["ChartType"];
            string FormName = context.Request["FormName"];
            string xvaluestr = string.Empty;
            string yvaluestr = string.Empty;
            string Status = string.Empty;
            Locationwiswsalary LocationwiswsalC = new Locationwiswsalary();
            List<Locationwiswsalary> LocationwiswsalL = new List<Locationwiswsalary>();
            if (ChartType == "All Location")
            {
                cmd = new SqlCommand("SELECT COUNT(Gender) AS  Gendercount,Gender FROM employedetails  where  LEN(Gender)>0  group by  Gender");
                cmd.Parameters.Add("@BranchID", branchid);
            }
            else if (ChartType == "Location Wise")
            {
                cmd = new SqlCommand("SELECT COUNT(employedetails.gender) AS Gendercount, employedetails.gender, employedetails.branchid, branchmaster.branchname FROM employedetails INNER JOIN branchmaster ON employedetails.branchid = branchmaster.branchid WHERE (LEN(employedetails.gender) > 0) GROUP BY employedetails.gender, employedetails.branchid, branchmaster.branchname");
            }
            else if (ChartType == "Department Wise")
            {
                cmd = new SqlCommand("SELECT COUNT(employedetails.gender) AS Gendercount, employedetails.gender, employedetails.employee_dept, departments.department FROM employedetails INNER JOIN departments ON employedetails.employee_dept = departments.deptid WHERE (LEN(employedetails.gender) > 0) GROUP BY employedetails.gender, employedetails.employee_dept, departments.department");
            }
            DataTable dtble = vdm.SelectQuery(cmd).Tables[0];
            if (dtble.Rows.Count > 0)
            {
                foreach (DataRow dr in dtble.Rows)
                {
                    string Date = "";
                    int count = 0;
                    if (FormName == "Linechartsalary")
                    {
                        if (ChartType == "All Location")
                        {
                            //Date += dr["empid"].ToString() + ',';
                            xvaluestr += dr["Gender"].ToString() + ',';
                            yvaluestr += dr["Gendercount"].ToString() + ',';
                            count++;
                        }
                        else if (ChartType == "Location Wise")
                        {
                            xvaluestr += dr["branchname"].ToString() + ',';
                            yvaluestr += dr["Gendercount"].ToString() + ',';
                            count++;
                        }
                        else if (ChartType == "Department Wise")
                        {
                            xvaluestr += dr["department"].ToString() + ',';
                            yvaluestr += dr["Gendercount"].ToString() + ',';
                            count++;
                        }
                    }
                }
                xvaluestr = xvaluestr.Substring(0, xvaluestr.Length - 1);
                yvaluestr = yvaluestr.Substring(0, yvaluestr.Length - 1);
                Status = "Gender";
                LocationwiswsalC.xvaluestr = xvaluestr;
                LocationwiswsalC.yvaluestr = yvaluestr;
                LocationwiswsalC.Status = Status;
                LocationwiswsalL.Add(LocationwiswsalC);
                string respnceString = GetJson(LocationwiswsalL);
                context.Response.Write(respnceString);
            }
        }
        catch
        {
        }
    }


    public class PFwiselinechart
    {
        public List<string> xvalueL { get; set; }
        public List<string> yvalueL { get; set; }
        //public List<string> Status { get; set; }
        public string xvaluestr { get; set; }
        public string yvaluestr { get; set; }
        public string Status { get; set; }
        string pfeligible { get; set; }

    }
    private void PFwiselinechartclick(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            string mainbranch = context.Session["mainbranch"].ToString();
            //string pfeligible = context.Session["branchid"].ToString();
            string name = context.Request["name"];
            string ChartType = context.Request["ChartType"];
            string FormName = context.Request["FormName"];
            string Type = context.Request["Type"];
            string xvaluestr = string.Empty;
            string yvaluestr = string.Empty;
            string Status = string.Empty;
            PFwiselinechart PFwiselinechartC = new PFwiselinechart();
            List<PFwiselinechart> PFwiselinechartL = new List<PFwiselinechart>();
            if (Type == "ALL")
            {
                if (ChartType == "All Location")
                {
                    cmd = new SqlCommand("SELECT COUNT(employedetails.pfeligible) AS pfeligibleCount, employedetails.pfeligible FROM employedetails INNER JOIN branchmapping ON employedetails.branchid = branchmapping.subbranch WHERE (LEN(employedetails.pfeligible) > 0) AND (branchmapping.mainbranch = @m) AND (employedetails.status = 'No') GROUP BY employedetails.pfeligible");
                    cmd.Parameters.Add("@m", mainbranch);
                    cmd.Parameters.Add("@VehicleNo", name);
                }
            }
            else if (Type == "PF")
            {
                if (ChartType == "All Location")
                {
                    cmd = new SqlCommand("SELECT COUNT(employedetails.pfeligible) AS pfeligibleCount, employedetails.pfeligible FROM employedetails INNER JOIN branchmapping ON employedetails.branchid = branchmapping.subbranch WHERE (LEN(employedetails.pfeligible) > 0) AND (employedetails.pfeligible = 'YES') AND (employedetails.status = 'No') AND (branchmapping.mainbranch = @m)GROUP BY employedetails.pfeligible");
                    cmd.Parameters.Add("@m", mainbranch);
                    cmd.Parameters.Add("@VehicleNo", name);
                }
                else if (ChartType == "Location Wise")
                {
                    cmd = new SqlCommand("SELECT COUNT(employedetails.pfeligible) AS pfeligibleCount, employedetails.pfeligible, branchmaster.branchname FROM employedetails INNER JOIN branchmaster ON employedetails.branchid = branchmaster.branchid INNER JOIN branchmapping ON branchmaster.branchid = branchmapping.subbranch WHERE (LEN(employedetails.pfeligible) > 0) AND (employedetails.pfeligible = 'YES') AND (branchmapping.mainbranch = @m) AND (employedetails.status = 'No')GROUP BY employedetails.pfeligible, branchmaster.branchname");
                    cmd.Parameters.Add("@m", mainbranch);
                }
                else if (ChartType == "Department Wise")
                {
                    cmd = new SqlCommand("SELECT COUNT(employedetails.pfeligible) AS pfeligibleCount, employedetails.pfeligible, departments.department FROM  employedetails INNER JOIN departments ON employedetails.employee_dept = departments.deptid INNER JOIN branchmapping ON employedetails.branchid = branchmapping.subbranch WHERE(LEN(employedetails.pfeligible) > 0) AND (employedetails.pfeligible = 'YES') AND (branchmapping.mainbranch = @m) AND (employedetails.status = 'No') GROUP BY employedetails.pfeligible, departments.department");
                    cmd.Parameters.Add("@m", mainbranch);
                }
            }
            else if (Type == "NONPF")
            {
                if (ChartType == "All Location")
                {
                    cmd = new SqlCommand("SELECT COUNT(employedetails.pfeligible) AS pfeligibleCount, employedetails.pfeligible FROM employedetails INNER JOIN branchmapping ON employedetails.branchid = branchmapping.subbranch WHERE (LEN(employedetails.pfeligible) > 0) AND (employedetails.pfeligible = 'NO') AND (branchmapping.mainbranch = @m) AND (employedetails.status = 'No') GROUP BY employedetails.pfeligible");
                    cmd.Parameters.Add("@m", mainbranch);
                    cmd.Parameters.Add("@VehicleNo", name);
                }
                else if (ChartType == "Location Wise")
                {
                    cmd = new SqlCommand("SELECT COUNT(employedetails.pfeligible) AS pfeligibleCount, employedetails.pfeligible, branchmaster.branchname FROM employedetails INNER JOIN branchmaster ON employedetails.branchid = branchmaster.branchid INNER JOIN branchmapping ON branchmaster.branchid = branchmapping.subbranch WHERE(LEN(employedetails.pfeligible) > 0) AND (employedetails.pfeligible = 'NO') AND (branchmapping.mainbranch = @m) AND (employedetails.status = 'No') GROUP BY employedetails.pfeligible, branchmaster.branchname");
                    cmd.Parameters.Add("@m", mainbranch);
                }
                else if (ChartType == "Department Wise")
                {
                    cmd = new SqlCommand("SELECT COUNT(employedetails.pfeligible) AS pfeligibleCount, employedetails.pfeligible, departments.department FROM employedetails INNER JOIN departments ON employedetails.employee_dept = departments.deptid INNER JOIN branchmapping ON employedetails.branchid = branchmapping.subbranch WHERE (LEN(employedetails.pfeligible) > 0) AND (employedetails.pfeligible = 'NO') AND (branchmapping.mainbranch = @m) AND (employedetails.status = 'No') GROUP BY employedetails.pfeligible, departments.department");
                    cmd.Parameters.Add("@m", mainbranch);
                }
            }
            DataTable dtble = vdm.SelectQuery(cmd).Tables[0];
            if (dtble.Rows.Count > 0)
            {
                foreach (DataRow dr in dtble.Rows)
                {
                    string Date = "";
                    int count = 0;
                    if (ChartType == "All Location")
                    {
                        xvaluestr += dr["pfeligible"].ToString() + ',';
                        yvaluestr += dr["pfeligibleCount"].ToString() + ',';
                        count++;
                    }
                    else if (ChartType == "Location Wise")
                    {
                        xvaluestr += dr["branchname"].ToString() + ',';
                        yvaluestr += dr["pfeligibleCount"].ToString() + ',';
                        count++;
                    }
                    else if (ChartType == "Department Wise")
                    {
                        xvaluestr += dr["department"].ToString() + ',';
                        yvaluestr += dr["pfeligibleCount"].ToString() + ',';
                        count++;
                    }
                }
                xvaluestr = xvaluestr.Substring(0, xvaluestr.Length - 1);
                yvaluestr = yvaluestr.Substring(0, yvaluestr.Length - 1);
                if (Type == "PF")
                {
                    Status = "EmployeePF";
                }
                else if (Type == "NONPF")
                {
                    Status = "EmployeeNONPF";
                }
                PFwiselinechartC.xvaluestr = xvaluestr;
                PFwiselinechartC.yvaluestr = yvaluestr;
                PFwiselinechartC.Status = Status;
                PFwiselinechartL.Add(PFwiselinechartC);
                string respnceString = GetJson(PFwiselinechartL);
                context.Response.Write(respnceString);
            }
        }
        catch
        {
        }
    }

    private void Agewiselinechartclick(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            string mainbranch = context.Session["mainbranch"].ToString();
            string branchid = context.Session["branchid"].ToString();
            string name = context.Request["name"];
            string ChartType = context.Request["ChartType"];
            string FormName = context.Request["FormName"];
            string xvaluestr = string.Empty;
            string yvaluestr = string.Empty;
            string Status = string.Empty;
            Locationwiswsalary LocationwiswsalC = new Locationwiswsalary();
            List<Locationwiswsalary> LocationwiswsalL = new List<Locationwiswsalary>();
            if (ChartType == "Location Wise")
            {
                cmd = new SqlCommand("SELECT  DATEDIFF(Year, t1.joindate, t2.Cdate) + ISNULL(t1.age, 0) AS Age1, t1.employee_num, t1.joindate, t2.Cdate, ISNULL(t1.age, 0) AS A FROM (SELECT  ISNULL(CONVERT(DateTime, dob, 6), 0) AS joindate, age, employee_num FROM employedetails WHERE (branchid = @branchid)) AS t1 LEFT OUTER JOIN (SELECT  ISNULL(CONVERT(DateTime, GETDATE(), 6), 0) AS Cdate) AS t2 ON t2.Cdate = t2.Cdate ORDER BY t1.employee_num");
                cmd.Parameters.Add("@branchid", name);
                cmd.Parameters.Add("@m", mainbranch);
            }
            if (ChartType == "Department Wise")
            {
                cmd = new SqlCommand("SELECT t1.bid ,t2.branchname AS branchname,t1.Netpay AS Netpay  FROM (SELECT SUM(CAST(netpay as numeric(9,2))) AS Netpay,branchid AS bid FROM monthlysalarystatement  Where month between @d1 AND @d2 AND branchid is not null group by branchid ) AS t1 LEFT JOIN (SELECT branchid,branchname FROM branchmaster ) AS t2 ON t1.bid=t2.branchid order by t1.bid ");
                cmd.Parameters.Add("@BranchID", branchid);
            }
            DataTable dtble = vdm.SelectQuery(cmd).Tables[0];
            if (dtble.Rows.Count > 0)
            {
                foreach (DataRow dr in dtble.Rows)
                {
                    string Date = "";
                    int count = 0;
                    int temp = 10;
                    int i = 0;
                    if (FormName == "Linechartsalary")
                    {
                        if (ChartType == "Location Wise")
                        {
                            xvaluestr += dr["Age1"].ToString() + ',';
                            for (
                                i = 0; i < temp; i++)
                            {
                                yvaluestr += temp;
                            }
                            count++;
                        }
                        if (ChartType == "Department Wise")
                        {
                            xvaluestr += dr["branchname"].ToString() + ',';
                            yvaluestr += dr["Netpay"].ToString() + ',';
                            count++;
                        }
                    }
                }
                xvaluestr = xvaluestr.Substring(0, xvaluestr.Length - 1);
                yvaluestr = yvaluestr.Substring(0, yvaluestr.Length - 1);
                Status = "NetSalary";
                LocationwiswsalC.xvaluestr = xvaluestr;
                LocationwiswsalC.yvaluestr = yvaluestr;
                LocationwiswsalC.Status = Status;
                LocationwiswsalL.Add(LocationwiswsalC);
                string respnceString = GetJson(LocationwiswsalL);
                context.Response.Write(respnceString);
            }
        }
        catch
        {
        }
    }
    private void Addtionwiselinechartclick(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            DateTime ServerDateCurrentdate = DBManager.GetTime(vdm.conn);
            string mainbranch = context.Session["mainbranch"].ToString();
            string name = context.Request["name"];
            string FormName = context.Request["FormName"];
            string ChartType = context.Request["ChartType"];
            string frommonth = context.Request["frommonth"];
            DateTime dtfrom = DateTime.Now.AddMonths(-1);
            string tomonth = context.Request["tomonth"];
            DateTime dtto = DateTime.Now.AddMonths(-1);
            string xvaluestr = string.Empty;
            string yvaluestr = string.Empty;
            string Status = string.Empty;
            Locationwiswsalary LocationwiswsalC = new Locationwiswsalary();
            List<Locationwiswsalary> LocationwiswsalL = new List<Locationwiswsalary>();
            if (ChartType == "Location Wise")
            {
                cmd = new SqlCommand("SELECT employee_num, empid, fullname, joindate FROM employedetails Where branchid=@branchid AND joindate between @d1 AND @d2 order by joindate");
                cmd.Parameters.Add("@branchid", name);
                cmd.Parameters.Add("@d1", frommonth);
                cmd.Parameters.Add("@d2", tomonth);
            }
            else if (ChartType == "Department Wise")
            {
                cmd = new SqlCommand("SELECT t1.bid ,t2.branchname AS branchname,t1.Netpay AS Netpay  FROM (SELECT SUM(CAST(netpay as numeric(9,2))) AS Netpay,branchid AS bid FROM monthlysalarystatement  Where month between @d1 AND @d2 AND branchid is not null group by branchid ) AS t1 LEFT JOIN (SELECT branchid,branchname FROM branchmaster ) AS t2 ON t1.bid=t2.branchid order by t1.bid ");
                cmd.Parameters.Add("@d1", frommonth);
                cmd.Parameters.Add("@d2", tomonth);
            }

            DataTable dtble = vdm.SelectQuery(cmd).Tables[0];
            if (dtble.Rows.Count > 0)
            {
                foreach (DataRow dr in dtble.Rows)
                {
                    string Date = "";
                    int count = 0;
                    if (FormName == "Linechartsalary")
                    {
                        if (ChartType == "Location Wise")
                        {
                            xvaluestr += dr["fullname"].ToString() + ',';
                            yvaluestr += dr["empid"].ToString() + ',';
                            count++;
                        }
                        else if (ChartType == "Department Wise")
                        {
                            xvaluestr += dr["fullname"].ToString() + ',';
                            yvaluestr += dr["Netpay"].ToString() + ',';
                            count++;
                        }

                    }
                }
                xvaluestr = xvaluestr.Substring(0, xvaluestr.Length - 1);
                yvaluestr = yvaluestr.Substring(0, yvaluestr.Length - 1);
                Status = "name";
                LocationwiswsalC.xvaluestr = xvaluestr;
                LocationwiswsalC.yvaluestr = yvaluestr;
                LocationwiswsalC.Status = Status;
                LocationwiswsalL.Add(LocationwiswsalC);
                string respnceString = GetJson(LocationwiswsalL);
                context.Response.Write(respnceString);
            }
        }
        catch
        {
        }
    }
    public class getHrJoinapproval
    {
        public string employeid { get; set; }
        public string fullname { get; set; }
        public string status { get; set; }
        public string mobilenumbr { get; set; }
        public string empcode { get; set; }
    }
    private void get_hrjoinnemployee(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            //brnchmapping
            string mainbranch = context.Session["mainbranch"].ToString();
            cmd = new SqlCommand("SELECT TOP (10) employedetails.empid, employedetails.employee_num, employedetails.fullname, employedetails.joindate, employedetails.status,CONVERT(nvarchar(15),'9490003933') AS mobilenumbr FROM employedetails INNER JOIN branchmapping ON employedetails.branchid = branchmapping.subbranch WHERE (employedetails.status = 'yes') AND (branchmapping.mainbranch = @m)");
            cmd.Parameters.Add("@m", mainbranch);
            //branchwise
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<getHrJoinapproval> tdsdetaileslist = new List<getHrJoinapproval>();
            foreach (DataRow dr in routes.Rows)
            {

                getHrJoinapproval gettds = new getHrJoinapproval();
                //gettds.sno = dr["sno"].ToString();
                gettds.empcode = dr["employee_num"].ToString();
                gettds.employeid = dr["empid"].ToString();
                gettds.fullname = dr["fullname"].ToString();
                gettds.status = dr["status"].ToString();
                gettds.mobilenumbr = dr["mobilenumbr"].ToString();
                tdsdetaileslist.Add(gettds);
            }
            string response = GetJson(tdsdetaileslist);
            context.Response.Write(response);
        }
        catch
        {
        }
    }


    private void save_hremployee_approve_click(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            DateTime ServerDateCurrentdate = DBManager.GetTime(vdm.conn);
            //string sno = context.Request["sno"];
            string empid = context.Request["empid"];
            cmd = new SqlCommand("update employedetails set status='NO' where empid=@empid");
            cmd.Parameters.Add("@empid", empid);
            //vdm.Update(cmd);
            string msg = " Employee JOin Aporval successfully Approved";
            string Response = GetJson(msg);
            context.Response.Write(Response);
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);

        }
    }

    public void Otpupdate(string mno, string otp, string edate, string uniqid)
    {
        try
        {
            vdm = new DBManager();
            string proid = "HRMS";
            string frmmid = "EmployeeJoinApproval";
            string userid = "naseema";
            int s = 1;
            cmd = new SqlCommand("INSERT INTO VysAuthentication(val1,val2,val3,val4,val5,val6,val7,val8,val9,val10) VALUES(@val1,@val2,@val3,@val4,@val5,@val6,@val7,@val8,@val9,@val10)");
            cmd.Parameters.Add("@val1", mno);
            cmd.Parameters.Add("@val2", otp);
            cmd.Parameters.Add("@val3", edate);
            cmd.Parameters.Add("@val4", proid);
            cmd.Parameters.Add("@val5", frmmid);
            cmd.Parameters.Add("@val6", userid);
            cmd.Parameters.Add("@val7", uniqid);
            cmd.Parameters.Add("@val8", "1");
            cmd.Parameters.Add("@val9", "1");
            cmd.Parameters.Add("@val10", s);
            // cmd.ExecuteNonQuery();
            vdm.insert(cmd);
        }
        catch (Exception ex)
        {
            ex.ToString();
        }
    }
    private string Encrypt(string clearText)
    {
        string EncryptionKey = "V99Y34S44H9N0A0V6I";
        byte[] clearBytes = Encoding.Unicode.GetBytes(clearText);
        using (Aes encryptor = Aes.Create())
        {
            Rfc2898DeriveBytes pdb = new Rfc2898DeriveBytes(EncryptionKey, new byte[] { 0x49, 0x76, 0x61, 0x6e, 0x20, 0x4d, 0x65, 0x64, 0x76, 0x65, 0x64, 0x65, 0x76 });
            encryptor.Key = pdb.GetBytes(32);
            encryptor.IV = pdb.GetBytes(16);
            using (MemoryStream ms = new MemoryStream())
            {
                using (CryptoStream cs = new CryptoStream(ms, encryptor.CreateEncryptor(), CryptoStreamMode.Write))
                {
                    cs.Write(clearBytes, 0, clearBytes.Length);
                    cs.Close();
                }
                clearText = Convert.ToBase64String(ms.ToArray());
            }
        }
        return clearText;
    }
    private DataTable getmobineno()
    {
        string mobileno = string.Empty;
        //string mainbranch = context.Session["mainbranch"].ToString();
        cmd = new SqlCommand("SELECT sno, mobilenumber FROM OTPAuthtication");
        //cmd.Parameters.Add("@m", mobileno);
        DataTable mblnum = vdm.SelectQuery(cmd).Tables[0];
        //foreach (DataRow dr in routes.Rows)
        //{
        //}
        return mblnum;

    }

    private void otp_approve_click(HttpContext context)
    {
        try
        {

            //   
            string Id = string.Empty;
            string no = "";
            DataTable mblnum1 = getmobineno();
            if (mblnum1.Rows.Count > 0)
            {
                foreach (DataRow dr in mblnum1.Rows)
                {
                    no = dr["mobilenumber"].ToString();
                }
            }
            //string no = getmobineno();
            string empid = context.Request["employeid"];
            //string empid = "38";//context.Request["FormName"]; 
            string numbers = "1234567890";

            string characters = numbers;

            int length = 6;
            string otp = string.Empty;
            for (int i = 0; i < length; i++)
            {
                string character = string.Empty;
                do
                {
                    int index = new Random().Next(0, characters.Length);
                    character = characters.ToCharArray()[index].ToString();
                } while (otp.IndexOf(character) != -1);
                otp += character;
            }

            DateTime sdt = DBManager.GetTime(vdm.conn);


            int h = Convert.ToInt32(sdt.ToString("HH"));
            int m = 0;
            string otpexptime = string.Empty;
            string sss = string.Empty;
            string mm = string.Empty;
            m = Convert.ToInt32(sdt.ToString("mm")) + 3;
            int ss = Convert.ToInt32(sdt.ToString("ss"));
            if (ss > 60)
            {
                ss = ss - 60;
            }
            if (ss < 10)
            {
                sss = "0" + m.ToString();
            }
            if (m > 60)
            {
                m = m - 60;
            }
            if (m < 10)
            {

                if (ss < 10)
                {
                    mm = "0" + m.ToString();
                    otpexptime = h.ToString() + ":" + mm.ToString() + ":" + sss.ToString();
                }
                else
                {
                    mm = m.ToString();
                    otpexptime = h.ToString() + ":" + mm.ToString() + ":" + ss.ToString();
                }
            }
            else
            {
                if (ss < 10)
                {
                    otpexptime = h.ToString() + ":" + m.ToString() + ":" + sss.ToString();
                }
                else
                {
                    otpexptime = h.ToString() + ":" + m.ToString() + ":" + ss.ToString();
                }

            }

            //Otpupdate(string mno,string otp,string edate,string proid,string frmmid,string userid,string uid,int s=1)
            Otpupdate(no, otp, otpexptime, empid);
            Id = Encrypt(no.Trim());

            string hyperlink = "http://49.50.65.160/fp/OTP.aspx?Id=" + Id.Trim();
            //Process.Start("IEXPLORE.EXE", hyperlink);
            //  Process.Start("chrome.exe", hyperlink);

            // Process.Start("chrome.exe", "http://49.50.65.160/FLEET/Default3.aspx?Id=" + Id);
            string message1 = "OTP for  " + empid + "  Billproceed  transaction is : " + otp + ". Valid till " + otpexptime + "  Do not share OTP for security reasons.";
            string strUrl = " http://www.smsstriker.com/API/sms.php?username=vaishnavidairy&password=vyshnavi123&from=VYSNVI&to=" + no + "&msg=" + message1 + "&type=1 ";
            //string strUrl = "";
            WebRequest request = HttpWebRequest.Create(strUrl);
            HttpWebResponse response = (HttpWebResponse)request.GetResponse();
            Stream s = (Stream)response.GetResponseStream();
            StreamReader readStream = new StreamReader(s);
            string dataString = readStream.ReadToEnd();
            response.Close();
            s.Close();
            readStream.Close();
            //  string msg = " OTP SEND MSG successfully";
            string msg = hyperlink;
            string Response = GetJson(msg);
            context.Response.Write(Response);
        }
        catch (Exception ex)
        {
            string response = GetJson(ex);
            context.Response.Write(response);
        }
    }
    public void Fpinsert(string empid, string otp, string edate, string uniqid)
    {
        try
        {
            vdm = new DBManager();
            string proid = "HRMS";
            string frmmid = "EmployeeJoinApproval";
            string userid = "naseema";
            int s = 1;
            cmd = new SqlCommand("INSERT INTO VysAuthentication(val1,val2,val3,val4,val5,val6,val7,val8,val9,val10) VALUES(@val1,@val2,@val3,@val4,@val5,@val6,@val7,@val8,@val9,@val10)");
            cmd.Parameters.Add("@val1", empid);
            cmd.Parameters.Add("@val2", otp);
            cmd.Parameters.Add("@val3", edate);
            cmd.Parameters.Add("@val4", proid);
            cmd.Parameters.Add("@val5", frmmid);
            cmd.Parameters.Add("@val6", userid);
            cmd.Parameters.Add("@val7", uniqid);
            cmd.Parameters.Add("@val8", "1");
            cmd.Parameters.Add("@val9", "1");
            cmd.Parameters.Add("@val10", s);
            vdm.insert(cmd);
        }
        catch (Exception ex)
        {
            ex.ToString();
        }
    }
    protected void FP_approve_click(HttpContext context)
    {
        //no=Empid
        try
        {
            string Id = string.Empty;
            string no = "38";//context.Request["FormName"];
            string empid = "38";//context
            string otp = string.Empty;//otp not use
            string numbers = "1234567890";
            string characters = numbers;
            int length = 6;
            for (int i = 0; i < length; i++)
            {
                string character = string.Empty;
                do
                {
                    int index = new Random().Next(0, characters.Length);
                    character = characters.ToCharArray()[index].ToString();
                } while (otp.IndexOf(character) != -1);
                otp += character;
            }
            //Time Set
            DateTime sdt = DBManager.GetTime(vdm.conn);
            //DateTime sdt = serverdt();
            int h = Convert.ToInt32(sdt.ToString("HH"));
            int m = 0;
            string otpexptime = string.Empty;
            string sss = string.Empty;
            string mm = string.Empty;
            m = Convert.ToInt32(sdt.ToString("mm")) + 3;
            int ss = Convert.ToInt32(sdt.ToString("ss"));
            if (ss > 60)
            {
                ss = ss - 60;
            }
            if (ss < 10)
            {
                sss = "0" + m.ToString();
            }

            if (m > 60)
            {
                m = m - 60;
            }
            if (m < 10)
            {

                if (ss < 10)
                {
                    mm = "0" + m.ToString();
                    otpexptime = h.ToString() + ":" + mm.ToString() + ":" + sss.ToString();
                }
                else
                {
                    mm = m.ToString();
                    otpexptime = h.ToString() + ":" + mm.ToString() + ":" + ss.ToString();
                }
            }
            else
            {
                if (ss < 10)
                {
                    otpexptime = h.ToString() + ":" + m.ToString() + ":" + sss.ToString();
                }
                else
                {
                    otpexptime = h.ToString() + ":" + m.ToString() + ":" + ss.ToString();
                }
            }


            Fpinsert(no, otp, otpexptime, empid);
            Id = Encrypt(no.Trim());

            string hyperlink = "http://49.50.65.160/fp/Fp.aspx?Id=" + Id.Trim();
            Process.Start("IEXPLORE.EXE", hyperlink);
        }
        catch (Exception ex)
        {


        }
    }


    private void save_form_click(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            string projectmodule = context.Request["projectmodule"];
            //string Reason = context.Request["Reason"];
            DateTime ServerDateCurrentdate = DBManager.GetTime(vdm.conn);
            string fromname = context.Request["fromname"];
            string btnval = context.Request["btnval"];
            if (btnval == "Save")
            {
                cmd = new SqlCommand("insert into Formmaster (projectmodule,fromname,doe) values (@projectmodule,@fromname,@doe)");
                cmd.Parameters.Add("@fromname", fromname);
                cmd.Parameters.Add("@projectmodule", projectmodule);
                cmd.Parameters.Add("@doe", ServerDateCurrentdate);
                vdm.insert(cmd);
                string response = GetJson("Insert Successfully");
                context.Response.Write(response);
            }
            else
            {
                string fromid = context.Request["fromid"];
                cmd = new SqlCommand("Update Formmaster set  projectmodule=@projectmodule,fromname=@fromname,doe=@doe where formid=@formid");
                cmd.Parameters.Add("@projectmodule", projectmodule);
                cmd.Parameters.Add("@fromname", fromname);
                cmd.Parameters.Add("@doe", ServerDateCurrentdate);
                cmd.Parameters.Add("@formid", fromid);
                vdm.Update(cmd);
                string response = GetJson("UPDATE Successfully");
                context.Response.Write(response);
            }
        }
        catch (Exception ex)
        {
            string response = GetJson(ex.Message);
            context.Response.Write(response);
        }
    }
    public class fromdetailes
    {
        public int fromid { get; set; }
        public string fromname { get; set; }
        public string projectmodule { get; set; }
        public string loginname { get; set; }

    }
    private void get_Form_details(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            cmd = new SqlCommand("SELECT formid, projectmodule, fromname FROM Formmaster ");
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<fromdetailes> Departmentslst = new List<fromdetailes>();
            foreach (DataRow dr in routes.Rows)
            {
                fromdetailes getdepts = new fromdetailes();
                getdepts.fromid = Convert.ToInt32(dr["formid"].ToString());
                getdepts.projectmodule = dr["projectmodule"].ToString();
                getdepts.fromname = dr["fromname"].ToString();
                //getdepts.Reason = dr["reason"].ToString();
                Departmentslst.Add(getdepts);
            }
            string response = GetJson(Departmentslst);
            context.Response.Write(response);
        }
        catch
        {
        }
    }
    private void get_loginotp_details(HttpContext context)
    {
        try
        {
            int projectid = 1;
            vdm = new DBManager();
            //string refno = context.Request["refno"];
            cmd = new SqlCommand("SELECT formid, projectmodule, fromname FROM Formmaster GROUP BY formid, projectmodule, fromname");//where refno=@refno
            //cmd.Parameters.Add("@refno", refno);
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<fromdetailes> Departmentslst = new List<fromdetailes>();
            foreach (DataRow dr in routes.Rows)
            {

                fromdetailes getdepts = new fromdetailes();
                getdepts.fromid = Convert.ToInt32(dr["formid"].ToString());
                getdepts.projectmodule = dr["projectmodule"].ToString();
                getdepts.fromname = dr["fromname"].ToString();
                //getdepts.Reason = dr["reason"].ToString();
                if (projectid > 0)
                {
                    vdm = new DBManager(projectid);
                    if (projectid == 1)
                    {
                        cmd = new SqlCommand("SELECT loginid, username, password, empid, leveltype FROM  employe_logins");
                        DataTable routes1 = vdm.SelectQuery(cmd).Tables[0];
                        foreach (DataRow dhra in routes1.Rows)
                        {
                            getdepts.loginname = dhra["username"].ToString();
                        }// dr["username"].ToString();
                    }
                }
                Departmentslst.Add(getdepts);
            }
            string response = GetJson(Departmentslst);
            context.Response.Write(response);
        }
        catch
        {
        }
    }


    private void save_otpauthecation_click(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            string projectmodule = context.Request["projectmodule"];
            string status = context.Request["status"];
            string loginname = context.Request["loginname"];
            string moblenumbr = context.Request["moblenumbr"];
            DateTime ServerDateCurrentdate = DBManager.GetTime(vdm.conn);
            string fromname = context.Request["fromname"];
            string btnval = context.Request["btnval"];
            if (btnval == "Save")
            {
                cmd = new SqlCommand("insert into OTPAuthtication (projectmodule,fromname,mobilenumber,status,doe) values (@projectmodule, @fromname,@mobilenumber,@status,@doe)");
                cmd.Parameters.Add("@fromname", fromname);
                cmd.Parameters.Add("@projectmodule", projectmodule);
                cmd.Parameters.Add("@doe", ServerDateCurrentdate);
                vdm.insert(cmd);
                string response = GetJson("Insert Successfully");
                context.Response.Write(response);
            }
            else
            {
                string fromid = context.Request["fromid"];
                cmd = new SqlCommand("Update OTPAuthtication set projectmodule=@projectmodule, fromname=@fromname,doe=@doe where formid=@formid");
                cmd.Parameters.Add("@projectmodule", projectmodule);
                cmd.Parameters.Add("@fromname", fromname);
                cmd.Parameters.Add("@doe", ServerDateCurrentdate);
                cmd.Parameters.Add("@formid", fromid);
                vdm.Update(cmd);
                string response = GetJson("UPDATE Successfully");
                context.Response.Write(response);
            }
        }
        catch (Exception ex)
        {
            string response = GetJson(ex.Message);
            context.Response.Write(response);
        }
    }



    public void save_ledger_details(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            string ledgername = context.Request["ledgername"];
            //string empcode = context.Request["empcode"];
            string ledgerlimit = context.Request["ledgerlimt"];
            string btn_save = context.Request["btnval"];
            DateTime ServerDateCurrentdate = DBManager.GetTime(vdm.conn);
            if (btn_save == "Save")
            {
                cmd = new SqlCommand("insert into ledgerdetailes (ledgername,doe,ledgerlimt) values (@ledgername,@doe,@ledgerlimt)");
                cmd.Parameters.Add("@ledgername", ledgername);
                cmd.Parameters.Add("@doe", ServerDateCurrentdate);
                //cmd.Parameters.Add("@empcode", empcode);
                cmd.Parameters.Add("@ledgerlimt", ledgerlimit);
                vdm.insert(cmd);
                string msg = "Details successfully saved";
                string Response = GetJson(msg);
                context.Response.Write(Response);
            }
            else
            {
                string sno = context.Request["sno"];
                cmd = new SqlCommand("Update ledgerdetailes set ledgername=@ledgername,doe=@doe,ledgerlimt=@ledgerlimt where sno=@sno");
                cmd.Parameters.Add("@ledgername", ledgername);
                //cmd.Parameters.Add("@empcode", empcode);
                cmd.Parameters.Add("@ledgerlimt", ledgerlimit);
                cmd.Parameters.Add("@doe", ServerDateCurrentdate);
                cmd.Parameters.Add("@sno", sno);
                vdm.Update(cmd);
                string msg = "Details successfully updated";
                string Response = GetJson(msg);
                context.Response.Write(Response);
            }
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }

    public class ledgertype
    {
        public string ledgername { get; set; }
        public string ledgerlimt { get; set; }
        public string sno { get; set; }
    }

    private void get_ledger_detailes(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            string mainbranch = context.Session["mainbranch"].ToString();
            cmd = new SqlCommand("SELECT sno,ledgername,ledgerlimt FROM ledgerdetailes");
            cmd.Parameters.Add("@m", mainbranch);
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<ledgertype> ContactMasterlist = new List<ledgertype>();
            foreach (DataRow dr in routes.Rows)
            {
                ledgertype getcontacttype = new ledgertype();
                getcontacttype.ledgername = dr["ledgername"].ToString();
                getcontacttype.ledgerlimt = dr["ledgerlimt"].ToString();
                getcontacttype.sno = dr["sno"].ToString();
                ContactMasterlist.Add(getcontacttype);
            }
            string response = GetJson(ContactMasterlist);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }



    public class CollectionMaster
    {
        public string reportingname { get; set; }
        public string empid { get; set; }
        public string empcode { get; set; }
        public string fromdate { get; set; }
        public string todate { get; set; }
        public string fromlocation { get; set; }
        public string tolocation { get; set; }
        public string instructionby { get; set; }
        public string purpose { get; set; }
        public string approvedby { get; set; }
        public string doe { get; set; }
        public string totalamount { get; set; }
        public string sno { get; set; }
        public string btnval { get; set; }
        public List<Collectionsubdetails> colleciondetails { get; set; }
    }

    public class Collectionsubdetails
    {
        public string SNo { get; set; }
        public string Account { get; set; }
        public string amount { get; set; }
        public string remarks { get; set; }
    }

    public class Collections
    {
        public string reportingname { get; set; }
        public string empid { get; set; }
        public string empcode { get; set; }
        public string fromdate { get; set; }
        public string todate { get; set; }
        public string fromlocation { get; set; }
        public string tolocation { get; set; }
        public string instructionby { get; set; }
        public string purpose { get; set; }
        public string approvedby { get; set; }
        public string doe { get; set; }
        public string totalamount { get; set; }
        public string sno { get; set; }
        public string headid { get; set; }
        public string fullname { get; set; }
        public string aupporvebyname { get; set; }
        public string btnval { get; set; }
    }

    public class Collectiondetails
    {
        public string SNo { get; set; }
        public string Account { get; set; }
        public string amount { get; set; }
        public string subsno { get; set; }
        public string remarks { get; set; }
    }

    private void save_travelexpenses_click(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            var js = new JavaScriptSerializer();
            var title1 = context.Request.Params[1];
            CollectionMaster obj = js.Deserialize<CollectionMaster>(title1);
            DateTime ServerDateCurrentdate = DBManager.GetTime(vdm.conn);
            //string UserName = context.Session["UserSno"].ToString();
            string entryby = context.Session["empid"].ToString();
            string branchid = context.Session["branchid"].ToString();
            string reportingname = obj.reportingname;
            string empid = obj.empid;
            string empcode = obj.empcode;
            string fromdate = obj.fromdate;
            string todate = obj.todate;
            string fromlocation = obj.fromlocation;
            string tolocation = obj.tolocation;
            string instructionby = obj.instructionby;
            string purpose = obj.purpose;
            string totalamount = obj.totalamount;
            string approvedby = obj.approvedby;
            string btn_save = obj.btnval;
            string sno = obj.sno;
            if (btn_save == "Save")
            {
                cmd = new SqlCommand("insert into travel_expenses (reportingname, empid,empcode,fromdate, todate, fromlocation, tolocation, purpose,instructionby,approvedby,doe,totalamount,entryby,branchid,status) values (@reportingname,@empid,@empcode, @fromdate, @todate, @fromlocation, @tolocation, @purpose,@instructionby,@approvedby,@doe,@totalamount,@entryby,@branchid,@status)");
                cmd.Parameters.Add("@reportingname", reportingname);
                cmd.Parameters.Add("@empid", empid);
                cmd.Parameters.Add("@empcode", empcode);
                cmd.Parameters.Add("@fromdate", fromdate);
                cmd.Parameters.Add("@todate", todate);
                cmd.Parameters.Add("@fromlocation", fromlocation);
                cmd.Parameters.Add("@tolocation", tolocation);
                cmd.Parameters.Add("@purpose", purpose);
                cmd.Parameters.Add("@instructionby", instructionby);
                cmd.Parameters.Add("@approvedby", approvedby);
                cmd.Parameters.Add("@doe", ServerDateCurrentdate);
                cmd.Parameters.Add("@totalamount", totalamount);
                cmd.Parameters.Add("@entryby", entryby);
                cmd.Parameters.Add("@branchid", branchid);
                cmd.Parameters.Add("@status", 'R');
                vdm.insert(cmd);
                cmd = new SqlCommand("Select max(sno) as sno From travel_expenses");
                DataTable dtcollection = vdm.SelectQuery(cmd).Tables[0];
                string refsno = dtcollection.Rows[0]["sno"].ToString();
                foreach (Collectionsubdetails si in obj.colleciondetails)
                {
                    cmd = new SqlCommand("insert into sub_travelexpenses (refno, ledger_id, amount,remarks) values (@refno, @ledger_id, @amount,@remarks)");
                    cmd.Parameters.Add("@refno", refsno);
                    cmd.Parameters.Add("@ledger_id", si.SNo);
                    cmd.Parameters.Add("@amount", si.amount);
                    cmd.Parameters.Add("@remarks", si.remarks);
                    vdm.insert(cmd);
                }
                string msg = "successfully Inserted";
                string Response = GetJson(msg);
                context.Response.Write(Response);
            }
            else
            {
                cmd = new SqlCommand("UPDATE travel_expenses SET reportingname=@reportingname, empid=@empid,empcode=@empcode,fromdate=@fromdate, todate=@todate, fromlocation=@fromlocation, tolocation=@tolocation,purpose=@purpose,instructionby=@instructionby,approvedby=@approvedby,doe=@doe,totalamount=@totalamount,entryby=@entryby,branchid=@branchid,status=@status WHERE sno=@sno");
                cmd.Parameters.Add("@reportingname", reportingname);
                cmd.Parameters.Add("@empid", empid);
                cmd.Parameters.Add("@empcode", empcode);
                cmd.Parameters.Add("@fromdate", fromdate);
                cmd.Parameters.Add("@todate", todate);
                cmd.Parameters.Add("@fromlocation", fromlocation);
                cmd.Parameters.Add("@tolocation", tolocation);
                cmd.Parameters.Add("@purpose", purpose);
                cmd.Parameters.Add("@instructionby", instructionby);
                cmd.Parameters.Add("@approvedby", approvedby);
                cmd.Parameters.Add("@doe", ServerDateCurrentdate);
                cmd.Parameters.Add("@totalamount", totalamount);
                cmd.Parameters.Add("@entryby", entryby);
                cmd.Parameters.Add("@branchid", branchid);
                cmd.Parameters.Add("@status", 'R');
                cmd.Parameters.Add("@sno", sno);
                vdm.Update(cmd);
                cmd = new SqlCommand("delete from sub_travelexpenses where refno=@Refno");
                cmd.Parameters.Add("@Refno", sno);
                vdm.Delete(cmd);
                foreach (Collectionsubdetails si in obj.colleciondetails)
                {

                    cmd = new SqlCommand("insert into sub_travelexpenses (refno, ledger_id, amount,remarks) values (@refno, @ledger_id, @amount,@remarks)");
                    cmd.Parameters.Add("@refno", sno);
                    cmd.Parameters.Add("@ledger_id", si.SNo);
                    cmd.Parameters.Add("@amount", si.amount);
                    cmd.Parameters.Add("@remarks", si.remarks);
                    vdm.insert(cmd);
                }
                string msg = "successfully Updated";
                string Response = GetJson(msg);
                context.Response.Write(Response);
            }
        }

        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }


    private void get_collections_details(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            DateTime ServerDateCurrentdate = DBManager.GetTime(vdm.conn);
            cmd = new SqlCommand("SELECT  travel_expenses.sno, travel_expenses.reportingname, travel_expenses.fromdate, travel_expenses.todate, travel_expenses.fromlocation, travel_expenses.tolocation, travel_expenses.purpose, travel_expenses.instructionby, travel_expenses.approvedby, travel_expenses.doe, travel_expenses.empid, travel_expenses.empcode, travel_expenses.totalamount, travel_expenses.branchid, travel_expenses.status, employedetails.employee_num, employedetails.fullname, employedetails_1.fullname AS fullname1, employedetails_1.employee_num AS empcode1 FROM  travel_expenses INNER JOIN  employedetails ON travel_expenses.empid = employedetails.empid INNER JOIN  employedetails AS employedetails_1 ON travel_expenses.approvedby = employedetails_1.empid");
            //cmd.Parameters.Add("@d1", GetLowDate(ServerDateCurrentdate.AddDays(-3)));
            //cmd.Parameters.Add("@d2", GetHighDate(ServerDateCurrentdate));
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<Collections> accountdetailslist = new List<Collections>();
            foreach (DataRow dr in routes.Rows)
            {
                Collections getaccountdetails = new Collections();
                getaccountdetails.reportingname = dr["reportingname"].ToString();
                getaccountdetails.fromdate = ((DateTime)dr["fromdate"]).ToString("yyyy-MM-dd"); //dr["fromdate"].ToString();
                getaccountdetails.todate = ((DateTime)dr["todate"]).ToString("yyyy-MM-dd"); //dr["todate"].ToString();
                getaccountdetails.fromlocation = dr["fromlocation"].ToString();
                getaccountdetails.tolocation = dr["tolocation"].ToString();
                getaccountdetails.purpose = dr["purpose"].ToString();
                getaccountdetails.empid = dr["empid"].ToString();
                getaccountdetails.fullname = dr["fullname"].ToString();
                getaccountdetails.instructionby = dr["instructionby"].ToString();
                getaccountdetails.approvedby = dr["approvedby"].ToString();
                getaccountdetails.aupporvebyname = dr["fullname1"].ToString();
                getaccountdetails.doe = dr["doe"].ToString();
                getaccountdetails.sno = dr["sno"].ToString();
                getaccountdetails.totalamount = dr["totalamount"].ToString();
                accountdetailslist.Add(getaccountdetails);
            }
            string response = GetJson(accountdetailslist);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }

    private void get_collectionssubdetails(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            string sno = context.Request["sno"];
            cmd = new SqlCommand("SELECT sub_travelexpenses.sno, sub_travelexpenses.amount, sub_travelexpenses.remarks,sub_travelexpenses.ledger_id, ledgerdetailes.ledgername, ledgerdetailes.ledgerlimt, sub_travelexpenses.refno, sub_travelexpenses.sno AS Expr1 FROM sub_travelexpenses INNER JOIN ledgerdetailes ON sub_travelexpenses.ledger_id = ledgerdetailes.sno WHERE (sub_travelexpenses.refno = @refo)");
            cmd.Parameters.Add("@refo", sno);
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<Collectionsubdetails> accountdetailslist = new List<Collectionsubdetails>();
            foreach (DataRow dr in routes.Rows)
            {
                Collectionsubdetails getaccountdetails = new Collectionsubdetails();
                //getaccountdetails.sno = dr["sno"].ToString();
                // getaccountdetails.accountno = dr["accountname"].ToString();
                getaccountdetails.Account = dr["ledgername"].ToString();
                getaccountdetails.amount = dr["amount"].ToString();
                getaccountdetails.SNo = dr["ledger_id"].ToString();
                getaccountdetails.remarks = dr["remarks"].ToString();
                accountdetailslist.Add(getaccountdetails);
            }
            string response = GetJson(accountdetailslist);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }
    private void btnReceiptPrintClick(HttpContext context)
    {
        try
        {
            context.Session["ReceiptNo"] = context.Request["Receiptno"];
            string msg = "Success";
            string response = GetJson(msg);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string response = GetJson(ex.Message);
            context.Response.Write(response);
        }
    }

    private void GetSubPaybleValues(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            string ReceiptNo = context.Request["ReceiptNo"];
            cmd = new SqlCommand("SELECT sub_travelexpenses.sno, sub_travelexpenses.amount,sub_travelexpenses.remarks, sub_travelexpenses.ledger_id, ledgerdetailes.ledgername, ledgerdetailes.ledgerlimt, sub_travelexpenses.refno, sub_travelexpenses.sno AS Expr1 FROM sub_travelexpenses INNER JOIN ledgerdetailes ON sub_travelexpenses.ledger_id = ledgerdetailes.sno WHERE (sub_travelexpenses.refno = @refo)");
            cmd.Parameters.Add("@refo", ReceiptNo);
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<Collectionsubdetails> accountdetailslist = new List<Collectionsubdetails>();
            foreach (DataRow dr in routes.Rows)
            {
                Collectionsubdetails getaccountdetails = new Collectionsubdetails();
                //getaccountdetails.sno = dr["sno"].ToString();
                // getaccountdetails.accountno = dr["accountname"].ToString();
                getaccountdetails.Account = dr["ledgername"].ToString();
                getaccountdetails.amount = dr["amount"].ToString();
                getaccountdetails.SNo = dr["ledger_id"].ToString();
                getaccountdetails.remarks = dr["remarks"].ToString();
                accountdetailslist.Add(getaccountdetails);
            }
            string response = GetJson(accountdetailslist);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }

    public class attandancedetailes
    {

        public string totalemployes { get; set; }
        public string presentemployes { get; set; }
        public string absentemployes { get; set; }
        public string branchname { get; set; }
        public string fullname { get; set; }
        public string deptname { get; set; }
        public string branch { get; set; }
        public string deptid { get; set; }
        public string branch_id { get; set; }
        public string msg { get; set; }

    }
    public class attandancePieValues
    {
        public List<string> branchname { get; set; }
        public List<string> total { get; set; }
        public List<string> present { get; set; }
        public List<string> absent { get; set; }
    }

    public class agedetailes
    {
        public string age { get; set; }
        public string fullname { get; set; }
        //public string amount { get; set; }
        //public string remarks { get; set; }
    }
    private void get_branchwise_attandance_details(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            string branchid = context.Request["branchid"];
            string company_code = context.Request["company_code"];
            string doe = context.Request["doe"];
            string mainbranch = context.Session["mainbranch"].ToString();
            string branchname = "";
            string branch_id = "";
            List<attandancePieValues> lPieValueslist = new List<attandancePieValues>();
            List<string> totallist = new List<string>();
            List<string> presentlist = new List<string>();
            List<string> absentlist = new List<string>();
            int present = 0;
            int totalpresent = 0;
            int total = 0;
            int absent = 0;
            DateTime dtdoe = Convert.ToDateTime(doe);
            DateTime ServerDateCurrentdate = DBManager.GetTime(vdm.conn);
            string curentdt = Convert.ToDateTime(ServerDateCurrentdate).ToString("MM/dd/yyyy");
            DateTime dt = Convert.ToDateTime(curentdt);
            //if (dtdoe == dt)
            //{
            //    dtdoe = GetLowDate(dtdoe).AddDays(-1);
            //}
            if (company_code == "ALL")
            {
                cmd = new SqlCommand("SELECT   COUNT(*) AS totalemp FROM   employedetails INNER JOIN branchmapping ON employedetails.branchid = branchmapping.subbranch INNER JOIN branchmaster ON employedetails.branchid = branchmaster.branchid INNER JOIN company_master ON branchmaster.company_code = company_master.sno WHERE   (employedetails.status = 'No') AND (employedetails.employee_type = 'Staff') AND (branchmapping.mainbranch <> 0)");
                DataTable dttotalemployes = vdm.SelectQuery(cmd).Tables[0];
                //cmd = new SqlCommand("SELECT COUNT(*) AS present, branchmaster.branchname FROM  dailyattandancedetails INNER JOIN branchmaster ON dailyattandancedetails.branchid = branchmaster.branchid INNER JOIN branchmapping ON branchmaster.branchid = branchmapping.subbranch INNER JOIN company_master ON branchmaster.company_code = company_master.sno WHERE  (branchmapping.mainbranch = @m) AND (dailyattandancedetails.status = 'P') AND (dailyattandancedetails.attendance_date BETWEEN @d1 AND @d2) AND (dailyattandancedetails.emp_type = 'Staff')  GROUP BY branchmaster.branchname");
                cmd = new SqlCommand("SELECT  COUNT(DISTINCT AttendanceLogs.EmpId) AS present, branchmaster.branchname FROM  AttendanceLogs INNER JOIN branchmaster ON AttendanceLogs.BranchId = branchmaster.branchid INNER JOIN employedetails ON AttendanceLogs.EmpId = employedetails.empid INNER JOIN branchmapping ON branchmaster.branchid = branchmapping.subbranch WHERE  (employedetails.status = 'No') AND (employedetails.employee_type = 'Staff') AND (AttendanceLogs.LogDate BETWEEN @d1 AND @d2) AND (branchmapping.mainbranch <> 0) GROUP BY branchmaster.branchname");
                cmd.Parameters.Add("@d1", GetLowDate(dtdoe));
                cmd.Parameters.Add("@d2", GetHighDate(dtdoe));
                DataTable dtpresent = vdm.SelectQuery(cmd).Tables[0];
                if (dtpresent.Rows.Count > 0)
                {
                    foreach (DataRow dr in dtpresent.Rows)
                    {
                        string tpresent = dr["present"].ToString();
                        present = Convert.ToInt32(tpresent);
                        string pres = "" + dr["branchname"].ToString() + "-P";
                        totalpresent += present;
                        absentlist.Add(tpresent);
                        presentlist.Add(pres);
                    }
                }
                if (dttotalemployes.Rows.Count > 0)
                {
                    foreach (DataRow drr in dttotalemployes.Rows)
                    {
                        string temp = drr["totalemp"].ToString();
                        total = Convert.ToInt32(temp);

                        absent = total - totalpresent;
                        absentlist.Add(absent.ToString());
                        string ab = "A";
                        presentlist.Add(ab);
                    }
                }
                attandancePieValues GetPieValues = new attandancePieValues();
                GetPieValues.total = totallist;
                GetPieValues.present = presentlist;
                GetPieValues.absent = absentlist;
                lPieValueslist.Add(GetPieValues);
            }
            else
            {
                if (branchid == "ALL")
                {
                    cmd = new SqlCommand("SELECT    COUNT(*) AS totalemp FROM     employedetails INNER JOIN branchmapping ON employedetails.branchid = branchmapping.subbranch INNER JOIN branchmaster ON employedetails.branchid = branchmaster.branchid INNER JOIN company_master ON branchmaster.company_code = company_master.sno WHERE   (branchmaster.company_code = @company_code) AND (employedetails.status = 'No') AND (employedetails.employee_type = 'Staff')");
                    cmd.Parameters.Add("@company_code", company_code);
                    DataTable dttotalemployes = vdm.SelectQuery(cmd).Tables[0];
                    cmd = new SqlCommand("SELECT  COUNT(DISTINCT AttendanceLogs.EmpId) AS present, branchmaster.branchname FROM   AttendanceLogs INNER JOIN branchmaster ON AttendanceLogs.BranchId = branchmaster.branchid INNER JOIN employedetails ON AttendanceLogs.EmpId = employedetails.empid WHERE  (AttendanceLogs.LogDate BETWEEN @d1 AND @d2) AND (employedetails.status = 'No') AND (employedetails.employee_type = 'Staff') AND (branchmaster.company_code = @companycode) GROUP BY branchmaster.branchname");
                    cmd.Parameters.Add("@companycode", company_code);
                    cmd.Parameters.Add("@d1", GetLowDate(dtdoe));
                    cmd.Parameters.Add("@d2", GetHighDate(dtdoe));
                    DataTable dtpresent = vdm.SelectQuery(cmd).Tables[0];
                    if (dtpresent.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dtpresent.Rows)
                        {
                            string tpresent = dr["present"].ToString();
                            present = Convert.ToInt32(tpresent);
                            string pres = "" + dr["branchname"].ToString() + "-P";
                            totalpresent += present;
                            absentlist.Add(tpresent);
                            presentlist.Add(pres);
                        }
                    }
                    if (dttotalemployes.Rows.Count > 0)
                    {
                        foreach (DataRow drr in dttotalemployes.Rows)
                        {
                            string temp = drr["totalemp"].ToString();
                            total = Convert.ToInt32(temp);

                            absent = total - totalpresent;
                            absentlist.Add(absent.ToString());
                            string ab = "A";
                            presentlist.Add(ab);
                        }
                    }
                    attandancePieValues GetPieValues = new attandancePieValues();
                    GetPieValues.total = totallist;
                    GetPieValues.present = presentlist;
                    GetPieValues.absent = absentlist;
                    lPieValueslist.Add(GetPieValues);
                }
                else
                {
                    cmd = new SqlCommand("SELECT    COUNT(*) AS totalemp FROM     employedetails INNER JOIN branchmapping ON employedetails.branchid = branchmapping.subbranch INNER JOIN branchmaster ON employedetails.branchid = branchmaster.branchid INNER JOIN company_master ON branchmaster.company_code = company_master.sno WHERE  (branchmaster.company_code = @company_code) AND (employedetails.status = 'No') AND (employedetails.employee_type = 'Staff') AND (branchmaster.branchid = @branchid)");
                    cmd.Parameters.Add("@branchid", branchid);
                    cmd.Parameters.Add("@company_code", company_code);
                    DataTable dttotalemployes = vdm.SelectQuery(cmd).Tables[0];
                    cmd = new SqlCommand("SELECT   COUNT(DISTINCT AttendanceLogs.EmpId) AS present, branchmaster.branchname FROM   AttendanceLogs INNER JOIN branchmaster ON AttendanceLogs.BranchId = branchmaster.branchid INNER JOIN employedetails ON AttendanceLogs.EmpId = employedetails.empid WHERE  (AttendanceLogs.LogDate BETWEEN @d1 AND @d2) AND (employedetails.status = 'No') AND (employedetails.employee_type = 'Staff') AND (branchmaster.company_code = @companycode) AND (branchmaster.branchid = @branchid) GROUP BY branchmaster.branchname");
                    cmd.Parameters.Add("@branchid", branchid);
                    cmd.Parameters.Add("@companycode", company_code);
                    cmd.Parameters.Add("@d1", GetLowDate(dtdoe));
                    cmd.Parameters.Add("@d2", GetHighDate(dtdoe));
                    DataTable dtpresent = vdm.SelectQuery(cmd).Tables[0];
                    if (dtpresent.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dtpresent.Rows)
                        {
                            string tpresent = dr["present"].ToString();
                            present = Convert.ToInt32(tpresent);
                            string pres = "" + dr["branchname"].ToString() + "-P";
                            totalpresent += present;
                            absentlist.Add(tpresent);
                            presentlist.Add(pres);
                        }
                    }
                    if (dttotalemployes.Rows.Count > 0)
                    {
                        foreach (DataRow drr in dttotalemployes.Rows)
                        {
                            string temp = drr["totalemp"].ToString();
                            total = Convert.ToInt32(temp);

                            absent = total - totalpresent;
                            absentlist.Add(absent.ToString());
                            string ab = "A";
                            presentlist.Add(ab);
                        }
                    }
                    attandancePieValues GetPieValues = new attandancePieValues();
                    GetPieValues.total = totallist;
                    GetPieValues.present = presentlist;
                    GetPieValues.absent = absentlist;
                    lPieValueslist.Add(GetPieValues);
                }
            }
            string Response = GetJson(lPieValueslist);
            context.Response.Write(Response);
        }
        catch (Exception ex)
        {
        }
    }

    private void generate_attadancebarchart(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            string branchid = context.Request["branchid"];
            string company_code = context.Request["company_code"];
            string doe = context.Request["doe"];
            string mainbranch = context.Session["mainbranch"].ToString();
            List<attandancePieValues> lPieValueslist = new List<attandancePieValues>();
            List<string> totallist = new List<string>();
            List<string> presentlist = new List<string>();
            List<string> branchnamelist = new List<string>();
            int present = 0;
            int total = 0;
            int absent = 0;
            DateTime dtdoe = Convert.ToDateTime(doe);
            DateTime ServerDateCurrentdate = DBManager.GetTime(vdm.conn);
            string curentdt = Convert.ToDateTime(ServerDateCurrentdate).ToString("MM/dd/yyyy");
            DateTime dt = Convert.ToDateTime(curentdt);
            //if (dtdoe == dt)
            //{
            //    dtdoe = GetLowDate(dtdoe).AddDays(-1);
            //}
            if (branchid == "ALL")
            {
                //cmd = new SqlCommand("SELECT Count(*) AS totalemp FROM employedetails WHERE status='No'");
                cmd = new SqlCommand("SELECT COUNT(*) AS totalemp FROM employedetails INNER JOIN branchmapping ON employedetails.branchid = branchmapping.subbranch INNER JOIN branchmaster ON employedetails.branchid = branchmaster.branchid INNER JOIN company_master ON branchmaster.company_code = company_master.sno WHERE (branchmapping.mainbranch = @m) AND (employedetails.status = 'No') AND (branchmaster.company_code = @company)");
                cmd.Parameters.Add("@m", mainbranch);
                cmd.Parameters.Add("@company", company_code);
                DataTable dttotalemployes = vdm.SelectQuery(cmd).Tables[0];
                cmd = new SqlCommand("SELECT COUNT(*) AS present, branchmaster.branchname FROM dailyattandancedetails INNER JOIN branchmaster ON dailyattandancedetails.branchid = branchmaster.branchid INNER JOIN branchmapping ON branchmaster.branchid = branchmapping.subbranch INNER JOIN company_master ON branchmaster.company_code = company_master.sno WHERE (dailyattandancedetails.status = 'P') AND (dailyattandancedetails.attendance_date BETWEEN @d1 AND @d2) AND (branchmapping.mainbranch = @m) AND (branchmaster.company_code = @company) GROUP BY branchmaster.branchname");
                //cmd = new SqlCommand("SELECT  COUNT(*) AS present, branchmaster.branchname FROM dailyattandancedetails INNER JOIN branchmaster ON dailyattandancedetails.branchid = branchmaster.branchid INNER JOIN branchmapping ON branchmaster.branchid = branchmapping.subbranch WHERE (dailyattandancedetails.status = 'P') AND (dailyattandancedetails.attendance_date BETWEEN @d1 AND @d2) AND (branchmapping.mainbranch = @m) GROUP BY branchmaster.branchname");
                //cmd.Parameters.Add("@bid", branchid);
                cmd.Parameters.Add("@m", mainbranch);
                cmd.Parameters.Add("@company", company_code);
                cmd.Parameters.Add("@d1", GetLowDate(dtdoe));
                cmd.Parameters.Add("@d2", GetHighDate(dtdoe));
                DataTable dtpresent = vdm.SelectQuery(cmd).Tables[0];
                if (dtpresent.Rows.Count > 0)
                {
                    foreach (DataRow dr in dtpresent.Rows)
                    {
                        string tpresent = dr["present"].ToString();
                        present = Convert.ToInt32(tpresent);
                        // tpresent = dr["present"].ToString() + dr["branchname"].ToString();
                        presentlist.Add(tpresent);
                        string branchname = dr["branchname"].ToString();
                        branchnamelist.Add(branchname);
                    }
                }

                attandancePieValues GetPieValues = new attandancePieValues();
                GetPieValues.total = totallist;
                GetPieValues.present = presentlist;
                GetPieValues.branchname = branchnamelist;
                lPieValueslist.Add(GetPieValues);
                string errresponse = GetJson(lPieValueslist);
                context.Response.Write(errresponse);
            }
        }
        catch
        {
        }
    }

    private void get_branchwise_attandance(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            string branchid = context.Request["branchid"];
            string company_code = context.Request["company_code"];
            string mainbranch = context.Session["mainbranch"].ToString();
            string doe = context.Request["doe"];
            List<attandancedetailes> attlst = new List<attandancedetailes>();
            int present = 0;
            int total = 0;
            int absent = 0;
            string branchname = "";
            string branch_id = "";
            DateTime dtdoe = Convert.ToDateTime(doe);
            DateTime ServerDateCurrentdate = DBManager.GetTime(vdm.conn);
            string curentdt = Convert.ToDateTime(ServerDateCurrentdate).ToString("MM/dd/yyyy");
            DateTime dt = Convert.ToDateTime(curentdt);
            //if (dtdoe == dt)
            //{
            //    dtdoe = GetLowDate(dtdoe).AddDays(-1);
            //}
            DataTable dttotalemployes = new DataTable();
            DataTable dtpresent = new DataTable();
            DataTable dtlogs = new DataTable();
            DataTable dtbranch = new DataTable();

            if (company_code == "ALL")
            {
                cmd = new SqlCommand("SELECT  branchmaster.branchname, branchmaster.branchid, company_master.companyname FROM  branchmaster INNER JOIN branchmapping ON branchmaster.branchid = branchmapping.subbranch INNER JOIN company_master ON branchmaster.company_code = company_master.sno WHERE (branchmapping.mainbranch =@mainbranch) AND (branchmapping.mainbranch <> 0) GROUP BY branchmaster.branchname, branchmaster.branchid, company_master.companyname");
                cmd.Parameters.Add("@mainbranch", mainbranch); 
                dtbranch = vdm.SelectQuery(cmd).Tables[0];
                if (dtbranch.Rows.Count > 0)
                {
                    foreach (DataRow dr in dtbranch.Rows)
                    {
                        string branch = dr["branchname"].ToString();
                        branch_id = dr["branchid"].ToString();
                        branchname = branch;
                        cmd = new SqlCommand("SELECT   COUNT(*) AS totalemp FROM   employedetails INNER JOIN branchmapping ON employedetails.branchid = branchmapping.subbranch WHERE (employedetails.branchid = @branchid) AND (employedetails.status = 'No')");
                        cmd.Parameters.Add("@branchid", branch_id);
                        dttotalemployes = vdm.SelectQuery(cmd).Tables[0];
                        if (dttotalemployes.Rows.Count > 0)
                        {
                            foreach (DataRow drr in dttotalemployes.Rows)
                            {
                                string temp = drr["totalemp"].ToString();//totalemployee
                                total = Convert.ToInt32(temp);
                            }
                        }
                        cmd = new SqlCommand("SELECT COUNT(DISTINCT EmpId) AS totalemplogs FROM   AttendanceLogs WHERE (BranchId = @branchid) AND (LogDate BETWEEN @d1 AND @d2)");
                        cmd.Parameters.Add("@branchid", branch_id);
                        cmd.Parameters.Add("@d1", GetLowDate(dtdoe));
                        cmd.Parameters.Add("@d2", GetHighDate(dtdoe));
                        dtlogs = vdm.SelectQuery(cmd).Tables[0];
                        string totalemplogs = dtlogs.Rows[0]["totalemplogs"].ToString();
                        //cmd = new SqlCommand("SELECT COUNT(*) AS present FROM dailyattandancedetails INNER JOIN branchmapping ON dailyattandancedetails.branchid = branchmapping.subbranch INNER JOIN branchmaster ON dailyattandancedetails.branchid = branchmaster.branchid INNER JOIN company_master ON branchmaster.company_code = company_master.sno WHERE (dailyattandancedetails.status = 'P') AND (dailyattandancedetails.branchid = @branchid) AND (dailyattandancedetails.attendance_date BETWEEN @d1 AND @d2) AND (branchmapping.mainbranch = @m)");
                        cmd = new SqlCommand("SELECT  COUNT(DISTINCT AttendanceLogs.EmpId) AS present FROM   AttendanceLogs INNER JOIN branchmaster ON AttendanceLogs.BranchId = branchmaster.branchid INNER JOIN employedetails ON AttendanceLogs.EmpId = employedetails.empid INNER JOIN branchmapping ON branchmaster.branchid = branchmapping.subbranch WHERE  (AttendanceLogs.LogDate BETWEEN @d1 AND @d2) AND (employedetails.status = 'No') AND (branchmaster.branchid = @branchid)");
                        cmd.Parameters.Add("@branchid", branch_id);
                        cmd.Parameters.Add("@d1", GetLowDate(dtdoe));
                        cmd.Parameters.Add("@d2", GetHighDate(dtdoe));
                        dtpresent = vdm.SelectQuery(cmd).Tables[0];
                        if (dtpresent.Rows.Count > 0)
                        {
                            foreach (DataRow dr1 in dtpresent.Rows)
                            {
                                string tpresent = dr1["present"].ToString();//branch wise present employee
                                present = Convert.ToInt32(tpresent);
                            }
                        }
                        absent = total - present;

                        if (total != 0)
                        {
                            attandancedetailes getdepts = new attandancedetailes();

                            getdepts.presentemployes = present.ToString();
                            getdepts.absentemployes = absent.ToString();
                            getdepts.totalemployes = total.ToString();
                            getdepts.branchname = branchname;
                            getdepts.branch_id = branch_id;
                            string presentemployes = present.ToString();
                            if (totalemplogs == "0")
                            {
                                getdepts.msg = "In This Branch Network Problem  ";
                            }
                            else if (totalemplogs != "0" && presentemployes == "0")
                            {
                                getdepts.msg = "This Branch Attendence Not Finalized ";
                            }

                            attlst.Add(getdepts);
                        }
                    }
                }
            }
            else
            {

                if (branchid == "ALL")
                {
                    cmd = new SqlCommand("SELECT branchmaster.branchname, branchmaster.branchid, company_master.companyname FROM branchmaster INNER JOIN branchmapping ON branchmaster.branchid = branchmapping.subbranch INNER JOIN company_master ON branchmaster.company_code = company_master.sno WHERE (branchmapping.mainbranch <> 0) AND (branchmaster.company_code = @company) GROUP BY branchmaster.branchname, branchmaster.branchid, company_master.companyname");
                    cmd.Parameters.Add("@company", company_code);
                    dtbranch = vdm.SelectQuery(cmd).Tables[0];
                    if (dtbranch.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dtbranch.Rows)
                        {
                            string branch = dr["branchname"].ToString();
                            branch_id = dr["branchid"].ToString();
                            branchname = branch;
                            //cmd = new SqlCommand("SELECT   COUNT(*) AS totalemp FROM  employedetails INNER JOIN branchmapping ON employedetails.branchid = branchmapping.subbranch WHERE (employedetails.branchid = @branchid) AND (employedetails.status = 'No') AND (branchmapping.mainbranch = @m) AND (employedetails.employee_type = 'Staff')");
                            cmd = new SqlCommand("SELECT  COUNT(*) AS totalemp FROM   employedetails INNER JOIN branchmaster ON employedetails.branchid = branchmaster.branchid WHERE (employedetails.status = 'No') AND (branchmaster.company_code = @companycode) AND (employedetails.branchid = @branchid)");
                            cmd.Parameters.Add("@branchid", branch_id);
                            cmd.Parameters.Add("@companycode", company_code);
                            dttotalemployes = vdm.SelectQuery(cmd).Tables[0];
                            if (dttotalemployes.Rows.Count > 0)
                            {
                                foreach (DataRow drr in dttotalemployes.Rows)
                                {
                                    string temp = drr["totalemp"].ToString();//totalemployee
                                    total = Convert.ToInt32(temp);
                                }
                            }
                            cmd = new SqlCommand("SELECT COUNT(DISTINCT EmpId) AS totalemplogs FROM   AttendanceLogs WHERE (BranchId = @branchid) AND (LogDate BETWEEN @d1 AND @d2)");
                            cmd.Parameters.Add("@branchid", branch_id);
                            cmd.Parameters.Add("@d1", GetLowDate(dtdoe));
                            cmd.Parameters.Add("@d2", GetHighDate(dtdoe));
                            dtlogs = vdm.SelectQuery(cmd).Tables[0];
                            string totalemplogs = dtlogs.Rows[0]["totalemplogs"].ToString();
                            cmd = new SqlCommand("SELECT  COUNT(DISTINCT AttendanceLogs.EmpId) AS present FROM   AttendanceLogs INNER JOIN branchmaster ON AttendanceLogs.BranchId = branchmaster.branchid INNER JOIN employedetails ON AttendanceLogs.EmpId = employedetails.empid INNER JOIN branchmapping ON branchmaster.branchid = branchmapping.subbranch WHERE  (employedetails.status = 'No') AND (AttendanceLogs.LogDate BETWEEN @d1 AND @d2) AND (branchmaster.branchid = @branchid) AND (branchmaster.company_code = @company)");
                            cmd = new SqlCommand("SELECT  COUNT(DISTINCT AttendanceLogs.EmpId) AS present FROM   AttendanceLogs INNER JOIN branchmaster ON AttendanceLogs.BranchId = branchmaster.branchid INNER JOIN employedetails ON AttendanceLogs.EmpId = employedetails.empid INNER JOIN branchmapping ON branchmaster.branchid = branchmapping.subbranch WHERE  (employedetails.status = 'No') AND (AttendanceLogs.LogDate BETWEEN @d1 AND @d2) AND (branchmaster.branchid = @branchid) AND (branchmaster.company_code = @company)");
                            //cmd = new SqlCommand("SELECT COUNT(*) AS present FROM dailyattandancedetails INNER JOIN branchmapping ON dailyattandancedetails.branchid = branchmapping.subbranch WHERE (dailyattandancedetails.status = 'P') AND (dailyattandancedetails.branchid = @branchid) AND (dailyattandancedetails.attendance_date BETWEEN @d1 AND @d2) AND (branchmapping.mainbranch = @m)");
                            //cmd = new SqlCommand("SELECT Count(*) AS present FROM  dailyattandancedetails  WHERE  (status = 'P') AND (branchid=@branchid) AND (attendance_date BETWEEN @d1 and @d2)");
                            cmd.Parameters.Add("@branchid", branch_id);
                            cmd.Parameters.Add("@company", company_code);
                            cmd.Parameters.Add("@d1", GetLowDate(dtdoe));
                            cmd.Parameters.Add("@d2", GetHighDate(dtdoe));
                            dtpresent = vdm.SelectQuery(cmd).Tables[0];
                            if (dtpresent.Rows.Count > 0)
                            {
                                foreach (DataRow dr1 in dtpresent.Rows)
                                {
                                    string tpresent = dr1["present"].ToString();//branch wise present employee
                                    present = Convert.ToInt32(tpresent);
                                }
                            }
                            absent = total - present;

                            if (total != 0)
                            {
                                attandancedetailes getdepts = new attandancedetailes();

                                getdepts.presentemployes = present.ToString();
                                getdepts.absentemployes = absent.ToString();
                                getdepts.totalemployes = total.ToString();
                                getdepts.branchname = branchname;
                                getdepts.branch_id = branch_id;
                                string presentemployes = present.ToString();
                                if (totalemplogs == "0")
                                {
                                    getdepts.msg = "In This Branch Network Problem  ";
                                }
                                else if (totalemplogs != "0" && presentemployes == "0")
                                {
                                    getdepts.msg = "This Branch Attendence Not Finalized ";
                                }


                                attlst.Add(getdepts);
                            }
                        }
                    }
                }
                else
                {
                    cmd = new SqlCommand("SELECT Count(*) AS totalemp FROM employedetails WHERE branchid=@branchid AND status='No'");
                    cmd.Parameters.Add("@branchid", branchid);
                    dttotalemployes = vdm.SelectQuery(cmd).Tables[0];
                    cmd = new SqlCommand("SELECT  COUNT(DISTINCT AttendanceLogs.EmpId) AS present FROM   AttendanceLogs INNER JOIN branchmaster ON AttendanceLogs.BranchId = branchmaster.branchid INNER JOIN employedetails ON AttendanceLogs.EmpId = employedetails.empid INNER JOIN branchmapping ON branchmaster.branchid = branchmapping.subbranch WHERE  (employedetails.status = 'No') AND (AttendanceLogs.LogDate BETWEEN @d1 AND @d2) AND (branchmaster.branchid = @bid) AND (branchmaster.company_code = @company)");
                    cmd.Parameters.Add("@bid", branchid);
                    cmd.Parameters.Add("@company", company_code);
                    cmd.Parameters.Add("@d1", GetLowDate(dtdoe));
                    cmd.Parameters.Add("@d2", GetHighDate(dtdoe));
                    dtpresent = vdm.SelectQuery(cmd).Tables[0];
                    cmd = new SqlCommand("SELECT  branchmaster.branchname, branchmaster.branchid, company_master.companyname FROM   branchmaster INNER JOIN branchmapping ON branchmaster.branchid = branchmapping.subbranch INNER JOIN company_master ON branchmaster.company_code = company_master.sno WHERE    (branchmapping.mainbranch <> 0) AND (branchmaster.company_code = @company) AND (branchmaster.branchid = @bid) AND (branchmapping.mainbranch <> 0) GROUP BY branchmaster.branchname, branchmaster.branchid, company_master.companyname");
                    cmd.Parameters.Add("@bid", branchid);
                    cmd.Parameters.Add("@company", company_code);
                    dtbranch = vdm.SelectQuery(cmd).Tables[0];
                    if (dtbranch.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dtbranch.Rows)
                        {
                            string branch = dr["branchname"].ToString();
                            branch_id = dr["branchid"].ToString();
                            branchname = branch;
                        }
                    }
                    if (dtpresent.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dtpresent.Rows)
                        {
                            string tpresent = dr["present"].ToString();//branch wise present employee
                            present = Convert.ToInt32(tpresent);
                        }
                    }
                    if (dttotalemployes.Rows.Count > 0)
                    {
                        foreach (DataRow drr in dttotalemployes.Rows)
                        {
                            string temp = drr["totalemp"].ToString();//totalemployee
                            total = Convert.ToInt32(temp);
                        }
                    }
                    absent = total - present;
                    attandancedetailes getdepts1 = new attandancedetailes();
                    getdepts1.totalemployes = total.ToString();
                    getdepts1.presentemployes = present.ToString();
                    getdepts1.absentemployes = absent.ToString();
                    getdepts1.branchname = branchname;
                    getdepts1.branch_id = branch_id;
                    attlst.Add(getdepts1);
                }
            }
            string response = GetJson(attlst);
            context.Response.Write(response);
        }
        catch
        {
        }
    }
    private void dept_wise_attandance_details(HttpContext context)
    {
        //
        try
        {
            vdm = new DBManager();
            string branchid = context.Request["branchid"];
            string doe = context.Request["doe"];

            List<attandancedetailes> attlst = new List<attandancedetailes>();
            int present = 0;
            int total = 0;
            int absent = 0;
            string branchname = "";
            DateTime dtdoe = Convert.ToDateTime(doe);
            DateTime ServerDateCurrentdate = DBManager.GetTime(vdm.conn);
            string curentdt = Convert.ToDateTime(ServerDateCurrentdate).ToString("MM/dd/yyyy");
            DateTime dt = Convert.ToDateTime(curentdt);
            //if (dtdoe == dt)
            //{
            //    dtdoe = GetLowDate(dtdoe).AddDays(-1);
            //}
            cmd = new SqlCommand("SELECT deptid, department, status, reason, createdby, createdon, editedby, editedon  FROM  departments");
            DataTable dtdepartments = vdm.SelectQuery(cmd).Tables[0];
            if (dtdepartments.Rows.Count > 0)
            {
                foreach (DataRow drr in dtdepartments.Rows)
                {
                    string dept = drr["deptid"].ToString();
                    string department = drr["department"].ToString();
                    cmd = new SqlCommand("SELECT  COUNT(*) AS totalemp, employee_dept, branchid FROM    employedetails WHERE   (employee_dept = @deptid) AND (branchid = @bid) AND (status = 'No')  GROUP BY employee_dept, branchid");
                    cmd.Parameters.Add("@deptid", dept);
                    cmd.Parameters.Add("@bid", branchid);
                    DataTable dtemployes = vdm.SelectQuery(cmd).Tables[0];
                    if (dtemployes.Rows.Count > 0)
                    {
                        string totaldeptemployes = dtemployes.Rows[0]["totalemp"].ToString();
                        total = Convert.ToInt32(totaldeptemployes);
                        string deptid = dtemployes.Rows[0]["employee_dept"].ToString();
                        string branch = dtemployes.Rows[0]["branchid"].ToString();
                        cmd = new SqlCommand("SELECT   COUNT(DISTINCT AttendanceLogs.EmpId) AS totalemppresent FROM  AttendanceLogs INNER JOIN branchmaster ON AttendanceLogs.BranchId = branchmaster.branchid INNER JOIN employedetails ON AttendanceLogs.EmpId = employedetails.empid INNER JOIN branchmapping ON branchmaster.branchid = branchmapping.subbranch WHERE  (employedetails.status = 'No') AND (AttendanceLogs.LogDate BETWEEN @d1 AND @d2) AND (employedetails.employee_dept = @did) AND (employedetails.branchid = @branchid)");
                        //cmd = new SqlCommand("SELECT COUNT(*) AS totalemppresent  FROM   employedetails INNER JOIN dailyattandancedetails ON employedetails.empid = dailyattandancedetails.empid WHERE (employedetails.employee_dept = @did) AND (dailyattandancedetails.attendance_date BETWEEN @D1 AND @D2) AND (employedetails.branchid = @branchid)");
                        cmd.Parameters.Add("@did", dept);
                        cmd.Parameters.Add("@branchid", branchid);
                        cmd.Parameters.Add("@d1", GetLowDate(dtdoe));
                        cmd.Parameters.Add("@d2", GetHighDate(dtdoe));
                        DataTable dtattandance = vdm.SelectQuery(cmd).Tables[0];
                        if (dtattandance.Rows.Count > 0)
                        {
                            foreach (DataRow dr in dtattandance.Rows)
                            {
                                string noofemp = dr["totalemppresent"].ToString();
                                present = Convert.ToInt32(noofemp);
                                absent = total - present;
                                attandancedetailes getattdepts = new attandancedetailes();
                                getattdepts.deptname = department;
                                getattdepts.deptid = deptid;
                                getattdepts.branch = branch;
                                getattdepts.totalemployes = total.ToString();
                                getattdepts.presentemployes = present.ToString();
                                getattdepts.absentemployes = absent.ToString();
                                attlst.Add(getattdepts);
                            }
                        }
                    }
                }
            }
            string response = GetJson(attlst);
            context.Response.Write(response);
        }
        catch
        {
        }
    }

    public class totaldetailes
    {
        //public List<totalbranchdetailes> totalbranchdetailes { get; set; }
        //public List<totalemployesdetailes> totalemployes { get; set; }
        public string totalbranches { get; set; }
        public string totalemployes { get; set; }
        public string totalstaffemployes { get; set; }
        public string totalcasualsemployes { get; set; }
        public string totalpresent { get; set; }
        public string totalabsent { get; set; }
        public string totalstaffabsent { get; set; }
        public string totalleaveapproval { get; set; }
        public string totalleavepending { get; set; }
        public string totalodpending { get; set; }
        public string totalodapproval { get; set; }
        public string fullname { get; set; }
        public string remarks { get; set; }
        public string leavedays { get; set; }
        public string stafftotalpresent { get; set; }
    }

    public class totalleaveapprovaldetailes
    {
        //public List<totalbranchdetailes> totalbranchdetailes { get; set; }
        //public List<totalemployesdetailes> totalemployes { get; set; }
        public string totalleaveapproval { get; set; }
        //public string totalleavepending { get; set; }
        public string totalodpending { get; set; }
        public string totalodapproval { get; set; }
        public string fullname { get; set; }
        public string remarks { get; set; }
        public string leavedays { get; set; }
    }

    public class totalbrithdaysldetailes
    {
        public string BirthDays { set; get; }
        public string Birth_Days { set; get; }
        public string birthdate { set; get; }
        public string fullname { get; set; }
        public string remarks { get; set; }
        public string ftplocation { get; set; }
    }

    public class totalODpendingdetailes
    {
        public string fullname { get; set; }
        public string remarks { get; set; }
        public string oddays { get; set; }
        public string ftplocation { get; set; }
    }


    public class gettotaldetailes
    {
        public List<totalleaveapprovaldetailes> totalleaveapprovaldetailes { get; set; }
        public List<totalbrithdaysldetailes> totalbrithdaysldetailes { get; set; }
        public List<totalODpendingdetailes> totalODpendingdetailes { get; set; }
    }


    private void Total_branches_details(HttpContext context)
    {
        //
        try
        {
            vdm = new DBManager();
            string branchid = context.Request["branchid"];
            string company_code = context.Request["company_code"];
            string mainbranch = context.Session["mainbranch"].ToString();
            string doe = context.Request["doe"];

            string noofemp = "";
            int present = 0;
            int staffpresent = 0;
            int total = 0;
            int stafftotal = 0;
            int absent = 0;
            int staffabsent = 0;
            string branchname = "";
            DateTime dtdoe = Convert.ToDateTime(doe);
            DateTime ServerDateCurrentdate = DBManager.GetTime(vdm.conn);
            string curentdt = Convert.ToDateTime(ServerDateCurrentdate).ToString("MM/dd/yyyy");
            DateTime dt = Convert.ToDateTime(curentdt);
            //if (dtdoe == dt)
            //{
            //    dtdoe = GetLowDate(dtdoe).AddDays(-1);
            //}
            List<totaldetailes> totallist = new List<totaldetailes>();
            if (company_code == "ALL")
            {

                cmd = new SqlCommand("SELECT  COUNT(branchmaster.branchid) AS Count FROM   branchmaster INNER JOIN company_master ON branchmaster.company_code = company_master.sno INNER JOIN branchmapping ON branchmaster.branchid = branchmapping.subbranch WHERE (branchmapping.mainbranch <> 0)");
                DataTable dtdepartments = vdm.SelectQuery(cmd).Tables[0];
                totaldetailes getemployee = new totaldetailes();
                if (dtdepartments.Rows.Count > 0)
                {
                    foreach (DataRow drr in dtdepartments.Rows)
                    {

                        getemployee.totalbranches = drr["Count"].ToString();
                    }
                }
                cmd = new SqlCommand("SELECT  COUNT(employedetails.empid) AS Count FROM  employedetails INNER JOIN branchmapping ON employedetails.branchid = branchmapping.subbranch INNER JOIN branchmaster ON employedetails.branchid = branchmaster.branchid WHERE  (employedetails.status = 'NO') AND (branchmapping.mainbranch <> 0)");
                DataTable dtemployee = vdm.SelectQuery(cmd).Tables[0];
                if (dtemployee.Rows.Count > 0)
                {
                    foreach (DataRow drr in dtemployee.Rows)
                    {

                        getemployee.totalemployes = drr["Count"].ToString();
                    }
                }
                cmd = new SqlCommand("SELECT  COUNT(employedetails.empid) AS Count FROM  employedetails INNER JOIN branchmapping ON employedetails.branchid = branchmapping.subbranch INNER JOIN branchmaster ON employedetails.branchid = branchmaster.branchid WHERE (employedetails.status = 'NO') AND (employedetails.employee_type = 'Staff') AND (branchmapping.mainbranch <> 0)");
                DataTable dtstaffemployee = vdm.SelectQuery(cmd).Tables[0];

                cmd = new SqlCommand("SELECT  COUNT(employedetails.empid) AS Count FROM  employedetails INNER JOIN branchmapping ON employedetails.branchid = branchmapping.subbranch INNER JOIN branchmaster ON employedetails.branchid = branchmaster.branchid WHERE (employedetails.status = 'NO') AND (employedetails.employee_type <> 'Staff') AND (branchmapping.mainbranch <> 0)");
                DataTable dtcasualemployee = vdm.SelectQuery(cmd).Tables[0];
                if (dtcasualemployee.Rows.Count > 0)
                {
                    foreach (DataRow drr in dtcasualemployee.Rows)
                    {

                        getemployee.totalcasualsemployes = drr["Count"].ToString();
                    }
                }
                //cmd = new SqlCommand("SELECT COUNT(*) AS present FROM  dailyattandancedetails INNER JOIN branchmapping ON dailyattandancedetails.branchid = branchmapping.subbranch INNER JOIN branchmaster ON dailyattandancedetails.branchid = branchmaster.branchid WHERE   (dailyattandancedetails.status = 'P') AND (dailyattandancedetails.attendance_date BETWEEN @d1 AND @d2) AND (branchmapping.mainbranch = @m) AND (dailyattandancedetails.emp_type = 'Staff')");
                cmd = new SqlCommand("SELECT  COUNT(DISTINCT AttendanceLogs.EmpId) AS present FROM   AttendanceLogs INNER JOIN branchmaster ON AttendanceLogs.BranchId = branchmaster.branchid INNER JOIN employedetails ON AttendanceLogs.EmpId = employedetails.empid INNER JOIN branchmapping ON branchmaster.branchid = branchmapping.subbranch WHERE   (AttendanceLogs.LogDate BETWEEN @d1 AND @d2) AND (employedetails.status = 'No') AND (employedetails.employee_type = 'Staff') AND (branchmapping.mainbranch <> 0)");
                cmd.Parameters.Add("@d1", GetLowDate(dtdoe));
                cmd.Parameters.Add("@d2", GetHighDate(dtdoe));
                DataTable dtstaffemployeepresent = vdm.SelectQuery(cmd).Tables[0];
                if (dtstaffemployeepresent.Rows.Count > 0)
                {
                    foreach (DataRow drr in dtstaffemployeepresent.Rows)
                    {

                        string stafftotalpresent = drr["present"].ToString();
                        staffpresent = Convert.ToInt32(stafftotalpresent);
                        getemployee.stafftotalpresent = drr["present"].ToString();

                        //totallist.Add(getemployee);
                    }

                }
                if (dtstaffemployee.Rows.Count > 0)
                {
                    foreach (DataRow drr in dtstaffemployee.Rows)
                    {

                        string totalstaffemployes = drr["Count"].ToString();
                        stafftotal = Convert.ToInt32(totalstaffemployes);
                        staffabsent = stafftotal - staffpresent;
                        getemployee.totalstaffabsent = staffabsent.ToString();
                        getemployee.totalstaffemployes = drr["Count"].ToString();

                    }
                }
                totallist.Add(getemployee);
            }
            else
            {
                if (branchid == "ALL")
                {

                    cmd = new SqlCommand("SELECT COUNT(branchmaster.branchid) AS Count FROM branchmaster INNER JOIN company_master ON branchmaster.company_code = company_master.sno INNER JOIN branchmapping ON branchmaster.branchid = branchmapping.subbranch WHERE (branchmaster.company_code = @companycode)");
                    cmd.Parameters.Add("@companycode", company_code);
                    DataTable dtdepartments = vdm.SelectQuery(cmd).Tables[0];
                    totaldetailes getemployee = new totaldetailes();
                    if (dtdepartments.Rows.Count > 0)
                    {
                        foreach (DataRow drr in dtdepartments.Rows)
                        {

                            //totaldetailes getattdepts = new totaldetailes();
                            getemployee.totalbranches = drr["Count"].ToString();
                            //totallist.Add(getattdepts);
                        }
                    }
                    cmd = new SqlCommand("SELECT  COUNT(employedetails.empid) AS Count FROM  employedetails INNER JOIN branchmapping ON employedetails.branchid = branchmapping.subbranch INNER JOIN branchmaster ON employedetails.branchid = branchmaster.branchid WHERE  (employedetails.status = 'NO') AND (branchmaster.company_code = @companycode)");
                    cmd.Parameters.Add("@companycode", company_code);
                    DataTable dtemployee = vdm.SelectQuery(cmd).Tables[0];
                    if (dtemployee.Rows.Count > 0)
                    {
                        foreach (DataRow drr in dtemployee.Rows)
                        {

                            getemployee.totalemployes = drr["Count"].ToString();
                        }
                    }
                    cmd = new SqlCommand("SELECT  COUNT(employedetails.empid) AS Count FROM  employedetails INNER JOIN branchmapping ON employedetails.branchid = branchmapping.subbranch INNER JOIN branchmaster ON employedetails.branchid = branchmaster.branchid WHERE (employedetails.status = 'NO') AND (employedetails.employee_type = 'Staff') AND (branchmaster.company_code = @companycode)");
                    cmd.Parameters.Add("@companycode", company_code);
                    DataTable dtstaffemployee = vdm.SelectQuery(cmd).Tables[0];

                    cmd = new SqlCommand("SELECT  COUNT(employedetails.empid) AS Count FROM  employedetails INNER JOIN branchmapping ON employedetails.branchid = branchmapping.subbranch INNER JOIN branchmaster ON employedetails.branchid = branchmaster.branchid WHERE (employedetails.status = 'NO') AND (employedetails.employee_type <> 'Staff') AND (branchmaster.company_code = @companycode)");
                    cmd.Parameters.Add("@companycode", company_code);
                    DataTable dtcasualemployee = vdm.SelectQuery(cmd).Tables[0];
                    if (dtcasualemployee.Rows.Count > 0)
                    {
                        foreach (DataRow drr in dtcasualemployee.Rows)
                        {

                            getemployee.totalcasualsemployes = drr["Count"].ToString();
                            //totallist.Add(getemployee);
                        }
                    }
                    cmd = new SqlCommand("SELECT  COUNT(DISTINCT AttendanceLogs.EmpId) AS present FROM   AttendanceLogs INNER JOIN branchmaster ON AttendanceLogs.BranchId = branchmaster.branchid INNER JOIN employedetails ON AttendanceLogs.EmpId = employedetails.empid INNER JOIN branchmapping ON branchmaster.branchid = branchmapping.subbranch WHERE  (employedetails.status = 'No') AND (employedetails.employee_type = 'Staff') AND (AttendanceLogs.LogDate BETWEEN @d1 AND @d2) AND (branchmaster.company_code = @companycode)");
                    cmd.Parameters.Add("@companycode", company_code);
                    cmd.Parameters.Add("@d1", GetLowDate(dtdoe));
                    cmd.Parameters.Add("@d2", GetHighDate(dtdoe));
                    DataTable dtstaffemployeepresent = vdm.SelectQuery(cmd).Tables[0];
                    if (dtstaffemployeepresent.Rows.Count > 0)
                    {
                        foreach (DataRow drr in dtstaffemployeepresent.Rows)
                        {

                            string stafftotalpresent = drr["present"].ToString();
                            staffpresent = Convert.ToInt32(stafftotalpresent);
                            getemployee.stafftotalpresent = drr["present"].ToString();

                            //totallist.Add(getemployee);
                        }

                    }
                    if (dtstaffemployee.Rows.Count > 0)
                    {
                        foreach (DataRow drr in dtstaffemployee.Rows)
                        {

                            string totalstaffemployes = drr["Count"].ToString();
                            stafftotal = Convert.ToInt32(totalstaffemployes);
                            staffabsent = stafftotal - staffpresent;
                            getemployee.totalstaffabsent = staffabsent.ToString();
                            getemployee.totalstaffemployes = drr["Count"].ToString();

                        }

                    }

                    cmd = new SqlCommand("SELECT  COUNT(employedetails.empid) AS totalemp FROM   employedetails INNER JOIN branchmaster ON employedetails.branchid = branchmaster.branchid INNER JOIN branchmapping ON branchmaster.branchid = branchmapping.subbranch WHERE  (branchmapping.mainbranch = @mainbranch) AND (employedetails.status = 'NO') AND (branchmaster.company_code = @companycode) AND (employedetails.employee_type = 'staff') ");
                    //cmd.Parameters.Add("@branchid", branchid);
                    cmd.Parameters.Add("@companycode", company_code);
                    cmd.Parameters.Add("@mainbranch", mainbranch);
                    //cmd.Parameters.Add("@branchid", branchid);
                    DataTable dttotalemployes = vdm.SelectQuery(cmd).Tables[0];
                    //cmd = new SqlCommand("SELECT  COUNT(*) AS present FROM  dailyattandancedetails INNER JOIN branchmapping ON dailyattandancedetails.branchid = branchmapping.subbranch WHERE        (dailyattandancedetails.status = 'P') AND (dailyattandancedetails.attendance_date BETWEEN @d1 AND @d2) AND (branchmapping.mainbranch = @m)");
                    cmd = new SqlCommand("SELECT  COUNT(*) AS present FROM  dailyattandancedetails INNER JOIN branchmapping ON dailyattandancedetails.branchid = branchmapping.subbranch INNER JOIN branchmaster ON dailyattandancedetails.branchid = branchmaster.branchid WHERE (branchmaster.company_code = @companycode) AND (branchmapping.mainbranch = @m) AND (dailyattandancedetails.status = 'P') AND (dailyattandancedetails.attendance_date BETWEEN @d1 AND @d2) AND (dailyattandancedetails.emp_type = 'staff')");
                    //cmd.Parameters.Add("@bid", branchid);
                    cmd.Parameters.Add("@m", mainbranch);
                    //cmd.Parameters.Add("@branchid", branchid);
                    cmd.Parameters.Add("@companycode", company_code);
                    cmd.Parameters.Add("@d1", GetLowDate(dtdoe));
                    cmd.Parameters.Add("@d2", GetHighDate(dtdoe));
                    DataTable dtpresent = vdm.SelectQuery(cmd).Tables[0];
                    if (dtpresent.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dtpresent.Rows)
                        {
                            string tpresent = dr["present"].ToString();
                            present = Convert.ToInt32(tpresent);
                            string pres = "P";
                        }
                    }
                    if (dttotalemployes.Rows.Count > 0)
                    {
                        foreach (DataRow drr in dttotalemployes.Rows)
                        {
                            string temp = drr["totalemp"].ToString();
                            total = Convert.ToInt32(temp);
                            absent = total - present;
                            getemployee.totalabsent = absent.ToString();
                        }
                    }

                    cmd = new SqlCommand("SELECT COUNT(*) AS employee_no FROM leave_application INNER JOIN employedetails ON leave_application.employee_no = employedetails.empid INNER JOIN branchmapping ON employedetails.branchid = branchmapping.subbranch INNER JOIN branchmaster ON employedetails.branchid = branchmaster.branchid WHERE (branchmapping.mainbranch = @m) AND (leave_application.request_date BETWEEN @d1 AND @d2) AND (leave_application.leave_satus = 'A') AND (branchmaster.company_code = @companycode)");
                    cmd.Parameters.Add("@m", mainbranch);
                    //cmd.Parameters.Add("@branchid", branchid);
                    cmd.Parameters.Add("@companycode", company_code);
                    cmd.Parameters.Add("@d1", GetLowDate(dtdoe));
                    cmd.Parameters.Add("@d2", GetHighDate(dtdoe));
                    DataTable dtemployeeleaveapproval = vdm.SelectQuery(cmd).Tables[0];
                    if (dtemployeeleaveapproval.Rows.Count > 0)
                    {
                        foreach (DataRow drr in dtemployeeleaveapproval.Rows)
                        {

                            getemployee.totalleaveapproval = drr["employee_no"].ToString();
                            //totallist.Add(getemployee);
                        }

                    }
                    cmd = new SqlCommand("SELECT COUNT(*) AS employee_no FROM leave_application INNER JOIN employedetails ON leave_application.employee_no = employedetails.empid INNER JOIN branchmapping ON employedetails.branchid = branchmapping.subbranch INNER JOIN branchmaster ON employedetails.branchid = branchmaster.branchid WHERE (branchmapping.mainbranch = @m) AND (leave_application.request_date BETWEEN @d1 AND @d2) AND (leave_application.leave_satus = 'P') AND (branchmaster.company_code = @companycode)");
                    cmd.Parameters.Add("@m", mainbranch);
                    //cmd.Parameters.Add("@branchid", branchid);
                    cmd.Parameters.Add("@companycode", company_code);
                    cmd.Parameters.Add("@d1", GetLowDate(dtdoe));
                    cmd.Parameters.Add("@d2", GetHighDate(dtdoe));
                    DataTable dtemployeeleavepennding = vdm.SelectQuery(cmd).Tables[0];
                    if (dtemployeeleavepennding.Rows.Count > 0)
                    {
                        foreach (DataRow drr in dtemployeeleavepennding.Rows)
                        {

                            getemployee.totalleavepending = drr["employee_no"].ToString();
                            //totallist.Add(getemployee);
                        }

                    }
                    cmd = new SqlCommand("SELECT COUNT(*) AS empid FROM oddetails INNER JOIN  employedetails ON oddetails.empid = employedetails.empid INNER JOIN branchmapping ON employedetails.branchid = branchmapping.mainbranch INNER JOIN branchmaster ON employedetails.branchid = branchmaster.branchid WHERE (branchmapping.mainbranch = @m) AND (oddetails.doe BETWEEN @d1 AND @d2) AND (oddetails.status = 'A') AND (branchmaster.company_code = @companycode)");
                    cmd.Parameters.Add("@m", mainbranch);
                    //cmd.Parameters.Add("@branchid", branchid);
                    cmd.Parameters.Add("@companycode", company_code);
                    cmd.Parameters.Add("@d1", GetLowDate(dtdoe));
                    cmd.Parameters.Add("@d2", GetHighDate(dtdoe));
                    DataTable dtemployeeodapproval = vdm.SelectQuery(cmd).Tables[0];
                    if (dtemployeeodapproval.Rows.Count > 0)
                    {
                        foreach (DataRow drr in dtemployeeodapproval.Rows)
                        {

                            getemployee.totalodapproval = drr["empid"].ToString();
                            //totallist.Add(getemployee);
                        }

                    }
                    //cmd = new SqlCommand("SELECT COUNT(*) AS empid FROM oddetails INNER JOIN employedetails ON oddetails.empid = employedetails.empid INNER JOIN branchmapping ON employedetails.branchid = branchmapping.mainbranch INNER JOIN branchmaster ON employedetails.branchid = branchmaster.branchid WHERE (branchmapping.mainbranch = @m) AND (oddetails.doe BETWEEN @d1 AND @d2) AND (oddetails.status = 'P') AND (branchmaster.company_code = @companycode)");
                    cmd = new SqlCommand("SELECT  COUNT(*) AS empid FROM  oddetails INNER JOIN  employedetails ON oddetails.empid = employedetails.empid INNER JOIN  employedetails AS employedetails_1 ON oddetails.reportingto = employedetails_1.empid INNER JOIN   branchmapping ON employedetails.branchid = branchmapping.subbranch INNER JOIN   branchmaster ON employedetails.branchid = branchmaster.branchid WHERE        (oddetails.doe BETWEEN @d1 AND @d2) AND (branchmapping.mainbranch = @m) AND (oddetails.status = 'P') AND (branchmaster.company_code = @companycode)");
                    cmd.Parameters.Add("@m", mainbranch);
                    cmd.Parameters.Add("@companycode", company_code);
                    cmd.Parameters.Add("@d1", GetLowDate(dtdoe));
                    cmd.Parameters.Add("@d2", GetHighDate(dtdoe));
                    DataTable dtemployeeODpennding = vdm.SelectQuery(cmd).Tables[0];
                    if (dtemployeeODpennding.Rows.Count > 0)
                    {
                        foreach (DataRow drr in dtemployeeODpennding.Rows)
                        {

                            getemployee.totalodpending = drr["empid"].ToString();
                        }

                    }

                    totallist.Add(getemployee);
                }
                else
                {

                    cmd = new SqlCommand("SELECT COUNT(branchmaster.branchid) AS Count FROM branchmaster INNER JOIN company_master ON branchmaster.company_code = company_master.sno INNER JOIN branchmapping ON branchmaster.branchid = branchmapping.subbranch WHERE (branchmaster.company_code = @companycode) AND (branchmaster.branchid = @branchid)");
                    cmd.Parameters.Add("@companycode", company_code);
                    cmd.Parameters.Add("@branchid", branchid);
                    DataTable dtdepartments = vdm.SelectQuery(cmd).Tables[0];
                    totaldetailes getemployee = new totaldetailes();
                    if (dtdepartments.Rows.Count > 0)
                    {
                        foreach (DataRow drr in dtdepartments.Rows)
                        {
                            getemployee.totalbranches = drr["Count"].ToString();
                        }
                    }
                    cmd = new SqlCommand("SELECT  COUNT(employedetails.empid) AS Count FROM  employedetails INNER JOIN branchmapping ON employedetails.branchid = branchmapping.subbranch INNER JOIN branchmaster ON employedetails.branchid = branchmaster.branchid WHERE  (employedetails.status = 'NO') AND (branchmaster.company_code = @companycode) AND (branchmaster.branchid = @branchid) ");
                    cmd.Parameters.Add("@branchid", branchid);
                    cmd.Parameters.Add("@companycode", company_code);
                    DataTable dtemployee = vdm.SelectQuery(cmd).Tables[0];
                    if (dtemployee.Rows.Count > 0)
                    {
                        foreach (DataRow drr in dtemployee.Rows)
                        {

                            getemployee.totalemployes = drr["Count"].ToString();
                        }

                    }
                    cmd = new SqlCommand("SELECT   COUNT(employedetails.empid) AS Count FROM   employedetails INNER JOIN branchmapping ON employedetails.branchid = branchmapping.subbranch INNER JOIN branchmaster ON employedetails.branchid = branchmaster.branchid WHERE  (employedetails.status = 'NO') AND (employedetails.employee_type = 'Staff') AND (branchmaster.company_code = @companycode) AND (branchmaster.branchid = @branchid)");
                    cmd.Parameters.Add("@branchid", branchid);
                    cmd.Parameters.Add("@companycode", company_code);
                    DataTable dtstaffemployee = vdm.SelectQuery(cmd).Tables[0];

                    cmd = new SqlCommand("SELECT  COUNT(employedetails.empid) AS Count FROM  employedetails INNER JOIN branchmapping ON employedetails.branchid = branchmapping.subbranch INNER JOIN branchmaster ON employedetails.branchid = branchmaster.branchid WHERE  (employedetails.status = 'NO') AND (employedetails.employee_type <> 'Staff') AND (branchmaster.company_code = @companycode) AND (branchmaster.branchid = @branchid)");
                    cmd.Parameters.Add("@branchid", branchid);
                    cmd.Parameters.Add("@companycode", company_code);
                    DataTable dtcasualemployee = vdm.SelectQuery(cmd).Tables[0];
                    if (dtcasualemployee.Rows.Count > 0)
                    {
                        foreach (DataRow drr in dtcasualemployee.Rows)
                        {

                            getemployee.totalcasualsemployes = drr["Count"].ToString();
                            //totallist.Add(getemployee);
                        }
                    }
                    cmd = new SqlCommand("SELECT  COUNT(DISTINCT AttendanceLogs.EmpId) AS present FROM   AttendanceLogs INNER JOIN branchmaster ON AttendanceLogs.BranchId = branchmaster.branchid INNER JOIN employedetails ON AttendanceLogs.EmpId = employedetails.empid INNER JOIN branchmapping ON branchmaster.branchid = branchmapping.subbranch WHERE  (employedetails.status = 'No') AND (employedetails.employee_type = 'Staff') AND (AttendanceLogs.LogDate BETWEEN @d1 AND @d2) AND (branchmaster.company_code = @companycode) AND  (branchmaster.branchid = @branchid)");
                    cmd.Parameters.Add("@branchid", branchid);
                    cmd.Parameters.Add("@companycode", company_code);
                    cmd.Parameters.Add("@d1", GetLowDate(dtdoe));
                    cmd.Parameters.Add("@d2", GetHighDate(dtdoe));
                    //cmd.Parameters.Add("@branchid", branchid);
                    DataTable dtstaffemployeepresent = vdm.SelectQuery(cmd).Tables[0];

                    if (dtstaffemployeepresent.Rows.Count > 0)
                    {
                        foreach (DataRow drr in dtstaffemployeepresent.Rows)
                        {

                            string stafftotalpresent = drr["present"].ToString();
                            staffpresent = Convert.ToInt32(stafftotalpresent);
                            getemployee.stafftotalpresent = drr["present"].ToString();

                            //totallist.Add(getemployee);
                        }

                    }
                    if (dtstaffemployee.Rows.Count > 0)
                    {
                        foreach (DataRow drr in dtstaffemployee.Rows)
                        {

                            string totalstaffemployes = drr["Count"].ToString();
                            stafftotal = Convert.ToInt32(totalstaffemployes);
                            staffabsent = stafftotal - staffpresent;
                            getemployee.totalstaffabsent = staffabsent.ToString();
                            getemployee.totalstaffemployes = drr["Count"].ToString();

                        }
                    }
                    cmd = new SqlCommand("SELECT COUNT(*) AS present FROM dailyattandancedetails INNER JOIN branchmapping ON dailyattandancedetails.branchid = branchmapping.subbranch INNER JOIN branchmaster ON dailyattandancedetails.branchid = branchmaster.branchid WHERE (dailyattandancedetails.status = 'P') AND (dailyattandancedetails.attendance_date BETWEEN @d1 AND @d2) AND (branchmapping.mainbranch = @m) AND (branchmaster.company_code = @companycode) and (branchmaster.branchid = @branchid)");
                    cmd.Parameters.Add("@m", mainbranch);
                    cmd.Parameters.Add("@companycode", company_code);
                    cmd.Parameters.Add("@d1", GetLowDate(dtdoe));
                    cmd.Parameters.Add("@d2", GetHighDate(dtdoe));
                    cmd.Parameters.Add("@branchid", branchid);
                    DataTable dtemployeepresent = vdm.SelectQuery(cmd).Tables[0];
                    if (dtemployeepresent.Rows.Count > 0)
                    {
                        foreach (DataRow drr in dtemployeepresent.Rows)
                        {

                            getemployee.totalpresent = drr["present"].ToString();
                        }

                    }

                    cmd = new SqlCommand("SELECT COUNT(employedetails.empid) AS totalemp FROM employedetails INNER JOIN branchmaster ON employedetails.branchid = branchmaster.branchid INNER JOIN branchmapping ON branchmaster.branchid = branchmapping.subbranch WHERE (employedetails.status = 'NO') AND (branchmaster.company_code = @companycode) AND (branchmapping.mainbranch = @mainbranch) and (branchmaster.branchid = @branchid)");
                    cmd.Parameters.Add("@branchid", branchid);
                    cmd.Parameters.Add("@companycode", company_code);
                    cmd.Parameters.Add("@mainbranch", mainbranch);
                    DataTable dttotalemployes = vdm.SelectQuery(cmd).Tables[0];
                    cmd = new SqlCommand("SELECT COUNT(*) AS present FROM dailyattandancedetails INNER JOIN branchmapping ON dailyattandancedetails.branchid = branchmapping.subbranch INNER JOIN branchmaster ON dailyattandancedetails.branchid = branchmaster.branchid WHERE (dailyattandancedetails.status = 'P') AND (dailyattandancedetails.attendance_date BETWEEN @d1 AND @d2) AND (branchmapping.mainbranch = @m) AND (branchmaster.company_code = @companycode) and (branchmaster.branchid = @branchid)");
                    cmd.Parameters.Add("@m", mainbranch);
                    cmd.Parameters.Add("@branchid", branchid);
                    cmd.Parameters.Add("@companycode", company_code);
                    cmd.Parameters.Add("@d1", GetLowDate(dtdoe));
                    cmd.Parameters.Add("@d2", GetHighDate(dtdoe));
                    DataTable dtpresent = vdm.SelectQuery(cmd).Tables[0];
                    if (dtpresent.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dtpresent.Rows)
                        {
                            string tpresent = dr["present"].ToString();
                            present = Convert.ToInt32(tpresent);
                            string pres = "P";
                        }
                    }
                    if (dttotalemployes.Rows.Count > 0)
                    {
                        foreach (DataRow drr in dttotalemployes.Rows)
                        {
                            string temp = drr["totalemp"].ToString();
                            total = Convert.ToInt32(temp);
                            absent = total - present;
                            getemployee.totalabsent = absent.ToString();
                        }
                    }

                    cmd = new SqlCommand("SELECT COUNT(*) AS employee_no FROM leave_application INNER JOIN employedetails ON leave_application.employee_no = employedetails.empid INNER JOIN branchmapping ON employedetails.branchid = branchmapping.subbranch INNER JOIN branchmaster ON employedetails.branchid = branchmaster.branchid WHERE (branchmapping.mainbranch = @m) AND (leave_application.request_date BETWEEN @d1 AND @d2) AND (leave_application.leave_satus = 'A') AND (branchmaster.company_code = @companycode) and (branchmaster.branchid = @branchid)");
                    cmd.Parameters.Add("@m", mainbranch);
                    cmd.Parameters.Add("@branchid", branchid);
                    cmd.Parameters.Add("@companycode", company_code);
                    cmd.Parameters.Add("@d1", GetLowDate(dtdoe));
                    cmd.Parameters.Add("@d2", GetHighDate(dtdoe));
                    DataTable dtemployeeleaveapproval = vdm.SelectQuery(cmd).Tables[0];
                    if (dtemployeeleaveapproval.Rows.Count > 0)
                    {
                        foreach (DataRow drr in dtemployeeleaveapproval.Rows)
                        {

                            getemployee.totalleaveapproval = drr["employee_no"].ToString();

                        }

                    }
                    cmd = new SqlCommand("SELECT COUNT(*) AS employee_no FROM leave_application INNER JOIN employedetails ON leave_application.employee_no = employedetails.empid INNER JOIN branchmapping ON employedetails.branchid = branchmapping.subbranch INNER JOIN branchmaster ON employedetails.branchid = branchmaster.branchid WHERE (branchmapping.mainbranch = @m) AND (leave_application.request_date BETWEEN @d1 AND @d2) AND (leave_application.leave_satus = 'P') AND (branchmaster.company_code = @companycode) and (branchmaster.branchid = @branchid)");
                    cmd.Parameters.Add("@m", mainbranch);
                    cmd.Parameters.Add("@branchid", branchid);
                    cmd.Parameters.Add("@companycode", company_code);
                    cmd.Parameters.Add("@d1", GetLowDate(dtdoe));
                    cmd.Parameters.Add("@d2", GetHighDate(dtdoe));
                    DataTable dtemployeeleavepennding = vdm.SelectQuery(cmd).Tables[0];
                    if (dtemployeeleavepennding.Rows.Count > 0)
                    {
                        foreach (DataRow drr in dtemployeeleavepennding.Rows)
                        {

                            getemployee.totalleavepending = drr["employee_no"].ToString();

                        }

                    }
                    cmd = new SqlCommand("SELECT COUNT(*) AS empid FROM oddetails INNER JOIN  employedetails ON oddetails.empid = employedetails.empid INNER JOIN branchmapping ON employedetails.branchid = branchmapping.mainbranch INNER JOIN branchmaster ON employedetails.branchid = branchmaster.branchid WHERE (branchmapping.mainbranch = @m) AND (oddetails.doe BETWEEN @d1 AND @d2) AND (oddetails.status = 'A') AND (branchmaster.company_code = @companycode) and (branchmaster.branchid = @branchid)");
                    cmd.Parameters.Add("@m", mainbranch);
                    cmd.Parameters.Add("@branchid", branchid);
                    cmd.Parameters.Add("@companycode", company_code);
                    cmd.Parameters.Add("@d1", GetLowDate(dtdoe));
                    cmd.Parameters.Add("@d2", GetHighDate(dtdoe));
                    DataTable dtemployeeodapproval = vdm.SelectQuery(cmd).Tables[0];
                    if (dtemployeeodapproval.Rows.Count > 0)
                    {
                        foreach (DataRow drr in dtemployeeodapproval.Rows)
                        {

                            getemployee.totalodapproval = drr["empid"].ToString();

                        }

                    }
                    cmd = new SqlCommand("SELECT  COUNT(*) AS empid FROM  oddetails INNER JOIN  employedetails ON oddetails.empid = employedetails.empid INNER JOIN  employedetails AS employedetails_1 ON oddetails.reportingto = employedetails_1.empid INNER JOIN   branchmapping ON employedetails.branchid = branchmapping.subbranch INNER JOIN   branchmaster ON employedetails.branchid = branchmaster.branchid WHERE (oddetails.doe BETWEEN @d1 AND @d2) AND (branchmapping.mainbranch = @m) AND (oddetails.status = 'P') AND (branchmaster.company_code = @companycode) and (branchmaster.branchid = @branchid)");
                    cmd.Parameters.Add("@m", mainbranch);
                    cmd.Parameters.Add("@branchid", branchid);
                    cmd.Parameters.Add("@companycode", company_code);
                    cmd.Parameters.Add("@d1", GetLowDate(dtdoe));
                    cmd.Parameters.Add("@d2", GetHighDate(dtdoe));
                    DataTable dtemployeeODpennding = vdm.SelectQuery(cmd).Tables[0];
                    if (dtemployeeODpennding.Rows.Count > 0)
                    {
                        foreach (DataRow drr in dtemployeeODpennding.Rows)
                        {

                            getemployee.totalodpending = drr["empid"].ToString();
                        }

                    }

                    totallist.Add(getemployee);
                }
            }

            string response = GetJson(totallist);

            context.Response.Write(response);
        }
catch
        {
        }
    }


    private void Total_leave_details(HttpContext context)
    {

        try
        {
            vdm = new DBManager();
            string mainbranch = context.Session["mainbranch"].ToString();
            string doe = context.Request["doe"];
            string noofemp = "";
            int present = 0;
            int total = 0;
            int absent = 0;
            string branchname = "";
            DateTime ServerDateCurrentdate = DBManager.GetTime(vdm.conn);
            DateTime dtdoe = Convert.ToDateTime(doe);
            List<totalleaveapprovaldetailes> totallist = new List<totalleaveapprovaldetailes>();
            List<totalbrithdaysldetailes> totbrithdays = new List<totalbrithdaysldetailes>();
            List<totalODpendingdetailes> totalod = new List<totalODpendingdetailes>();
            List<gettotaldetailes> gettotallist = new List<gettotaldetailes>();
            cmd = new SqlCommand("SELECT employedetails.fullname, leave_application.leave_days,leave_application.leave_description FROM  leave_application INNER JOIN employe_logins ON leave_application.request_to = employe_logins.empid INNER JOIN employedetails ON leave_application.employee_no = employedetails.empid WHERE(leave_application.leave_satus = 'p') AND (leave_application.request_to = @empid)");
            cmd.Parameters.Add("@empid", context.Session["empid"].ToString());
            DataTable dtemployeeleaveapproval = vdm.SelectQuery(cmd).Tables[0];
            if (dtemployeeleaveapproval.Rows.Count > 0)
            {
                foreach (DataRow drr in dtemployeeleaveapproval.Rows)
                {
                    totalleaveapprovaldetailes getemployee = new totalleaveapprovaldetailes();
                    getemployee.fullname = drr["fullname"].ToString();
                    getemployee.leavedays = drr["leave_days"].ToString() + " days";
                    getemployee.remarks = drr["leave_description"].ToString();
                    totallist.Add(getemployee);
                }

            }
            cmd = new SqlCommand("SELECT employedetails.fullname, oddetails.reason, oddetails.noofdays FROM oddetails INNER JOIN employe_logins ON oddetails.reportingto = employe_logins.empid INNER JOIN employedetails ON oddetails.empid = employedetails.empid WHERE (oddetails.status = 'P') AND (employe_logins.empid = @empid)");
            cmd.Parameters.Add("@empid", context.Session["empid"].ToString());
            DataTable dtemployee = vdm.SelectQuery(cmd).Tables[0];
            if (dtemployee.Rows.Count > 0)
            {
                foreach (DataRow drr in dtemployee.Rows)
                {
                    totalODpendingdetailes getod = new totalODpendingdetailes();
                    getod.fullname = drr["fullname"].ToString();
                    getod.oddays = drr["noofdays"].ToString() + " days";
                    // getod.ftplocation = "ftp://182.18.138.228/HRMS/";
                    getod.remarks = drr["reason"].ToString();
                    totalod.Add(getod);
                }

            }
            cmd = new SqlCommand("SELECT ed.empid, ed.employee_num, ed.branchid, ed.joindate, ed.fullname, MONTH(ed.dob) AS MonthName, DAY(ed.dob) AS DATE, ed.dob, ed.status, el.loginid AS emp_login_sno, el.password FROM employedetails AS ed INNER JOIN branchmapping ON ed.branchid = branchmapping.subbranch FULL OUTER JOIN employe_logins AS el ON el.empid = ed.empid WHERE (ed.status = 'No') AND (branchmapping.mainbranch = @m) ORDER BY MonthName, DATE");
            //cmd.Parameters.Add("@empid", context.Session["empid"].ToString());
            cmd.Parameters.Add("@m", mainbranch);
            DataTable dtemployeebrithday = vdm.SelectQuery(cmd).Tables[0];
            int count = 0;
            if (dtemployeebrithday.Rows.Count > 0)
            {
                foreach (DataRow drr in dtemployeebrithday.Rows)
                {
                    totalbrithdaysldetailes getbrithday = new totalbrithdaysldetailes();
                    getbrithday.fullname = drr["fullname"].ToString();
                    getbrithday.remarks = "HI";

                    //string dob = drr["dob"].ToString();
                    //if (dob == "" || dob == null)
                    //{
                    //    getbrithday.birthdate = "";
                    //    getbrithday.BirthDays = "";
                    //}
                    //else
                    //{
                    //    DateTime date = Convert.ToDateTime(dob);
                    //    string strtime = date.ToString("yyyy-MM-dd");
                    //    string strBirthtime = date.ToString("dd-MMM");
                    //    string currentdate = ServerDateCurrentdate.ToString("dd-MMM");
                    //    //TimeSpan days;
                    //    //days = dtBirth - ServerDateCurrentdate;
                    //    //int BirthDays = Convert.ToInt32(days.TotalDays);
                    //    if (strBirthtime == currentdate)
                    //    {
                    //        getbrithday.BirthDays = strBirthtime.ToString();
                    //        getbrithday.birthdate = strBirthtime;
                    //        totbrithdays.Add(getbrithday);
                    //    }
                    //    else
                    //    {
                    //    }
                    //}

                    string dob = drr["dob"].ToString();
                    if (dob == "" || dob == null)
                    {
                        getbrithday.birthdate = "";
                        getbrithday.BirthDays = "";
                    }
                    else
                    {
                        DateTime date = Convert.ToDateTime(dob);
                        string strtime = date.ToString("yyyy-MM-dd");
                        getbrithday.birthdate = strtime;
                        string strBirthtime = date.ToString("dd-MMM");
                        DateTime dtBirth = Convert.ToDateTime(strBirthtime);
                        TimeSpan days;
                        days = dtBirth - ServerDateCurrentdate;
                        int BirthDays = Convert.ToInt32(days.TotalDays);
                        if (BirthDays < 0)
                        {
                        }
                        else
                        {
                            if (count <= 1)
                            {
                                getbrithday.BirthDays = BirthDays.ToString();
                                getbrithday.Birth_Days = strBirthtime.ToString();
                                //getbrithday.ftplocation = "ftp://182.18.138.228/HRMS/";
                                totbrithdays.Add(getbrithday);
                                count++;
                            }
                        }
                    }

                }
            }
            gettotaldetailes gettotalists = new gettotaldetailes();
            gettotalists.totalleaveapprovaldetailes = totallist;
            gettotalists.totalODpendingdetailes = totalod;
            gettotalists.totalbrithdaysldetailes = totbrithdays;
            gettotallist.Add(gettotalists);
            string response = GetJson(gettotallist);
            context.Response.Write(response);
            //string response = GetJson(totallist);
            //context.Response.Write(response);
        }
        catch
        {
        }
    }
    //private void Total_branches_details(HttpContext context)
    //{
    //    //
    //    try
    //    {
    //        vdm = new DBManager();
    //        string mainbranch = context.Session["mainbranch"].ToString();
    //        string branchid = context.Request["branchid"];
    //        string doe = context.Request["doe"];

    //        string noofemp = "";
    //        int present = 0;
    //        int total = 0;
    //        int absent = 0;
    //        string branchname = "";
    //        DateTime dtdoe = Convert.ToDateTime(doe);
    //        cmd = new SqlCommand("SELECT COUNT(branchmaster.branchid) AS Count FROM branchmaster INNER JOIN branchmapping ON branchmaster.branchid = branchmapping.subbranch WHERE (branchmapping.mainbranch = @m) OR (branchmapping.mainbranch = @m)");
    //        cmd.Parameters.Add("@m", mainbranch);


    //        DataTable dtdepartments = vdm.SelectQuery(cmd).Tables[0];
    //        List<totaldetailes> totallist = new List<totaldetailes>();
    //        List<totalbranchdetailes> attlst = new List<totalbranchdetailes>();
    //        List<totalemployesdetailes> totalemployee = new List<totalemployesdetailes>();
    //        if (dtdepartments.Rows.Count > 0)
    //        {
    //            foreach (DataRow drr in dtdepartments.Rows)
    //            {

    //                totalbranchdetailes getattdepts = new totalbranchdetailes();
    //                getattdepts.totalbranches = drr["Count"].ToString();
    //                attlst.Add(getattdepts);
    //            }
    //        }
    //        cmd = new SqlCommand("SELECT COUNT(branchmaster.branchid) AS Count FROM branchmaster INNER JOIN branchmapping ON branchmaster.branchid = branchmapping.subbranch WHERE (branchmapping.mainbranch = @m) OR (branchmapping.mainbranch = @m)");
    //        cmd.Parameters.Add("@m", mainbranch);
    //        DataTable dtemployee = vdm.SelectQuery(cmd).Tables[0];
    //        if (dtemployee.Rows.Count > 0)
    //        {
    //            foreach (DataRow drr in dtemployee.Rows)
    //            {
    //                totalemployesdetailes getemployee = new totalemployesdetailes();
    //                getemployee.totalemployes = drr["Count"].ToString();
    //                totalemployee.Add(getemployee);
    //            }

    //        }
    //        totaldetailes gettotalist = new totaldetailes();
    //        gettotalist.totalbranchdetailes = attlst;
    //        gettotalist.totalemployes = totalemployee;
    //        totallist.Add(gettotalist);
    //        string response = GetJson(totallist);
    //        context.Response.Write(response);
    //    }
    //    catch
    //    {
    //    }
    //}


    private void save_edit_paireddatadetails(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            string mainbranch = context.Session["mainbranch"].ToString();
            string login_id = context.Session["userid"].ToString();
            string employeid = context.Request["employeid"];
            string phno = context.Request["phno"];
            string imeino = context.Request["imeino"];
            string devicetype = context.Request["devicetype"];
            string devicevertion = context.Request["devicevertion"];
            DateTime ServerDateCurrentdate = DBManager.GetTime(vdm.conn);
            string btn_save = context.Request["btnVal"];
            if (btn_save == "Save")
            {
                cmd = new SqlCommand("insert into paireddata (empid, phoneno, imeino, devicetype, vertion, username, doe, createdby, branchid) values (@empid, @phoneno, @imeino, @devicetype, @devicevertion, @username, @doe, @userid, @branchid)");
                cmd.Parameters.Add("@empid", employeid);
                cmd.Parameters.Add("@phoneno", phno);
                cmd.Parameters.Add("@imeino", imeino);
                cmd.Parameters.Add("@devicetype", devicetype);
                cmd.Parameters.Add("@devicevertion", devicevertion);
                cmd.Parameters.Add("@doe", ServerDateCurrentdate);
                cmd.Parameters.Add("@username", "Vyshnavi");
                cmd.Parameters.Add("@userid", login_id);
                cmd.Parameters.Add("@branchid", mainbranch);
                vdm.insert(cmd);
                string msg = "detailes successfully saved";
                string Response = GetJson(msg);
                context.Response.Write(Response);
            }
            else
            {
                string sno = context.Request["sno"];
                cmd = new SqlCommand("Update paireddata set empid=@empid,phoneno=@phoneno,imeino=@imeino,devicetype=@devicetype,vertion=@devicevertion where sno=@sno");
                cmd.Parameters.Add("@empid", employeid);
                cmd.Parameters.Add("@phoneno", phno);
                cmd.Parameters.Add("@imeino", imeino);
                cmd.Parameters.Add("@devicetype", devicetype);
                cmd.Parameters.Add("@devicevertion", devicevertion);
                cmd.Parameters.Add("@doe", ServerDateCurrentdate);
                cmd.Parameters.Add("@username", "Vyshnavi");
                cmd.Parameters.Add("@userid", login_id);
                cmd.Parameters.Add("@branchid", mainbranch);
                cmd.Parameters.Add("@sno", sno);
                vdm.Update(cmd);
                string msg = "Details successfully updated";
                string Response = GetJson(msg);
                context.Response.Write(Response);
            }
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }

    public class pairdatadetails
    {
        public string phoneno { get; set; }
        public string imeino { get; set; }
        public string sno { get; set; }
        public string devicetype { get; set; }
        public string employee_num { get; set; }
        public string fullname { get; set; }
        public string latitude { get; set; }
        public string longitude { get; set; }
        public string username { get; set; }
        public string doe { get; set; }
    }

    private void get_pairdata_details(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            cmd = new SqlCommand("SELECT paireddata.sno, paireddata.phoneno, paireddata.imeino, paireddata.devicetype, employedetails.employee_num, employedetails.fullname FROM  paireddata INNER JOIN employedetails ON paireddata.empid = employedetails.empid");
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<pairdatadetails> getpairdatalistdetails = new List<pairdatadetails>();
            foreach (DataRow dr in routes.Rows)
            {
                pairdatadetails getpairdatalist = new pairdatadetails();
                getpairdatalist.phoneno = dr["phoneno"].ToString();
                getpairdatalist.imeino = dr["imeino"].ToString();
                getpairdatalist.devicetype = dr["devicetype"].ToString();
                getpairdatalist.employee_num = dr["employee_num"].ToString();
                getpairdatalist.fullname = dr["fullname"].ToString();
                getpairdatalist.sno = dr["sno"].ToString();
                getpairdatalistdetails.Add(getpairdatalist);
            }
            string response = GetJson(getpairdatalistdetails);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);

        }
    }

    private void get_onlinedata_details(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            cmd = new SqlCommand("SELECT sno, imeino, latitude, longitude, username, doe FROM  onlinetable");
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<pairdatadetails> getpairdatalistdetails = new List<pairdatadetails>();
            foreach (DataRow dr in routes.Rows)
            {
                pairdatadetails getpairdatalist = new pairdatadetails();
                getpairdatalist.sno = dr["sno"].ToString();
                getpairdatalist.imeino = dr["imeino"].ToString();
                getpairdatalist.latitude = dr["latitude"].ToString();
                getpairdatalist.longitude = dr["longitude"].ToString();
                getpairdatalist.username = dr["username"].ToString();
                getpairdatalist.doe = dr["doe"].ToString();
                getpairdatalistdetails.Add(getpairdatalist);
            }
            string response = GetJson(getpairdatalistdetails);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);

        }
    }



    public class empworkdetails
    {
        public string employee_num { get; set; }
        public string fullname { get; set; }
        public string WorkingHours { get; set; }
        public string EndTime { get; set; }
        public string StartTime { get; set; }
        public string doe { get; set; }
        public List<string> empname { get; set; }
        public List<string> workhours { get; set; }
    }
    private void get_empwork_details_click(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            string frmdate = context.Request["fromdate"];
            string type = context.Request["type"];
            DateTime fromdate = Convert.ToDateTime(frmdate);
            string tdate = context.Request["todate"];
            DateTime todate = Convert.ToDateTime(tdate);
            string branch = context.Request["branch"];
            string department = context.Request["department"];
            string time = context.Request["time"];
            List<string> empnamelist = new List<string>();
            List<string> hourslist = new List<string>();
            if (time == "Day")
            {
                if (type == "piechart")
                {
                    cmd = new SqlCommand("SELECT  t3.empid, t3.fullname, t3.employee_num, t3.SDate, t4.EDate FROM (SELECT t1.empid, t1.fullname, t1.employee_num, t2.SDate  FROM (SELECT        employedetails.empid, employedetails.fullname, employedetails.employee_num FROM  employedetails INNER JOIN  dailyattandancedetails ON employedetails.empid = dailyattandancedetails.empid WHERE        (employedetails.status = 'NO') AND (employedetails.branchid = @BranchId) AND (employedetails.employee_dept = @empdept) AND (dailyattandancedetails.status = 'P') AND (dailyattandancedetails.attendance_date = @d1)) AS t1 LEFT OUTER JOIN (SELECT MIN(LogDate) AS SDate, EmpId AS Eid FROM AttendanceLogs WHERE (BranchId = @BranchId) AND (LogDate BETWEEN @d1 AND @d2) GROUP BY EmpId) AS t2 ON t1.empid = t2.Eid) AS t3 LEFT OUTER JOIN (SELECT MAX(LogDate) AS EDate, EmpId AS Eid1 FROM AttendanceLogs AS AttendanceLogs_1  WHERE (BranchId = @BranchId) AND (LogDate BETWEEN @d1 AND @d2)GROUP BY EmpId) AS t4 ON t3.empid = t4.Eid1 ORDER BY t3.empid");
                    cmd.Parameters.Add("@d1", GetLowDate(fromdate));
                    cmd.Parameters.Add("@d2", GetHighDate(todate));
                    cmd.Parameters.Add("@branchid", branch);
                    cmd.Parameters.Add("@empdept", department);
                }
                else
                {
                    cmd = new SqlCommand("SELECT  t3.empid, t3.fullname, t3.employee_num, t3.SDate, t4.EDate FROM (SELECT t1.empid, t1.fullname, t1.employee_num, t2.SDate  FROM (SELECT empid, fullname, employee_num FROM employedetails WHERE (status = 'NO') AND (branchid = @BranchId)) AS t1 LEFT OUTER JOIN (SELECT MIN(LogDate) AS SDate, EmpId AS Eid FROM AttendanceLogs WHERE (BranchId = @BranchId) AND (LogDate BETWEEN @d1 AND @d2) GROUP BY EmpId) AS t2 ON t1.empid = t2.Eid) AS t3 LEFT OUTER JOIN (SELECT MAX(LogDate) AS EDate, EmpId AS Eid1 FROM AttendanceLogs AS AttendanceLogs_1  WHERE (BranchId = @BranchId) AND (LogDate BETWEEN @d1 AND @d2) GROUP BY EmpId) AS t4 ON t3.empid = t4.Eid1 ORDER BY t3.empid");
                    cmd.Parameters.Add("@d1", GetLowDate(fromdate));
                    cmd.Parameters.Add("@d2", GetHighDate(todate));
                    cmd.Parameters.Add("@branchid", branch);
                }
            }

            else if (time == "AM")
            {
                cmd = new SqlCommand("SELECT  t3.empid, t3.fullname, t3.employee_num, t3.SDate, t4.EDate FROM (SELECT t1.empid, t1.fullname, t1.employee_num, t2.SDate  FROM (SELECT empid, fullname, employee_num FROM employedetails WHERE (status = 'NO') AND (branchid = @BranchId)) AS t1 LEFT OUTER JOIN (SELECT MIN(LogDate) AS SDate, EmpId AS Eid FROM AttendanceLogs WHERE (BranchId = @BranchId) AND (LogDate BETWEEN @d1 AND @d2) GROUP BY EmpId) AS t2 ON t1.empid = t2.Eid) AS t3 LEFT OUTER JOIN (SELECT MAX(LogDate) AS EDate, EmpId AS Eid1 FROM AttendanceLogs AS AttendanceLogs_1  WHERE (BranchId = @BranchId) AND (LogDate BETWEEN @d1 AND @d2)GROUP BY EmpId) AS t4 ON t3.empid = t4.Eid1 ORDER BY t3.empid");
                cmd.Parameters.Add("@d1", GetLowDate(fromdate));
                cmd.Parameters.Add("@d2", GetHighDate(todate).AddHours(-12));
                cmd.Parameters.Add("@branchid", branch);
            }
            else if (time == "PM")
            {
                cmd = new SqlCommand("SELECT  t3.empid, t3.fullname, t3.employee_num, t3.SDate, t4.EDate FROM (SELECT t1.empid, t1.fullname, t1.employee_num, t2.SDate  FROM (SELECT empid, fullname, employee_num FROM employedetails WHERE (status = 'NO') AND (branchid = @BranchId)) AS t1 LEFT OUTER JOIN (SELECT MIN(LogDate) AS SDate, EmpId AS Eid FROM AttendanceLogs WHERE (BranchId = @BranchId) AND (LogDate BETWEEN @d1 AND @d2) GROUP BY EmpId) AS t2 ON t1.empid = t2.Eid) AS t3 LEFT OUTER JOIN (SELECT MAX(LogDate) AS EDate, EmpId AS Eid1 FROM AttendanceLogs AS AttendanceLogs_1  WHERE (BranchId = @BranchId) AND (LogDate BETWEEN @d1 AND @d2)GROUP BY EmpId) AS t4 ON t3.empid = t4.Eid1 ORDER BY t3.empid");
                cmd.Parameters.Add("@d1", GetHighDate(todate).AddHours(-12));
                cmd.Parameters.Add("@d2", GetHighDate(todate));
                cmd.Parameters.Add("@branchid", branch);
            }
            DataTable dtpo = vdm.SelectQuery(cmd).Tables[0];
            List<empworkdetails> UIMDetails = new List<empworkdetails>();
            List<empworkdetails> lPieValueslist = new List<empworkdetails>();
            foreach (DataRow dr in dtpo.Rows)
            {

                empworkdetails getuim = new empworkdetails();
                getuim.fullname = dr["fullname"].ToString();
                string empname = dr["fullname"].ToString();
                empnamelist.Add(empname);
                string mindate = dr["SDate"].ToString();
                if (mindate != "")
                {
                    DateTime dtDoE1 = Convert.ToDateTime(mindate);
                    string starttime = dtDoE1.ToString("HH:mm");
                    string maxdate = dr["EDate"].ToString();
                    string startinghours = ""; double hours = 0;
                    if (maxdate != "")
                    {
                        DateTime dthur = Convert.ToDateTime(maxdate);
                        string endtime = dthur.ToString("HH:mm");
                        TimeSpan diff = dtDoE1 - dthur;
                        hours = diff.TotalHours;
                        double Hours = Math.Round(hours, 1);
                        getuim.WorkingHours = Math.Abs(Hours).ToString();// hours.ToString();
                        string workhours = Math.Abs(Hours).ToString();
                        hourslist.Add(workhours);
                        getuim.StartTime = starttime;
                        getuim.EndTime = endtime;
                        UIMDetails.Add(getuim);
                    }
                }
            }
            if (type == "piechart")
            {
                empworkdetails GetPieValues = new empworkdetails();
                GetPieValues.empname = empnamelist;
                GetPieValues.workhours = hourslist;
                lPieValueslist.Add(GetPieValues);
                string errresponse = GetJson(lPieValueslist);
                context.Response.Write(errresponse);
            }
            else
            {
                string response = GetJson(UIMDetails);
                context.Response.Write(response);
            }
        }
        catch
        {
        }
    }

    //private void get_empwork_details_click(HttpContext context)
    //{
    //    try
    //    {
    //        vdm = new DBManager();
    //        string frmdate = context.Request["fromdate"];
    //        DateTime fromdate = Convert.ToDateTime(frmdate);
    //        string tdate = context.Request["todate"];
    //        DateTime todate = Convert.ToDateTime(tdate);
    //        string branch = context.Request["branch"];
    //        string time = context.Request["time"];
    //        cmd = new SqlCommand("SELECT  t3.empid, t3.fullname, t3.employee_num, t3.SDate, t4.EDate FROM (SELECT t1.empid, t1.fullname, t1.employee_num, t2.SDate  FROM (SELECT empid, fullname, employee_num FROM employedetails WHERE (status = 'NO') AND (branchid = @BranchId)) AS t1 LEFT OUTER JOIN (SELECT MIN(LogDate) AS SDate, EmpId AS Eid FROM AttendanceLogs WHERE (BranchId = @BranchId) AND (LogDate BETWEEN @d1 AND @d2) GROUP BY EmpId) AS t2 ON t1.empid = t2.Eid) AS t3 LEFT OUTER JOIN (SELECT MAX(LogDate) AS EDate, EmpId AS Eid1 FROM AttendanceLogs AS AttendanceLogs_1  WHERE (BranchId = @BranchId) AND (LogDate BETWEEN @d1 AND @d2)GROUP BY EmpId) AS t4 ON t3.empid = t4.Eid1 ORDER BY t3.empid");
    //        cmd.Parameters.Add("@d1", GetLowDate(fromdate));
    //        cmd.Parameters.Add("@d2", GetHighDate(todate));
    //        cmd.Parameters.Add("@branchid", branch);
    //        DataTable dtpo = vdm.SelectQuery(cmd).Tables[0];
    //        List<empworkdetails> UIMDetails = new List<empworkdetails>();
    //        foreach (DataRow dr in dtpo.Rows)
    //        {
    //            empworkdetails getuim = new empworkdetails();
    //            getuim.fullname = dr["fullname"].ToString();
    //            string mindate = dr["SDate"].ToString();
    //            if (mindate != "")
    //            {
    //                DateTime dtDoE1 = Convert.ToDateTime(mindate);
    //                //string stramtime = dtDoE1.ToString("tt");
    //                //string starttime = dtDoE1.ToString("HH:mm");
    //                //string maxdate = dr["EDate"].ToString();
    //                //string startinghours = ""; double hours = 0; ;
    //                //if (maxdate != "")
    //                //{
    //                //    DateTime dthur = Convert.ToDateTime(maxdate);
    //                //    string endtime = dthur.ToString("HH:mm tt");
    //                //    TimeSpan diff = dtDoE1 - dthur;
    //                //    hours = diff.TotalHours;
    //                //    double Hours = Math.Round(hours, 1);
    //                //    getuim.WorkingHours = Math.Abs(Hours).ToString();// hours.ToString();
    //                //    getuim.StartTime = starttime;
    //                //    getuim.EndTime = endtime;
    //                //    UIMDetails.Add(getuim);
    //                //}
    //                string stramtime = dtDoE1.ToString("tt");
    //                if (time == "AM")
    //                {

    //                    string starttime = dtDoE1.ToString("HH:mm");
    //                    string maxdate = dr["EDate"].ToString();
    //                    string startinghours = ""; double hours = 0; ;
    //                    if (maxdate != "")
    //                    {
    //                        DateTime dthur = Convert.ToDateTime(maxdate);
    //                        string endtime = dthur.ToString("HH:mm");
    //                        TimeSpan diff = dtDoE1 - dthur;
    //                        hours = diff.TotalHours;
    //                        double Hours = Math.Round(hours, 1);
    //                        getuim.WorkingHours = Math.Abs(Hours).ToString();// hours.ToString();
    //                        getuim.StartTime = starttime;
    //                        getuim.EndTime = endtime;
    //                        UIMDetails.Add(getuim);
    //                    }
    //                }
    //                //else
    //                //{

    //                //    string starttime = dtDoE1.ToString("HH:mm tt");
    //                //    string maxdate = dr["EDate"].ToString();
    //                //    string startinghours = ""; double hours = 0; ;
    //                //    if (maxdate != "")
    //                //    {
    //                //        DateTime dthur = Convert.ToDateTime(maxdate);
    //                //        string endtime = dthur.ToString("HH:mm");
    //                //        string strpmtime = dthur.ToString("tt");
    //                //        TimeSpan diff = dtDoE1 - dthur;
    //                //        hours = diff.TotalHours;
    //                //        double Hours = Math.Round(hours, 1);
    //                //        getuim.WorkingHours = Math.Abs(Hours).ToString();// hours.ToString();
    //                //        getuim.StartTime = starttime;
    //                //        getuim.EndTime = endtime;
    //                //        UIMDetails.Add(getuim);
    //                //    }
    //                }
    //            //}
    //        }
    //        string response = GetJson(UIMDetails);
    //        context.Response.Write(response);
    //    }
    //    catch
    //    {
    //    }
    //}

    public class Companyfillbranch
    {
        public string CompanyCode { get; set; }
        public string CompanyName { get; set; }
        public string branchname { get; set; }
        public string branchid { get; set; }
        public string mailId { get; set; }
        public string TINNo { get; set; }
        public string employee_type { get; set; }
        //public string CSTNo { get; set; }
    }
    private void get_compaywisebranchname_fill(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            string companyid = context.Request["companyid"];
            if (companyid == "ALL")
            {
                string bid = context.Session["branchid"].ToString();
                string mainbranch = context.Session["mainbranch"].ToString();
                if (bid == mainbranch || bid == "1")
                {
                    cmd = new SqlCommand("SELECT branchmaster.branchid, branchmaster.branchname, company_master.sno,company_master.companyname FROM branchmapping INNER JOIN branchmaster ON branchmapping.subbranch = branchmaster.branchid INNER JOIN company_master ON branchmaster.company_code = company_master.sno WHERE (branchmapping.mainbranch = @m) ");
                    cmd.Parameters.Add("@m", mainbranch);
                }
                else
                {
                    cmd = new SqlCommand("SELECT branchmaster.branchid, branchmaster.branchname, company_master.sno,company_master.companyname FROM branchmapping INNER JOIN branchmaster ON branchmapping.subbranch = branchmaster.branchid INNER JOIN company_master ON branchmaster.company_code = company_master.sno WHERE (branchmapping.subbranch = @m)");
                    cmd.Parameters.Add("@m", bid);
                }
                DataTable routes = vdm.SelectQuery(cmd).Tables[0];
                List<Companyfillbranch> companyMasterlist = new List<Companyfillbranch>();
                foreach (DataRow dr in routes.Rows)
                {
                    Companyfillbranch getcompanydetails = new Companyfillbranch();
                    getcompanydetails.CompanyCode = dr["sno"].ToString();
                    getcompanydetails.CompanyName = dr["companyname"].ToString();
                    getcompanydetails.branchname = dr["branchname"].ToString();
                    getcompanydetails.branchid = dr["branchid"].ToString();
                    companyMasterlist.Add(getcompanydetails);
                }
                string response = GetJson(companyMasterlist);
                context.Response.Write(response);
            }

            else
            {
                string bid = context.Session["branchid"].ToString();
                string mainbranch = context.Session["mainbranch"].ToString();
                if (bid == mainbranch || bid == "1")
                {
                    cmd = new SqlCommand("SELECT branchmaster.branchid, branchmaster.branchname, company_master.sno,company_master.companyname FROM branchmapping INNER JOIN branchmaster ON branchmapping.subbranch = branchmaster.branchid INNER JOIN company_master ON branchmaster.company_code = company_master.sno WHERE (branchmapping.mainbranch = @m) AND (branchmaster.company_code = @company)");
                    cmd.Parameters.Add("@company", companyid);
                    cmd.Parameters.Add("@m", mainbranch);
                }
                else
                {
                    cmd = new SqlCommand("SELECT branchmaster.branchid, branchmaster.branchname, company_master.sno,company_master.companyname FROM branchmapping INNER JOIN branchmaster ON branchmapping.subbranch = branchmaster.branchid INNER JOIN company_master ON branchmaster.company_code = company_master.sno WHERE (branchmapping.subbranch = @m) AND (branchmaster.company_code = @company)");
                    cmd.Parameters.Add("@company", companyid);
                    cmd.Parameters.Add("@m", bid);
                }
                DataTable routes = vdm.SelectQuery(cmd).Tables[0];
                List<Companyfillbranch> companyMasterlist = new List<Companyfillbranch>();
                foreach (DataRow dr in routes.Rows)
                {
                    Companyfillbranch getcompanydetails = new Companyfillbranch();
                    getcompanydetails.CompanyCode = dr["sno"].ToString();
                    getcompanydetails.CompanyName = dr["companyname"].ToString();
                    getcompanydetails.branchname = dr["branchname"].ToString();
                    getcompanydetails.branchid = dr["branchid"].ToString();
                    companyMasterlist.Add(getcompanydetails);
                }

                string response = GetJson(companyMasterlist);
                context.Response.Write(response);
            }
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }





    private void savegrplederDetails(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            string ledgercode = context.Request["ledgercode"];
            string ledgername = context.Request["ledgername"];
            DateTime createdon = DateTime.Now;
            string btn_save = context.Request["btnVal"];
            if (btn_save == "Save")
            {
                cmd = new SqlCommand("insert into glgroup (glcode,glname) values (@glcode,@glname)");
                cmd.Parameters.Add("@glcode", ledgercode);
                cmd.Parameters.Add("@glname", ledgername);
                vdm.insert(cmd);
                string msg = "details successfully saved";
                string Response = GetJson(msg);
                context.Response.Write(Response);
            }
            else
            {
                string sno = context.Request["sno"];
                cmd = new SqlCommand("Update glgroup set  glcode=@glcode,glname=@glname where sno=@sno");
                cmd.Parameters.Add("@glcode", ledgercode);
                cmd.Parameters.Add("@glname", ledgername);
                cmd.Parameters.Add("@sno", sno);
                vdm.Update(cmd);
                string msg = "successfully updated";
                string Response = GetJson(msg);
                context.Response.Write(Response);
            }
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }

    public class ledgerMaster
    {
        public string ledgername { get; set; }
        public string ledgercode { get; set; }
        public string sno { get; set; }
        public string code { get; set; }
    }
    private void get_Groupledger_details(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            cmd = new SqlCommand("SELECT sno,glcode, glname FROM glgroup");
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<ledgerMaster> GrpldgrMasterlist = new List<ledgerMaster>();
            foreach (DataRow dr in routes.Rows)
            {
                ledgerMaster getGrpledgerdetails = new ledgerMaster();
                getGrpledgerdetails.ledgercode = dr["glcode"].ToString();
                getGrpledgerdetails.ledgername = dr["glname"].ToString();
                getGrpledgerdetails.sno = dr["sno"].ToString();
                GrpldgrMasterlist.Add(getGrpledgerdetails);
            }
            string response = GetJson(GrpldgrMasterlist);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);

        }
    }

    private void save_grouptype_click(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            string branchid = context.Request["branchid"];
            string Groupldrname = context.Request["Groupldrname"];
            string ledgername = context.Request["ledgername"];
            string ledgercode = context.Request["ledgercode"];
            DateTime createdon = DateTime.Now;
            string btn_save = context.Request["btnVal"];
            if (btn_save == "Save")
            {
                cmd = new SqlCommand("insert into groupledgername (glcodesno,ledgername,ledgercode,branchid) values (@glcodesno,@ledgername,@ledgercode,@branchid)");
                cmd.Parameters.Add("@branchid", branchid);
                cmd.Parameters.Add("@glcodesno", Groupldrname);
                cmd.Parameters.Add("@ledgername", ledgername);
                cmd.Parameters.Add("@ledgercode", ledgercode);
                vdm.insert(cmd);
                string msg = "successfully saved";
                string Response = GetJson(msg);
                context.Response.Write(Response);
            }
            else
            {
                string sno = context.Request["sno"];
                cmd = new SqlCommand("Update groupledgername set  branchid=@branchid, glcodesno=@glcodesno,ledgername=@ledgername,ledgercode=@ledgercode where sno=@sno");
                cmd.Parameters.Add("@branchid", branchid);
                cmd.Parameters.Add("@glcodesno", Groupldrname);
                cmd.Parameters.Add("@ledgername", ledgername);
                cmd.Parameters.Add("@ledgercode", ledgercode);
                cmd.Parameters.Add("@sno", sno);
                vdm.Update(cmd);
                string msg = "successfully updated";
                string Response = GetJson(msg);
                context.Response.Write(Response);
            }
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }
    public class GrouptypeledgerMaster
    {
        public string ledgername { get; set; }
        public string ledgercode { get; set; }
        public string sno { get; set; }
        public string Groupldrid { get; set; }
        public string Groupldrname { get; set; }
        public string branchname { get; set; }
        public string branchid { get; set; }
    }
    private void get_Grouptype_details(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            cmd = new SqlCommand("SELECT groupledgername.ledgername, groupledgername.ledgercode, glgroup.glname, branchmaster.branchname, groupledgername.sno, groupledgername.glcodesno, groupledgername.branchid FROM  branchmaster INNER JOIN  groupledgername ON branchmaster.branchid = groupledgername.branchid INNER JOIN glgroup ON groupledgername.glcodesno = glgroup.sno");
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<GrouptypeledgerMaster> GrpTypeldgrMasterlist = new List<GrouptypeledgerMaster>();
            foreach (DataRow dr in routes.Rows)
            {
                GrouptypeledgerMaster GrpTypeldgrMaster = new GrouptypeledgerMaster();
                GrpTypeldgrMaster.branchname = dr["branchname"].ToString();
                GrpTypeldgrMaster.branchid = dr["branchid"].ToString();
                GrpTypeldgrMaster.Groupldrid = dr["glcodesno"].ToString();
                GrpTypeldgrMaster.Groupldrname = dr["glname"].ToString();
                GrpTypeldgrMaster.ledgername = dr["ledgername"].ToString();
                GrpTypeldgrMaster.ledgercode = dr["ledgercode"].ToString();
                GrpTypeldgrMaster.sno = dr["sno"].ToString();
                GrpTypeldgrMasterlist.Add(GrpTypeldgrMaster);
            }
            string response = GetJson(GrpTypeldgrMasterlist);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);

        }
    }

    public class Employeebiometric
    {
        public string empsno { get; set; }
        public string employee_name { get; set; }
        public string attendance_status { get; set; }
        public string registrationid { get; set; }
        public string status { get; set; }
        public string Date { get; set; }
        public string LogDate { get; set; }
        public string attendance_date { get; set; }

    }

    public class employeebiomeruc  // Employeemonthlyattendence
    {
        public string empsno { get; set; }
        public string employee_name { get; set; }
    }
    public class Allbiomertcdates
    {
        public string Betweendates { get; set; }
        public string Empid { get; set; }
        public string Employeename { get; set; }
        public string designation { get; set; }
        public string branchname { get; set; }
    }
    public class Employeebiomtericattendencedates //Employeemonthlyattendencedates
    {
        public List<employeebiomeruc> employeebiomeruc { get; set; }
        public List<Allbiomertcdates> Allbiomertcdates { get; set; }
        public List<biometricAttendance> biometricAttendance { get; set; }

    }
    public class biometricAttendance
    {
        public string Empid { get; set; }
        public string Employeename { get; set; }
        //public string branchid { get; set; }
        public string LogDate { get; set; }
        public string status { get; set; }
        public string attendance_date { get; set; }
        public string Time_diff { get; set; }
    }
    private void get_employeesAttendencebiometric(HttpContext context)
    {
        vdm = new DBManager();
        string branch = context.Request["branch"];
        string fromdate = context.Request["fromdate"];
        string todate = context.Request["todate"];
        DateTime FrmDate = Convert.ToDateTime(fromdate);
        DateTime Tdate = Convert.ToDateTime(todate);
        cmd = new SqlCommand("SELECT employedetails.empid,employedetails.fullname, dailyattandancedetails.status, CONVERT(Nvarchar(15),dailyattandancedetails.attendance_date,101) AS attendance_date, dailyattandancedetails.doe FROM employedetails INNER JOIN dailyattandancedetails ON employedetails.empid = dailyattandancedetails.empid WHERE (dailyattandancedetails.attendance_date BETWEEN @d1 AND @d2) AND (dailyattandancedetails.branchid = @branchid)");
        //cmd = new SqlCommand("SELECT  employedetails.empid, employedetails.fullname, employedetails.branchid, dailyattandancedetails.attendance_date, dailyattandancedetails.status FROM employedetails LEFT OUTER JOIN dailyattandancedetails ON employedetails.empid = dailyattandancedetails.empid WHERE (employedetails.branchid = @branchid) AND (employedetails.status = 'NO')");
        //cmd = new SqlCommand("SELECT   t1.empid, t1.fullname, ISNULL(f2.D, '') AS Expr1, t1.employee_num FROM  (SELECT empid, fullname, employee_num FROM employedetails WHERE (branchid = @branchid) AND (status = 'No')) AS t1 LEFT OUTER JOIN (SELECT Eid, D FROM  (SELECT  empid AS Eid, CONVERT(nvarchar(20), attendance_date, 103) AS D  FROM dailyattandancedetails WHERE (attendance_date BETWEEN @d1 AND @d2) AND (branchid = @branchid) GROUP BY empid, attendance_date) AS t2 GROUP BY Eid, D) AS f2 ON t1.empid = f2.Eid");
        cmd.Parameters.Add("@branchid", branch);
        cmd.Parameters.Add("@d1", GetLowDate(FrmDate));
        cmd.Parameters.Add("@d2", GetHighDate(Tdate));
        DataTable dtempattendance = vdm.SelectQuery(cmd).Tables[0];
        List<Allbiomertcdates> Alldateslists = new List<Allbiomertcdates>();
        List<biometricAttendance> Attendancelists = new List<biometricAttendance>();
        List<employeebiomeruc> empmonthlys = new List<employeebiomeruc>();
        List<Employeebiomtericattendencedates> Employeemonthlyattendencedateslists = new List<Employeebiomtericattendencedates>();
        DateTime FromDate = Convert.ToDateTime(fromdate);
        DateTime Todate = Convert.ToDateTime(todate);
        int days = FromDate.Day;
        TimeSpan dateSpan = Todate.Subtract(FromDate);
        int NoOfdays = dateSpan.Days;
        NoOfdays = NoOfdays + 1;
        for (int j = 0; j < NoOfdays; j++)
        {
            Allbiomertcdates obj1 = new Allbiomertcdates();
            string dtcount = FromDate.AddDays(j).ToString();
            DateTime dtDOE = Convert.ToDateTime(dtcount);
            string dtdate1 = dtDOE.AddDays(-1).ToString();
            DateTime dtDOE1 = Convert.ToDateTime(dtdate1).AddDays(1);
            string ChangedTime1 = dtDOE1.ToString("MM/dd/yyyy", CultureInfo.InvariantCulture);
            obj1.Betweendates = ChangedTime1;
            Alldateslists.Add(obj1);
        }
        if (dtempattendance.Rows.Count > 0)
        {
            foreach (DataRow dratten in dtempattendance.Rows)
            {
                biometricAttendance getattendance = new biometricAttendance();
                getattendance.Empid = dratten["empid"].ToString();
                getattendance.Employeename = dratten["fullname"].ToString();
                //getattendance.branchid = dratten["branchid"].ToString();
                string date = dratten["attendance_date"].ToString();
                string attendance_date = dratten["attendance_date"].ToString();
                getattendance.attendance_date = dratten["attendance_date"].ToString();
                //getattendance.status = dratten["status"].ToString();
                string status = dratten["status"].ToString();
                if (attendance_date != "")
                {
                    DateTime dtDoe = Convert.ToDateTime(attendance_date);
                    string strdateTime = dtDoe.ToString("HH");
                    string strdate = dtDoe.ToString("dd/MMM");
                    if (status == "P")
                    {
                        status = "P";
                        //NoOfdays++;
                    }
                    else
                    {
                        status = " ";

                    }
                }
                getattendance.status = status;
                getattendance.LogDate = date;
                Attendancelists.Add(getattendance);
            }
        }
        Employeebiomtericattendencedates obj2 = new Employeebiomtericattendencedates();
        obj2.Allbiomertcdates = Alldateslists;
        obj2.biometricAttendance = Attendancelists;
        Employeemonthlyattendencedateslists.Add(obj2);
        string response = GetJson(Employeemonthlyattendencedateslists);
        context.Response.Write(response);
    }


    private void get_blogs(HttpContext context)
    {
        try
        {
            DataTable Report = new DataTable();
            vdm = new DBManager();
            List<biometricAttendance> Attendancelists = new List<biometricAttendance>();
            List<Allbiomertcdates> Alldateslists = new List<Allbiomertcdates>();
            List<Employeebiomtericattendencedates> Employeemonthlyattendencedateslists = new List<Employeebiomtericattendencedates>();
            string branch = context.Request["branch"];
            string fromdate = context.Request["fromdate"];
            string todate = context.Request["todate"];
            DateTime FrmDate = Convert.ToDateTime(fromdate);
            DateTime Tdate = Convert.ToDateTime(todate);
            TimeSpan dateSpan = Tdate.Subtract(FrmDate);
            int NoOfdays = dateSpan.Days;
            NoOfdays = NoOfdays + 2;
            //cmd = new SqlCommand("SELECT employedetails.empid,employedetails.fullname, dailyattandancedetails.status, dailyattandancedetails.attendance_date, dailyattandancedetails.doe FROM employedetails INNER JOIN dailyattandancedetails ON employedetails.empid = dailyattandancedetails.empid WHERE (dailyattandancedetails.attendance_date BETWEEN @fromdate AND @todate) AND (dailyattandancedetails.branchid = @b)");
            cmd = new SqlCommand("SELECT  ff1.Eid, ff1.Sfd, ff1.Mfd, ff1.date, ISNULL(ff2.fname, 'N') as FNAME, ff2.estatus " +
                       " FROM (SELECT  f1.Seid AS Eid, f1.Sdate AS Sfd, f1.dat, f2.meid, f2.Mdate AS Mfd, f2.mdat AS date " +
                       " FROM (SELECT  EmpId AS Seid, MIN(Smdate) AS Sdate, dat " +
                       " FROM (SELECT   EmpId, LogDate AS Smdate, CONVERT(nvarchar(15), LogDate, 101) AS dat " +
                       " FROM    AttendanceLogs " +
                       " WHERE (LogDate BETWEEN @d1 AND @d2) AND (BranchId = @b1)) AS t1 " +
                       " GROUP BY dat, EmpId) AS f1 LEFT OUTER JOIN " +
                       " (SELECT  meid, MAX(Smdate) AS Mdate, mdat  " +
                       " FROM   (SELECT        EmpId AS meid, LogDate AS Smdate, CONVERT(nvarchar(15), LogDate, 101) AS mdat " +
                       "  FROM   AttendanceLogs AS AttendanceLogs_1 " +
                       " WHERE (LogDate BETWEEN @d1 AND @d2) AND (BranchId = @b1)) AS t2 " +
                       " GROUP BY mdat, meid) AS f2 ON f1.Seid = f2.meid AND f1.dat = f2.mdat) AS ff1 LEFT OUTER JOIN " +
                       " (SELECT employedetails.empid, employedetails.fullname AS fname, dailyattandancedetails.status AS estatus, dailyattandancedetails.attendance_date AS kattendate, dailyattandancedetails.doe " +
                       "  FROM  employedetails INNER JOIN " +
                       "   dailyattandancedetails ON employedetails.empid = dailyattandancedetails.empid " +
                       "  WHERE   (dailyattandancedetails.attendance_date BETWEEN @d1 AND @d2) AND (dailyattandancedetails.branchid = @b1)) AS ff2 ON ff1.Eid = ff2.empid AND ff1.date = ff2.kattendate");
            cmd.Parameters.Add("@b1", branch);
            cmd.Parameters.Add("@d1", GetLowDate(FrmDate));
            cmd.Parameters.Add("@d2", GetHighDate(Tdate));
            DataTable dtPuff = vdm.SelectQuery(cmd).Tables[0];
            DataTable sum = new DataTable();
            sum = dtPuff.Copy();
            int count = 0;
            DateTime dtFrm = new DateTime();
            for (int j = 1; j < NoOfdays; j++)
            {
                if (j == 1)
                {
                    dtFrm = FrmDate;
                }
                else
                {
                    dtFrm = dtFrm.AddDays(1);
                }
                string strdate = dtFrm.ToString("dd/MMM");
                Allbiomertcdates obj1 = new Allbiomertcdates();
                obj1.Betweendates = strdate;
                Alldateslists.Add(obj1);
                count++;
            }

            DataView view = new DataView(sum);
            DataTable DriverData = view.ToTable(true, "fname");

            int i = 1;
            foreach (DataRow dr in DriverData.Rows)
            {
                string ddname = dr["fname"].ToString();
                if (ddname != "N")
                {
                    string Sno = i++.ToString();
                    int total = 0;

                    foreach (DataRow drDriver in sum.Rows)
                    {
                        biometricAttendance getattendance = new biometricAttendance();
                        if (dr["fname"].ToString() == drDriver["fname"].ToString())
                        {
                            //newrow["empid"] = drDriver["empid"].ToString();
                            string fullname = drDriver["fname"].ToString();
                            string empid = drDriver["Eid"].ToString();
                            string attendance_date = drDriver["date"].ToString();
                            string status = drDriver["estatus"].ToString();
                            string logdate = "";
                            string logstatus = "";
                            string Timediff = "";
                            if (attendance_date != "")
                            {
                                DateTime dtDoe = Convert.ToDateTime(attendance_date);
                                string strdateTime = dtDoe.ToString("HH");
                                string strdate = dtDoe.ToString("dd/MMM");
                                if (status == "P")
                                {
                                    logdate = strdate;
                                    logstatus = "P";
                                    Timediff = drDriver["estatus"].ToString();
                                    total++;
                                }
                                else
                                {
                                    logdate = strdate;

                                    logstatus = "A";
                                    Timediff = "0";
                                }
                                //
                                string mindate = drDriver["Sfd"].ToString();
                                if (mindate != "")
                                {
                                    DateTime dtDoE1 = Convert.ToDateTime(mindate);
                                    string starttime = dtDoE1.ToString("HH:mm");
                                    string maxdate = drDriver["Mfd"].ToString();
                                    string startinghours = ""; double hours = 0;
                                    if (maxdate != "")
                                    {
                                        DateTime dthur = Convert.ToDateTime(maxdate);
                                        string endtime = dthur.ToString("HH:mm");
                                        TimeSpan diff = dtDoE1 - dthur;
                                        hours = diff.TotalHours;
                                        double Hours = Math.Round(hours, 1);
                                        getattendance.Time_diff = Math.Abs(Hours).ToString();
                                    }
                                }
                            }
                            getattendance.Employeename = fullname;
                            getattendance.LogDate = logdate;
                            getattendance.status = logstatus;
                            getattendance.Empid = empid;
                            //getattendance.Time_diff = Timediff;
                            Attendancelists.Add(getattendance);
                        }
                    }
                }
            }
            Employeebiomtericattendencedates obj2 = new Employeebiomtericattendencedates();
            obj2.Allbiomertcdates = Alldateslists;
            obj2.biometricAttendance = Attendancelists;
            Employeemonthlyattendencedateslists.Add(obj2);
            string response = GetJson(Employeemonthlyattendencedateslists);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {

        }
    }

    public class empbiologs
    {

        public string logdate { get; set; }
        public string Status { get; set; }
        public string branchname { get; set; }
        public string empname { get; set; }
    }

    private void get_bimetriclogdetails_details(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            List<empbiologs> emplyeebiologscountlist = new List<empbiologs>();
            string logdate = "";
            string eid = context.Request["empid"].ToString();
            string[] bs = eid.Split('-');
            logdate = bs[1];
            string empid = bs[0];
            DateTime ServerDateCurrentdate = DBManager.GetTime(vdm.conn);
            DateTime dtfromdate = ServerDateCurrentdate;
            DateTime dttodate = ServerDateCurrentdate;
            string amonth = "";
            string ayear = "";
            int totalcount = 0;
            double basictotal = 0;
            DateTime fromdate = ServerDateCurrentdate;
            string frmdate = fromdate.ToString("MM/dd/yyyy");
            string[] str = frmdate.Split('/');
            string years = str[2];
            string[] logstr = logdate.Split('/');
            string date = logstr[0];
            string month = logstr[1];
            string biologdate = month + "/" + date + "/" + years;
            DateTime dt = Convert.ToDateTime(biologdate);
            //cmd = new SqlCommand("SELECT DeviceLogId, ReceivedDate, DeviceId, EmpId, LogDate, Direction, BranchId, Status  FROM   AttendanceLogs  WHERE  (EmpId = @empid) AND (LogDate BETWEEN @d1 AND @d2) order by LogDate");
            cmd = new SqlCommand("SELECT  AttendanceLogs.LogDate, AttendanceLogs.Direction, branchmaster.branchname FROM    AttendanceLogs INNER JOIN branchmaster ON AttendanceLogs.BranchId = branchmaster.branchid WHERE   (AttendanceLogs.EmpId = @empid) AND (AttendanceLogs.LogDate BETWEEN @d1 AND @d2) GROUP BY AttendanceLogs.LogDate, AttendanceLogs.Direction, branchmaster.branchname ORDER BY AttendanceLogs.LogDate");
            cmd.Parameters.Add("@empid", empid);
            cmd.Parameters.Add("@d1", GetLowDate(dt));
            cmd.Parameters.Add("@d2", GetHighDate(dt));
            DataTable logs = vdm.SelectQuery(cmd).Tables[0];
            if (logs.Rows.Count > 0)
            {
                foreach (DataRow dr in logs.Rows)
                {
                    empbiologs emplyeebiologs = new empbiologs();
                    emplyeebiologs.branchname = dr["branchname"].ToString();
                    emplyeebiologs.logdate = dr["LogDate"].ToString();
                    // logs directions are changing because of it showing reverse directions
                    string Direction = dr["Direction"].ToString();
                    if (Direction == "out")
                    {
                        emplyeebiologs.Status = "in";
                    }
                    else
                    {
                        emplyeebiologs.Status = "out";
                    }
                    emplyeebiologscountlist.Add(emplyeebiologs);
                }
                string response = GetJson(emplyeebiologscountlist);
                context.Response.Write(response);
            }

        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);

        }
    }


    private void get_empbiologdetails(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            List<empbiologs> emplyeebiologscountlist = new List<empbiologs>();
            string logdate = "";
            string branch = context.Request["branch"];
            string fromdate = context.Request["fromdate"];
            string todate = context.Request["todate"];
            DateTime FrmDate = Convert.ToDateTime(fromdate);
            DateTime Tdate = Convert.ToDateTime(todate);
            DataTable Report = new DataTable();
            Report.Columns.Add("empname");
            Report.Columns.Add("time");
            Report.Columns.Add("in");
            Report.Columns.Add("out");
            cmd = new SqlCommand("SELECT  empid, fullname  FROM  employedetails  WHERE (status = 'NO') AND (branchid = @branch)  ORDER BY empid");
            cmd.Parameters.Add("@branch", branch);
            DataTable emplogs = vdm.SelectQuery(cmd).Tables[0];

            cmd = new SqlCommand("SELECT  AttendanceLogs.LogDate, AttendanceLogs.EmpId, AttendanceLogs.Direction, branchmaster.branchname FROM    AttendanceLogs INNER JOIN branchmaster ON AttendanceLogs.BranchId = branchmaster.branchid WHERE (AttendanceLogs.LogDate BETWEEN @d1 AND @d2) GROUP BY AttendanceLogs.LogDate, AttendanceLogs.Direction, branchmaster.branchname, AttendanceLogs.EmpId ORDER BY AttendanceLogs.LogDate");
            cmd.Parameters.Add("@d1", GetLowDate(FrmDate));
            cmd.Parameters.Add("@d2", GetHighDate(Tdate));
            DataTable logs = vdm.SelectQuery(cmd).Tables[0];

            if (emplogs.Rows.Count > 0)
            {
                foreach (DataRow dr in emplogs.Rows)
                {
                  
                    empbiologs emplyeebiologs = new empbiologs();
                    string empid = dr["empid"].ToString();
                    string empname = dr["fullname"].ToString();
                    
                    emplyeebiologs.empname = dr["fullname"].ToString();
                    foreach (DataRow drl in logs.Select("EmpId='" + empid + "'"))
                    {
                        DataRow newrow = Report.NewRow();
                        newrow["empname"] = empname;
                        emplyeebiologs.branchname = drl["branchname"].ToString();
                        emplyeebiologs.logdate = drl["LogDate"].ToString();
                        string mindate = drl["LogDate"].ToString();
                        if (mindate != "")
                        {
                            DateTime dtDoE1 = Convert.ToDateTime(mindate);
                            string starttime = dtDoE1.ToString("HH:mm");
                            newrow["time"] = starttime;
                        }
                        string Direction = drl["Direction"].ToString();
                        if (Direction == "out")
                        {
                            emplyeebiologs.Status = "in";
                            string Status = "in";
                            newrow["in"] = Status;
                        }
                        else
                        {
                            emplyeebiologs.Status = "out";
                            string Status = "out";
                            newrow["out"] = Status;
                        }
                        Report.Rows.Add(newrow);
                        emplyeebiologscountlist.Add(emplyeebiologs);
                    }
                }
            }
            //cmd = new SqlCommand("SELECT DeviceLogId, ReceivedDate, DeviceId, EmpId, LogDate, Direction, BranchId, Status  FROM   AttendanceLogs  WHERE  (EmpId = @empid) AND (LogDate BETWEEN @d1 AND @d2) order by LogDate");

            if (Report.Rows.Count > 0)
            {
                foreach (DataRow dr in logs.Rows)
                {
                    
                }
                string response = GetJson(emplyeebiologscountlist);
                context.Response.Write(response);
            }

        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);

        }
    }



    public class EmployeeFianlsttlement
    {
        public List<EmployeeFianlsttlement> emplist { get; set; }
        public List<EmployeeFianlsttlement> empresiglist { get; set; }
        public string sno { set; get; }
        public string empid { set; get; }
        public string employee_num { set; get; }
        public string fullname { set; get; }
        public string branchname { set; get; }
        public string lastworkingday { set; get; }
        public string resignationdate { set; get; }
        public string department { set; get; }
        public string joindate { set; get; }
        public string designation { set; get; }
        public string lastsalpaid { set; get; }
        public string numpaydays { set; get; }
        public string daysinmonth { set; get; }
        public string basic { set; get; }
        public string hra { set; get; }
        public string convenace { set; get; }
        public string medicalallowance { set; get; }
        public string washingallowance { set; get; }
        public string pt { set; get; }
        public string pf { set; get; }
        public string esi { set; get; }
        public string otherdeduction { set; get; }
        public string salaryadavance { set; get; }
        public string loan { set; get; }
        public string mobilededuction { set; get; }
        public string canteendeduction { set; get; }
        public string tdsdedcution { set; get; }
        public string medicliam { set; get; }
        public string totalearnings { set; get; }
        public string totaldeduction { set; get; }
        public string netpay { set; get; }
        public string pldays { set; get; }
        public string noticeprdadjstble { set; get; }
        public string applicationletter { set; get; }
        public string month { set; get; }
    }

    private void get_finalsttelement_details_click(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            string empid = context.Request["empid"];
            int i;
            //for (i = 1; i <= 2; i++)
            //{
            DateTime ServerDateCurrentdate = DBManager.GetTime(vdm.conn);
            DateTime dtfromdate = ServerDateCurrentdate;
            //string fromdate = context.Request["startDate"];
            DateTime dateofaffence = Convert.ToDateTime(dtfromdate);
            string strfromdate = dateofaffence.ToString("dd/MM/yyyy");
            string[] str = strfromdate.Split('/');
            string fromyear = str[2];
            string frommonth = str[1];
            DateTime lastmonthdt = dateofaffence.AddMonths(-1);
            int lastmonth = lastmonthdt.Month;
            int Year = lastmonthdt.Year;
            //cmd = new SqlCommand("SELECT TOP (1) employedetails.empid, employedetails.employee_num, monthlysalarystatement.payabledays,monthlysalarystatement.mobilededuction,monthlysalarystatement.daysmonth,employedetails.fullname, employedetails.joindate, employedetails.dob, employedetails.home_address, employedetails.presentaddress,employedetails.nameasforaadhar, employedetails.designationid, departments.department, designation.designation, branchmaster.branchname, empresignationdetails.resignationdate,empresignationdetails.lastworkingday, monthlysalarystatement.salary, monthlysalarystatement.basic, monthlysalarystatement.hra, monthlysalarystatement.conveyance, monthlysalarystatement.medical, monthlysalarystatement.washing, monthlysalarystatement.pt, monthlysalarystatement.gross, monthlysalarystatement.salaryadvance, monthlysalarystatement.esi, monthlysalarystatement.pf, monthlysalarystatement.loan, monthlysalarystatement.canteendeduction, monthlysalarystatement.mediclim, monthlysalarystatement.otherdeduction, monthlysalarystatement.totaldeduction, monthlysalarystatement.netpay, monthlysalarystatement.month, monthlysalarystatement.year, monthlysalarystatement.tdsdeduction, monthlysalarystatement.sno FROM employedetails INNER JOIN departments ON employedetails.employee_dept = departments.deptid INNER JOIN designation ON employedetails.designationid = designation.designationid INNER JOIN branchmaster ON employedetails.branchid = branchmaster.branchid LEFT OUTER JOIN monthlysalarystatement ON employedetails.empid = monthlysalarystatement.empid LEFT OUTER JOIN empresignationdetails ON employedetails.empid = empresignationdetails.empid WHERE (employedetails.empid = @empid)AND (monthlysalarystatement.month = @month)  ORDER BY monthlysalarystatement.sno DESC");
            cmd = new SqlCommand("SELECT  TOP (1) employedetails.fullname, empresignationdetails.resignationdate, employedetails.joindate, empresignationdetails.willingtoquitdate, empresignationdetails.lastworkingday,  empresignationdetails.noticeperiod, empresignationdetails.resignationsumbitedon, empresignationdetails.willingtoquitearlierthannoticeperiod, empresignationdetails.approvaldate, designation.designation,   branchmaster.branchname, departments.department FROM  employedetails INNER JOIN branchmaster ON employedetails.branchid = branchmaster.branchid INNER JOIN designation ON employedetails.designationid = designation.designationid INNER JOIN  departments ON employedetails.employee_dept = departments.deptid LEFT OUTER JOIN empresignationdetails ON employedetails.empid = empresignationdetails.empid WHERE  (employedetails.empid = @empid) ORDER BY empresignationdetails.sno DESC");
            cmd.Parameters.Add("@empid", empid);
            DataTable routes1 = vdm.SelectQuery(cmd).Tables[0];
            cmd = new SqlCommand("SELECT  TOP (2) sno, employecode, empname, designation, daysmonth, attandancedays, clandholidayoff, payabledays, salary, basic, hra, conveyance, medical, washing, gross, pt, pf, esi, salaryadvance, loan,  canteendeduction, mobilededuction, mediclim, otherdeduction, totaldeduction, netpay, bankaccountno, ifsccode, emptype, branchid, month, dateofclosing, closedby, year, deptid, tdsdeduction, betaperday,  attendancebonus, type, empid FROM monthlysalarystatement WHERE (empid = @empid) ORDER BY sno DESC");
            cmd.Parameters.Add("@empid", empid);
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<EmployeeFianlsttlement> emploanlist = new List<EmployeeFianlsttlement>();
            List<EmployeeFianlsttlement> empresinlist = new List<EmployeeFianlsttlement>();
            List<EmployeeFianlsttlement> fullsetelment = new List<EmployeeFianlsttlement>();
            foreach (DataRow dr in routes1.Rows)
            {
                EmployeeFianlsttlement getfullstlmnt = new EmployeeFianlsttlement();
                //getfullstlmnt.sno = dr["sno"].ToString();
                //getfullstlmnt.empid = dr["empid"].ToString();
                getfullstlmnt.fullname = dr["fullname"].ToString();
                //getfullstlmnt.fathername = dr["fathername"].ToString();
                //getfullstlmnt.presentaddress = dr["presentaddress"].ToString();
                string dob = dr["joindate"].ToString();
                if (dob == "" || dob == null)
                {
                    getfullstlmnt.joindate = "";
                }
                else
                {
                    DateTime date = Convert.ToDateTime(dob);
                    string strtime = date.ToString("dd-MMM-yyyy");
                    getfullstlmnt.joindate = strtime;
                }
                //getloan.dob = ((DateTime)dr["dob"]).ToString("dd-MM-yyyy"); //dr["dob"].ToString();
                getfullstlmnt.designation = dr["designation"].ToString();
                getfullstlmnt.department = dr["department"].ToString();

                string lastworkingday = dr["lastworkingday"].ToString();
                if (lastworkingday == "" || lastworkingday == null)
                {
                    getfullstlmnt.lastworkingday = "";
                }
                else
                {
                    DateTime date = Convert.ToDateTime(lastworkingday);
                    string strtime = date.ToString("dd-MMM-yyyy");
                    getfullstlmnt.lastworkingday = strtime;
                }
                //getfullstlmnt.lastworkingday = dr["lastworkingday"].ToString(); //((DateTime)dr["lastworkingday"]).ToString("yyyy-MMM-dd"); //dr["salarydate"].ToString();
                getfullstlmnt.branchname = dr["branchname"].ToString();

                getfullstlmnt.resignationdate = ((DateTime)dr["resignationdate"]).ToString("yyyy-MMM-dd"); //dr["startdate"].ToString();
                empresinlist.Add(getfullstlmnt);
            }
            foreach (DataRow dr in routes.Rows)
            {
                EmployeeFianlsttlement getfullstlmnt = new EmployeeFianlsttlement();
                getfullstlmnt.employee_num = dr["employecode"].ToString();
                getfullstlmnt.lastsalpaid = dr["month"].ToString() + "-" + dr["year"].ToString();
                getfullstlmnt.numpaydays = dr["payabledays"].ToString();
                getfullstlmnt.daysinmonth = dr["daysmonth"].ToString();
                getfullstlmnt.pldays = "0";
                getfullstlmnt.noticeprdadjstble = "0";
                getfullstlmnt.applicationletter = "0";
                getfullstlmnt.basic = dr["basic"].ToString();
                getfullstlmnt.hra = dr["hra"].ToString();
                getfullstlmnt.convenace = dr["conveyance"].ToString();
                getfullstlmnt.medicalallowance = dr["medical"].ToString();
                getfullstlmnt.washingallowance = dr["washing"].ToString();
                getfullstlmnt.pt = dr["pt"].ToString();
                getfullstlmnt.pf = dr["pf"].ToString();
                getfullstlmnt.esi = dr["esi"].ToString();
                getfullstlmnt.otherdeduction = dr["otherdeduction"].ToString();
                getfullstlmnt.salaryadavance = dr["salaryadvance"].ToString();
                getfullstlmnt.loan = dr["loan"].ToString();
                getfullstlmnt.mobilededuction = dr["mobilededuction"].ToString();
                getfullstlmnt.canteendeduction = dr["canteendeduction"].ToString();
                getfullstlmnt.tdsdedcution = dr["tdsdeduction"].ToString();
                getfullstlmnt.medicliam = dr["mediclim"].ToString();
                getfullstlmnt.totalearnings = dr["gross"].ToString();
                getfullstlmnt.month = dr["month"].ToString();
                getfullstlmnt.totaldeduction = dr["totaldeduction"].ToString();
                getfullstlmnt.netpay = dr["netpay"].ToString();
                emploanlist.Add(getfullstlmnt);
            }
            EmployeeFianlsttlement GetempfullValues1 = new EmployeeFianlsttlement();
            GetempfullValues1.empresiglist = emploanlist;
            GetempfullValues1.emplist = empresinlist;
            //GetPieValues1.summaryDetalis = summaryDetalis;
            fullsetelment.Add(GetempfullValues1);
            string errresponse1 = GetJson(fullsetelment);
            context.Response.Write(errresponse1);
            //string response = GetJson(emploanlist);
            //context.Response.Write(response);
        }

        //}
        catch
        {
        }
    }
    public class dupreport
    {
        public string empcode { get; set; }
        public string fullname { get; set; }
        public string status { get; set; }
        public string accountno { get; set; }
        public string joindate { get; set; }
        public string pancard { get; set; }
        public string esinum { get; set; }
        public string pfnumber { get; set; }
        public string uannum { get; set; }
        public string num { get; set; }

    }
    DataTable Report = new DataTable();
    private void generate_dup_report(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            string type = context.Request["type"];
            string mainbranch = context.Session["mainbranch"].ToString();
            if (type == "Bank Account Number")
            {
                cmd = new SqlCommand("SELECT employedetails.employee_num, employedetails.fullname, employebankdetails.accountno, employebankdetails.employeid, employedetails.joindate, employedetails.status FROM  employedetails INNER JOIN employebankdetails ON employedetails.empid = employebankdetails.employeid INNER JOIN branchmapping ON employedetails.branchid = branchmapping.subbranch WHERE (branchmapping.mainbranch = @m)GROUP BY employedetails.employee_num, employedetails.fullname, employebankdetails.accountno, employebankdetails.employeid, employedetails.joindate,  employedetails.status HAVING  (COUNT(employebankdetails.accountno) > 1)");
                cmd.Parameters.Add("@m", mainbranch);
                DataTable dupli = vdm.SelectQuery(cmd).Tables[0];
                List<dupreport> duprepdetails = new List<dupreport>();
                foreach (DataRow dr in dupli.Rows)
                {
                    dupreport getaccountdetails = new dupreport();
                    getaccountdetails.empcode = dr["employee_num"].ToString();
                    getaccountdetails.fullname = dr["fullname"].ToString();
                    getaccountdetails.num = dr["accountno"].ToString();
                    getaccountdetails.status = dr["status"].ToString();
                    getaccountdetails.joindate = dr["joindate"].ToString();

                    duprepdetails.Add(getaccountdetails);
                }
                string response = GetJson(duprepdetails);
                context.Response.Write(response);
            }
            else
            {
                string response = "No data Found";
                context.Response.Write(response);
            }
            if (type == "PAN Number")
            {
                cmd = new SqlCommand("SELECT employedetails.employee_num, employedetails.fullname, employedetails.joindate, employedetails.status, employedetails.pancard FROM  employedetails INNER JOIN branchmapping ON employedetails.branchid = branchmapping.subbranch WHERE (branchmapping.mainbranch = @m)GROUP BY employedetails.employee_num, employedetails.fullname, employedetails.joindate, employedetails.status, employedetails.pancard HAVING(COUNT(employedetails.employee_num) > 1)");
                cmd.Parameters.Add("@m", mainbranch);
                DataTable duplipan = vdm.SelectQuery(cmd).Tables[0];
                List<dupreport> duppandetails = new List<dupreport>();
                foreach (DataRow dr in duplipan.Rows)
                {
                    dupreport getaccountdetails = new dupreport();
                    getaccountdetails.empcode = dr["employee_num"].ToString();
                    getaccountdetails.fullname = dr["fullname"].ToString();
                    getaccountdetails.num = dr["pancard"].ToString();
                    getaccountdetails.status = dr["status"].ToString();
                    getaccountdetails.joindate = dr["joindate"].ToString();

                    duppandetails.Add(getaccountdetails);
                }
                string response = GetJson(duppandetails);
                context.Response.Write(response);
            }
            else
            {
                string response = "No data Found";
                context.Response.Write(response);
            }

            if (type == "ESI Number")
            {
                cmd = new SqlCommand("SELECT employedetails.employee_num, employedetails.fullname, employedetails.joindate, employedetails.status, employepfdetails.estnumber FROM employedetails INNER JOIN employepfdetails ON employedetails.empid = employepfdetails.employeid INNER JOIN branchmapping ON employedetails.branchid = branchmapping.subbranch where (branchmapping.mainbranch = @m)GROUP BY employedetails.employee_num, employedetails.fullname, employedetails.joindate, employedetails.status, employepfdetails.estnumber HAVING (COUNT(employepfdetails.estnumber) > 1)");
                cmd.Parameters.Add("@m", mainbranch);
                DataTable dupliesi = vdm.SelectQuery(cmd).Tables[0];
                List<dupreport> dupesidetails = new List<dupreport>();
                foreach (DataRow dr in dupliesi.Rows)
                {
                    dupreport getaccountdetails = new dupreport();
                    getaccountdetails.empcode = dr["employee_num"].ToString();
                    getaccountdetails.fullname = dr["fullname"].ToString();
                    getaccountdetails.num = dr["estnumber"].ToString();
                    getaccountdetails.status = dr["status"].ToString();
                    getaccountdetails.joindate = dr["joindate"].ToString();

                    dupesidetails.Add(getaccountdetails);
                }
                string response = GetJson(dupesidetails);
                context.Response.Write(response);
            }
            else
            {
                string response = "No data Found";
                context.Response.Write(response);
            }
            if (type == "PF Number")
            {
                cmd = new SqlCommand("SELECT employedetails.employee_num, employedetails.fullname, employedetails.joindate, employedetails.status, employepfdetails.pfnumber FROM  employedetails INNER JOIN employepfdetails ON employedetails.empid = employepfdetails.employeid INNER JOIN branchmapping ON employedetails.branchid = branchmapping.subbranch WHERE (branchmapping.mainbranch = @m) GROUP BY employedetails.employee_num, employedetails.fullname, employedetails.joindate, employedetails.status, employepfdetails.pfnumber HAVING (COUNT(employepfdetails.pfnumber) > 1)");
                cmd.Parameters.Add("@m", mainbranch);
                DataTable duplif = vdm.SelectQuery(cmd).Tables[0];
                List<dupreport> duplifdetails = new List<dupreport>();
                foreach (DataRow dr in duplif.Rows)
                {
                    dupreport getaccountdetails = new dupreport();
                    getaccountdetails.empcode = dr["employee_num"].ToString();
                    getaccountdetails.fullname = dr["fullname"].ToString();
                    getaccountdetails.num = dr["pfnumber"].ToString();
                    getaccountdetails.status = dr["status"].ToString();
                    getaccountdetails.joindate = dr["joindate"].ToString();

                    duplifdetails.Add(getaccountdetails);
                }
                string response = GetJson(duplifdetails);
                context.Response.Write(response);
            }
            else
            {
                string response = "No data Found";
                context.Response.Write(response);
            }
            if (type == "UAN Number")
            {
                cmd = new SqlCommand("SELECT employedetails.employee_num, employedetails.fullname, employedetails.joindate, employedetails.status, employepfdetails.uannumber FROM  employedetails INNER JOIN employepfdetails ON employedetails.empid = employepfdetails.employeid INNER JOIN  branchmapping ON employedetails.branchid = branchmapping.subbranch WHERE (branchmapping.mainbranch = @m)GROUP BY employedetails.employee_num, employedetails.fullname, employedetails.joindate, employedetails.status, employepfdetails.uannumber HAVING (COUNT(employepfdetails.uannumber) > 1)");
                cmd.Parameters.Add("@m", mainbranch);
                DataTable dupliuan = vdm.SelectQuery(cmd).Tables[0];
                List<dupreport> dupuandetails = new List<dupreport>();
                foreach (DataRow dr in dupliuan.Rows)
                {
                    dupreport getaccountdetails = new dupreport();
                    getaccountdetails.empcode = dr["employee_num"].ToString();
                    getaccountdetails.fullname = dr["fullname"].ToString();
                    getaccountdetails.num = dr["uannumber"].ToString();
                    getaccountdetails.status = dr["status"].ToString();
                    getaccountdetails.joindate = dr["joindate"].ToString();
                    dupuandetails.Add(getaccountdetails);
                }
                string response = GetJson(dupuandetails);
                context.Response.Write(response);
            }
            else
            {
                string response = "No data Found";
                context.Response.Write(response);
            }


        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }
    public class positionhistory
    {
        public string empcode { get; set; }
        public string fullname { get; set; }
        public string branchname { get; set; }
        public string grade { get; set; }
        public string dept { get; set; }
        public string designation { get; set; }
        public string emptype { get; set; }
        public string degree { get; set; }
        public string sysname { get; set; }
        public string cutoff { get; set; }
        public string title { get; set; }
        public string address { get; set; }

    }
    private void generate_position_history(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            string positionemp = context.Request["positionemp"];
            string title = "";
            string address = "";
            string companyid = context.Session["company_code"].ToString();
            cmd = new SqlCommand("SELECT address, companyname FROM company_master WHERE (sno = @sno)");
            cmd.Parameters.Add("@sno", companyid);
            DataTable dtcompany = vdm.SelectQuery(cmd).Tables[0];
            if (dtcompany.Rows.Count > 0)
            {
                address = dtcompany.Rows[0]["address"].ToString();
                title = dtcompany.Rows[0]["companyname"].ToString();
                context.Session["TitleName"] = dtcompany.Rows[0]["companyname"].ToString();
                context.Session["Address"] = dtcompany.Rows[0]["address"].ToString();
            }
            else
            {
                address = context.Session["Address"].ToString();
                title = context.Session["TitleName"].ToString();
            }
            cmd = new SqlCommand("SELECT employedetails.employee_num, employedetails.fullname,  employedetails.employee_type,designation.designation, departments.department, branchmaster.branchname,branchmaster.fromdate,branchmaster.todate, employedetails.degree, employedetails.grades FROM employedetails INNER JOIN branchmaster ON employedetails.branchid = branchmaster.branchid INNER JOIN  designation ON employedetails.designationid = designation.designationid INNER JOIN departments ON employedetails.employee_dept = departments.deptid  WHERE (employedetails.fullname = @empid)");
            cmd.Parameters.Add("@empid", positionemp);
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<positionhistory> positionhistorylist = new List<positionhistory>();
            foreach (DataRow dr in routes.Rows)
            {
                positionhistory getpositionhistory = new positionhistory();
                getpositionhistory.empcode = dr["employee_num"].ToString();
                getpositionhistory.fullname = dr["fullname"].ToString();
                getpositionhistory.dept = dr["department"].ToString();
                getpositionhistory.designation = dr["designation"].ToString();
                getpositionhistory.emptype = dr["employee_type"].ToString();
                getpositionhistory.degree = dr["degree"].ToString();
                getpositionhistory.grade = dr["grades"].ToString();
                getpositionhistory.branchname = dr["branchname"].ToString();
                getpositionhistory.title = title;
                getpositionhistory.address = address;
                double from = 0;
                double to = 0;
                double.TryParse(dr["fromdate"].ToString(), out from);
                double.TryParse(dr["todate"].ToString(), out to);
                getpositionhistory.cutoff = from + " " + "TO" + " " + to;
                positionhistorylist.Add(getpositionhistory);
            }
            string response = GetJson(positionhistorylist);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }
    public class loginsystem
    {
        public string logintime { get; set; }
        public string sysname { get; set; }
        public string date { get; set; }
        public string title { get; set; }
        public string address { get; set; }

    }
    private void get_login_sys(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            cmd = new SqlCommand("SELECT sysname FROM system_login GROUP BY  sysname");
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<loginsystem> systemlist = new List<loginsystem>();
            foreach (DataRow dr in routes.Rows)
            {
                loginsystem getsystems = new loginsystem();
                getsystems.sysname = dr["sysname"].ToString();
                systemlist.Add(getsystems);
            }
            string response = GetJson(systemlist);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }
    private void get_logintime_monitor(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            string title = "";
            string address = "";
            string companyid = context.Session["company_code"].ToString();
            cmd = new SqlCommand("SELECT address, companyname FROM company_master WHERE (sno = @sno)");
            cmd.Parameters.Add("@sno", companyid);
            DataTable dtcompany = vdm.SelectQuery(cmd).Tables[0];
            if (dtcompany.Rows.Count > 0)
            {
                address = dtcompany.Rows[0]["address"].ToString();
                title = dtcompany.Rows[0]["companyname"].ToString();
                context.Session["TitleName"] = dtcompany.Rows[0]["companyname"].ToString();
                context.Session["Address"] = dtcompany.Rows[0]["address"].ToString();
            }
            else
            {
                address = context.Session["Address"].ToString();
                title = context.Session["TitleName"].ToString();
            }
            string sysname = context.Request["sysname"];
            string frmdate = context.Request["fromdate"];
            DateTime fromdate = Convert.ToDateTime(frmdate);
            string tdate = context.Request["todate"];
            DateTime todate = Convert.ToDateTime
                (tdate);
            if (sysname == "ALL")
            {
                cmd = new SqlCommand("SELECT  logintime, logouttime, doe, sysname, sno, doe as doe FROM system_login where system_login.doe between @fromdate and @todate ");
                cmd.Parameters.Add("@fromdate", GetLowDate(fromdate));
                cmd.Parameters.Add("@todate", GetHighDate(todate));

            }
            else
            {
                cmd = new SqlCommand("SELECT   logintime, logouttime, sysname, sno,CONVERT(VARCHAR(11),doe,106) as doe FROM system_login where system_login.sysname=@sysid And system_login.doe between @fromdate and @todate ");
                cmd.Parameters.Add("@fromdate", GetLowDate(fromdate));
                cmd.Parameters.Add("@todate", GetHighDate(todate));
                cmd.Parameters.Add("@sysid", sysname);
            }
            DataTable systems = vdm.SelectQuery(cmd).Tables[0];
            List<loginsystem> loginsystemlist = new List<loginsystem>();
            foreach (DataRow dr in systems.Rows)
            {
                loginsystem getloginhistory = new loginsystem();
                getloginhistory.date = dr["doe"].ToString();
                getloginhistory.sysname = dr["sysname"].ToString();

                string strtime = "";
                foreach (DataRow drr in systems.Select("doe='" + dr["doe"].ToString() + "'"))
                {
                    string newtime = drr["logintime"].ToString();
                    strtime += newtime + ",";
                }
                if (strtime.Length > 0)
                {
                    strtime = strtime.Substring(0, strtime.Length - 1);
                }
                getloginhistory.logintime = strtime;
                getloginhistory.title = title;
                getloginhistory.address = address;
                loginsystemlist.Add(getloginhistory);
            }
            string response = GetJson(loginsystemlist);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }
    private void get_compaywiselocation_fill(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            string companyid = context.Request["companyid"];
            string type = context.Request["type"];
            string mainbranch = context.Session["mainbranch"].ToString();
            if (type == "2")
            {
                cmd = new SqlCommand("SELECT branchmaster.branchid, branchmaster.branchname, company_master.sno,company_master.companyname FROM branchmapping INNER JOIN branchmaster ON branchmapping.subbranch = branchmaster.branchid INNER JOIN company_master ON branchmaster.company_code = company_master.sno WHERE (branchmapping.mainbranch = @m) AND (branchmaster.company_code = @company)");
            }
            else
            {

            }
            cmd.Parameters.Add("@company", companyid);
            cmd.Parameters.Add("@m", mainbranch);
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<Companyfillbranch> companyMasterlist = new List<Companyfillbranch>();
            foreach (DataRow dr in routes.Rows)
            {
                Companyfillbranch getcompanydetails = new Companyfillbranch();
                getcompanydetails.CompanyCode = dr["sno"].ToString();
                getcompanydetails.CompanyName = dr["companyname"].ToString();
                getcompanydetails.branchname = dr["branchname"].ToString();
                getcompanydetails.branchid = dr["branchid"].ToString();
                companyMasterlist.Add(getcompanydetails);
            }
            string response = GetJson(companyMasterlist);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }
    public class retirementlist
    {
        public string empnum { get; set; }
        public string fullname { get; set; }
        public string joindate { get; set; }
        public string bdate { get; set; }
        public string age { get; set; }
        public string branchid { get; set; }
        public string dept { get; set; }
        public string desig { get; set; }
        public string title { get; set; }
        public string address { get; set; }
    }

    public class retirementlistadress
    {
        public string title { get; set; }
        public string address { get; set; }
    }
    private void get_retirement_list(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            string companyid = context.Request["companyid"];
            string type = context.Request["type"];
            string branchid = context.Request["branchid"];
            string mainbranch = context.Session["mainbranch"].ToString();
            string title = "";
            string address = "";
            cmd = new SqlCommand("SELECT address, companyname FROM company_master WHERE (sno = @sno)");
            cmd.Parameters.Add("@sno", companyid);
            DataTable dtcompany = vdm.SelectQuery(cmd).Tables[0];
            if (dtcompany.Rows.Count > 0)
            {
                address = dtcompany.Rows[0]["address"].ToString();
                title = dtcompany.Rows[0]["companyname"].ToString();
                context.Session["TitleName"] = dtcompany.Rows[0]["companyname"].ToString();
                context.Session["Address"] = dtcompany.Rows[0]["address"].ToString();
            }
            else
            {
                address = context.Session["Address"].ToString();
                title = context.Session["TitleName"].ToString();
            }
            if (type == "2")
            {
                cmd = new SqlCommand("SELECT employedetails.fullname, employedetails.employee_num, employedetails.joindate, employedetails.dob,employedetails.age, branchmaster.branchname, departments.department, designation.designation FROM  employedetails INNER JOIN branchmapping ON employedetails.branchid = branchmapping.subbranch INNER JOIN branchmaster ON employedetails.branchid = branchmaster.branchid INNER JOIN company_master ON branchmaster.company_code = company_master.sno INNER JOIN departments ON employedetails.employee_dept = departments.deptid INNER JOIN designation ON employedetails.designationid = designation.designationid WHERE (DATEDIFF(YEAR, employedetails.dob, GETDATE()) > 58) AND (employedetails.age > 58) AND (branchmapping.mainbranch = @m) AND (company_master.sno = @companycode) AND (branchmaster.branchid = @branchid) AND (employedetails.status = 'No')");
                cmd.Parameters.Add("@branchid", branchid);
            }
            else
            {
                cmd = new SqlCommand("SELECT employedetails.fullname, employedetails.employee_num, employedetails.joindate, employedetails.dob,employedetails.age, branchmaster.branchname, departments.department, designation.designation FROM  employedetails INNER JOIN branchmapping ON employedetails.branchid = branchmapping.subbranch INNER JOIN branchmaster ON employedetails.branchid = branchmaster.branchid INNER JOIN company_master ON branchmaster.company_code = company_master.sno INNER JOIN departments ON employedetails.employee_dept = departments.deptid INNER JOIN designation ON employedetails.designationid = designation.designationid WHERE (DATEDIFF(YEAR, employedetails.dob, GETDATE()) > 58) AND (employedetails.age > 58) AND (branchmapping.mainbranch = @m) AND (company_master.sno = @companycode)  AND (employedetails.status = 'No')");
            }
            cmd.Parameters.Add("@companycode", companyid);
            cmd.Parameters.Add("@m", mainbranch);
            DataTable dtAdvance = vdm.SelectQuery(cmd).Tables[0];
            List<retirementlist> retirelist = new List<retirementlist>();
            if (dtAdvance.Rows.Count > 0)
            {
                var i = 1;
                foreach (DataRow dr in dtAdvance.Rows)
                {

                    retirementlist getretiredetails = new retirementlist();
                    getretiredetails.empnum = dr["employee_num"].ToString();
                    getretiredetails.fullname = dr["fullname"].ToString();
                    string jdate = dr["joindate"].ToString();
                    DateTime dtjdate = Convert.ToDateTime(jdate);
                    string joindate = dtjdate.ToString("dd/MM/yyyy");
                    getretiredetails.joindate = joindate;
                    string Bdate = dr["dob"].ToString();
                    if (Bdate == "")
                    {
                        getretiredetails.bdate = Bdate;
                    }
                    else
                    {
                        DateTime dtBdate = Convert.ToDateTime(Bdate);
                        string birthdaydate = dtBdate.ToString("dd/MM/yyyy");
                        getretiredetails.bdate = birthdaydate;
                    }
                    getretiredetails.branchid = dr["branchname"].ToString();
                    getretiredetails.age = dr["age"].ToString();
                    getretiredetails.dept = dr["department"].ToString();
                    getretiredetails.desig = dr["designation"].ToString();
                    getretiredetails.title = title;
                    getretiredetails.address = address;
                    //getretiredetails.headding =
                    retirelist.Add(getretiredetails);
                }
                string response = GetJson(retirelist);
                context.Response.Write(response);
            }
            else
            {
                string response = "No data Found";
                context.Response.Write(response);
            }

        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }
    public class deptlocation
    {
        public string branchname { get; set; }
        public string NoofEmp { get; set; }
        public string Salary { get; set; }
        public string bdate { get; set; }
        public string Location { get; set; }
        public string Sno { get; set; }
        public string title { get; set; }
        public string address { get; set; }
        public string Gross { get; set; }
        public string Netpay { get; set; }

    }
    public class orglist
    {
        public string branchname { get; set; }
        public string NoofEmp { get; set; }
        public string Salary { get; set; }
        public string bdate { get; set; }
        public string Location { get; set; }
        public string Sno { get; set; }
        public string title { get; set; }
        public string address { get; set; }
        public string Gross { get; set; }
        public string Netpay { get; set; }
    }
    private void get_deptlocation_salary(HttpContext context)
    {
        try
        {
            string amonth = "";
            string title = "";
            string address = "";
            string companyid = context.Session["company_code"].ToString();
            cmd = new SqlCommand("SELECT address, companyname FROM company_master WHERE (sno = @sno)");
            cmd.Parameters.Add("@sno", companyid);
            DataTable dtcompany = vdm.SelectQuery(cmd).Tables[0];
            if (dtcompany.Rows.Count > 0)
            {
                address = dtcompany.Rows[0]["address"].ToString();
                title = dtcompany.Rows[0]["companyname"].ToString();
                context.Session["TitleName"] = dtcompany.Rows[0]["companyname"].ToString();
                context.Session["Address"] = dtcompany.Rows[0]["address"].ToString();
            }
            else
            {
                address = context.Session["Address"].ToString();
                title = context.Session["TitleName"].ToString();
            }

            DataTable dtDriver = new DataTable();
            string type = context.Request["type"];
            string mainbranch = context.Session["mainbranch"].ToString();
            string month = context.Request["month"];
            string year = context.Request["year"];
            if (type == "Location")
            {
                //Report.Columns.Add("Location");
                //Report.Columns.Add("Salary").DataType = typeof(double);
                //Report.Columns.Add("NO OF Employees").DataType = typeof(double);
                cmd = new SqlCommand("SELECT branchmaster.branchname, COUNT(monthlysalarystatement.empid) AS count, SUM(monthlysalarystatement.netpay) AS netpay, SUM(monthlysalarystatement.gross) AS gross FROM branchmaster INNER JOIN monthlysalarystatement ON branchmaster.branchid = monthlysalarystatement.branchid INNER JOIN branchmapping ON branchmaster.branchid = branchmapping.subbranch WHERE (branchmapping.mainbranch = @m) AND (monthlysalarystatement.month = @month) AND (monthlysalarystatement.year = @year) GROUP BY branchmaster.branchname");
                cmd.Parameters.Add("@m", mainbranch);
                cmd.Parameters.Add("@month", month);
                cmd.Parameters.Add("@year", year);
                dtDriver = vdm.SelectQuery(cmd).Tables[0];
                List<deptlocation> salarylist = new List<deptlocation>();
                if (dtDriver.Rows.Count > 0)
                {
                    foreach (DataRow dr in dtDriver.Rows)
                    {

                        deptlocation getsaldetails = new deptlocation();
                        getsaldetails.Location = dr["branchname"].ToString();
                        getsaldetails.Gross = dr["gross"].ToString();
                        getsaldetails.NoofEmp = dr["count"].ToString();
                        getsaldetails.Netpay = dr["netpay"].ToString();
                        getsaldetails.title = title;
                        getsaldetails.address = address;
                        salarylist.Add(getsaldetails);
                    }
                    string response = GetJson(salarylist);
                    context.Response.Write(response);
                }
                else
                {
                    string response = "No data Found";
                    context.Response.Write(response);
                }
            }
            else if (type == "Department")
            {
                cmd = new SqlCommand("SELECT departments.department, COUNT(monthlysalarystatement.empid) AS count, SUM(monthlysalarystatement.netpay) AS netpay, SUM(monthlysalarystatement.gross) AS gross FROM monthlysalarystatement INNER JOIN departments ON monthlysalarystatement.deptid = departments.deptid INNER JOIN branchmapping ON monthlysalarystatement.branchid = branchmapping.subbranch WHERE (branchmapping.mainbranch = @m) AND (monthlysalarystatement.month = @month) AND (monthlysalarystatement.year = @year) GROUP BY departments.department ");
                cmd.Parameters.Add("@m", mainbranch);
                cmd.Parameters.Add("@month", month);
                cmd.Parameters.Add("@year", year);
                dtDriver = vdm.SelectQuery(cmd).Tables[0];
                List<deptlocation> salarylist = new List<deptlocation>();
                if (dtDriver.Rows.Count > 0)
                {
                    int i = 1;
                    foreach (DataRow dr in dtDriver.Rows)
                    {

                        deptlocation getsaldetails = new deptlocation();
                        getsaldetails.Location = dr["department"].ToString();
                        getsaldetails.Gross = dr["gross"].ToString();
                        getsaldetails.NoofEmp = dr["count"].ToString();
                        getsaldetails.Netpay = dr["netpay"].ToString();
                        getsaldetails.title = title;
                        getsaldetails.address = address;
                        salarylist.Add(getsaldetails);
                    }
                    string response = GetJson(salarylist);
                    context.Response.Write(response);
                }
            }
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }
    private void get_employee_salarycount(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            DateTime ServerDateCurrentdate = DBManager.GetTime(vdm.conn);
            DateTime dtfromdate = ServerDateCurrentdate;
            DateTime dttodate = ServerDateCurrentdate;
            string amonth = "";
            string ayear = "";
            string title = "";
            string address = "";
            string companyid = context.Session["company_code"].ToString();
            cmd = new SqlCommand("SELECT address, companyname FROM company_master WHERE (sno = @sno)");
            cmd.Parameters.Add("@sno", companyid);
            DataTable dtcompany = vdm.SelectQuery(cmd).Tables[0];
            if (dtcompany.Rows.Count > 0)
            {
                address = dtcompany.Rows[0]["address"].ToString();
                title = dtcompany.Rows[0]["companyname"].ToString();
                context.Session["TitleName"] = dtcompany.Rows[0]["companyname"].ToString();
                context.Session["Address"] = dtcompany.Rows[0]["address"].ToString();
            }
            else
            {
                address = context.Session["Address"].ToString();
                title = context.Session["TitleName"].ToString();
            }
            DateTime fromdate = ServerDateCurrentdate;
            DateTime dtfrom = fromdate.AddMonths(-1);
            string frmdate = dtfrom.ToString("MM/dd/yyyy");
            string frommonth = dtfrom.ToString("MMM");
            string[] str = frmdate.Split('/');
            int lastmonth = 24;
            int years = Convert.ToInt32(str[2]);
            int months = Convert.ToInt32(str[0]);
            dtfromdate = new DateTime(years, months, lastmonth);
            amonth = str[0];
            string day = "";
            if (amonth == "02")
            {
                day = "28";
            }
            else
            {
                day = (fromdate.Day).ToString();
            }
            ayear = str[2];
            int pday = Convert.ToInt32(day);
            int nodays = DateTime.DaysInMonth(years, months);
            if (pday > nodays)
            {
                day = nodays.ToString();
            }
            string date = amonth + "/" + day + "/" + ayear;
            DateTime dtto = fromdate;
            string todate = dtto.ToString("MM/dd/yyyy");
            string[] strto = todate.Split('/');
            int prasentdate = 24;
            int prasentyears = Convert.ToInt32(strto[2]);
            int prasentmonths = Convert.ToInt32(strto[0]);
            dttodate = new DateTime(prasentyears, prasentmonths, prasentdate);
            string mainbranch = context.Session["mainbranch"].ToString();
            string bname = "";
            cmd = new SqlCommand("SELECT branchid, branchname from branchmaster");
            DataTable dtbranches = vdm.SelectQuery(cmd).Tables[0];
            if (dtbranches.Rows.Count > 0)
            {
                int i = 1;
                cmd = new SqlCommand("SELECT employedetails.employee_num, employedetails.branchid, employedetails.empid, employedetails.fullname, monthly_attendance.lop, employedetails.joindate, salaryappraisals.gross, salaryappraisals.salaryperyear FROM  employedetails INNER JOIN monthly_attendance ON employedetails.empid = monthly_attendance.empid INNER JOIN branchmapping ON employedetails.branchid = branchmapping.subbranch INNER JOIN salaryappraisals ON employedetails.empid = salaryappraisals.empid WHERE (employedetails.status = 'no') AND (monthly_attendance.month = @month) AND (monthly_attendance.year = @year) AND (branchmapping.mainbranch = @m) AND (salaryappraisals.endingdate IS NULL) AND (salaryappraisals.startingdate <= @d1) OR(employedetails.status = 'no') AND (monthly_attendance.month = @month) AND (monthly_attendance.year = @year) AND (branchmapping.mainbranch = @m) AND (salaryappraisals.endingdate > @d1) AND (salaryappraisals.startingdate <= @d1)");
                cmd.Parameters.Add("@m", mainbranch);
                cmd.Parameters.Add("@month", amonth);
                cmd.Parameters.Add("@year", ayear);
                cmd.Parameters.Add("@d1", date);
                DataTable routes = vdm.SelectQuery(cmd).Tables[0];
                List<deptlocation> salarylist = new List<deptlocation>();
                foreach (DataRow dr in dtbranches.Rows)
                {
                    int count = 0;
                    int totalcount = 0;
                    double basictotal = 0;
                    double esiemployetotal = 0;
                    double esiemployertotal = 0;
                    string branchname = "";
                    if (routes.Rows.Count > 0)
                    {
                        bname = dr["branchid"].ToString();
                        foreach (DataRow dremp in routes.Select("branchid='" + bname.ToString() + "'"))
                        {
                            string salary = dremp["salaryperyear"].ToString();
                            double grosssal = Convert.ToDouble(dremp["salaryperyear"].ToString());
                            double monthsal = grosssal / 12;
                            branchname = dr["branchname"].ToString();
                            string empid = dremp["empid"].ToString();
                            string empsno = empid;
                            string empname = dremp["fullname"].ToString();
                            string employeid = dremp["employee_num"].ToString();

                            string lossofdays = dremp["lop"].ToString();
                            double days = 0;
                            if (lossofdays == "")
                            {
                                days = 0;
                            }
                            else
                            {
                                days = Convert.ToDouble(lossofdays);
                            }
                            TimeSpan t = dttodate - dtfromdate;
                            double NrOfDays = t.TotalDays;
                            string daysinmonth = NrOfDays.ToString();
                            double attandancedays = NrOfDays - days;
                            double msal = Convert.ToDouble(monthsal);
                            double perdayamount = msal / NrOfDays;
                            double lossofamount = days * perdayamount;
                            double totalsal = msal - lossofamount;
                            double sal = 50;
                            double grossbasic = (msal * sal) / 100;
                            double erbasic = Math.Round(totalsal * sal) / 100;
                            basictotal += erbasic;
                            totalcount = count++;
                            //}
                        }
                        if (totalcount != 0)
                        {
                            deptlocation getsaldetails = new deptlocation();
                            getsaldetails.Location = branchname;
                            getsaldetails.title = title;
                            getsaldetails.address = address;
                            getsaldetails.NoofEmp = totalcount.ToString();
                            getsaldetails.Salary = basictotal.ToString();
                            salarylist.Add(getsaldetails);
                        }
                    }
                }
                string response = GetJson(salarylist);
                context.Response.Write(response);
            }
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }
    public class emplinform
    {
        public string empid { get; set; }
        public string empcode { get; set; }
        public string Name { get; set; }
        public string status { get; set; }
        public string dept { get; set; }
        public string emptype { get; set; }
        public string desig { get; set; }
        public string branchname { get; set; }
        public string joindate { get; set; }
        public string birthdate { get; set; }
        public string email { get; set; }
        public string phoneno { get; set; }
        public string address { get; set; }
        public string title { get; set; }
        public string titleaddress { get; set; }
    }
    public class empfamdet
    {
        public string joindate { get; set; }
        public string birthdate { get; set; }
        public string email { get; set; }
        public string phoneno { get; set; }
        public string address { get; set; }
        public string relationname { get; set; }
        public string relation { get; set; }
        public string dob { get; set; }
        public string gender { get; set; }
        public string bloodgroup { get; set; }
        public string nationality { get; set; }
        public string profession { get; set; }
        public string branchname { get; set; }
        public string empid { get; set; }
        public string empcode { get; set; }
        public string Name { get; set; }
        public string dept { get; set; }
        public string desig { get; set; }
        public string emptype { get; set; }
        public string title { get; set; }
        public string titleaddress { get; set; }
    }
    public class empbankdet
    {
        public string bankname { get; set; }
        public string accountno { get; set; }
        public string ifsccode { get; set; }
        public string paymenttype { get; set; }
        public string empcode { get; set; }
        public string Name { get; set; }
        public string branchname { get; set; }
        public string title { get; set; }
        public string titleaddress { get; set; }
    }
    public class empqualification
    {
        public string qualification { get; set; }
        public string Name { get; set; }
        public string institute { get; set; }
        public string courseduration { get; set; }
        public string branchname { get; set; }
        public string grades { get; set; }
        public string empcode { get; set; }
        public string title { get; set; }
        public string titleaddress { get; set; }
        public string university { get; set; }
    }
    public class emppfdet
    {
        public string estnumber { get; set; }
        public string branchname { get; set; }
        public string uannumber { get; set; }
        public string Name { get; set; }
        public string pfnumber { get; set; }
        public string empcode { get; set; }
        public string pfeligible { get; set; }
        public string title { get; set; }
        public string titleaddress { get; set; }
    }

    public class Employeimporationdetails
    {
        public List<emplinform> emplinform { get; set; }
        public List<empfamdet> empfamdet { get; set; }
        public List<empbankdet> empbankdet { get; set; }
        public List<empqualification> empqualification { get; set; }
        public List<emppfdet> emppfdet { get; set; }
    }

    private void get_Employee_information(HttpContext context)
    {

        try
        {
            DBManager SalesDB = new DBManager();
            string title = "";
            string address = "";
            string companyid = context.Session["company_code"].ToString();
            cmd = new SqlCommand("SELECT address, companyname FROM company_master WHERE (sno = @sno)");
            cmd.Parameters.Add("@sno", companyid);
            DataTable dtcompany = vdm.SelectQuery(cmd).Tables[0];
            if (dtcompany.Rows.Count > 0)
            {
                address = dtcompany.Rows[0]["address"].ToString();
                title = dtcompany.Rows[0]["companyname"].ToString();
                context.Session["TitleName"] = dtcompany.Rows[0]["companyname"].ToString();
                context.Session["Address"] = dtcompany.Rows[0]["address"].ToString();
            }
            else
            {
                address = context.Session["Address"].ToString();
                title = context.Session["TitleName"].ToString();
            }
            string type = context.Request["type"].ToString();
            string empfilter = context.Request["empfilter"].ToString();
            string emptype = context.Request["emptype"].ToString();
            string location = context.Request["location"].ToString();
            List<Employeimporationdetails> Employeeinformationdates = new List<Employeimporationdetails>();
            List<emplinform> empdetailslist = new List<emplinform>();
            List<empbankdet> empbanklist = new List<empbankdet>();
            List<empfamdet> empfamilylist = new List<empfamdet>();
            List<empqualification> empqualificationlist = new List<empqualification>();
            List<emppfdet> pfdetailslist = new List<emppfdet>();
            string empname = context.Request["empname"].ToString();
            string mainbranch = context.Session["mainbranch"].ToString();
            if (type == "Employee Details")
            {
                if (empfilter == "Current Employees")
                {
                    cmd = new SqlCommand("SELECT employedetails.empid,employedetails.employee_num, employedetails.dob,employedetails.fullname, employedetails.email, employedetails.cellphone, employedetails.home_address, employedetails.joindate, employedetails.status, branchmaster.branchname, departments.department, employedetails.employee_type, designation.designation FROM employedetails INNER JOIN branchmaster ON employedetails.branchid = branchmaster.branchid INNER JOIN departments ON employedetails.employee_dept = departments.deptid INNER JOIN designation ON employedetails.designationid = designation.designationid  where  employedetails.branchid=@BranchID and (employedetails.status='No') ");
                    cmd.Parameters.Add("@BranchID", mainbranch);
                    if (emptype == "Employee Wise")
                    {

                        cmd = new SqlCommand("SELECT employedetails.empid,employedetails.employee_num, employedetails.dob,employedetails.fullname, employedetails.email, employedetails.cellphone, employedetails.home_address, employedetails.joindate, employedetails.status, branchmaster.branchname, departments.department, employedetails.employee_type, designation.designation FROM employedetails INNER JOIN branchmaster ON employedetails.branchid = branchmaster.branchid INNER JOIN departments ON employedetails.employee_dept = departments.deptid INNER JOIN designation ON employedetails.designationid = designation.designationid where  employedetails.empid=@empid ");
                        cmd.Parameters.Add("@empid", empname);
                    }
                    else
                    {
                        if (location == "All")
                        {
                            cmd = new SqlCommand("SELECT employedetails.empid,employedetails.employee_num, employedetails.dob,employedetails.fullname, employedetails.email, employedetails.cellphone, employedetails.home_address, employedetails.joindate, employedetails.status, branchmaster.branchname, departments.department,  employedetails.employee_type, designation.designation FROM employedetails INNER JOIN branchmaster ON employedetails.branchid = branchmaster.branchid INNER JOIN departments ON employedetails.employee_dept = departments.deptid INNER JOIN designation ON employedetails.designationid = designation.designationid INNER JOIN branchmapping ON employedetails.branchid = branchmapping.subbranch WHERE (employedetails.status = 'No') AND (branchmapping.mainbranch = @m) ORDER BY employedetails.branchid");
                            cmd.Parameters.Add("@m", mainbranch);
                        }
                        else
                        {
                            cmd = new SqlCommand("SELECT employedetails.empid,employedetails.employee_num, employedetails.dob,employedetails.fullname, employedetails.email, employedetails.cellphone, employedetails.home_address, employedetails.joindate, employedetails.status, branchmaster.branchname, departments.department,  employedetails.employee_type, designation.designation FROM employedetails INNER JOIN branchmaster ON employedetails.branchid = branchmaster.branchid INNER JOIN departments ON employedetails.employee_dept = departments.deptid INNER JOIN designation ON employedetails.designationid = designation.designationid INNER JOIN branchmapping ON employedetails.branchid = branchmapping.subbranch WHERE (employedetails.status = 'No') and employedetails.branchid=@BranchID AND (branchmapping.mainbranch = @m)");
                            cmd.Parameters.Add("@m", mainbranch);
                            cmd.Parameters.Add("@BranchID", location);
                        }

                    }
                }
                else if (empfilter == "Resigned Employees")
                {
                    if (location == "All")
                    {
                        cmd = new SqlCommand("SELECT employedetails.empid,employedetails.employee_num, employedetails.dob,employedetails.fullname, branchmaster.branchname, employedetails.email, employedetails.cellphone, employedetails.home_address, employedetails.joindate, employedetails.status, branchmaster.branchname, departments.department, employedetails.employee_type, designation.designation, employedetails.branchid FROM employedetails INNER JOIN branchmaster ON employedetails.branchid = branchmaster.branchid INNER JOIN departments ON employedetails.employee_dept = departments.deptid INNER JOIN designation ON employedetails.designationid = designation.designationid INNER JOIN branchmapping ON employedetails.branchid = branchmapping.subbranch WHERE  (employedetails.status = 'Yes') AND (branchmapping.mainbranch = @m) ORDER BY branchmaster.branchname,employedetails.branchid");
                        cmd.Parameters.Add("@m", mainbranch);
                    }
                    else
                    {
                        cmd = new SqlCommand("SELECT employedetails.empid,employedetails.employee_num, employedetails.dob,employedetails.fullname, branchmaster.branchname, employedetails.email, employedetails.cellphone, employedetails.home_address, employedetails.joindate, employedetails.status, branchmaster.branchname, departments.department, employedetails.employee_type, designation.designation, employedetails.branchid FROM employedetails INNER JOIN branchmaster ON employedetails.branchid = branchmaster.branchid INNER JOIN departments ON employedetails.employee_dept = departments.deptid INNER JOIN designation ON employedetails.designationid = designation.designationid INNER JOIN branchmapping ON employedetails.branchid = branchmapping.subbranch WHERE employedetails.branchid=@BranchID and  (employedetails.status = 'Yes') AND (branchmapping.mainbranch = @m) and employedetails.branchid=@BranchID ORDER BY branchmaster.branchname   ");
                        cmd.Parameters.Add("@m", mainbranch);
                        cmd.Parameters.Add("@BranchID", location);
                    }
                }
                DataTable dtFamily = SalesDB.SelectQuery(cmd).Tables[0];
                if (dtFamily.Rows.Count > 0)
                {
                    foreach (DataRow dr in dtFamily.Rows)
                    {
                        emplinform getempdetails = new emplinform();
                        getempdetails.empid = dr["empid"].ToString();
                        getempdetails.empcode = dr["employee_num"].ToString();
                        getempdetails.Name = dr["fullname"].ToString();
                        string status = dr["status"].ToString();
                        if (status == "No")
                        {
                            getempdetails.status = "Active";
                        }
                        else
                        {
                            getempdetails.status = "InActive";
                        }
                        getempdetails.dept = dr["department"].ToString();
                        getempdetails.desig = dr["designation"].ToString();
                        getempdetails.emptype = dr["employee_type"].ToString();
                        getempdetails.branchname = dr["branchname"].ToString();
                        string jdate = dr["joindate"].ToString();
                        DateTime dtjdate = Convert.ToDateTime(jdate);
                        string joindate = dtjdate.ToString("dd/MM/yyyy");
                        getempdetails.joindate = joindate;

                        string Bdate = dr["dob"].ToString();
                        if (Bdate == "")
                        {
                            getempdetails.birthdate = Bdate;
                        }
                        else
                        {
                            DateTime dtBdate = Convert.ToDateTime(Bdate);
                            string birthdaydate = dtBdate.ToString("dd/MM/yyyy");
                            getempdetails.birthdate = birthdaydate;
                        }
                        getempdetails.email = dr["email"].ToString();
                        getempdetails.phoneno = dr["cellphone"].ToString();
                        getempdetails.address = dr["home_address"].ToString();
                        getempdetails.title = title;
                        getempdetails.titleaddress = address;
                        empdetailslist.Add(getempdetails);

                    }
                }
                else
                {
                    string response = "No data Found";
                    context.Response.Write(response);
                }
            }
            if (type == "Bank Details")
            {
                if (emptype == "Employee Wise")
                {
                    cmd = new SqlCommand("SELECT employedetails.employee_num, branchmaster.branchname, employedetails.fullname, employedetails.pancard, employebankdetails.ifsccode,employebankdetails.paymenttype, employebankdetails.accountno, bankmaster.bankname FROM employedetails INNER JOIN employebankdetails ON employedetails.empid = employebankdetails.employeid INNER JOIN bankmaster ON employebankdetails.bankid = bankmaster.sno INNER JOIN branchmaster ON employedetails.branchid = branchmaster.branchid where employedetails.empid = @empid ORDER BY branchmaster.branchname");
                    cmd.Parameters.Add("@empid", empname);
                }
                else
                {
                    cmd = new SqlCommand("SELECT employedetails.employee_num, branchmaster.branchname, employedetails.fullname, employedetails.pancard, employebankdetails.ifsccode, employebankdetails.paymenttype, employebankdetails.accountno, bankmaster.bankname FROM employedetails INNER JOIN employebankdetails ON employedetails.empid = employebankdetails.employeid INNER JOIN bankmaster ON employebankdetails.bankid = bankmaster.sno INNER JOIN branchmapping ON employedetails.branchid = branchmapping.subbranch INNER JOIN branchmaster ON employedetails.branchid = branchmaster.branchid WHERE  employedetails.branchid=@BranchID and (branchmapping.mainbranch = @m) AND (employedetails.status = 'no') ORDER BY branchmaster.branchname ");
                    cmd.Parameters.Add("@m", mainbranch);
                    cmd.Parameters.Add("@BranchID", location);
                }
                DataTable dtbank = SalesDB.SelectQuery(cmd).Tables[0];

                if (dtbank.Rows.Count > 0)
                {
                    foreach (DataRow dr in dtbank.Rows)
                    {
                        empbankdet getempbankdetails = new empbankdet();
                        getempbankdetails.empcode = dr["employee_num"].ToString();
                        getempbankdetails.Name = dr["fullname"].ToString();
                        getempbankdetails.bankname = dr["bankname"].ToString();
                        getempbankdetails.accountno = dr["accountno"].ToString();
                        getempbankdetails.ifsccode = dr["ifsccode"].ToString();
                        getempbankdetails.paymenttype = dr["paymenttype"].ToString();
                        getempbankdetails.branchname = dr["branchname"].ToString();
                        getempbankdetails.title = title;
                        getempbankdetails.titleaddress = address;
                        empbanklist.Add(getempbankdetails);
                    }
                }
                else
                {
                    string response = "No data Found";
                    context.Response.Write(response);
                }
            }
            else if (type == "Family Details")
            {
                if (emptype == "Employee Wise")
                {
                    cmd = new SqlCommand("SELECT employedetails.employee_num, branchmaster.branchname, employedetails.fullname, employedetails.joindate, employeefamilydetailes.relation, employeefamilydetailes.relationname, employeefamilydetailes.relationdob, employeefamilydetailes.gender, employeefamilydetailes.nationality, employeefamilydetailes.profession, employeefamilydetailes.bloodgroup FROM employedetails INNER JOIN employeefamilydetailes ON employedetails.empid = employeefamilydetailes.empid INNER JOIN branchmaster ON employedetails.branchid = branchmaster.branchid WHERE (employedetails.empid = @empid) ORDER BY branchmaster.branchname");
                    cmd.Parameters.Add("@empid", empname);
                }
                else
                {
                    cmd = new SqlCommand("SELECT employedetails.employee_num, branchmaster.branchname, employedetails.fullname, employedetails.joindate, employeefamilydetailes.relation, employeefamilydetailes.relationname,  employeefamilydetailes.relationdob, employeefamilydetailes.gender, employeefamilydetailes.nationality, employeefamilydetailes.profession,  employeefamilydetailes.bloodgroup FROM employedetails INNER JOIN employeefamilydetailes ON employedetails.empid = employeefamilydetailes.empid INNER JOIN branchmaster ON employedetails.branchid = branchmaster.branchid INNER JOIN branchmapping ON employedetails.branchid = branchmapping.subbranch WHERE  employedetails.branchid=@BranchID  and (branchmapping.mainbranch = @m) AND (employedetails.status = 'no') ORDER BY branchmaster.branchname");
                    cmd.Parameters.Add("@m", mainbranch);
                    cmd.Parameters.Add("@BranchID", location);
                }
                DataTable dtfamily = SalesDB.SelectQuery(cmd).Tables[0];
                if (dtfamily.Rows.Count > 0)
                {
                    foreach (DataRow dr in dtfamily.Rows)
                    {
                        empfamdet getempfamilydetails = new empfamdet();
                        getempfamilydetails.empcode = dr["employee_num"].ToString();
                        getempfamilydetails.Name = dr["fullname"].ToString();
                        string jondate = dr["joindate"].ToString();
                        DateTime fdate = Convert.ToDateTime(jondate);
                        string joindate = fdate.ToString("dd-MMM-yyyy");
                        getempfamilydetails.joindate = joindate;
                        getempfamilydetails.relationname = dr["relationname"].ToString();
                        getempfamilydetails.relation = dr["relation"].ToString();
                        getempfamilydetails.dob = dr["relationdob"].ToString();
                        getempfamilydetails.gender = dr["gender"].ToString();
                        getempfamilydetails.bloodgroup = dr["bloodgroup"].ToString();
                        getempfamilydetails.nationality = dr["nationality"].ToString();
                        getempfamilydetails.profession = dr["profession"].ToString();
                        getempfamilydetails.branchname = dr["branchname"].ToString();
                        getempfamilydetails.title = title;
                        getempfamilydetails.titleaddress = address;
                        empfamilylist.Add(getempfamilydetails);
                    }
                }
                else
                {
                    string response = "No data Found";
                    context.Response.Write(response);
                }

            }
            else if (type == "Qualification Details")
            {
                if (emptype == "Employee Wise")
                {
                    cmd = new SqlCommand("SELECT  employee_num, fullname, branchmaster.branchname, degree, grades, university, institute, durationofcourse FROM employedetails INNER JOIN branchmaster ON employedetails.branchid = branchmaster.branchid where employedetails.empid = @empid ORDER BY branchmaster.branchname");
                    cmd.Parameters.Add("@empid", empname);
                }
                else
                {
                    cmd = new SqlCommand("SELECT  employedetails.employee_num, branchmaster.branchname, employedetails.fullname, employedetails.degree, employedetails.grades, employedetails.university, employedetails.institute, employedetails.durationofcourse FROM employedetails INNER JOIN branchmapping ON employedetails.branchid = branchmapping.subbranch INNER JOIN branchmaster ON employedetails.branchid = branchmaster.branchid WHERE employedetails.branchid=@BranchID and (branchmapping.mainbranch = @m) AND (employedetails.status = 'No') ORDER BY branchmaster.branchname");
                    cmd.Parameters.Add("@m", mainbranch);
                    cmd.Parameters.Add("@BranchID", location);

                }
                DataTable dtqualify = SalesDB.SelectQuery(cmd).Tables[0];
                if (dtqualify.Rows.Count > 0)
                {
                    foreach (DataRow dr in dtqualify.Rows)
                    {
                        empqualification getempqualidetails = new empqualification();
                        getempqualidetails.empcode = dr["employee_num"].ToString();
                        getempqualidetails.Name = dr["fullname"].ToString();
                        getempqualidetails.qualification = dr["degree"].ToString();
                        getempqualidetails.institute = dr["institute"].ToString();
                        getempqualidetails.courseduration = dr["durationofcourse"].ToString();
                        getempqualidetails.grades = dr["grades"].ToString();
                        getempqualidetails.university = dr["university"].ToString();
                        getempqualidetails.branchname = dr["branchname"].ToString();
                        getempqualidetails.title = title;
                        getempqualidetails.titleaddress = address;
                        empqualificationlist.Add(getempqualidetails);
                    }
                }
                else
                {
                    string response = "No data Found";
                    context.Response.Write(response);
                }
            }
            else if (type == "PF Details")
            {
                Report.Columns.Add("Branch Name");
                Report.Columns.Add("SNO");
                Report.Columns.Add("Employee Code");
                Report.Columns.Add("Name");
                Report.Columns.Add("PF Eligible");
                Report.Columns.Add("PF Number");
                Report.Columns.Add("Uan Number");
                Report.Columns.Add("Esi Number");
                if (emptype == "Employee Wise")
                {
                    cmd = new SqlCommand("SELECT employedetails.employee_num, employedetails.dob,employedetails.fullname, branchmaster.branchname, employedetails.pfeligible, employepfdetails.pfnumber,employepfdetails.uannumber, employepfdetails.estnumber FROM employedetails INNER JOIN branchmaster ON employedetails.branchid = branchmaster.branchid INNER JOIN employepfdetails ON employedetails.empid = employepfdetails.employeid WHERE (employedetails.empid = @empid) and  (employedetails.status = 'No') ORDER BY branchmaster.branchname");
                    cmd.Parameters.Add("@empid", empname);
                }
                else
                {
                    cmd = new SqlCommand("SELECT employedetails.employee_num, employedetails.dob,employedetails.fullname, branchmaster.branchname, employedetails.pfeligible, employepfdetails.pfnumber, employepfdetails.uannumber, employepfdetails.estnumber FROM employedetails INNER JOIN branchmaster ON employedetails.branchid = branchmaster.branchid INNER JOIN employepfdetails ON employedetails.empid = employepfdetails.employeid WHERE (employedetails.status = 'No') AND (employedetails.branchid = @BranchID) AND (employedetails.pfeligible = 'yes') ORDER BY branchmaster.branchname");
                    cmd.Parameters.Add("@m", mainbranch);
                    cmd.Parameters.Add("@BranchID", location);

                }
                DataTable dtpfdet = SalesDB.SelectQuery(cmd).Tables[0];
                if (dtpfdet.Rows.Count > 0)
                {
                    foreach (DataRow dr in dtpfdet.Rows)
                    {
                        emppfdet getemppfdetails = new emppfdet();
                        getemppfdetails.empcode = dr["employee_num"].ToString();
                        getemppfdetails.Name = dr["fullname"].ToString();
                        getemppfdetails.pfeligible = dr["pfeligible"].ToString();
                        getemppfdetails.pfnumber = dr["pfnumber"].ToString();
                        getemppfdetails.uannumber = dr["uannumber"].ToString();
                        getemppfdetails.estnumber = dr["estnumber"].ToString();
                        getemppfdetails.branchname = dr["branchname"].ToString();
                        getemppfdetails.title = title;
                        getemppfdetails.titleaddress = address;
                        pfdetailslist.Add(getemppfdetails);

                    }
                }

                else
                {
                    string response = "No data Found";
                    context.Response.Write(response);
                }
            }
            //string response1 = GetJson(pfdetailslist);
            //context.Response.Write(response1);
            Employeimporationdetails obj2 = new Employeimporationdetails();
            obj2.emplinform = empdetailslist;
            obj2.empfamdet = empfamilylist;
            obj2.empbankdet = empbanklist;
            obj2.emppfdet = pfdetailslist;
            obj2.empqualification = empqualificationlist;
            //obj2.empbankdet = empbanklist;
            Employeeinformationdates.Add(obj2);
            string response1 = GetJson(Employeeinformationdates);
            //context.Response.Write(response);
            //string response = GetJson(Departmentslst);
            context.Response.Write(response1);
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }
    public class activityDetalis
    {
        public string remarks { get; set; }
        public string cmpid { get; set; }
        public string branchid { get; set; }
        public string btnVal { get; set; }
        public string starttime { get; set; }
        public string sno { get; set; }
        public string endtime { get; set; }
        public string meetingdate { get; set; }
        public string subject { get; set; }
        public string doe { get; set; }
        public string activity_no { get; set; }
        public List<subactivityetails> fillitems { get; set; }
        public List<subBRANCHDEtails> fillBRANCHitems { get; set; }
        public List<subBRANCHopDEtails> fillOPitems { get; set; }
    }

    public class subactivityetails
    {
        public string conclusion { get; set; }
        public string activity_no { get; set; }
        public string branchname { get; set; }
        public string branchtype { get; set; }
    }
    public class subBRANCHDEtails
    {
        public string conclusion { get; set; }
        public string activity_no { get; set; }
        public string branchname { get; set; }
        public string branchtype { get; set; }
    }
    public class subBRANCHopDEtails
    {
        public string conclusion { get; set; }
        public string activity_no { get; set; }
        public string operationname { get; set; }
        public string branchtype { get; set; }
    }

    private void Save_DailyOPERATION_Details(HttpContext context)
    {
        try
        {
            var js = new JavaScriptSerializer();
            var title1 = context.Request.Params[1];
            string empid = context.Session["empid"].ToString();
            string branchid = context.Session["branchid"].ToString();
            activityDetalis obj = js.Deserialize<activityDetalis>(title1);
            string cmpid = obj.cmpid;
            string btnSave = obj.btnVal;
            DateTime ServerDateCurrentdate = DBManager.GetTime(vdm.conn);
            if (btnSave == "Save")
            {
                foreach (subBRANCHopDEtails si in obj.fillOPitems)
                {
                    if (si.operationname != "")
                    {
                        cmd = new SqlCommand("insert into cmporgbranchopinfo (branchtype, operation, doe, createdby) values (@cmpid,@branchname,@doe,@empid)");
                        cmd.Parameters.Add("@cmpid", cmpid);
                        cmd.Parameters.Add("@branchname", si.operationname);
                        cmd.Parameters.Add("@empid", empid);
                        cmd.Parameters.Add("@doe", ServerDateCurrentdate);
                        vdm.insert(cmd);
                    }
                }
                string msg = "Inserted Success fully ";
                string Response = GetJson(msg);
                context.Response.Write(Response);
            }
            else
            {
            }
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }

    private void Save_orgbranchinfo_Details(HttpContext context)
    {
        try
        {
            var js = new JavaScriptSerializer();
            var title1 = context.Request.Params[1];
            string empid = context.Session["empid"].ToString();
            string branchid = context.Session["branchid"].ToString();
            activityDetalis obj = js.Deserialize<activityDetalis>(title1);
            string cmpid = obj.cmpid;
            string btnSave = obj.btnVal;
            DateTime ServerDateCurrentdate = DBManager.GetTime(vdm.conn);
            if (btnSave == "Save")
            {
                foreach (subBRANCHDEtails si in obj.fillBRANCHitems)
                {
                    if (si.branchname != "")
                    {
                        cmd = new SqlCommand("insert into cmporgbranchinfo (mainbranchid, branchname, branchtype, doe, createdby) values (@cmpid,@branchname,@branchtype,@doe,@empid)");
                        cmd.Parameters.Add("@cmpid", cmpid);
                        cmd.Parameters.Add("@branchname", si.branchname);
                        cmd.Parameters.Add("@branchtype", si.branchtype);
                        cmd.Parameters.Add("@empid", empid);
                        cmd.Parameters.Add("@doe", ServerDateCurrentdate);
                        vdm.insert(cmd);
                    }
                }
                string msg = "Inserted Success fully ";
                string Response = GetJson(msg);
                context.Response.Write(Response);
            }
            else
            {
            }
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }

    private void Save_cmporginfo_Details(HttpContext context)
    {
        try
        {
            var js = new JavaScriptSerializer();
            var title1 = context.Request.Params[1];
            string empid = context.Session["empid"].ToString();
            string branchid = context.Session["branchid"].ToString();
            activityDetalis obj = js.Deserialize<activityDetalis>(title1);
            string cmpid = obj.cmpid;
            string btnSave = obj.btnVal;
            DateTime ServerDateCurrentdate = DBManager.GetTime(vdm.conn);
            if (btnSave == "Save")
            {
                foreach (subactivityetails si in obj.fillitems)
                {
                    if (si.branchname != "")
                    {
                        cmd = new SqlCommand("insert into cmporginfo (cmpid,branchname,branchtype, doe, createdby) values (@cmpid,@branchname,@branchtype,@doe,@empid)");
                        cmd.Parameters.Add("@cmpid", cmpid);
                        cmd.Parameters.Add("@branchname", si.branchname);
                        cmd.Parameters.Add("@branchtype", si.branchtype);
                        cmd.Parameters.Add("@empid", empid);
                        cmd.Parameters.Add("@doe", ServerDateCurrentdate);
                        vdm.insert(cmd);
                    }
                }
                string msg = "Inserted Success fully ";
                string Response = GetJson(msg);
                context.Response.Write(Response);
            }
            else
            {
            }
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }

    private void get_orgmainbranch_details(HttpContext context)
    {
        cmd = new SqlCommand("SELECT sno, cmpid, branchname, branchtype, doe, createdby From cmporginfo");
        DataTable routes = vdm.SelectQuery(cmd).Tables[0];
        List<orglist> orglist = new List<orglist>();
        if (routes.Rows.Count > 0)
        {

            foreach (DataRow dr in routes.Rows)
            {
                orglist getemployee = new orglist();
                getemployee.Sno = dr["sno"].ToString();
                getemployee.branchname = dr["branchname"].ToString();
                orglist.Add(getemployee);
            }
            string response = GetJson(orglist);
            context.Response.Write(response);
        }
    }

    private void Save_DailyActivity_Details(HttpContext context)
    {
        try
        {
            var js = new JavaScriptSerializer();
            var title1 = context.Request.Params[1];
            string empid = context.Session["empid"].ToString();
            string branchid = context.Session["branchid"].ToString();
            activityDetalis obj = js.Deserialize<activityDetalis>(title1);
            string meetingdate = obj.meetingdate;
            string starttime = obj.starttime;
            string endtime = obj.endtime;
            string subject = obj.subject;
            string remarks = obj.remarks;
            string btnSave = obj.btnVal;
            DateTime ServerDateCurrentdate = DBManager.GetTime(vdm.conn);
            if (btnSave == "Save")
            {
                cmd = new SqlCommand("insert into daily_activity (doe,starttime,endtime,branchid,remarks,empid) values (@doe,@starttime,@endtime,@branchid,@remarks,@empid)");
                cmd.Parameters.Add("@doe", meetingdate);
                cmd.Parameters.Add("@starttime", starttime);
                cmd.Parameters.Add("@endtime", endtime);
                //cmd.Parameters.Add("@subject", subject);
                cmd.Parameters.Add("@branchid", branchid);
                cmd.Parameters.Add("@remarks", remarks);
                cmd.Parameters.Add("@empid", empid);
                vdm.insert(cmd);
                cmd = new SqlCommand("SELECT MAX(sno) as maxno from daily_activity");
                DataTable dtmeating = vdm.SelectQuery(cmd).Tables[0];
                if (dtmeating.Rows.Count > 0)
                {
                    string sno = dtmeating.Rows[0]["maxno"].ToString();
                    foreach (subactivityetails si in obj.fillitems)
                    {
                        if (si.conclusion != "")
                        {
                            cmd = new SqlCommand("insert into dailyactivity_sub (da_sno, activities) values (@da_sno, @activities)");
                            cmd.Parameters.Add("@da_sno", sno);
                            cmd.Parameters.Add("@activities", si.conclusion);
                            vdm.insert(cmd);
                        }
                    }
                }
                string msg = "Inserted Success fully ";
                string Response = GetJson(msg);
                context.Response.Write(Response);
            }
            else
            {
            }
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }


    private void get_dailyactivity_Reports(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            string activityrefno = context.Request["activityrefno"];
            cmd = new SqlCommand("SELECT daily_activity.sno, daily_activity.empid, daily_activity.doe, daily_activity.starttime, daily_activity.endtime, daily_activity.branchid, daily_activity.remarks, dailyactivity_sub.sno AS Subsno, dailyactivity_sub.activities FROM daily_activity INNER JOIN dailyactivity_sub ON daily_activity.sno = dailyactivity_sub.da_sno where ( daily_activity.sno=@activityno)");
            cmd.Parameters.Add("@activityno", activityrefno);
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            DataView view = new DataView(routes);
            DataTable dtemployee = view.ToTable(true, "sno", "starttime", "endtime", "doe", "branchid", "remarks");
            DataTable dtsubinward = view.ToTable(true, "sno", "activities", "Subsno");
            List<activityDetalis> daily_activity_details = new List<activityDetalis>();
            int i = 1;
            foreach (DataRow dr in dtemployee.Rows)
            {
                activityDetalis getemployee = new activityDetalis();
                getemployee.sno = i++.ToString();
                getemployee.starttime = dr["starttime"].ToString();
                getemployee.endtime = dr["endtime"].ToString();
                getemployee.doe = dr["doe"].ToString();
                getemployee.branchid = dr["branchid"].ToString();
                getemployee.activity_no = dr["sno"].ToString();
                getemployee.subject = dr["remarks"].ToString();
                List<subactivityetails> sub_activity_details = new List<subactivityetails>();
                foreach (DataRow drsub in dtsubinward.Select("sno='" + dr["sno"].ToString() + "'"))
                {
                    subactivityetails getsubemployee = new subactivityetails();
                    getsubemployee.activity_no = dr["sno"].ToString();
                    getsubemployee.conclusion = drsub["activities"].ToString();
                    sub_activity_details.Add(getsubemployee);
                }
                getemployee.fillitems = sub_activity_details;
                daily_activity_details.Add(getemployee);
            }
            string response = GetJson(daily_activity_details);
            context.Response.Write(response);
        }
        catch
        {
        }
    }
    private void get_dailyactivity_details(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            string formtype = context.Request["formtype"];
            DateTime fromdate = new DateTime();
            DateTime todate = new DateTime();
            DateTime ServerDateCurrentdate = DBManager.GetTime(vdm.conn);
            if (formtype == "Dailactivity")
            {
                fromdate = ServerDateCurrentdate.AddDays(-10);
                todate = ServerDateCurrentdate;
            }
            else
            {
                string frmdate = context.Request["fromdate"];
                fromdate = Convert.ToDateTime(frmdate);
                string tdate = context.Request["todate"];
                todate = Convert.ToDateTime(tdate);
            }
            //cmd = new SqlCommand("SELECT daily_activity.sno, daily_activity.empid, daily_activity.doe, daily_activity.starttime, daily_activity.endtime, daily_activity.branchid, daily_activity.remarks, dailyactivity_sub.sno AS Subsno,dailyactivity_sub.activities  FROM  daily_activity INNER JOIN dailyactivity_sub ON daily_activity.sno = dailyactivity_sub.da_sno ");
            cmd = new SqlCommand("SELECT    daily_activity.sno, daily_activity.empid, daily_activity.doe, daily_activity.starttime, daily_activity.endtime, daily_activity.branchid, daily_activity.remarks, dailyactivity_sub.sno AS Subsno, dailyactivity_sub.activities, branchmaster.branchname FROM  daily_activity INNER JOIN  dailyactivity_sub ON daily_activity.sno = dailyactivity_sub.da_sno INNER JOIN  branchmaster ON daily_activity.branchid = branchmaster.branchid WHERE (daily_activity.doe BETWEEN @fromdate AND @todate)");
            cmd.Parameters.Add("@fromdate", fromdate);
            cmd.Parameters.Add("@todate", todate);
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            DataView view = new DataView(routes);
            DataTable dtemployee = view.ToTable(true, "sno", "starttime", "endtime", "doe", "branchid", "remarks", "branchname");
            DataTable dtsubinward = view.ToTable(true, "sno", "activities", "Subsno");
            //List<meeting_conduct_details> meeting_conduct_details = new List<meeting_conduct_details>();
            List<activityDetalis> daily_activity_details = new List<activityDetalis>();
            int i = 1;
            foreach (DataRow dr in dtemployee.Rows)
            {
                activityDetalis getemployee = new activityDetalis();
                getemployee.sno = dr["sno"].ToString();
                getemployee.starttime = dr["starttime"].ToString();
                getemployee.endtime = dr["endtime"].ToString();
                //getemployee.participants = dr["participants"].ToString();
                getemployee.doe = dr["doe"].ToString();
                getemployee.subject = dr["remarks"].ToString();
                //getemployee.conducted_by = dr["conducted_by"].ToString();
                //getemployee.videopath = dr["videopath"].ToString();
                getemployee.branchid = dr["branchname"].ToString();
                getemployee.activity_no = dr["sno"].ToString();
                //List<sub_meeting_conduct_details> sub_meeting_conduct_details = new List<sub_meeting_conduct_details>();
                List<subactivityetails> sub_activity_details = new List<subactivityetails>();
                foreach (DataRow drsub in dtsubinward.Select("sno='" + dr["sno"].ToString() + "'"))
                {
                    subactivityetails getsubemployee = new subactivityetails();
                    getsubemployee.activity_no = dr["sno"].ToString();
                    getsubemployee.conclusion = drsub["activities"].ToString();
                    sub_activity_details.Add(getsubemployee);
                }
                getemployee.fillitems = sub_activity_details;
                daily_activity_details.Add(getemployee);
            }
            string response = GetJson(daily_activity_details);
            context.Response.Write(response);
        }
        catch
        {
        }
    }

    public class jobapplication
    {

        public string name { get; set; }
        public string surname { get; set; }
        public string birthdate { get; set; }
        public string aadharnum { get; set; }
        public string cellphone { get; set; }
        public string email { get; set; }
        public string qualification { get; set; }
        public string Skills { get; set; }
        public string experience { get; set; }
        public string sno { get; set; }
        public string resume { get; set; }
        public string ftplocation { get; set; }
    }
    private void get_job_application_details(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            cmd = new SqlCommand("SELECT sno, name, surname, birthdate, aadharnum, presentaddress, cellphone, email FROM  career_info");
            // cmd = new SqlCommand("SELECT career_info.sno, career_info.name, career_info.surname, career_info.birthdate, career_info.aadharnum, career_info.presentaddress, career_info.cellphone, career_info.email,   career_qualification_details.qualification, career_skills_details.experiance, career_skills_details.skilltype FROM            career_info INNER JOIN  career_qualification_details ON career_info.sno = career_qualification_details.refno INNER JOIN career_skills_details ON career_qualification_details.refno = career_skills_details.refno");
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<jobapplication> ContactMasterlist = new List<jobapplication>();
            foreach (DataRow dr in routes.Rows)
            {
                jobapplication getcontacttype = new jobapplication();
                getcontacttype.name = dr["name"].ToString();
                getcontacttype.surname = dr["surname"].ToString();
                getcontacttype.birthdate = dr["birthdate"].ToString();
                getcontacttype.aadharnum = dr["aadharnum"].ToString();
                getcontacttype.cellphone = dr["cellphone"].ToString();
                getcontacttype.email = dr["email"].ToString();
                // getcontacttype.qualification = dr["qualification"].ToString();
                // getcontacttype.experience = dr["experiance"].ToString();
                getcontacttype.sno = dr["sno"].ToString();
                ContactMasterlist.Add(getcontacttype);
            }
            string response = GetJson(ContactMasterlist);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }

    //private void get_job_application_details(HttpContext context)
    //{
    //    try
    //    {
    //        vdm = new DBManager();
    //        cmd = new SqlCommand("SELECT  career_info.sno, career_info.name, career_info.title, career_info.surname, career_info.gender, career_info.birthdate, career_info.age, career_info.fathername, career_info.physicalchallenge, career_info.nationality, career_info.maritalstatus, career_info.marriagedate, career_info.spousename, career_info.spousedetails, career_info.aboutme, career_info.aadharno, career_info.aadharname, career_info.aadharnum, career_info.permanentaddress, career_info.presentaddress, career_info.homephone, career_info.cellphone, career_info.city, career_info.state, career_info.email, career_info.pincode, career_info.remarks, career_info.resume, career_info.applydate, skills_details.sno AS skillsno, skills_details.refno AS skillrefno, skills_details.skilltype, skills_details.courseduration AS skillcourseduration, skills_details.experiance, qualification_details.sno AS qualisno, qualification_details.refno AS qualirefno, qualification_details.qualification AS qua_qualification, qualification_details.yearofpassout, qualification_details.institutename, qualification_details.percentage AS qua_percentage FROM career_info INNER JOIN  skills_details ON career_info.sno = skills_details.refno INNER JOIN  qualification_details ON career_info.sno = qualification_details.refno");
    //        DataTable routes = vdm.SelectQuery(cmd).Tables[0];
    //        List<jobapplication> ContactMasterlist = new List<jobapplication>();
    //        foreach (DataRow dr in routes.Rows)
    //        {
    //            jobapplication getcontacttype = new jobapplication();
    //            getcontacttype.name = dr["name"].ToString();
    //            getcontacttype.surname = dr["surname"].ToString();
    //            getcontacttype.birthdate = dr["birthdate"].ToString();
    //            getcontacttype.aadharnum = dr["aadharnum"].ToString();
    //            getcontacttype.cellphone = dr["cellphone"].ToString();
    //            getcontacttype.email = dr["email"].ToString();
    //            getcontacttype.qualification = dr["qua_qualification"].ToString();
    //            getcontacttype.Skills = dr["skilltype"].ToString();
    //            getcontacttype.experience = dr["experiance"].ToString();
    //            // getcontacttype.Appliedfor = dr["Appliedfor"].ToString();
    //            getcontacttype.sno = dr["sno"].ToString();
    //            ContactMasterlist.Add(getcontacttype);
    //        }
    //        string response = GetJson(ContactMasterlist);
    //        context.Response.Write(response);
    //    }
    //    catch (Exception ex)
    //    {
    //        string Response = GetJson(ex.Message);
    //        context.Response.Write(Response);
    //    }
    //}


    private void getresume(HttpContext context)
    {
        try
        {

            string sno = context.Request["sno"];
            cmd = new SqlCommand("select sno,resume from career_info where sno=@sno");
            cmd.Parameters.Add("@sno", sno);
            DataTable dtemp = vdm.SelectQuery(cmd).Tables[0];
            List<jobapplication> applicationlist = new List<jobapplication>();
            if (dtemp.Rows.Count > 0)
            {
                foreach (DataRow dr in dtemp.Rows)
                {
                    jobapplication GetEmployee = new jobapplication();
                    GetEmployee.sno = sno;
                    GetEmployee.resume = dr["resume"].ToString();
                    GetEmployee.ftplocation = "http://182.18.138.228:81/";
                    applicationlist.Add(GetEmployee);
                }
            }
            string response = GetJson(applicationlist);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }

    public class EmployeeageDetalis
    {
        public string dateOfBirth { get; set; }
        public string AgeRange { get; set; }
        public string employeecount { get; set; }
    }
    private void get_agewise_employee_details(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            string barnchname = context.Request["barnchname"].ToString();
            string campany = context.Request["campny"].ToString();
            if (barnchname == "ALL")
            {
                cmd = new SqlCommand("SELECT COUNT(*) AS employecount,range FROM  (SELECT  CONCAT((FLOOR(age/10))*10,'-',((FLOOR(age/10))*10)+10)  AS range FROM  (SELECT   DATEDIFF(yy, dob, GETDATE()) AS age, dob  FROM  employedetails WHERE  (status = 'no')  AND (company_id = @companyid)) AS SubQueryAlias) AS SubQueryAlias2 GROUP BY range ORDER BY range");
                cmd.Parameters.Add("@baranch", barnchname);
                cmd.Parameters.Add("@companyid", campany);
            }
            else
            {
                //cmd = new SqlCommand("SELECT AgeGroup, COUNT(*) AS employecount,range FROM  (SELECT CASE WHEN age BETWEEN 15 AND 25 THEN 1 WHEN age BETWEEN 25 AND 35 THEN 2 WHEN age BETWEEN 35 AND 45 THEN 3 WHEN age BETWEEN 45 AND 55 THEN 4 WHEN age BETWEEN   55 AND 65 THEN 5 WHEN age BETWEEN 65 AND 75 THEN 6 END AS AgeGroup , CONCAT(FLOOR(age / 5) * 5, '-', FLOOR(age / 5) * 5 + 10)  AS range FROM  (SELECT   DATEDIFF(yy, dob, GETDATE()) AS age, dob  FROM  employedetails WHERE  (status = 'no') AND (branchid = @baranch) AND (company_id = @companyid)) AS SubQueryAlias) AS SubQueryAlias2 GROUP BY AgeGroup,range");
                cmd = new SqlCommand("SELECT COUNT(*) AS employecount,range FROM  (SELECT  CONCAT((FLOOR(age/10))*10,'-',((FLOOR(age/10))*10)+10)  AS range FROM  (SELECT   DATEDIFF(yy, dob, GETDATE()) AS age, dob  FROM  employedetails WHERE  (status = 'no') AND (branchid = @baranch) AND (company_id = @companyid)) AS SubQueryAlias) AS SubQueryAlias2 GROUP BY range ORDER BY range");
                cmd.Parameters.Add("@baranch", barnchname);
                cmd.Parameters.Add("@companyid", campany);
            }
            DataTable dtdistinctempage = vdm.SelectQuery(cmd).Tables[0];
            List<EmployeeageDetalis> EmployeDetalis = new List<EmployeeageDetalis>();
            foreach (DataRow row in dtdistinctempage.Rows)
            {
                EmployeeageDetalis getbrcdetails = new EmployeeageDetalis();
                getbrcdetails.AgeRange = row["range"].ToString();
                getbrcdetails.employeecount = row["employecount"].ToString();
                EmployeDetalis.Add(getbrcdetails);
            }
            // fill data on datatable ofter that looping that table and compare age between 20 to 25 yrs ex ( if (age > 20 || age < 25){}

            string response = GetJson(EmployeDetalis);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }

    private void employee_relieving_joingcount_PieChartValues(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            DateTime FromDate = DateTime.Now;
            string mainbranch = context.Session["mainbranch"].ToString();
            string type = context.Request["type"];
            string Month = context.Request["Month"];
            string Year = context.Request["Year"];
            //string branchid = context.Session["branchid"].ToString();
            string name = context.Request["name"];
            string ChartType = context.Request["ChartType"];
            string FormName = context.Request["FormName"];
            string xvaluestr = string.Empty;
            List<employeetypeValues> lPieValueslist = new List<employeetypeValues>();
            List<string> genderList = new List<string>();
            List<string> countList = new List<string>();
            if (type == "Joinnig Count")
            {
                if (ChartType == "All Location")
                {
                    cmd = new SqlCommand("SELECT COUNT(employedetails.empid) AS joinCount, branchmaster.branchname, UPPER(LEFT(DATENAME(MONTH, employedetails.joindate), 3)) AS Month, YEAR(employedetails.joindate) AS year, MONTH(employedetails.joindate) AS mon FROM branchmaster INNER JOIN employedetails ON branchmaster.branchid = employedetails.branchid INNER JOIN branchmapping ON employedetails.branchid = branchmapping.subbranch WHERE (employedetails.status = 'NO') AND  (MONTH(employedetails.joindate)=@month) and (YEAR(employedetails.joindate)=@year)  AND (branchmapping.mainbranch = @m)GROUP BY branchmaster.branchname, MONTH(employedetails.joindate), DATENAME(MONTH, employedetails.joindate), YEAR(employedetails.joindate)ORDER BY year, mon");
                    //cmd = new SqlCommand("Select A.joinCount as NameByVisits, B.RelievingCount as NameBySpent From (Select C.*, RowId as RowNumber From (SELECT COUNT(employedetails.empid) AS joinCount, branchmaster.branchname, UPPER(LEFT(DATENAME(MONTH, employedetails.joindate), 3)) AS Month, YEAR(employedetails.joindate) AS year, MONTH(employedetails.joindate) AS mon FROM branchmaster INNER JOIN employedetails ON branchmaster.branchid = employedetails.branchid INNER JOIN branchmapping ON employedetails.branchid = branchmapping.subbranch WHERE (employedetails.status = 'NO') AND  (MONTH(employedetails.joindate)=@month) and (YEAR(employedetails.joindate)=@year)  AND (branchmapping.mainbranch = @m)GROUP BY branchmaster.branchname, MONTH(employedetails.joindate), DATENAME(MONTH, employedetails.joindate), YEAR(employedetails.joindate)) as C) as A Inner Join (Select D.*, RowId as RowNumber From (SELECT COUNT(empresignationdetails.empid) AS RelievingCount, branchmaster.branchname, UPPER(LEFT(DATENAME(MONTH, empresignationdetails.resignationdate),3) AS Month, " + "  YEAR(empresignationdetails.resignationdate) AS year, MONTH(empresignationdetails.resignationdate) AS mon " + " FROM  branchmaster INNER JOIN " + " employedetails ON branchmaster.branchid = employedetails.branchid INNER JOIN " + " branchmapping ON employedetails.branchid = branchmapping.subbranch INNER JOIN " + " empresignationdetails ON employedetails.empid = empresignationdetails.empid " + " WHERE (employedetails.status = 'YES') AND (branchmapping.mainbranch = @m) AND  (MONTH(empresignationdetails.resignationdate)=@month) AND (YEAR(empresignationdetails.resignationdate)=@year) " + " GROUP BY branchmaster.branchname, MONTH(empresignationdetails.resignationdate), DATENAME(MONTH, empresignationdetails.resignationdate), " + " YEAR(empresignationdetails.resignationdate)) as D) as B On A.RowNumber = B.RowNumber");
                    //cmd = new SqlCommand(" SELECT (SELECT COUNT(employedetails.empid) AS joinCount, branchmaster.branchname, UPPER(LEFT(DATENAME(MONTH, employedetails.joindate), 3)) AS Month, YEAR(employedetails.joindate) AS year, MONTH(employedetails.joindate) AS mon FROM branchmaster INNER JOIN employedetails ON branchmaster.branchid = employedetails.branchid INNER JOIN branchmapping ON employedetails.branchid = branchmapping.subbranch WHERE (employedetails.status = 'NO') AND  (MONTH(employedetails.joindate)=@month) and (YEAR(employedetails.joindate)=@year)  AND (branchmapping.mainbranch = @m)GROUP BY branchmaster.branchname, MONTH(employedetails.joindate), DATENAME(MONTH, employedetails.joindate), YEAR(employedetails.joindate)) AS tot_user , ( SELECT COUNT(empresignationdetails.empid) AS RelievingCount, branchmaster.branchname, UPPER(LEFT(DATENAME(MONTH, empresignationdetails.resignationdate), 3)) AS Month, " + "  YEAR(empresignationdetails.resignationdate) AS year, MONTH(empresignationdetails.resignationdate) AS mon " + " FROM  branchmaster INNER JOIN " + " employedetails ON branchmaster.branchid = employedetails.branchid INNER JOIN " + " branchmapping ON employedetails.branchid = branchmapping.subbranch INNER JOIN " + " empresignationdetails ON employedetails.empid = empresignationdetails.empid " + " WHERE (employedetails.status = 'YES') AND (branchmapping.mainbranch = @m) AND  (MONTH(empresignationdetails.resignationdate)=@month) AND (YEAR(empresignationdetails.resignationdate)=@year) " + "GROUP BY branchmaster.branchname, MONTH(empresignationdetails.resignationdate), DATENAME(MONTH, empresignationdetails.resignationdate), " + " YEAR(empresignationdetails.resignationdate) " + ") AS tot_cat");
                    cmd.Parameters.Add("@m", mainbranch);
                    cmd.Parameters.Add("@month", Month);
                    cmd.Parameters.Add("@year", Year);
                }
                else if (ChartType == "Location Wise")
                {
                    cmd = new SqlCommand("SELECT COUNT(employedetails.empid) AS joinCount, branchmaster.branchname, UPPER(LEFT(DATENAME(MONTH, employedetails.joindate), 3)) AS Month, YEAR(employedetails.joindate) AS year, MONTH(employedetails.joindate) AS mon FROM branchmaster INNER JOIN employedetails ON branchmaster.branchid = employedetails.branchid INNER JOIN branchmapping ON employedetails.branchid = branchmapping.subbranch WHERE (employedetails.status = 'NO') AND  (MONTH(employedetails.joindate)=@month) and (YEAR(employedetails.joindate)=@year) and (employedetails.branchid = @branchid) AND (branchmapping.mainbranch = @m)GROUP BY branchmaster.branchname, MONTH(employedetails.joindate), DATENAME(MONTH, employedetails.joindate), YEAR(employedetails.joindate)ORDER BY year, mon");
                    cmd.Parameters.Add("@m", mainbranch);
                    cmd.Parameters.Add("@branchid", name);
                    cmd.Parameters.Add("@month", Month);
                    cmd.Parameters.Add("@year", Year);
                }
            }
            else if (type == "Relieving Count")
            {

                if (ChartType == "All Location")
                {
                    cmd = new SqlCommand("SELECT COUNT(empresignationdetails.empid) AS RelievingCount, branchmaster.branchname, UPPER(LEFT(DATENAME(MONTH, empresignationdetails.resignationdate), 3)) AS Month, " + "  YEAR(empresignationdetails.resignationdate) AS year, MONTH(empresignationdetails.resignationdate) AS mon " + " FROM  branchmaster INNER JOIN " + " employedetails ON branchmaster.branchid = employedetails.branchid INNER JOIN " + " branchmapping ON employedetails.branchid = branchmapping.subbranch INNER JOIN " + " empresignationdetails ON employedetails.empid = empresignationdetails.empid " + " WHERE (employedetails.status = 'YES') AND (branchmapping.mainbranch = @m) AND  (MONTH(empresignationdetails.resignationdate)=@month) AND (YEAR(empresignationdetails.resignationdate)=@year) " + "GROUP BY branchmaster.branchname, MONTH(empresignationdetails.resignationdate), DATENAME(MONTH, empresignationdetails.resignationdate), " + " YEAR(empresignationdetails.resignationdate) " + " ORDER BY year, mon");
                    cmd.Parameters.Add("@m", mainbranch);
                    cmd.Parameters.Add("@month", Month);
                    cmd.Parameters.Add("@year", Year);
                }
                else if (ChartType == "Location Wise")
                {
                    //SELECT  COUNT(empresignationdetails.empid) AS Count, branchmaster.branchname, UPPER(LEFT(DATENAME(MONTH, empresignationdetails.resignationdate), 3)) AS Month, " + "  YEAR(empresignationdetails.resignationdate) AS year, MONTH(empresignationdetails.resignationdate) AS mon " + " FROM  branchmaster INNER JOIN " + " employedetails ON branchmaster.branchid = employedetails.branchid INNER JOIN " + " branchmapping ON employedetails.branchid = branchmapping.subbranch INNER JOIN " + " empresignationdetails ON employedetails.empid = empresignationdetails.empid " + " WHERE (employedetails.status = 'YES') AND (branchmapping.mainbranch = @m) AND  MONTH(empresignationdetails.resignationdate) AND YEAR(empresignationdetails.resignationdate)  " + "GROUP BY branchmaster.branchname, MONTH(empresignationdetails.resignationdate), DATENAME(MONTH, empresignationdetails.resignationdate), " + " YEAR(empresignationdetails.resignationdate) " + " ORDER BY year, mon
                    cmd = new SqlCommand("SELECT COUNT(empresignationdetails.empid) AS RelievingCount, branchmaster.branchname, UPPER(LEFT(DATENAME(MONTH, empresignationdetails.resignationdate), 3)) AS Month, " + "  YEAR(empresignationdetails.resignationdate) AS year, MONTH(empresignationdetails.resignationdate) AS mon " + " FROM  branchmaster INNER JOIN " + " employedetails ON branchmaster.branchid = employedetails.branchid INNER JOIN " + " branchmapping ON employedetails.branchid = branchmapping.subbranch INNER JOIN " + " empresignationdetails ON employedetails.empid = empresignationdetails.empid " + " WHERE (employedetails.status = 'YES') AND (branchmapping.mainbranch = @m) AND  (MONTH(empresignationdetails.resignationdate)=@month) AND (YEAR(empresignationdetails.resignationdate)=@year) AND (employedetails.branchid = @branchid) " + "GROUP BY branchmaster.branchname, MONTH(empresignationdetails.resignationdate), DATENAME(MONTH, empresignationdetails.resignationdate), " + " YEAR(empresignationdetails.resignationdate) " + " ORDER BY year, mon");
                    cmd.Parameters.Add("@branchid", name);
                    cmd.Parameters.Add("@m", mainbranch);
                    cmd.Parameters.Add("@month", Month);
                    cmd.Parameters.Add("@year", Year);
                    //cmd.Parameters.Add("@m", mainbranch);
                }
            }
            DataTable dtble = vdm.SelectQuery(cmd).Tables[0];
            if (dtble.Rows.Count > 0)
            {
                foreach (DataRow dr in dtble.Rows)
                {
                    string Date = "";
                    int count = 0;
                    if (type == "Joinnig Count")
                    {

                        if (FormName == "salarywiseLinechart")
                        {
                            if (ChartType == "All Location")
                            {

                                genderList.Add(dr["branchname"].ToString());
                                //xvaluestr += dr["branchname"].ToString() + ',';
                                string countgen = dr["joinCount"].ToString();
                                if (countgen == "")
                                {
                                    countgen = "0";
                                }
                                countList.Add(countgen);

                            }
                            else if (ChartType == "Location Wise")
                            {
                                genderList.Add(dr["branchname"].ToString());
                                //xvaluestr += dr["branchname"].ToString() + ',';
                                string countgen = dr["joinCount"].ToString();
                                if (countgen == "")
                                {
                                    countgen = "0";
                                }
                                countList.Add(countgen);

                            }
                        }
                    }

                    else if (type == "Relieving Count")
                    {
                        if (FormName == "salarywiseLinechart")
                        {
                            if (ChartType == "All Location")
                            {
                                genderList.Add(dr["branchname"].ToString());
                                //xvaluestr += dr["branchname"].ToString() + ',';
                                string countgen = dr["RelievingCount"].ToString();
                                if (countgen == "")
                                {
                                    countgen = "0";
                                }
                                countList.Add(countgen);

                            }

                            else if (ChartType == "Location Wise")
                            {
                                genderList.Add(dr["branchname"].ToString());
                                //xvaluestr += dr["branchname"].ToString() + ',';
                                string countgen = dr["RelievingCount"].ToString();
                                if (countgen == "")
                                {
                                    countgen = "0";
                                }
                                countList.Add(countgen);

                            }

                        }
                    }

                }
                employeetypeValues GetPieValues = new employeetypeValues();
                GetPieValues.branchname = genderList;
                GetPieValues.countgen = countList;
                lPieValueslist.Add(GetPieValues);
                string errresponse = GetJson(lPieValueslist);
                context.Response.Write(errresponse);
            }
            else
            {
                string msg = "No data Found";
                string response = GetJson(msg);
                context.Response.Write(response);
            }
        }

        catch
        {
        }
    }

    public class employeeValues
    {

        public List<employeeValues> EmployeDetalis { get; set; }
        public List<employeeValues> lPieValues { get; set; }
        public List<employeeValues> EmployeDetalis1 { get; set; }
        public List<string> DeliveryQty { get; set; }
        public List<string> AverageyQty { get; set; }
        public string branchname { get; set; }
        public string countgen { get; set; }
        public string countgen1 { get; set; }
        public string totalqty { get; set; }
    }
    private void employee_relieving_joingcount_details(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            DateTime FromDate = DateTime.Now;
            string mainbranch = context.Session["mainbranch"].ToString();
            string type = context.Request["type"];
            string Month = context.Request["Month"];
            string Year = context.Request["Year"];
            //string branchid = context.Session["branchid"].ToString();
            string name = context.Request["name"];
            string ChartType = context.Request["ChartType"];
            string FormName = context.Request["FormName"];
            string xvaluestr = string.Empty;
            List<employeeValues> lPieValueslist = new List<employeeValues>();
            List<employeeValues> EmployeDetalis1 = new List<employeeValues>();
            List<employeeValues> EmployeDetalis = new List<employeeValues>();
            List<string> genderList = new List<string>();
            List<string> countList = new List<string>();
            List<string> countList1 = new List<string>();
            DataTable Report = new DataTable();
            if (ChartType == "All Location")
            {
                //cmd = new SqlCommand("SELECT COUNT(employedetails.empid) AS joinCount, branchmaster.branchname, UPPER(LEFT(DATENAME(MONTH, employedetails.joindate), 3)) AS Month, YEAR(employedetails.joindate) AS year, MONTH(employedetails.joindate) AS mon FROM branchmaster INNER JOIN employedetails ON branchmaster.branchid = employedetails.branchid INNER JOIN branchmapping ON employedetails.branchid = branchmapping.subbranch WHERE (employedetails.status = 'NO') AND  (MONTH(employedetails.joindate)=@month) and (YEAR(employedetails.joindate)=@year)  AND (branchmapping.mainbranch = @m)GROUP BY branchmaster.branchname, MONTH(employedetails.joindate), DATENAME(MONTH, employedetails.joindate), YEAR(employedetails.joindate)ORDER BY year, mon");
                cmd = new SqlCommand("SELECT  x.joinCount,x.branchname,y.branchname, y.RelievingCount,x.year, x.mon,y.year, y.mon FROM (SELECT COUNT(employedetails.empid) AS joinCount, branchmaster.branchname as branchname, UPPER(LEFT(DATENAME(MONTH, employedetails.joindate), 3)) AS Month, YEAR(employedetails.joindate) AS year, MONTH(employedetails.joindate) AS mon FROM branchmaster INNER JOIN employedetails ON branchmaster.branchid = employedetails.branchid INNER JOIN branchmapping ON employedetails.branchid = branchmapping.subbranch WHERE (employedetails.status = 'NO') AND  (MONTH(employedetails.joindate)=@month) and (YEAR(employedetails.joindate)=@year)  AND (branchmapping.mainbranch = @m)GROUP BY branchmaster.branchname, MONTH(employedetails.joindate), DATENAME(MONTH, employedetails.joindate), YEAR(employedetails.joindate)) as x FULL OUTER JOIN (SELECT        COUNT(empresignationdetails.empid) AS RelievingCount, branchmaster.branchname, UPPER(LEFT(DATENAME(MONTH, empresignationdetails.resignationdate), 3)) AS Month,  YEAR(empresignationdetails.resignationdate) AS year, MONTH(empresignationdetails.resignationdate) AS mon FROM            branchmaster INNER JOIN employedetails ON branchmaster.branchid = employedetails.branchid INNER JOIN branchmapping ON employedetails.branchid = branchmapping.subbranch INNER JOIN empresignationdetails ON employedetails.empid = empresignationdetails.empid WHERE        (employedetails.status = 'YES') AND (branchmapping.mainbranch = @m) AND (MONTH(empresignationdetails.resignationdate) = @month) AND (YEAR(empresignationdetails.resignationdate) = @year) GROUP BY branchmaster.branchname, MONTH(empresignationdetails.resignationdate), DATENAME(MONTH, empresignationdetails.resignationdate), YEAR(empresignationdetails.resignationdate )) as y ON y.branchname = x.branchname group by x.branchname,y.branchname,x.joinCount, y.RelievingCount, x.year, x.mon,y.year, y.mon   ORDER BY x.year, x.mon,y.year, y.mon");
                //cmd = new SqlCommand("  Select A.branchname as branchname, A.joinCount as joinCount, B.RelievingCount as RelievingCount From (Select C.*, empid as RowNumber From (SELECT COUNT(employedetails.empid) AS joinCount, branchmaster.branchname as branchname, UPPER(LEFT(DATENAME(MONTH, employedetails.joindate), 3)) AS Month, YEAR(employedetails.joindate) AS year, MONTH(employedetails.joindate) AS mon FROM branchmaster INNER JOIN employedetails ON branchmaster.branchid = employedetails.branchid INNER JOIN branchmapping ON employedetails.branchid = branchmapping.subbranch WHERE (employedetails.status = 'NO') AND  (MONTH(employedetails.joindate)=@month) and (YEAR(employedetails.joindate)=@year)  AND (branchmapping.mainbranch = @m)GROUP BY branchmaster.branchname, MONTH(employedetails.joindate), DATENAME(MONTH, employedetails.joindate), YEAR(employedetails.joindate)) C) A Inner Join (Select D.*, empid as RowNumber From (SELECT        COUNT(empresignationdetails.empid) AS RelievingCount, branchmaster.branchname, UPPER(LEFT(DATENAME(MONTH, empresignationdetails.resignationdate), 3)) AS Month,  YEAR(empresignationdetails.resignationdate) AS year, MONTH(empresignationdetails.resignationdate) AS mon FROM            branchmaster INNER JOIN employedetails ON branchmaster.branchid = employedetails.branchid INNER JOIN branchmapping ON employedetails.branchid = branchmapping.subbranch INNER JOIN empresignationdetails ON employedetails.empid = empresignationdetails.empid WHERE        (employedetails.status = 'YES') AND (branchmapping.mainbranch = @m) AND (MONTH(empresignationdetails.resignationdate) = @month) AND (YEAR(empresignationdetails.resignationdate) = @year) GROUP BY branchmaster.branchname, MONTH(empresignationdetails.resignationdate), DATENAME(MONTH, empresignationdetails.resignationdate), YEAR(empresignationdetails.resignationdate )) D) B On A.RowNumber = B.RowNumber");
                cmd.Parameters.Add("@m", mainbranch);
                cmd.Parameters.Add("@month", Month);
                cmd.Parameters.Add("@year", Year);
                DataTable dtble1 = vdm.SelectQuery(cmd).Tables[0];
                foreach (DataRow dr in dtble1.Rows)
                {
                    employeeValues getbrcdetails = new employeeValues();
                    //getbrcdetails.branchname = dr["branchname1"].ToString();
                    string branchname1 = dr["branchname1"].ToString(); ;
                    if (branchname1 == "")
                    {
                        getbrcdetails.branchname = dr["branchname"].ToString();
                    }
                    else
                    {
                        getbrcdetails.branchname = dr["branchname1"].ToString();
                    }
                    getbrcdetails.countgen = dr["joinCount"].ToString();
                    getbrcdetails.countgen1 = dr["RelievingCount"].ToString();
                    EmployeDetalis.Add(getbrcdetails);

                }


            }
            else if (ChartType == "Location Wise")
            {
                cmd = new SqlCommand("SELECT  x.joinCount,x.branchname,y.branchname, y.RelievingCount,x.year, x.mon,y.year, y.mon FROM (SELECT COUNT(employedetails.empid) AS joinCount, branchmaster.branchname, UPPER(LEFT(DATENAME(MONTH, employedetails.joindate), 3)) AS Month, YEAR(employedetails.joindate) AS year, MONTH(employedetails.joindate) AS mon FROM branchmaster INNER JOIN employedetails ON branchmaster.branchid = employedetails.branchid INNER JOIN branchmapping ON employedetails.branchid = branchmapping.subbranch WHERE (employedetails.status = 'NO') AND  (MONTH(employedetails.joindate)=@month) and (YEAR(employedetails.joindate)=@year) and (employedetails.branchid = @branchid) AND (branchmapping.mainbranch = @m)GROUP BY branchmaster.branchname, MONTH(employedetails.joindate), DATENAME(MONTH, employedetails.joindate), YEAR(employedetails.joindate)) as x FULL OUTER JOIN (SELECT COUNT(empresignationdetails.empid) AS RelievingCount, branchmaster.branchname, UPPER(LEFT(DATENAME(MONTH, empresignationdetails.resignationdate), 3)) AS Month, " + "  YEAR(empresignationdetails.resignationdate) AS year, MONTH(empresignationdetails.resignationdate) AS mon " + " FROM  branchmaster INNER JOIN " + " employedetails ON branchmaster.branchid = employedetails.branchid INNER JOIN " + " branchmapping ON employedetails.branchid = branchmapping.subbranch INNER JOIN " + " empresignationdetails ON employedetails.empid = empresignationdetails.empid " + " WHERE (employedetails.status = 'YES') AND (branchmapping.mainbranch = @m) AND  (MONTH(empresignationdetails.resignationdate)=@month) AND (YEAR(empresignationdetails.resignationdate)=@year) AND (employedetails.branchid = @branchid) " + "GROUP BY branchmaster.branchname, MONTH(empresignationdetails.resignationdate), DATENAME(MONTH, empresignationdetails.resignationdate), " + " YEAR(empresignationdetails.resignationdate) " + ") as y ON y.branchname = x.branchname group by x.branchname,y.branchname,x.joinCount, y.RelievingCount, x.year, x.mon,y.year, y.mon   ORDER BY x.year, x.mon,y.year, y.mon");
                cmd.Parameters.Add("@m", mainbranch);
                cmd.Parameters.Add("@branchid", name);
                cmd.Parameters.Add("@month", Month);
                cmd.Parameters.Add("@year", Year);
                DataTable dtble1 = vdm.SelectQuery(cmd).Tables[0];
                foreach (DataRow dr in dtble1.Rows)
                {
                    employeeValues getbrcdetails = new employeeValues();
                    //getbrcdetails.branchname = dr["branchname1"].ToString();
                    string branchname1 = dr["branchname1"].ToString();
                    if (branchname1 == "")
                    {
                        getbrcdetails.branchname = dr["branchname"].ToString();
                    }
                    else
                    {
                        getbrcdetails.branchname = dr["branchname1"].ToString();
                    }
                    getbrcdetails.countgen = dr["joinCount"].ToString();
                    getbrcdetails.countgen1 = dr["RelievingCount"].ToString();
                    EmployeDetalis.Add(getbrcdetails);
                }

            }
            employeeValues GetPieValues = new employeeValues();
            GetPieValues.EmployeDetalis = EmployeDetalis;
            //GetPieValues.EmployeDetalis1 = EmployeDetalis1;
            //GetPieValues.countgen1 = countList1;
            lPieValueslist.Add(GetPieValues);
            string errresponse = GetJson(lPieValueslist);
            context.Response.Write(errresponse);
        }
        catch
        {
        }
    }



    private void employee_relieving_joingcount_barChartValues(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            DateTime FromDate = DateTime.Now;
            string mainbranch = context.Session["mainbranch"].ToString();
            string type = context.Request["type"];
            string Month = context.Request["Month"];
            string Year = context.Request["Year"];
            //string branchid = context.Session["branchid"].ToString();
            string name = context.Request["name"];
            string ChartType = context.Request["ChartType"];
            string FormName = context.Request["FormName"];
            string xvaluestr = string.Empty;
            List<employeetypeValues> lPieValueslist = new List<employeetypeValues>();
            List<string> genderList = new List<string>();
            List<string> countList = new List<string>();
            List<string> countList1 = new List<string>();

            if (ChartType == "All Location")
            {
                cmd = new SqlCommand("SELECT  x.joinCount,x.branchname,y.branchname, y.RelievingCount,x.year, x.mon,y.year, y.mon FROM (SELECT COUNT(ISNULL(employedetails.empid,0)) AS joinCount, branchmaster.branchname as branchname, UPPER(LEFT(DATENAME(MONTH, employedetails.joindate), 3)) AS Month, YEAR(employedetails.joindate) AS year, MONTH(employedetails.joindate) AS mon FROM branchmaster INNER JOIN employedetails ON branchmaster.branchid = employedetails.branchid INNER JOIN branchmapping ON employedetails.branchid = branchmapping.subbranch WHERE (employedetails.status = 'NO') AND  (MONTH(employedetails.joindate)=@month) and (YEAR(employedetails.joindate)=@year)  AND (branchmapping.mainbranch = @m)GROUP BY branchmaster.branchname, MONTH(employedetails.joindate), DATENAME(MONTH, employedetails.joindate), YEAR(employedetails.joindate)) as x FULL OUTER JOIN (SELECT        COUNT(ISNULL(empresignationdetails.empid,0)) AS RelievingCount, branchmaster.branchname, UPPER(LEFT(DATENAME(MONTH, empresignationdetails.resignationdate), 3)) AS Month,  YEAR(empresignationdetails.resignationdate) AS year, MONTH(empresignationdetails.resignationdate) AS mon FROM            branchmaster INNER JOIN employedetails ON branchmaster.branchid = employedetails.branchid INNER JOIN branchmapping ON employedetails.branchid = branchmapping.subbranch INNER JOIN empresignationdetails ON employedetails.empid = empresignationdetails.empid WHERE        (employedetails.status = 'YES') AND (branchmapping.mainbranch = @m) AND (MONTH(empresignationdetails.resignationdate) = @month) AND (YEAR(empresignationdetails.resignationdate) = @year) GROUP BY branchmaster.branchname, MONTH(empresignationdetails.resignationdate), DATENAME(MONTH, empresignationdetails.resignationdate), YEAR(empresignationdetails.resignationdate )) as y ON y.branchname = x.branchname group by x.branchname,y.branchname,x.joinCount, y.RelievingCount, x.year, x.mon,y.year, y.mon   ORDER BY x.year, x.mon,y.year, y.mon");
                //cmd = new SqlCommand("Select A.joinCount as NameByVisits, B.RelievingCount as NameBySpent From (Select C.*, RowId as RowNumber From (SELECT COUNT(employedetails.empid) AS joinCount, branchmaster.branchname, UPPER(LEFT(DATENAME(MONTH, employedetails.joindate), 3)) AS Month, YEAR(employedetails.joindate) AS year, MONTH(employedetails.joindate) AS mon FROM branchmaster INNER JOIN employedetails ON branchmaster.branchid = employedetails.branchid INNER JOIN branchmapping ON employedetails.branchid = branchmapping.subbranch WHERE (employedetails.status = 'NO') AND  (MONTH(employedetails.joindate)=@month) and (YEAR(employedetails.joindate)=@year)  AND (branchmapping.mainbranch = @m)GROUP BY branchmaster.branchname, MONTH(employedetails.joindate), DATENAME(MONTH, employedetails.joindate), YEAR(employedetails.joindate)) as C) as A Inner Join (Select D.*, RowId as RowNumber From (SELECT COUNT(empresignationdetails.empid) AS RelievingCount, branchmaster.branchname, UPPER(LEFT(DATENAME(MONTH, empresignationdetails.resignationdate),3) AS Month, " + "  YEAR(empresignationdetails.resignationdate) AS year, MONTH(empresignationdetails.resignationdate) AS mon " + " FROM  branchmaster INNER JOIN " + " employedetails ON branchmaster.branchid = employedetails.branchid INNER JOIN " + " branchmapping ON employedetails.branchid = branchmapping.subbranch INNER JOIN " + " empresignationdetails ON employedetails.empid = empresignationdetails.empid " + " WHERE (employedetails.status = 'YES') AND (branchmapping.mainbranch = @m) AND  (MONTH(empresignationdetails.resignationdate)=@month) AND (YEAR(empresignationdetails.resignationdate)=@year) " + " GROUP BY branchmaster.branchname, MONTH(empresignationdetails.resignationdate), DATENAME(MONTH, empresignationdetails.resignationdate), " + " YEAR(empresignationdetails.resignationdate)) as D) as B On A.RowNumber = B.RowNumber");
                //cmd = new SqlCommand(" SELECT (SELECT COUNT(employedetails.empid) AS joinCount, branchmaster.branchname, UPPER(LEFT(DATENAME(MONTH, employedetails.joindate), 3)) AS Month, YEAR(employedetails.joindate) AS year, MONTH(employedetails.joindate) AS mon FROM branchmaster INNER JOIN employedetails ON branchmaster.branchid = employedetails.branchid INNER JOIN branchmapping ON employedetails.branchid = branchmapping.subbranch WHERE (employedetails.status = 'NO') AND  (MONTH(employedetails.joindate)=@month) and (YEAR(employedetails.joindate)=@year)  AND (branchmapping.mainbranch = @m)GROUP BY branchmaster.branchname, MONTH(employedetails.joindate), DATENAME(MONTH, employedetails.joindate), YEAR(employedetails.joindate)) AS tot_user , ( SELECT COUNT(empresignationdetails.empid) AS RelievingCount, branchmaster.branchname, UPPER(LEFT(DATENAME(MONTH, empresignationdetails.resignationdate), 3)) AS Month, " + "  YEAR(empresignationdetails.resignationdate) AS year, MONTH(empresignationdetails.resignationdate) AS mon " + " FROM  branchmaster INNER JOIN " + " employedetails ON branchmaster.branchid = employedetails.branchid INNER JOIN " + " branchmapping ON employedetails.branchid = branchmapping.subbranch INNER JOIN " + " empresignationdetails ON employedetails.empid = empresignationdetails.empid " + " WHERE (employedetails.status = 'YES') AND (branchmapping.mainbranch = @m) AND  (MONTH(empresignationdetails.resignationdate)=@month) AND (YEAR(empresignationdetails.resignationdate)=@year) " + "GROUP BY branchmaster.branchname, MONTH(empresignationdetails.resignationdate), DATENAME(MONTH, empresignationdetails.resignationdate), " + " YEAR(empresignationdetails.resignationdate) " + ") AS tot_cat");
                cmd.Parameters.Add("@m", mainbranch);
                cmd.Parameters.Add("@month", Month);
                cmd.Parameters.Add("@year", Year);
            }
            else if (ChartType == "Location Wise")
            {
                cmd = new SqlCommand("SELECT  x.joinCount,x.branchname,y.branchname, y.RelievingCount,x.year, x.mon,y.year, y.mon FROM (SELECT COUNT(employedetails.empid) AS joinCount, branchmaster.branchname, UPPER(LEFT(DATENAME(MONTH, employedetails.joindate), 3)) AS Month, YEAR(employedetails.joindate) AS year, MONTH(employedetails.joindate) AS mon FROM branchmaster INNER JOIN employedetails ON branchmaster.branchid = employedetails.branchid INNER JOIN branchmapping ON employedetails.branchid = branchmapping.subbranch WHERE (employedetails.status = 'NO') AND  (MONTH(employedetails.joindate)=@month) and (YEAR(employedetails.joindate)=@year) and (employedetails.branchid = @branchid) AND (branchmapping.mainbranch = @m)GROUP BY branchmaster.branchname, MONTH(employedetails.joindate), DATENAME(MONTH, employedetails.joindate), YEAR(employedetails.joindate)) as x FULL OUTER JOIN (SELECT COUNT(empresignationdetails.empid) AS RelievingCount, branchmaster.branchname, UPPER(LEFT(DATENAME(MONTH, empresignationdetails.resignationdate), 3)) AS Month, " + "  YEAR(empresignationdetails.resignationdate) AS year, MONTH(empresignationdetails.resignationdate) AS mon " + " FROM  branchmaster INNER JOIN " + " employedetails ON branchmaster.branchid = employedetails.branchid INNER JOIN " + " branchmapping ON employedetails.branchid = branchmapping.subbranch INNER JOIN " + " empresignationdetails ON employedetails.empid = empresignationdetails.empid " + " WHERE (employedetails.status = 'YES') AND (branchmapping.mainbranch = @m) AND  (MONTH(empresignationdetails.resignationdate)=@month) AND (YEAR(empresignationdetails.resignationdate)=@year) AND (employedetails.branchid = @branchid) " + "GROUP BY branchmaster.branchname, MONTH(empresignationdetails.resignationdate), DATENAME(MONTH, empresignationdetails.resignationdate), " + " YEAR(empresignationdetails.resignationdate) " + ") as y ON y.branchname = x.branchname group by x.branchname,y.branchname,x.joinCount, y.RelievingCount, x.year, x.mon,y.year, y.mon   ORDER BY x.year, x.mon,y.year, y.mon");
                cmd.Parameters.Add("@m", mainbranch);
                cmd.Parameters.Add("@branchid", name);
                cmd.Parameters.Add("@month", Month);
                cmd.Parameters.Add("@year", Year);
            }

            DataTable dtble = vdm.SelectQuery(cmd).Tables[0];
            if (dtble.Rows.Count > 0)
            {
                foreach (DataRow dr in dtble.Rows)
                {
                    string Date = "";
                    int count = 0;


                    if (FormName == "salarywiseLinechart")
                    {
                        if (ChartType == "All Location")
                        {
                            string branchname1 = dr["branchname1"].ToString();
                            if (branchname1 == "")
                            {
                                genderList.Add(dr["branchname"].ToString());
                            }
                            else
                            {
                                genderList.Add(dr["branchname1"].ToString());
                            }
                            //xvaluestr += dr["branchname"].ToString() + ',';
                            string countgen = dr["joinCount"].ToString();
                            if (countgen == "")
                            {
                                countgen = "0";
                            }
                            countList.Add(countgen);
                            string countgen1 = dr["RelievingCount"].ToString();
                            if (countgen1 == "")
                            {
                                countgen1 = "0";
                            }
                            countList1.Add(countgen1);

                        }
                        else if (ChartType == "Location Wise")
                        {
                            string branchname1 = dr["branchname1"].ToString();
                            if (branchname1 == "")
                            {
                                genderList.Add(dr["branchname"].ToString());
                            }
                            else
                            {
                                genderList.Add(dr["branchname1"].ToString());
                            }
                            //xvaluestr += dr["branchname"].ToString() + ',';
                            string countgen = dr["joinCount"].ToString();
                            if (countgen == "")
                            {
                                countgen = "0";
                            }
                            countList.Add(countgen);
                            string countgen1 = dr["RelievingCount"].ToString();
                            if (countgen1 == "")
                            {
                                countgen1 = "0";
                            }
                            countList1.Add(countgen1);
                        }
                    }

                }
                employeetypeValues GetPieValues = new employeetypeValues();
                GetPieValues.branchname = genderList;
                GetPieValues.countgen = countList;
                GetPieValues.countgen1 = countList1;
                lPieValueslist.Add(GetPieValues);
                string errresponse = GetJson(lPieValueslist);
                context.Response.Write(errresponse);
            }
            else
            {
                string msg = "No data Found";
                string response = GetJson(msg);
                context.Response.Write(response);
            }
        }

        catch
        {
        }
    }




    private void Agewiseemployeecount_barChartValues(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            DateTime FromDate = DateTime.Now;
            string mainbranch = context.Session["mainbranch"].ToString();
            string barnchname = context.Request["barnchname"].ToString();
            string campany = context.Request["campny"].ToString();
            //string branchid = context.Session["branchid"].ToString();
            string name = context.Request["name"];
            string ChartType = context.Request["ChartType"];
            string FormName = context.Request["FormName"];
            string xvaluestr = string.Empty;
            List<employeetypeValues> lPieValueslist = new List<employeetypeValues>();
            List<string> genderList = new List<string>();
            List<string> countList = new List<string>();
            List<string> countList1 = new List<string>();

            if (barnchname == "ALL")
            {
                //cmd = new SqlCommand("SELECT COUNT(*) AS employecount,range FROM  (SELECT  CONCAT((FLOOR(age/10))*10,'-',((FLOOR(age/10))*10)+10)  AS range FROM  (SELECT   DATEDIFF(yy, dob, GETDATE()) AS age, dob  FROM  employedetails WHERE  (status = 'no')  AND (company_id = @companyid)) AS SubQueryAlias) AS SubQueryAlias2 GROUP BY range ORDER BY range");
                cmd = new SqlCommand("SELECT COUNT(*) AS employecount,range FROM  (SELECT  CONCAT((FLOOR((age/10))*10+1),'-',((FLOOR(age/10))*10)+10)  AS range FROM  (SELECT   DATEDIFF(yy, dob, GETDATE()) AS age, dob  FROM  employedetails WHERE  (status = 'NO')  AND (company_id = 1)) AS SubQueryAlias) AS SubQueryAlias2 GROUP BY range ORDER BY range");
                cmd.Parameters.Add("@baranch", barnchname);
                cmd.Parameters.Add("@companyid", campany);
            }
            else
            {
                cmd = new SqlCommand("SELECT COUNT(*) AS employecount,range FROM  (SELECT  CONCAT((FLOOR(age/10))*10,'-',((FLOOR(age/10))*10)+10)  AS range FROM  (SELECT   DATEDIFF(yy, dob, GETDATE()) AS age, dob  FROM  employedetails WHERE  (status = 'no') AND (branchid = @baranch) AND (company_id = @companyid)) AS SubQueryAlias) AS SubQueryAlias2 GROUP BY range ORDER BY range");
                //cmd = new SqlCommand("SELECT COUNT(*) AS employecount,range FROM  (SELECT  CONCAT((FLOOR((age/7))*10-5),'-',((FLOOR(age/7))*10)+5)  AS range FROM  (SELECT   DATEDIFF(yy, dob, GETDATE()) AS age, dob  FROM  employedetails  WHERE  (status = 'no') AND (branchid = 6) AND (company_id = 1)) AS SubQueryAlias) AS SubQueryAlias2  GROUP BY range ORDER BY range");
                cmd.Parameters.Add("@baranch", barnchname);
                cmd.Parameters.Add("@companyid", campany);
            }

            DataTable dtble = vdm.SelectQuery(cmd).Tables[0];
            if (dtble.Rows.Count > 0)
            {
                foreach (DataRow dr in dtble.Rows)
                {
                    string Date = "";
                    int count = 0;


                    genderList.Add(dr["range"].ToString());
                    string countgen = dr["employecount"].ToString();
                    if (countgen == "")
                    {
                        countgen = "0";
                    }
                    countList.Add(countgen);

                }
                employeetypeValues GetPieValues = new employeetypeValues();
                GetPieValues.branchname = genderList;
                GetPieValues.countgen = countList;
                lPieValueslist.Add(GetPieValues);
                string errresponse = GetJson(lPieValueslist);
                context.Response.Write(errresponse);
            }
            else
            {
                string msg = "No data Found";
                string response = GetJson(msg);
                context.Response.Write(response);
            }
        }

        catch
        {
        }
    }


    public class Summaryvalues
    {
        public List<Summaryvalues> summarysalaryDetalis { get; set; }
        public List<Summaryvalues> summarybankDetalis { get; set; }
        public List<Summaryvalues> convneanceDetails { get; set; }
        public List<Summaryvalues> EmployeDetalis { get; set; }
        public List<Summaryvalues> EmployeDetalis1 { get; set; }
        public string branchname { get; set; }
        public string Employeetype { get; set; }
        public string TotalAmount { get; set; }
        public string bankname { get; set; }
        public string TotalgrossAmount { get; set; }
        public string PT { get; set; }
        public string PF { get; set; }
        public string ESI { get; set; }
        public string Salaryadv { get; set; }
        public string loan { get; set; }
        public string Canteen { get; set; }
        public string Mobilededuction { get; set; }
        public string month { get; set; }
        public string TDS { get; set; }
        public string Otherdeductions { get; set; }
        public string GROSSEarnings { get; set; }
        public string totaldeductions { get; set; }
        public string CONVEYANCE { get; set; }
        public string FIXEDCONVEYANCE { get; set; }
        public string Extrapay { get; set; }
        public string title { get; set; }
        public string filename { get; set; }
        public string address { get; set; }
        public string shift { get; set; }
        public string RateDay { get; set; }
        public string BettaDay { get; set; }

    }
    private void GetSummaryreportdetails(HttpContext context)
    {
        try
        {
            DataTable Report = new DataTable();
            DataTable Report1 = new DataTable();
            DBManager SalesDB = new DBManager();
            DateTime fromdate = DateTime.Now;
            DateTime mydate = DateTime.Now;
            string currentyear = (mydate.Year).ToString();
            string mainbranch = context.Session["mainbranch"].ToString();
            string type = context.Request["type"];
            string Month = context.Request["Month"];
            string Year = context.Request["Year"];
            string branchid = context.Request["name"];
            string branchtype = context.Request["branchtype"];
            string ChartType = context.Request["ChartType"];
            List<Summaryvalues> lPieValueslist = new List<Summaryvalues>();

            List<Summaryvalues> EmployeDetalis = new List<Summaryvalues>();
            string day = "";
            if (Month == "02")
            {
                day = "28";
            }
            else
            {
                day = (mydate.Day).ToString();
            }
            //string day = (mydate.Day).ToString();
            string d = "00";
            string date = Month + "/" + day + "/" + Year;
            //lblHeading.Text = " Summary Salary Statement" + ddlmonth.SelectedItem.Text + year;
            DateTime dtfrom = fromdate;
            string frmdate = dtfrom.ToString("dd/MM/yyyy");
            string[] str = frmdate.Split('/');
            //lblFromDate.Text = Month;
            fromdate = Convert.ToDateTime(date);
            context.Session["filename"] = " Summary Salary Statement " + Month + Year;
            context.Session["title"] = " Summary Salary Statement " + Month + Year;
            string address;
            string title;
            string filename;
            cmd = new SqlCommand("SELECT company_master.address, company_master.companyname FROM branchmaster INNER JOIN company_master ON branchmaster.company_code = company_master.sno");
            DataTable dtcompany = vdm.SelectQuery(cmd).Tables[0];
            if (dtcompany.Rows.Count > 0)
            {
                address = dtcompany.Rows[0]["address"].ToString();
                title = dtcompany.Rows[0]["companyname"].ToString();
                filename = context.Session["filename"].ToString();
            }
            else
            {
                address = context.Session["Address"].ToString();
                title = context.Session["TitleName"].ToString();
                filename = context.Session["filename"].ToString();
                //string companycode = context.Session["filename"].ToString();
            }
            DataTable dtnew = new DataTable();
            //string mainbranch = Session["mainbranch"].ToString();
            if (branchtype == "SalesOffice" || branchtype == "CC" || branchtype == "Plant")
            {
                if (ChartType == "Location")
                {
                    cmd = new SqlCommand(" SELECT  branchmaster.branchid, branchmaster.branchname, branchmaster.company_code, employedetails.employee_type FROM   branchmaster INNER JOIN  branchmapping ON branchmaster.branchid = branchmapping.subbranch INNER JOIN  employedetails ON branchmaster.branchid = employedetails.branchid WHERE  (branchmaster.branchid = @branchtype) AND (branchmapping.mainbranch = @m) GROUP BY employedetails.employee_type, branchmaster.branchid, branchmaster.branchname, branchmaster.company_code");
                    cmd.Parameters.Add("@m", mainbranch);
                    cmd.Parameters.Add("@branchtype", branchid);
                    DataTable dtbranch = vdm.SelectQuery(cmd).Tables[0];
                    //DataTable dtnew = new DataTable();
                    dtnew.Columns.Add("SNO");
                    dtnew.Columns.Add("Month");
                    dtnew.Columns.Add("employeetype");
                    dtnew.Columns.Add("loacation");
                    dtnew.Columns.Add("NetAmount").DataType = typeof(double);
                    dtnew.Columns.Add("GrossAmount").DataType = typeof(double);
                    dtnew.Columns.Add("PT").DataType = typeof(double);
                    dtnew.Columns.Add("PF").DataType = typeof(double);
                    dtnew.Columns.Add("TDS").DataType = typeof(double);
                    dtnew.Columns.Add("ESI").DataType = typeof(double);
                    dtnew.Columns.Add("Canteen").DataType = typeof(double);
                    dtnew.Columns.Add("Mobilededuction").DataType = typeof(double);
                    dtnew.Columns.Add("Loan").DataType = typeof(double);
                    dtnew.Columns.Add("Salaryadv").DataType = typeof(double);
                    dtnew.Columns.Add("OTHER DEDUCTION").DataType = typeof(double);
                    dtnew.Columns.Add("TOTAL DEDUCTIONS").DataType = typeof(double);
                    dtnew.Columns.Add("GROSS Earnings").DataType = typeof(double);
                    dtnew.Columns.Add("CONVEYANCE").DataType = typeof(double);
                    dtnew.Columns.Add("Extrapay").DataType = typeof(double);
                    //            
                    //if (dtbranch.Rows.Count > 0)
                    //{
                    var k = 1;
                    foreach (DataRow dtbr in dtbranch.Rows)
                    {
                        Report = new DataTable();
                        Report.Columns.Add("Employee Code");
                        Report.Columns.Add("Name");
                        Report.Columns.Add("Location");
                        Report.Columns.Add("DESIGNATION");
                        Report.Columns.Add("GROSS").DataType = typeof(double);
                        Report.Columns.Add("DAYS MONTH").DataType = typeof(double);
                        Report.Columns.Add("Attendance Days").DataType = typeof(double);
                        Report.Columns.Add("CL HOLIDAY AND OFF").DataType = typeof(double);
                        Report.Columns.Add("Payable Days").DataType = typeof(double);
                        Report.Columns.Add("Extra DAYS").DataType = typeof(double);
                        Report.Columns.Add("Extra DAYS Value").DataType = typeof(double);
                        Report.Columns.Add("BASIC").DataType = typeof(double);
                        Report.Columns.Add("HRA").DataType = typeof(double);
                        Report.Columns.Add("CONVEYANCE ALLOWANCE").DataType = typeof(double);
                        Report.Columns.Add("MEDICAL ALLOWANCE").DataType = typeof(double);
                        Report.Columns.Add("WASHING ALLOWANCE").DataType = typeof(double);
                        Report.Columns.Add("GROSS Earnings").DataType = typeof(double);
                        Report.Columns.Add("PT").DataType = typeof(double);
                        Report.Columns.Add("PF").DataType = typeof(double);
                        Report.Columns.Add("ESI").DataType = typeof(double);
                        Report.Columns.Add("SALARY ADVANCE").DataType = typeof(double);
                        Report.Columns.Add("Loan").DataType = typeof(double);
                        Report.Columns.Add("CANTEEN DEDUCTION").DataType = typeof(double);
                        Report.Columns.Add("MOBILE DEDUCTION").DataType = typeof(double);
                        Report.Columns.Add("MEDICLAIM DEDUCTION").DataType = typeof(double);
                        Report.Columns.Add("OTHER DEDUCTION").DataType = typeof(double);
                        Report.Columns.Add("TOTAL DEDUCTIONS").DataType = typeof(double);
                        Report.Columns.Add("Tds DEDUCTION").DataType = typeof(double);
                        Report.Columns.Add("CONVEYANCE").DataType = typeof(double);
                        Report.Columns.Add("NET PAY").DataType = typeof(double);
                        Report.Columns.Add("Extrapay").DataType = typeof(double);
                        Report.Columns.Add("Bank Acc NO");
                        Report.Columns.Add("IFSC Code");
                        //string branchid = dtbr["branchid"].ToString();
                        string employeetype = dtbr["employee_type"].ToString();
                        string branchname = dtbr["branchname"].ToString();
                        cmd = new SqlCommand("SELECT employedetails.pfeligible,  employedetails.pfdate, employedetails.esidate, employedetails.esieligible, employedetails.employee_type, employedetails.empid, employedetails.employee_num,pay_structure.erningbasic, pay_structure.esi, pay_structure.providentfund, employedetails.fullname, designation.designation, pay_structure.salaryperyear, pay_structure.hra, pay_structure.conveyance, pay_structure.washingallowance, pay_structure.medicalerning, pay_structure.profitionaltax,employebankdetails.accountno, employebankdetails.ifsccode, branchmaster.branchname,monthly_attendance.month, monthly_attendance.year,pay_structure.travelconveyance FROM  employedetails INNER JOIN designation ON employedetails.designationid = designation.designationid INNER JOIN pay_structure ON employedetails.empid = pay_structure.empid INNER JOIN monthly_attendance ON employedetails.empid = monthly_attendance.empid INNER JOIN  branchmapping ON employedetails.branchid = branchmapping.subbranch LEFT OUTER JOIN employebankdetails ON employedetails.empid = employebankdetails.employeid  INNER JOIN branchmaster ON employedetails.branchid = branchmaster.branchid  WHERE (employedetails.status = 'No') AND (monthly_attendance.month = @month) AND (monthly_attendance.year = @year) AND (branchmapping.mainbranch = @m) and (employedetails.branchid = @branchid) AND  (employedetails.employee_type =@employetype)");
                        cmd.Parameters.Add("@m", mainbranch);
                        cmd.Parameters.Add("@branchid", branchid);
                        cmd.Parameters.Add("@month", Month);
                        cmd.Parameters.Add("@year", Year);
                        cmd.Parameters.Add("@employetype", employeetype);
                        DataTable dtsalary = vdm.SelectQuery(cmd).Tables[0];
                        cmd = new SqlCommand("SELECT monthly_attendance.sno, monthly_attendance.empid,monthly_attendance.clorwo, monthly_attendance.doe, monthly_attendance.month, monthly_attendance.year, monthly_attendance.otdays, employedetails.employee_num, branchmaster.fromdate, branchmaster.todate, monthly_attendance.lop, branchmaster.branchid, monthly_attendance.numberofworkingdays FROM  monthly_attendance INNER JOIN  employedetails ON monthly_attendance.empid = employedetails.empid INNER JOIN branchmaster ON employedetails.branchid = branchmaster.branchid WHERE  (monthly_attendance.month = @month) AND (monthly_attendance.year = @year) AND (employedetails.branchid = @branchid) AND  (employedetails.employee_type =@employetype)");
                        cmd.Parameters.Add("@month", Month);
                        cmd.Parameters.Add("@year", Year);
                        cmd.Parameters.Add("@branchid", branchid);
                        cmd.Parameters.Add("@employetype", employeetype);
                        DataTable dtattendence = vdm.SelectQuery(cmd).Tables[0];
                        cmd = new SqlCommand("SELECT  employedetails.employee_num, salaryadvance.amount, salaryadvance.monthofpaid, employedetails.fullname, salaryadvance.empid FROM   salaryadvance INNER JOIN  employedetails ON salaryadvance.empid = employedetails.empid where (employedetails.branchid=@branchid) AND (salaryadvance.month = @month) AND (salaryadvance.year = @year) AND  (employedetails.employee_type =@employetype)");
                        cmd.Parameters.Add("@month", Month);
                        cmd.Parameters.Add("@year", Year);
                        cmd.Parameters.Add("@branchid", branchid);
                        cmd.Parameters.Add("@employetype", employeetype);
                        DataTable dtsa = vdm.SelectQuery(cmd).Tables[0];
                        cmd = new SqlCommand("SELECT monthly_attendance.sno, employedetails.employee_num, employedetails.fullname, monthly_attendance.empid, monthly_attendance.doe,  monthly_attendance.month, monthly_attendance.year, monthly_attendance.extradays, branchmaster.fromdate, branchmaster.todate, monthly_attendance.lop, branchmaster.branchid, monthly_attendance.numberofworkingdays, pay_structure.gross, employebankdetails.employeid, employebankdetails.accountno,  designation.designation FROM  monthly_attendance INNER JOIN employedetails ON monthly_attendance.empid = employedetails.empid INNER JOIN branchmaster ON employedetails.branchid = branchmaster.branchid INNER JOIN pay_structure ON employedetails.empid = pay_structure.empid INNER JOIN designation ON employedetails.designationid = designation.designationid LEFT OUTER JOIN employebankdetails ON employedetails.empid = employebankdetails.employeid WHERE (employedetails.branchid = @branchid) AND  (monthly_attendance.month = @month) AND (monthly_attendance.year = @year)");
                        cmd.Parameters.Add("@month", Month);
                        cmd.Parameters.Add("@year", Year);
                        cmd.Parameters.Add("@branchid", branchid);
                        DataTable dtOT = vdm.SelectQuery(cmd).Tables[0];
                        cmd = new SqlCommand("SELECT employedetails.employee_num, loan_request.loanemimonth, loan_request.months, loan_request.startdate FROM employedetails INNER JOIN  loan_request ON employedetails.empid = loan_request.empid where (employedetails.branchid=@branchid) AND (loan_request.month = @month) AND (loan_request.year = @year)");
                        cmd.Parameters.Add("@month", Month);
                        cmd.Parameters.Add("@year", Year);
                        cmd.Parameters.Add("@branchid", branchid);
                        cmd.Parameters.Add("@employetype", employeetype);
                        DataTable dtloan = vdm.SelectQuery(cmd).Tables[0];
                        cmd = new SqlCommand("SELECT  employedetails.employee_num, mobile_deduction.deductionamount, employedetails.fullname, employedetails.empid FROM  mobile_deduction INNER JOIN employedetails ON mobile_deduction.employee_num = employedetails.employee_num   where (employedetails.branchid=@branchid) AND (mobile_deduction.month = @month) AND (mobile_deduction.year = @year) AND  (employedetails.employee_type =@employetype)");
                        cmd.Parameters.Add("@branchid", branchid);
                        cmd.Parameters.Add("@month", Month);
                        cmd.Parameters.Add("@year", Year);
                        cmd.Parameters.Add("@employetype", employeetype);
                        DataTable dtmobile = vdm.SelectQuery(cmd).Tables[0];
                        cmd = new SqlCommand("SELECT  employedetails.employee_num, canteendeductions.amount, employedetails.fullname, employedetails.empid FROM  canteendeductions INNER JOIN employedetails ON canteendeductions.employee_num = employedetails.employee_num where (employedetails.branchid=@branchid) AND (canteendeductions.month = @month) AND (canteendeductions.year = @year) AND  (employedetails.employee_type =@employetype)");
                        cmd.Parameters.Add("@branchid", branchid);
                        cmd.Parameters.Add("@month", Month);
                        cmd.Parameters.Add("@year", Year);
                        cmd.Parameters.Add("@employetype", employeetype);
                        DataTable dtcanteen = vdm.SelectQuery(cmd).Tables[0];
                        cmd = new SqlCommand("SELECT employedetails.employee_num, employedetails.fullname, employedetails.empid, mediclaimdeduction.medicliamamount FROM employedetails INNER JOIN mediclaimdeduction ON employedetails.empid = mediclaimdeduction.empid WHERE (employedetails.branchid = @branchid) AND  (employedetails.employee_type =@employetype)");
                        cmd.Parameters.Add("@branchid", branchid);
                        cmd.Parameters.Add("@employetype", employeetype);
                        //cmd.Parameters.Add("@month", mymonth);
                        //cmd.Parameters.Add("@year", str[2]);
                        DataTable dtmedicliam = vdm.SelectQuery(cmd).Tables[0];
                        cmd = new SqlCommand("SELECT employedetails.employee_num, employedetails.fullname, employedetails.empid, otherdeduction.otherdeductionamount FROM employedetails INNER JOIN otherdeduction ON employedetails.empid = otherdeduction.empid WHERE (employedetails.branchid = @branchid) AND (otherdeduction.month = @month) AND (otherdeduction.year = @year) AND  (employedetails.employee_type =@employetype)");
                        cmd.Parameters.Add("@branchid", branchid);
                        cmd.Parameters.Add("@month", Month);
                        cmd.Parameters.Add("@year", Year);
                        cmd.Parameters.Add("@employetype", employeetype);
                        DataTable dtotherdeduction = vdm.SelectQuery(cmd).Tables[0];
                        cmd = new SqlCommand("SELECT employedetails.employee_num, employedetails.fullname, employedetails.empid, tds_deduction.tdsamount FROM employedetails INNER JOIN tds_deduction ON employedetails.empid = tds_deduction.empid WHERE (employedetails.branchid = @branchid) AND  (employedetails.employee_type =@employetype)");
                        cmd.Parameters.Add("@branchid", branchid);
                        cmd.Parameters.Add("@employetype", employeetype);
                        //cmd.Parameters.Add("@month", mymonth);
                        //cmd.Parameters.Add("@year", str[2]);
                        DataTable dttdsdeduction = vdm.SelectQuery(cmd).Tables[0];
                        if (dtsalary.Rows.Count > 0)
                        {
                            var i = 1;
                            foreach (DataRow dr in dtsalary.Rows)
                            {
                                double totalpresentdays = 0;
                                double profitionaltax = 0;
                                double salaryadvance = 0;
                                double loan = 0;
                                double canteendeduction = 0;
                                double otherdeduction = 0;
                                double tdsdeduction = 0;
                                double medicliamdeduction = 0;
                                double mobilededuction = 0;
                                double totaldeduction;
                                double totalearnings;
                                double providentfund = 0;
                                double medicalerning = 0;
                                double washingallowance = 0;
                                double convenyance = 0;
                                double esi = 0;
                                double daysinmonth = 0;
                                double loseamount = 0;
                                double loseofconviyance = 0;
                                double loseofwashing = 0;
                                double loseofmedical = 0;
                                double losofprofitionaltax = 0;
                                double otamount = 0;
                                DataRow newrow = Report.NewRow();
                                newrow["Employee Code"] = dr["employee_num"].ToString();
                                //string branchname = dr["branchname"].ToString();
                                newrow["Name"] = dr["fullname"].ToString();
                                newrow["DESIGNATION"] = dr["designation"].ToString();
                                double peryanam = Convert.ToDouble(dr["salaryperyear"].ToString());
                                newrow["GROSS"] = peryanam / 12;
                                double permonth = peryanam / 12;
                                double HRA = Convert.ToDouble(dr["hra"].ToString());
                                double BASIC = Convert.ToDouble(dr["erningbasic"].ToString());
                                convenyance = Convert.ToDouble(dr["conveyance"].ToString());
                                //if(employeetype!="Canteen"){
                                profitionaltax = Convert.ToDouble(dr["profitionaltax"].ToString());
                                //}
                                medicalerning = Convert.ToDouble(dr["medicalerning"].ToString());
                                washingallowance = Convert.ToDouble(dr["washingallowance"].ToString());
                                newrow["Bank Acc NO"] = dr["accountno"].ToString();
                                newrow["IFSC Code"] = dr["ifsccode"].ToString();
                                double travelconveyance = 0;
                                if (branchtype == "SalesOffice" || branchtype == "CC")
                                {

                                    double.TryParse(dr["travelconveyance"].ToString(), out travelconveyance);
                                    newrow["CONVEYANCE"] = travelconveyance;

                                    //Report.Columns.Add("CONVEYANCE").DataType = typeof(double);
                                }
                                if (dtattendence.Rows.Count > 0)
                                {
                                    foreach (DataRow dra in dtattendence.Select("employee_num='" + dr["employee_num"].ToString() + "'"))
                                    {

                                        double numberofworkingdays = 0;
                                        double.TryParse(dra["numberofworkingdays"].ToString(), out numberofworkingdays);
                                        double clorwo = 0;
                                        double.TryParse(dra["clorwo"].ToString(), out clorwo);
                                        daysinmonth = numberofworkingdays + clorwo;
                                        newrow["DAYS MONTH"] = daysinmonth.ToString();

                                        double paydays = 0;
                                        double lop = 0;
                                        double.TryParse(dra["lop"].ToString(), out lop);
                                        paydays = numberofworkingdays - lop;
                                        newrow["Attendance Days"] = paydays.ToString();
                                        double holidays = 0;
                                        holidays = daysinmonth - numberofworkingdays;
                                        if (lop != 0)
                                        {
                                            double totaldays = paydays + clorwo;
                                            newrow["Payable Days"] = totaldays;
                                        }
                                        else
                                        {
                                            newrow["Payable Days"] = paydays + clorwo;
                                        }
                                        newrow["CL HOLIDAY AND OFF"] = clorwo;
                                        totalpresentdays = holidays + paydays;
                                        double totalpdays = permonth / daysinmonth;
                                        loseamount = lop * totalpdays;
                                        double perdayconveyance = convenyance / daysinmonth;
                                        loseofconviyance = lop * perdayconveyance;
                                        double perdaywashing = washingallowance / daysinmonth;
                                        loseofwashing = lop * perdaywashing;
                                        double perdaymedical = medicalerning / daysinmonth;
                                        loseofmedical = lop * perdaymedical;
                                        double perdaybasic = BASIC / daysinmonth;
                                        double perdaprofitionaltax = profitionaltax / daysinmonth;
                                        losofprofitionaltax = lop * perdaprofitionaltax;
                                    }
                                }
                                double perdaysal = permonth / daysinmonth;
                                double basic = 50;
                                double basicsalary = (permonth * 50) / 100;
                                double basicpermonth = basicsalary / daysinmonth;
                                double bs = basicpermonth * totalpresentdays;
                                newrow["BASIC"] = Math.Round(bs);
                                newrow["CONVEYANCE ALLOWANCE"] = Math.Round(convenyance - loseofconviyance);
                                newrow["MEDICAL ALLOWANCE"] = Math.Round(medicalerning - loseofmedical);
                                newrow["WASHING ALLOWANCE"] = Math.Round(washingallowance - loseofwashing);



                                double basicsal = Math.Round(basicsalary - loseamount);
                                double conve = Math.Round(convenyance - loseofconviyance);
                                double medical = Math.Round(medicalerning - loseofmedical);
                                double washing = Math.Round(washingallowance - loseofwashing);
                                double ptax = Math.Round(profitionaltax - losofprofitionaltax);
                                //if (employeetype != "Canteen")
                                //{
                                newrow["PT"] = profitionaltax;//(profitionaltax - losofprofitionaltax);
                                //}
                                double tt = bs + conve + medical + washing;
                                double thra = permonth - loseamount;
                                double hra = Math.Round(thra - tt);
                                totalearnings = Math.Round(hra + tt);
                                newrow["HRA"] = hra;
                                newrow["GROSS Earnings"] = totalearnings;
                                string pfeligible = dr["pfeligible"].ToString();
                                if (pfeligible == "Yes")
                                {
                                    providentfund = (totalearnings * 6) / 100;
                                    if (providentfund > 1800)
                                    {
                                        providentfund = 1800;
                                    }
                                    providentfund = Math.Round(providentfund, 0);
                                    newrow["PF"] = Math.Round(providentfund, 0);
                                }
                                else
                                {
                                    providentfund = 0;
                                    newrow["PF"] = providentfund;
                                }
                                string esieligible = dr["esieligible"].ToString();
                                if (esieligible == "Yes")
                                {
                                    esi = (totalearnings * 1.75) / 100;
                                    esi = Math.Round(esi, 0);
                                    newrow["ESI"] = esi;
                                }
                                else
                                {
                                    esi = 0;
                                    newrow["ESI"] = esi;
                                }
                                foreach (DataRow drot in dtOT.Select("employee_num='" + dr["employee_num"].ToString() + "'"))
                                {

                                    string ot = drot["extradays"].ToString();
                                    double numberofworkingdays = 0;
                                    double.TryParse(drot["numberofworkingdays"].ToString(), out numberofworkingdays);
                                    double otdays = 0;
                                    if (numberofworkingdays == 0.0)
                                    {
                                        numberofworkingdays = 1;
                                    }
                                    if (ot == null || ot == "")
                                    {
                                        otdays = 0;
                                    }
                                    else
                                    {
                                        otdays = Convert.ToDouble(drot["extradays"].ToString());
                                    }
                                    double monthsal = Convert.ToDouble(drot["gross"].ToString());
                                    double perdayamt = monthsal / daysinmonth;
                                    double otvalue = perdayamt * otdays;
                                    newrow["Extra DAYS"] = otdays;
                                    newrow["Extra DAYS Value"] = Math.Round(otvalue);
                                    otamount = otvalue;
                                }
                                if (dtsa.Rows.Count > 0)
                                {
                                    DataRow[] drr = dtsa.Select("employee_num='" + dr["employee_num"].ToString() + "'");
                                    if (drr.Length > 0)
                                    {
                                        foreach (DataRow drsa in dtsa.Select("employee_num='" + dr["employee_num"].ToString() + "'"))
                                        {
                                            double amount = 0;
                                            double.TryParse(drsa["amount"].ToString(), out amount);
                                            newrow["SALARY ADVANCE"] = amount.ToString();
                                            salaryadvance = Convert.ToDouble(amount);
                                            salaryadvance = Math.Round(amount, 0);
                                        }
                                    }
                                    else
                                    {
                                        salaryadvance = 0;
                                        newrow["SALARY ADVANCE"] = salaryadvance;
                                    }
                                }
                                else
                                {
                                    salaryadvance = 0;
                                    newrow["SALARY ADVANCE"] = salaryadvance;
                                }
                                if (dtloan.Rows.Count > 0)
                                {
                                    DataRow[] drr = dtloan.Select("employee_num='" + dr["employee_num"].ToString() + "'");
                                    if (drr.Length > 0)
                                    {
                                        foreach (DataRow drloan in dtloan.Select("employee_num='" + dr["employee_num"].ToString() + "'"))
                                        {
                                            double loanemimonth = 0;
                                            double.TryParse(drloan["loanemimonth"].ToString(), out loanemimonth);
                                            newrow["Loan"] = loanemimonth.ToString();
                                            loan = Convert.ToDouble(loanemimonth);
                                            loan = Math.Round(loanemimonth, 0);
                                        }
                                    }
                                    else
                                    {
                                        loan = 0;
                                        newrow["Loan"] = loan;
                                    }
                                }
                                else
                                {
                                    loan = 0;
                                    newrow["Loan"] = loan;
                                }
                                mobilededuction = 0;
                                if (dtmobile.Rows.Count > 0)
                                {
                                    DataRow[] drr = dtmobile.Select("employee_num='" + dr["employee_num"].ToString() + "'");
                                    if (drr.Length > 0)
                                    {
                                        foreach (DataRow drmobile in dtmobile.Select("employee_num='" + dr["employee_num"].ToString() + "'"))
                                        {
                                            double deductionamount = 0;
                                            double.TryParse(drmobile["deductionamount"].ToString(), out deductionamount);
                                            newrow["MOBILE DEDUCTION"] = deductionamount.ToString();
                                            string st = deductionamount.ToString();
                                            if (st == "0.0")
                                            {
                                                mobilededuction = 0;
                                                newrow["MOBILE DEDUCTION"] = mobilededuction;

                                            }
                                            else
                                            {
                                                mobilededuction = Convert.ToDouble(deductionamount);
                                                mobilededuction = Math.Round(deductionamount, 0);
                                            }
                                        }
                                    }
                                    else
                                    {
                                        mobilededuction = 0;
                                        newrow["MOBILE DEDUCTION"] = mobilededuction;
                                    }
                                }
                                else
                                {
                                    mobilededuction = 0;
                                    newrow["MOBILE DEDUCTION"] = mobilededuction;
                                }
                                canteendeduction = 0;
                                if (dtcanteen.Rows.Count > 0)
                                {
                                    DataRow[] drr = dtcanteen.Select("employee_num='" + dr["employee_num"].ToString() + "'");
                                    if (drr.Length > 0)
                                    {
                                        foreach (DataRow drcanteen in dtcanteen.Select("employee_num='" + dr["employee_num"].ToString() + "'"))
                                        {
                                            double deductionamount = 0;
                                            double.TryParse(drcanteen["amount"].ToString(), out deductionamount);
                                            newrow["CANTEEN DEDUCTION"] = deductionamount.ToString();
                                            string st = deductionamount.ToString();
                                            canteendeduction = Convert.ToDouble(deductionamount);
                                            canteendeduction = Math.Round(deductionamount, 0);
                                        }
                                    }
                                    else
                                    {
                                        canteendeduction = 0;
                                        newrow["CANTEEN DEDUCTION"] = canteendeduction;
                                    }
                                }
                                else
                                {
                                    canteendeduction = 0;
                                    newrow["CANTEEN DEDUCTION"] = canteendeduction;
                                }
                                medicliamdeduction = 0;
                                if (dtmedicliam.Rows.Count > 0)
                                {
                                    DataRow[] drr = dtmedicliam.Select("employee_num='" + dr["employee_num"].ToString() + "'");
                                    if (drr.Length > 0)
                                    {
                                        foreach (DataRow drmedicliam in dtmedicliam.Select("employee_num='" + dr["employee_num"].ToString() + "'"))
                                        {
                                            double amount = 0;
                                            double.TryParse(drmedicliam["medicliamamount"].ToString(), out amount);
                                            newrow["MEDICLAIM DEDUCTION"] = amount.ToString();
                                            string st = amount.ToString();
                                            medicliamdeduction = Convert.ToDouble(amount);
                                            medicliamdeduction = Math.Round(amount, 0);
                                        }
                                    }
                                    else
                                    {
                                        medicliamdeduction = 0;
                                        newrow["MEDICLAIM DEDUCTION"] = medicliamdeduction;
                                    }
                                }
                                else
                                {
                                    medicliamdeduction = 0;
                                    newrow["MEDICLAIM DEDUCTION"] = medicliamdeduction;
                                }
                                otherdeduction = 0;
                                if (dtotherdeduction.Rows.Count > 0)
                                {
                                    DataRow[] drr = dtotherdeduction.Select("employee_num='" + dr["employee_num"].ToString() + "'");
                                    if (drr.Length > 0)
                                    {
                                        foreach (DataRow drotherdeduction in dtotherdeduction.Select("employee_num='" + dr["employee_num"].ToString() + "'"))
                                        {
                                            double amount = 0;
                                            double.TryParse(drotherdeduction["otherdeductionamount"].ToString(), out amount);
                                            newrow["OTHER DEDUCTION"] = amount.ToString();
                                            string st = amount.ToString();
                                            otherdeduction = Convert.ToDouble(amount);
                                            otherdeduction = Math.Round(amount, 0);
                                        }
                                    }
                                    else
                                    {
                                        otherdeduction = 0;
                                        newrow["OTHER DEDUCTION"] = otherdeduction;
                                    }
                                }
                                else
                                {
                                    otherdeduction = 0;
                                    newrow["OTHER DEDUCTION"] = otherdeduction;
                                }
                                tdsdeduction = 0;
                                if (dttdsdeduction.Rows.Count > 0)
                                {
                                    DataRow[] drr = dttdsdeduction.Select("employee_num='" + dr["employee_num"].ToString() + "'");
                                    if (drr.Length > 0)
                                    {
                                        foreach (DataRow drtdsdeduction in dttdsdeduction.Select("employee_num='" + dr["employee_num"].ToString() + "'"))
                                        {
                                            double amount = 0;
                                            double.TryParse(drtdsdeduction["tdsamount"].ToString(), out amount);
                                            newrow["Tds DEDUCTION"] = amount.ToString();
                                            string st = amount.ToString();
                                            tdsdeduction = Convert.ToDouble(amount);
                                            tdsdeduction = Math.Round(amount, 0);
                                        }
                                    }
                                    else
                                    {
                                        tdsdeduction = 0;
                                        newrow["Tds DEDUCTION"] = tdsdeduction;
                                    }
                                }
                                else
                                {
                                    tdsdeduction = 0;
                                    newrow["Tds DEDUCTION"] = tdsdeduction;
                                }
                                newrow["TOTAL DEDUCTIONS"] = Math.Round(profitionaltax + canteendeduction + salaryadvance + loan + mobilededuction + providentfund + esi + medicliamdeduction + otherdeduction + tdsdeduction);
                                totaldeduction = Math.Round(profitionaltax + canteendeduction + salaryadvance + loan + mobilededuction + providentfund + esi + medicliamdeduction + otherdeduction + tdsdeduction);
                                double netpay = 0;
                                netpay = Math.Round(totalearnings - totaldeduction);
                                netpay = Math.Round(netpay, 2);
                                newrow["NET PAY"] = Math.Round(netpay);
                                //newrow["title"] = Math.Round(netpay);
                                //newrow["address"] = address;
                                Report.Rows.Add(newrow);
                                //total += netpay;
                                //netpay = 0;
                            }
                        }
                        DataRow newTotal = Report.NewRow();
                        newTotal["DESIGNATION"] = "Total";
                        double val = 0.0;
                        foreach (DataColumn dc in Report.Columns)
                        {
                            if (dc.DataType == typeof(Double))
                            {
                                val = 0.0;
                                double.TryParse(Report.Compute("sum([" + dc.ToString() + "])", "[" + dc.ToString() + "]<>'0'").ToString(), out val);
                                newTotal[dc.ToString()] = val;
                            }
                        }

                        Report.Rows.Add(newTotal);
                        string designation = "Total";
                        //string branchname1 = branchname;
                        foreach (DataRow dreport in Report.Select("DESIGNATION='" + designation + "'"))
                        {
                            DataRow nr_sp = dtnew.NewRow();
                            nr_sp["SNO"] = k++.ToString();
                            nr_sp["Month"] = Month;
                            nr_sp["loacation"] = branchname;
                            nr_sp["employeetype"] = employeetype;
                            nr_sp["NetAmount"] = dreport["NET PAY"].ToString();
                            nr_sp["GrossAmount"] = dreport["GROSS"].ToString();
                            nr_sp["PT"] = dreport["PT"].ToString();
                            nr_sp["PF"] = dreport["PF"].ToString();
                            nr_sp["TDS"] = dreport["Tds DEDUCTION"].ToString();
                            nr_sp["ESI"] = dreport["ESI"].ToString();
                            nr_sp["Canteen"] = dreport["CANTEEN DEDUCTION"].ToString();
                            nr_sp["Mobilededuction"] = dreport["MOBILE DEDUCTION"].ToString();
                            nr_sp["Loan"] = dreport["Loan"].ToString();
                            nr_sp["Salaryadv"] = dreport["SALARY ADVANCE"].ToString();
                            nr_sp["OTHER DEDUCTION"] = dreport["OTHER DEDUCTION"].ToString();
                            nr_sp["TOTAL DEDUCTIONS"] = dreport["TOTAL DEDUCTIONS"].ToString();
                            nr_sp["GROSS Earnings"] = dreport["GROSS Earnings"].ToString();
                            nr_sp["Extrapay"] = dreport["Extra DAYS Value"].ToString();
                            //nr_sp["title"] = title;
                            //nr_sp["address"] = address;

                            nr_sp["CONVEYANCE"] = dreport["CONVEYANCE"].ToString();
                            dtnew.Rows.Add(nr_sp);
                        }
                    }

                    //SNO	GROSS		GROSS Earnings	PT	PF	ESI	SALARY ADVANCE	Loan	CANTEEN DEDUCTION	MOBILE DEDUCTION	MEDICLAIM DEDUCTION	Tds DEDUCTION	OTHER DEDUCTION	TOTAL DEDUCTIONS	NET PAY	Bank Acc NO	IFSC Code

                    DataRow newTotal3 = dtnew.NewRow();
                    newTotal3["loacation"] = "Total";
                    double val1 = 0.0;
                    foreach (DataColumn dc1 in dtnew.Columns)
                    {

                        if (dc1.DataType == typeof(Double))
                        {
                            val1 = 0.0;
                            double.TryParse(dtnew.Compute("sum([" + dc1.ToString() + "])", "[" + dc1.ToString() + "]<>'0'").ToString(), out val1);
                            newTotal3[dc1.ToString()] = val1;
                        }

                    }
                    dtnew.Rows.Add(newTotal3);
                    foreach (DataRow dr in dtnew.Rows)
                    {
                        Summaryvalues getbrcdetails = new Summaryvalues();
                        getbrcdetails.branchname = dr["loacation"].ToString();
                        getbrcdetails.Employeetype = dr["employeetype"].ToString();
                        getbrcdetails.month = dr["Month"].ToString();
                        getbrcdetails.TotalAmount = dr["NetAmount"].ToString();
                        getbrcdetails.TotalgrossAmount = dr["GrossAmount"].ToString();
                        getbrcdetails.PT = dr["PT"].ToString();
                        getbrcdetails.PF = dr["PF"].ToString();
                        getbrcdetails.ESI = dr["ESI"].ToString();
                        getbrcdetails.Salaryadv = dr["Salaryadv"].ToString();
                        getbrcdetails.loan = dr["Loan"].ToString();
                        getbrcdetails.Canteen = dr["Canteen"].ToString();
                        getbrcdetails.Mobilededuction = dr["Mobilededuction"].ToString();
                        getbrcdetails.GROSSEarnings = dr["GROSS Earnings"].ToString();
                        getbrcdetails.TDS = dr["TDS"].ToString();
                        getbrcdetails.Otherdeductions = dr["OTHER DEDUCTION"].ToString();
                        getbrcdetails.totaldeductions = dr["TOTAL DEDUCTIONS"].ToString();
                        getbrcdetails.CONVEYANCE = dr["CONVEYANCE"].ToString();
                        getbrcdetails.Extrapay = dr["Extrapay"].ToString();
                        getbrcdetails.filename = filename;
                        getbrcdetails.title = title;
                        getbrcdetails.address = address;
                        EmployeDetalis.Add(getbrcdetails);
                    }
                    Summaryvalues GetPieValues = new Summaryvalues();
                    GetPieValues.EmployeDetalis = EmployeDetalis;
                    lPieValueslist.Add(GetPieValues);
                    string errresponse = GetJson(lPieValueslist);
                    context.Response.Write(errresponse);
                    //grdReports.DataSource = dtnew;
                    //grdReports.DataBind();
                    //Session["xportdata"] = dtnew;
                    //hidepanel.Visible = true;
                    //}
                }
                // }
                //}
                double totalextrapay = 0;
                /////bank stetement****************************************





            }

        }

        catch (Exception ex)
        {
            //lblmsg.Text = ex.Message;
            //hidepanel.Visible = false;

        }
    }




    ////////  All branches wise Summary report////////////////////////////////////////////////////////////////////////////////////////////////////////////

    protected void btn_Generate_Click(HttpContext context)
    {
        try
        {
            DataTable Report = new DataTable();
            DataTable Report1 = new DataTable();
            //lblmsg.Text = "";
            DBManager SalesDB = new DBManager();
            DateTime fromdate = DateTime.Now;
            DateTime mydate = DateTime.Now;
            string currentyear = (mydate.Year).ToString();
            string mainbranch = context.Session["mainbranch"].ToString();
            string type = context.Request["type"];
            string Month = context.Request["Month"];
            string Year = context.Request["Year"];
            // string branchid = context.Request["name"];
            string branchtype = context.Request["branchtype"];
            string ChartType = context.Request["ChartType"];
            List<Summaryvalues> lsummarysalaryValueslist = new List<Summaryvalues>();
            List<Summaryvalues> summarysalaryDetalis = new List<Summaryvalues>();
            List<Summaryvalues> lsummarybankValueslist = new List<Summaryvalues>();
            List<Summaryvalues> summarybankDetalis = new List<Summaryvalues>();
            List<Summaryvalues> summaryDetalislist = new List<Summaryvalues>();
            List<Summaryvalues> convneanceDetails = new List<Summaryvalues>();
            string Address;
            string Title;
            string day = "";
            if (Month == "02")
            {
                day = "28";
            }
            else
            {
                day = (mydate.Day).ToString();
            }
            //string day = (mydate.Day).ToString();
            string d = "00";
            string date = Month + "/" + day + "/" + Year;
            //lblHeading.Text = " Summary Salary Statement" + ddlmonth.SelectedItem.Text + year;
            DateTime dtfrom = fromdate;
            string frmdate = dtfrom.ToString("dd/MM/yyyy");
            string[] str = frmdate.Split('/');
            //lblFromDate.Text = Month;
            fromdate = Convert.ToDateTime(date);
            context.Session["filename"] = " Summary Salary Statement " + Month + Year;
            context.Session["title"] = " Summary Salary Statement " + Month + Year;

            cmd = new SqlCommand("SELECT company_master.address, company_master.companyname FROM branchmaster INNER JOIN company_master ON branchmaster.company_code = company_master.sno");
            DataTable dtcompany = vdm.SelectQuery(cmd).Tables[0];
            if (dtcompany.Rows.Count > 0)
            {
                Address = dtcompany.Rows[0]["address"].ToString();
                Title = dtcompany.Rows[0]["companyname"].ToString();
            }
            else
            {
                Address = context.Session["Address"].ToString();
                Title = context.Session["TitleName"].ToString();
            }
            // string mainbranch = Session["mainbranch"].ToString();
            //if (branchtype== "SalesOffice" || branchtype == "CC" || branchtype == "Plant")
            //{
            if (ChartType == "Location")
            {
                if (branchtype == "Plant")
                {
                    cmd = new SqlCommand(" SELECT  branchmaster.branchid, branchmaster.branchname, branchmaster.branchtype, branchmaster.company_code FROM branchmaster INNER JOIN branchmapping ON branchmaster.branchid = branchmapping.subbranch  Where branchmaster.branchtype=@branchtype and  (branchmapping.mainbranch = @m) and (branchmaster.branchid='6')");
                    cmd.Parameters.Add("@m", mainbranch);
                    cmd.Parameters.Add("@branchtype", branchtype);

                }
                else if (branchtype == "Driver")
                {
                    cmd = new SqlCommand(" SELECT  branchmaster.branchid, branchmaster.branchname, branchmaster.branchtype, branchmaster.company_code FROM            branchmaster INNER JOIN   branchmapping ON branchmaster.branchid = branchmapping.subbranch INNER JOIN  employedetails ON branchmaster.branchid = employedetails.branchid WHERE    (employedetails.branchid ='6') AND (branchmapping.mainbranch = @m) AND (employedetails.employee_type = 'Driver' OR employedetails.employee_type = 'Cleaner') GROUP BY branchmaster.branchid, branchmaster.branchname, branchmaster.branchtype, branchmaster.company_code");
                    cmd.Parameters.Add("@m", mainbranch);
                }
                else
                {
                    cmd = new SqlCommand("SELECT  branchmaster.branchid, branchmaster.branchname, branchmaster.branchtype, branchmaster.company_code FROM branchmaster INNER JOIN branchmapping ON branchmaster.branchid = branchmapping.subbranch  Where branchmaster.branchtype=@branchtype and (branchmapping.mainbranch = @m)");
                    cmd.Parameters.Add("@m", mainbranch);
                    cmd.Parameters.Add("@branchtype", branchtype);
                }
                DataTable dtbranch = vdm.SelectQuery(cmd).Tables[0];
                DataTable dtnew = new DataTable();
                dtnew.Columns.Add("SNO");
                dtnew.Columns.Add("Month");
                dtnew.Columns.Add("loacation");
                dtnew.Columns.Add("Amount").DataType = typeof(double);
                dtnew.Columns.Add("GrossAmount").DataType = typeof(double);
                dtnew.Columns.Add("PT").DataType = typeof(double);
                dtnew.Columns.Add("PF").DataType = typeof(double);
                dtnew.Columns.Add("TDS").DataType = typeof(double);
                dtnew.Columns.Add("ESI").DataType = typeof(double);
                dtnew.Columns.Add("Canteen").DataType = typeof(double);
                dtnew.Columns.Add("Mobilededuction").DataType = typeof(double);
                dtnew.Columns.Add("Loan").DataType = typeof(double);
                dtnew.Columns.Add("Salaryadv").DataType = typeof(double);
                dtnew.Columns.Add("OTHER DEDUCTION").DataType = typeof(double);
                dtnew.Columns.Add("TOTAL DEDUCTIONS").DataType = typeof(double);
                dtnew.Columns.Add("GROSS Earnings").DataType = typeof(double);
                dtnew.Columns.Add("CONVEYANCE").DataType = typeof(double);
                dtnew.Columns.Add("FIXEDCONVEYANCE").DataType = typeof(double);
                dtnew.Columns.Add("ShiftAllowance").DataType = typeof(double);
                dtnew.Columns.Add("Extrapay").DataType = typeof(double);
                dtnew.Columns.Add("Rate/Day").DataType = typeof(double);
                dtnew.Columns.Add("Batta/Day").DataType = typeof(double);
                if (dtbranch.Rows.Count > 0)
                {
                    var k = 1;
                    foreach (DataRow dtbr in dtbranch.Rows)
                    {
                        Report = new DataTable();
                        Report.Columns.Add("Employee Code");
                        Report.Columns.Add("Name");
                        Report.Columns.Add("Extra Pay").DataType = typeof(double);
                        Report.Columns.Add("Location");
                        Report.Columns.Add("DESIGNATION");
                        Report.Columns.Add("GROSS").DataType = typeof(double);
                        Report.Columns.Add("DAYS MONTH").DataType = typeof(double);
                        Report.Columns.Add("Attendance Days").DataType = typeof(double);
                        Report.Columns.Add("CL HOLIDAY AND OFF").DataType = typeof(double);
                        Report.Columns.Add("Payable Days").DataType = typeof(double);
                        Report.Columns.Add("BASIC").DataType = typeof(double);
                        Report.Columns.Add("HRA").DataType = typeof(double);
                        Report.Columns.Add("CONVEYANCE ALLOWANCE").DataType = typeof(double);
                        Report.Columns.Add("CONVEYANCE").DataType = typeof(double);
                        Report.Columns.Add("FIXEDCONVEYANCE").DataType = typeof(double);
                        Report.Columns.Add("MEDICAL ALLOWANCE").DataType = typeof(double);
                        Report.Columns.Add("WASHING ALLOWANCE").DataType = typeof(double);
                        Report.Columns.Add("SHIFT ALLOWANCE").DataType = typeof(double);
                        Report.Columns.Add("GROSS Earnings").DataType = typeof(double);
                        Report.Columns.Add("PT").DataType = typeof(double);
                        Report.Columns.Add("PF").DataType = typeof(double);
                        Report.Columns.Add("ESI").DataType = typeof(double);
                        Report.Columns.Add("SALARY ADVANCE").DataType = typeof(double);
                        Report.Columns.Add("Loan").DataType = typeof(double);
                        Report.Columns.Add("CANTEEN DEDUCTION").DataType = typeof(double);
                        Report.Columns.Add("MOBILE DEDUCTION").DataType = typeof(double);
                        Report.Columns.Add("MEDICLAIM DEDUCTION").DataType = typeof(double);
                        Report.Columns.Add("OTHER DEDUCTION").DataType = typeof(double);
                        Report.Columns.Add("TOTAL DEDUCTIONS").DataType = typeof(double);
                        Report.Columns.Add("Tds DEDUCTION").DataType = typeof(double);
                        Report.Columns.Add("NET PAY").DataType = typeof(double);
                        Report.Columns.Add("Rate/Day").DataType = typeof(double);
                        Report.Columns.Add("Batta/Day").DataType = typeof(double);
                        Report.Columns.Add("Bank Acc NO");
                        Report.Columns.Add("IFSC Code");
                        string branchid = dtbr["branchid"].ToString();
                        string branchname = dtbr["branchname"].ToString();
                        if (branchtype == "SalesOffice" || branchtype == "CC" || branchtype == "Plant")
                        {
                            if (branchtype == "Plant")
                            {
                                //SELECT employedetails.pfeligible, employedetails.branchid,employedetails.esieligible, employedetails.empid, employedetails.fullname, employedetails.employee_num,employedetails.fullname AS Expr2, designation.designation, employebankdetails.accountno, employebankdetails.ifsccode, branchmaster.branchname, salaryappraisals.gross, salaryappraisals.erningbasic, salaryappraisals.hra, salaryappraisals.profitionaltax, salaryappraisals.esi, salaryappraisals.providentfund,salaryappraisals.conveyance, salaryappraisals.medicalerning, salaryappraisals.washingallowance, salaryappraisals.travelconveyance,salaryappraisals.salaryperyear FROM employedetails INNER JOIN designation ON employedetails.designationid = designation.designationid INNER JOIN branchmapping ON employedetails.branchid = branchmapping.subbranch INNER JOIN salaryappraisals ON employedetails.empid = salaryappraisals.empid LEFT OUTER JOIN employebankdetails ON employedetails.empid = employebankdetails.employeid LEFT OUTER JOIN branchmaster ON branchmaster.branchid = employedetails.branchid LEFT OUTER JOIN bankmaster ON bankmaster.sno = employebankdetails.bankid WHERE (branchmaster.branchtype = @branchtype) AND (employebankdetails.bankid = @bankid) AND (branchmaster.branchid= '6') AND (branchmapping.mainbranch = @m) AND (employedetails.status = 'No') AND (employedetails.employee_type = 'Staff' OR employedetails.employee_type = 'Retainers') AND (salaryappraisals.endingdate IS NULL) AND (salaryappraisals.startingdate <= @d1) OR (branchmaster.branchtype = @branchtype) AND (employebankdetails.bankid = @bankid) AND (branchmaster.branchid ='6') AND (branchmapping.mainbranch = @m) AND (employedetails.status = 'No') AND (employedetails.employee_type = 'Staff' OR employedetails.employee_type = 'Retainers') AND (salaryappraisals.endingdate > @d1) AND (salaryappraisals.startingdate <= @d1)ORDER BY branchmaster.branchname
                                //cmd = new SqlCommand("SELECT employedetails.pfeligible, employedetails.pfdate, employedetails.esidate, employedetails.esieligible, employedetails.employee_type, employedetails.empid,employedetails.employee_num, employedetails.fullname, designation.designation, employebankdetails.accountno, employebankdetails.ifsccode, monthly_attendance.month, monthly_attendance.year, employedetails.employee_dept, departments.department, salaryappraisals.esi, salaryappraisals.providentfund, salaryappraisals.conveyance, salaryappraisals.washingallowance, salaryappraisals.salaryperyear, salaryappraisals.medicalerning, salaryappraisals.profitionaltax, salaryappraisals.hra, salaryappraisals.erningbasic FROM employedetails INNER JOIN designation ON employedetails.designationid = designation.designationid INNER JOIN monthly_attendance ON employedetails.empid = monthly_attendance.empid INNER JOIN departments ON employedetails.employee_dept = departments.deptid INNER JOIN  salaryappraisals ON employedetails.empid = salaryappraisals.empid LEFT OUTER JOIN employebankdetails ON employedetails.empid = employebankdetails.employeid WHERE (employedetails.branchid = @branchid) AND (employedetails.status = 'No') AND (employedetails.employee_type = @emptype) AND (monthly_attendance.month = @month) AND (monthly_attendance.year = @year) AND (salaryappraisals.endingdate IS NULL) AND (salaryappraisals.startingdate <= @d1) OR (employedetails.branchid = @branchid) AND (employedetails.status = 'No') AND (employedetails.employee_type = @emptype) AND (monthly_attendance.month = @month) AND (monthly_attendance.year = @year) AND (salaryappraisals.endingdate > @d1)AND (salaryappraisals.startingdate <= @d1)");
                                cmd = new SqlCommand("SELECT employedetails.pfeligible, employedetails.pfdate, employedetails.esidate, employedetails.esieligible, employedetails.employee_type, employedetails.empid,employedetails.employee_num, employedetails.fullname, designation.designation, employebankdetails.accountno, employebankdetails.ifsccode, monthly_attendance.month, monthly_attendance.year, employedetails.employee_dept, departments.department, salaryappraisals.esi, salaryappraisals.providentfund, salaryappraisals.conveyance, salaryappraisals.washingallowance, salaryappraisals.salaryperyear, salaryappraisals.medicalerning, salaryappraisals.profitionaltax, salaryappraisals.hra, salaryappraisals.erningbasic,salaryappraisals.travelconveyance FROM employedetails INNER JOIN designation ON employedetails.designationid = designation.designationid INNER JOIN monthly_attendance ON employedetails.empid = monthly_attendance.empid INNER JOIN departments ON employedetails.employee_dept = departments.deptid INNER JOIN  salaryappraisals ON employedetails.empid = salaryappraisals.empid LEFT OUTER JOIN employebankdetails ON employedetails.empid = employebankdetails.employeid WHERE (employedetails.branchid ='6') AND (employedetails.status = 'No') AND (employedetails.employee_type ='Staff' OR employedetails.employee_type ='Retainers') AND (monthly_attendance.month = @month) AND (monthly_attendance.year = @year) AND (salaryappraisals.endingdate IS NULL) AND (salaryappraisals.startingdate <= @d1) OR (employedetails.branchid ='6') AND (employedetails.status = 'No') AND (employedetails.employee_type = 'Staff' OR employedetails.employee_type = 'Retainers') AND (monthly_attendance.month = @month) AND (monthly_attendance.year = @year) AND (salaryappraisals.endingdate > @d1)AND (salaryappraisals.startingdate <= @d1)");
                                cmd.Parameters.Add("@m", mainbranch);
                                cmd.Parameters.Add("@branchtype", branchtype);
                                cmd.Parameters.Add("@month", Month);
                                cmd.Parameters.Add("@year", Year);
                                cmd.Parameters.Add("@d1", date);
                            }

                            else
                            {
                                cmd = new SqlCommand("SELECT employedetails.pfeligible,  employedetails.pfdate, employedetails.esidate, employedetails.esieligible, employedetails.employee_type, employedetails.empid, employedetails.employee_num,pay_structure.erningbasic, pay_structure.esi, pay_structure.providentfund, employedetails.fullname, designation.designation, pay_structure.salaryperyear, pay_structure.hra, pay_structure.conveyance,pay_structure.travelconveyance, pay_structure.washingallowance, pay_structure.medicalerning, pay_structure.profitionaltax,employebankdetails.accountno, employebankdetails.ifsccode, branchmaster.branchname,monthly_attendance.month, monthly_attendance.year FROM  employedetails INNER JOIN designation ON employedetails.designationid = designation.designationid INNER JOIN pay_structure ON employedetails.empid = pay_structure.empid INNER JOIN monthly_attendance ON employedetails.empid = monthly_attendance.empid INNER JOIN  branchmapping ON employedetails.branchid = branchmapping.subbranch LEFT OUTER JOIN employebankdetails ON employedetails.empid = employebankdetails.employeid  INNER JOIN branchmaster ON employedetails.branchid = branchmaster.branchid  WHERE (employedetails.status = 'No') AND (monthly_attendance.month = @month) AND (monthly_attendance.year = @year) AND (branchmapping.mainbranch = @m) and (employedetails.branchid = @branchid) AND  (employedetails.employee_type = 'Staff')");
                                cmd.Parameters.Add("@m", mainbranch);
                                cmd.Parameters.Add("@branchid", branchid);
                                cmd.Parameters.Add("@month", Month);
                                cmd.Parameters.Add("@year", Year);
                            }
                            DataTable dtsalary = vdm.SelectQuery(cmd).Tables[0];
                            cmd = new SqlCommand("SELECT monthly_attendance.sno, monthly_attendance.empid, monthly_attendance.extradays,monthly_attendance.clorwo, monthly_attendance.doe, monthly_attendance.month, monthly_attendance.year, monthly_attendance.otdays, employedetails.employee_num,branchmaster.night_allowance,monthly_attendance.night_days, branchmaster.fromdate, branchmaster.todate, monthly_attendance.lop, branchmaster.branchid, monthly_attendance.numberofworkingdays FROM  monthly_attendance INNER JOIN  employedetails ON monthly_attendance.empid = employedetails.empid INNER JOIN branchmaster ON employedetails.branchid = branchmaster.branchid WHERE  (monthly_attendance.month = @month) AND (monthly_attendance.year = @year) AND (employedetails.branchid = @branchid)");
                            cmd.Parameters.Add("@month", Month);
                            cmd.Parameters.Add("@year", Year);
                            cmd.Parameters.Add("@branchid", branchid);
                            DataTable dtattendence = vdm.SelectQuery(cmd).Tables[0];
                            cmd = new SqlCommand("SELECT  employedetails.employee_num, salaryadvance.amount, salaryadvance.monthofpaid, employedetails.fullname, salaryadvance.empid FROM   salaryadvance INNER JOIN  employedetails ON salaryadvance.empid = employedetails.empid where (employedetails.branchid=@branchid) AND (salaryadvance.month = @month) AND (salaryadvance.year = @year)");
                            cmd.Parameters.Add("@month", Month);
                            cmd.Parameters.Add("@year", Year);
                            cmd.Parameters.Add("@branchid", branchid);
                            DataTable dtsa = vdm.SelectQuery(cmd).Tables[0];
                            cmd = new SqlCommand("SELECT employedetails.employee_num, loan_request.loanemimonth, loan_request.months, loan_request.startdate FROM employedetails INNER JOIN  loan_request ON employedetails.empid = loan_request.empid where (employedetails.branchid=@branchid) AND (loan_request.month = @month) AND (loan_request.year = @year)");
                            cmd.Parameters.Add("@month", Month);
                            cmd.Parameters.Add("@year", Year);
                            cmd.Parameters.Add("@branchid", branchid);
                            DataTable dtloan = vdm.SelectQuery(cmd).Tables[0];
                            cmd = new SqlCommand("SELECT  employedetails.employee_num, mobile_deduction.deductionamount, employedetails.fullname, employedetails.empid FROM  mobile_deduction INNER JOIN employedetails ON mobile_deduction.employee_num = employedetails.employee_num   where (employedetails.branchid=@branchid) AND (mobile_deduction.month = @month) AND (mobile_deduction.year = @year)");
                            cmd.Parameters.Add("@branchid", branchid);
                            cmd.Parameters.Add("@month", Month);
                            cmd.Parameters.Add("@year", Year);
                            DataTable dtmobile = vdm.SelectQuery(cmd).Tables[0];
                            cmd = new SqlCommand("SELECT  employedetails.employee_num, canteendeductions.amount, employedetails.fullname, employedetails.empid FROM  canteendeductions INNER JOIN employedetails ON canteendeductions.employee_num = employedetails.employee_num where (employedetails.branchid=@branchid) AND (canteendeductions.month = @month) AND (canteendeductions.year = @year)");
                            cmd.Parameters.Add("@branchid", branchid);
                            cmd.Parameters.Add("@month", Month);
                            cmd.Parameters.Add("@year", Year);
                            DataTable dtcanteen = vdm.SelectQuery(cmd).Tables[0];
                            cmd = new SqlCommand("SELECT employedetails.employee_num, employedetails.fullname, employedetails.empid, mediclaimdeduction.medicliamamount FROM employedetails INNER JOIN mediclaimdeduction ON employedetails.empid = mediclaimdeduction.empid WHERE (employedetails.branchid = @branchid)");
                            cmd.Parameters.Add("@branchid", branchid);
                            //cmd.Parameters.Add("@month", mymonth);
                            //cmd.Parameters.Add("@year", str[2]);
                            DataTable dtmedicliam = vdm.SelectQuery(cmd).Tables[0];
                            cmd = new SqlCommand("SELECT employedetails.employee_num, employedetails.fullname, employedetails.empid, otherdeduction.otherdeductionamount FROM employedetails INNER JOIN otherdeduction ON employedetails.empid = otherdeduction.empid WHERE (employedetails.branchid = @branchid) AND (otherdeduction.month = @month) AND (otherdeduction.year = @year)");
                            cmd.Parameters.Add("@branchid", branchid);
                            cmd.Parameters.Add("@month", Month);
                            cmd.Parameters.Add("@year", Year);
                            DataTable dtotherdeduction = vdm.SelectQuery(cmd).Tables[0];
                            cmd = new SqlCommand("SELECT employedetails.employee_num, employedetails.fullname, employedetails.empid, tds_deduction.tdsamount FROM employedetails INNER JOIN tds_deduction ON employedetails.empid = tds_deduction.empid WHERE (employedetails.branchid = @branchid)");
                            cmd.Parameters.Add("@branchid", branchid);
                            DataTable dttdsdeduction = vdm.SelectQuery(cmd).Tables[0];
                            if (dtsalary.Rows.Count > 0)
                            {
                                var i = 1;
                                foreach (DataRow dr in dtsalary.Rows)
                                {
                                    double otamount = 0;
                                    double totalpresentdays = 0;
                                    double profitionaltax = 0;
                                    double salaryadvance = 0;
                                    double loan = 0;
                                    double canteendeduction = 0;
                                    double otherdeduction = 0;
                                    double tdsdeduction = 0;
                                    double medicliamdeduction = 0;
                                    double mobilededuction = 0;
                                    double totaldeduction;
                                    double totalearnings;
                                    double providentfund = 0;
                                    double medicalerning = 0;
                                    double washingallowance = 0;
                                    double convenyance = 0;
                                    double esi = 0;
                                    double daysinmonth = 0;
                                    double loseamount = 0;
                                    double loseofconviyance = 0;
                                    double loseofwashing = 0;
                                    double loseofmedical = 0;
                                    double losofprofitionaltax = 0;
                                    DataRow newrow = Report.NewRow();
                                    newrow["Employee Code"] = dr["employee_num"].ToString();
                                    newrow["Name"] = dr["fullname"].ToString();
                                    newrow["DESIGNATION"] = dr["designation"].ToString();
                                    double peryanam = Convert.ToDouble(dr["salaryperyear"].ToString());
                                    newrow["GROSS"] = peryanam / 12;
                                    double permonth = peryanam / 12;
                                    double HRA = Convert.ToDouble(dr["hra"].ToString());
                                    double BASIC = Convert.ToDouble(dr["erningbasic"].ToString());
                                    convenyance = Convert.ToDouble(dr["conveyance"].ToString());
                                    profitionaltax = Convert.ToDouble(dr["profitionaltax"].ToString());
                                    medicalerning = Convert.ToDouble(dr["medicalerning"].ToString());
                                    washingallowance = Convert.ToDouble(dr["washingallowance"].ToString());
                                    newrow["Bank Acc NO"] = dr["accountno"].ToString();
                                    newrow["IFSC Code"] = dr["ifsccode"].ToString();

                                    if (dtattendence.Rows.Count > 0)
                                    {
                                        foreach (DataRow dra in dtattendence.Select("employee_num='" + dr["employee_num"].ToString() + "'"))
                                        {
                                            double otdays = 0;
                                            string ot;
                                            double shiftamount = 0;
                                            double otvalue = 0;
                                            double numberofworkingdays = 0;
                                            double.TryParse(dra["numberofworkingdays"].ToString(), out numberofworkingdays);
                                            double clorwo = 0;
                                            double.TryParse(dra["clorwo"].ToString(), out clorwo);
                                            daysinmonth = numberofworkingdays + clorwo;
                                            newrow["DAYS MONTH"] = daysinmonth.ToString();

                                            double paydays = 0;
                                            double lop = 0;
                                            double.TryParse(dra["lop"].ToString(), out lop);
                                            paydays = numberofworkingdays - lop;
                                            newrow["Attendance Days"] = paydays.ToString();

                                            double holidays = 0;
                                            holidays = daysinmonth - numberofworkingdays;
                                            if (lop != 0)
                                            {
                                                double totaldays = paydays + clorwo;
                                                newrow["Payable Days"] = totaldays;
                                            }
                                            else
                                            {
                                                newrow["Payable Days"] = paydays + clorwo;
                                            }
                                            newrow["CL HOLIDAY AND OFF"] = clorwo;
                                            totalpresentdays = holidays + paydays;
                                            double totalpdays = permonth / daysinmonth;
                                            loseamount = lop * totalpdays;
                                            double perdayconveyance = convenyance / daysinmonth;
                                            loseofconviyance = lop * perdayconveyance;
                                            double perdaywashing = washingallowance / daysinmonth;
                                            loseofwashing = lop * perdaywashing;
                                            double perdaymedical = medicalerning / daysinmonth;
                                            loseofmedical = lop * perdaymedical;
                                            double perdaybasic = BASIC / daysinmonth;
                                            double perdaprofitionaltax = profitionaltax / daysinmonth;
                                            losofprofitionaltax = lop * perdaprofitionaltax;
                                            double perdaysal = permonth / daysinmonth;
                                            ot = dra["extradays"].ToString();
                                            if (ot == "" || ot == "0")
                                            {
                                                otdays = 0;
                                            }
                                            else
                                            {
                                                otdays = Convert.ToDouble(dra["extradays"].ToString());
                                                otvalue = perdaysal * otdays;
                                                newrow["Extra Pay"] = Math.Round(otvalue);
                                                otamount = otvalue;
                                            }

                                            if (branchtype == "SalesOffice" || branchtype == "CC")
                                            {

                                                double nightdays = 0;
                                                double.TryParse(dra["night_days"].ToString(), out nightdays);
                                                double perdaycost = 0;
                                                double.TryParse(dra["night_allowance"].ToString(), out perdaycost);
                                                shiftamount = nightdays * perdaycost;
                                                shiftamount = Math.Round(shiftamount);
                                                newrow["SHIFT ALLOWANCE"] = shiftamount;

                                            }
                                            double totldays = 0;
                                            double travelconveyance = 0;
                                            double.TryParse(dr["travelconveyance"].ToString(), out travelconveyance);
                                            double days = 0;
                                            days = numberofworkingdays + clorwo;
                                            totldays = days - lop;
                                            double totamount = 0;
                                            double perdaycost1 = 0;
                                            perdaycost1 = travelconveyance / days;
                                            totamount = totldays * perdaycost1;
                                            newrow["CONVEYANCE"] = Math.Round(totamount);
                                            //newrow["FIXEDCONVEYANCE"] = dr["travelconveyance"].ToString();
                                            newrow["FIXEDCONVEYANCE"] = travelconveyance;
                                        }
                                    }
                                    //double perdaysal = permonth / daysinmonth;
                                    double basic = 50;
                                    double basicsalary = (permonth * 50) / 100;
                                    double basicpermonth = basicsalary / daysinmonth;
                                    double bs = basicpermonth * totalpresentdays;

                                    //travelconveyance
                                    newrow["BASIC"] = Math.Round(bs);
                                    if (branchtype == "SalesOffice" || branchtype == "CC")
                                    {


                                    }
                                    newrow["CONVEYANCE ALLOWANCE"] = Math.Round(convenyance - loseofconviyance);
                                    //newrow["SHIFT ALLOWANCE"] = Math.Round(convenyance - loseofconviyance);
                                    newrow["MEDICAL ALLOWANCE"] = Math.Round(medicalerning - loseofmedical);
                                    newrow["WASHING ALLOWANCE"] = Math.Round(washingallowance - loseofwashing);
                                    newrow["PT"] = Math.Round(profitionaltax - losofprofitionaltax);
                                    double basicsal = Math.Round(basicsalary - loseamount);
                                    double conve = Math.Round(convenyance - loseofconviyance);
                                    double medical = Math.Round(medicalerning - loseofmedical);
                                    double washing = Math.Round(washingallowance - loseofwashing);
                                    double ptax = Math.Round(profitionaltax - losofprofitionaltax);
                                    double tt = bs + conve + medical + washing;
                                    double thra = permonth - loseamount;
                                    double hra = Math.Round(thra - tt);
                                    totalearnings = Math.Round(hra + tt);
                                    newrow["HRA"] = hra;
                                    newrow["GROSS Earnings"] = totalearnings;
                                    string pfeligible = dr["pfeligible"].ToString();
                                    if (pfeligible == "Yes")
                                    {
                                        providentfund = (totalearnings * 6) / 100;
                                        if (providentfund > 1800)
                                        {
                                            providentfund = 1800;
                                        }
                                        providentfund = Math.Round(providentfund, 0);
                                        newrow["PF"] = Math.Round(providentfund, 0);
                                    }
                                    else
                                    {
                                        providentfund = 0;
                                        newrow["PF"] = providentfund;
                                    }
                                    string esieligible = dr["esieligible"].ToString();
                                    if (esieligible == "Yes")
                                    {
                                        esi = (totalearnings * 1.75) / 100;
                                        esi = Math.Round(esi, 0);
                                        newrow["ESI"] = esi;
                                    }
                                    else
                                    {
                                        esi = 0;
                                        newrow["ESI"] = esi;
                                    }
                                    if (dtsa.Rows.Count > 0)
                                    {
                                        DataRow[] drr = dtsa.Select("employee_num='" + dr["employee_num"].ToString() + "'");
                                        if (drr.Length > 0)
                                        {
                                            foreach (DataRow drsa in dtsa.Select("employee_num='" + dr["employee_num"].ToString() + "'"))
                                            {
                                                double amount = 0;
                                                double.TryParse(drsa["amount"].ToString(), out amount);
                                                newrow["SALARY ADVANCE"] = amount.ToString();
                                                salaryadvance = Convert.ToDouble(amount);
                                                salaryadvance = Math.Round(amount, 0);
                                            }
                                        }
                                        else
                                        {
                                            salaryadvance = 0;
                                            newrow["SALARY ADVANCE"] = salaryadvance;
                                        }
                                    }
                                    else
                                    {
                                        salaryadvance = 0;
                                        newrow["SALARY ADVANCE"] = salaryadvance;
                                    }
                                    if (dtloan.Rows.Count > 0)
                                    {
                                        DataRow[] drr = dtloan.Select("employee_num='" + dr["employee_num"].ToString() + "'");
                                        if (drr.Length > 0)
                                        {
                                            foreach (DataRow drloan in dtloan.Select("employee_num='" + dr["employee_num"].ToString() + "'"))
                                            {
                                                double loanemimonth = 0;
                                                double.TryParse(drloan["loanemimonth"].ToString(), out loanemimonth);
                                                newrow["Loan"] = loanemimonth.ToString();
                                                loan = Convert.ToDouble(loanemimonth);
                                                loan = Math.Round(loanemimonth, 0);
                                            }
                                        }
                                        else
                                        {
                                            loan = 0;
                                            newrow["Loan"] = loan;
                                        }
                                    }
                                    else
                                    {
                                        loan = 0;
                                        newrow["Loan"] = loan;
                                    }
                                    mobilededuction = 0;
                                    if (dtmobile.Rows.Count > 0)
                                    {
                                        DataRow[] drr = dtmobile.Select("employee_num='" + dr["employee_num"].ToString() + "'");
                                        if (drr.Length > 0)
                                        {
                                            foreach (DataRow drmobile in dtmobile.Select("employee_num='" + dr["employee_num"].ToString() + "'"))
                                            {
                                                double deductionamount = 0;
                                                double.TryParse(drmobile["deductionamount"].ToString(), out deductionamount);
                                                newrow["MOBILE DEDUCTION"] = deductionamount.ToString();
                                                string st = deductionamount.ToString();
                                                if (st == "0.0")
                                                {
                                                    mobilededuction = 0;
                                                    newrow["MOBILE DEDUCTION"] = mobilededuction;

                                                }
                                                else
                                                {
                                                    mobilededuction = Convert.ToDouble(deductionamount);
                                                    mobilededuction = Math.Round(deductionamount, 0);
                                                }
                                            }
                                        }
                                        else
                                        {
                                            mobilededuction = 0;
                                            newrow["MOBILE DEDUCTION"] = mobilededuction;
                                        }
                                    }
                                    else
                                    {
                                        mobilededuction = 0;
                                        newrow["MOBILE DEDUCTION"] = mobilededuction;
                                    }
                                    canteendeduction = 0;
                                    if (dtcanteen.Rows.Count > 0)
                                    {
                                        DataRow[] drr = dtcanteen.Select("employee_num='" + dr["employee_num"].ToString() + "'");
                                        if (drr.Length > 0)
                                        {
                                            foreach (DataRow drcanteen in dtcanteen.Select("employee_num='" + dr["employee_num"].ToString() + "'"))
                                            {
                                                double deductionamount = 0;
                                                double.TryParse(drcanteen["amount"].ToString(), out deductionamount);
                                                newrow["CANTEEN DEDUCTION"] = deductionamount.ToString();
                                                string st = deductionamount.ToString();
                                                canteendeduction = Convert.ToDouble(deductionamount);
                                                canteendeduction = Math.Round(deductionamount, 0);
                                            }
                                        }
                                        else
                                        {
                                            canteendeduction = 0;
                                            newrow["CANTEEN DEDUCTION"] = canteendeduction;
                                        }
                                    }
                                    else
                                    {
                                        canteendeduction = 0;
                                        newrow["CANTEEN DEDUCTION"] = canteendeduction;
                                    }
                                    medicliamdeduction = 0;
                                    if (dtmedicliam.Rows.Count > 0)
                                    {
                                        DataRow[] drr = dtmedicliam.Select("employee_num='" + dr["employee_num"].ToString() + "'");
                                        if (drr.Length > 0)
                                        {
                                            foreach (DataRow drmedicliam in dtmedicliam.Select("employee_num='" + dr["employee_num"].ToString() + "'"))
                                            {
                                                double amount = 0;
                                                double.TryParse(drmedicliam["medicliamamount"].ToString(), out amount);
                                                newrow["MEDICLAIM DEDUCTION"] = amount.ToString();
                                                string st = amount.ToString();
                                                medicliamdeduction = Convert.ToDouble(amount);
                                                medicliamdeduction = Math.Round(amount, 0);
                                            }
                                        }
                                        else
                                        {
                                            medicliamdeduction = 0;
                                            newrow["MEDICLAIM DEDUCTION"] = medicliamdeduction;
                                        }
                                    }
                                    else
                                    {
                                        medicliamdeduction = 0;
                                        newrow["MEDICLAIM DEDUCTION"] = medicliamdeduction;
                                    }
                                    otherdeduction = 0;
                                    if (dtotherdeduction.Rows.Count > 0)
                                    {
                                        DataRow[] drr = dtotherdeduction.Select("employee_num='" + dr["employee_num"].ToString() + "'");
                                        if (drr.Length > 0)
                                        {
                                            foreach (DataRow drotherdeduction in dtotherdeduction.Select("employee_num='" + dr["employee_num"].ToString() + "'"))
                                            {
                                                double amount = 0;
                                                double.TryParse(drotherdeduction["otherdeductionamount"].ToString(), out amount);
                                                newrow["OTHER DEDUCTION"] = amount.ToString();
                                                string st = amount.ToString();
                                                otherdeduction = Convert.ToDouble(amount);
                                                otherdeduction = Math.Round(amount, 0);
                                            }
                                        }
                                        else
                                        {
                                            otherdeduction = 0;
                                            newrow["OTHER DEDUCTION"] = otherdeduction;
                                        }
                                    }
                                    else
                                    {
                                        otherdeduction = 0;
                                        newrow["OTHER DEDUCTION"] = otherdeduction;
                                    }
                                    tdsdeduction = 0;
                                    if (dttdsdeduction.Rows.Count > 0)
                                    {
                                        DataRow[] drr = dttdsdeduction.Select("employee_num='" + dr["employee_num"].ToString() + "'");
                                        if (drr.Length > 0)
                                        {
                                            foreach (DataRow drtdsdeduction in dttdsdeduction.Select("employee_num='" + dr["employee_num"].ToString() + "'"))
                                            {
                                                double amount = 0;
                                                double.TryParse(drtdsdeduction["tdsamount"].ToString(), out amount);
                                                newrow["Tds DEDUCTION"] = amount.ToString();
                                                string st = amount.ToString();
                                                tdsdeduction = Convert.ToDouble(amount);
                                                tdsdeduction = Math.Round(amount, 0);
                                            }
                                        }
                                        else
                                        {
                                            tdsdeduction = 0;
                                            newrow["Tds DEDUCTION"] = tdsdeduction;
                                        }
                                    }
                                    else
                                    {
                                        tdsdeduction = 0;
                                        newrow["Tds DEDUCTION"] = tdsdeduction;
                                    }
                                    newrow["TOTAL DEDUCTIONS"] = Math.Round(profitionaltax + canteendeduction + salaryadvance + loan + mobilededuction + providentfund + esi + medicliamdeduction + otherdeduction + tdsdeduction);
                                    totaldeduction = Math.Round(profitionaltax + canteendeduction + salaryadvance + loan + mobilededuction + providentfund + esi + medicliamdeduction + otherdeduction + tdsdeduction);
                                    double netpay = 0;
                                    netpay = Math.Round(totalearnings - totaldeduction);
                                    netpay = Math.Round(netpay, 0);
                                    newrow["NET PAY"] = Math.Round(netpay, 0);
                                    Report.Rows.Add(newrow);
                                    //total += netpay;
                                    //netpay = 0;
                                }
                            }
                        }
                        else if (branchtype == "Driver")
                        {
                            double totalearnings = 0;
                            Report.Columns.Add("SNO");
                            //Report.Columns.Add("Employee Code");
                            //Report.Columns.Add("Name");
                            //Report.Columns.Add("DESIGNATION");
                            //Report.Columns.Add("Rate/Day");
                            //Report.Columns.Add("Batta/Day");
                            //Report.Columns.Add("Work Days");
                            //Report.Columns.Add("Payable Days");
                            //Report.Columns.Add("GROSS Earnings").DataType = typeof(double);
                            //Report.Columns.Add("PT").DataType = typeof(double);
                            //Report.Columns.Add("SALARY ADVANCE").DataType = typeof(double);
                            //Report.Columns.Add("Loan").DataType = typeof(double);

                            //Report.Columns.Add("OTHER DEDUCTIONS").DataType = typeof(double);
                            //Report.Columns.Add("TOTAL DEDUCTIONS").DataType = typeof(double);
                            //Report.Columns.Add("NET PAY").DataType = typeof(double);
                            //Report.Columns.Add("Bank Acc NO");
                            //Report.Columns.Add("IFSC Code");
                            //int branchid = Convert.ToInt32(ddlbranch.SelectedItem.Value);
                            //string employee_type = ddlemptype.SelectedItem.Value;
                            cmd = new SqlCommand("SELECT employedetails.pfeligible, employedetails.pfdate, employedetails.esidate, employebankdetails.ifsccode, employedetails.esieligible, monthly_attendance.month,monthly_attendance.year, employedetails.employee_type, employedetails.empid, employedetails.employee_num, employedetails.fullname,designation.designation, employebankdetails.accountno, branchmaster.statename, employedetails.employee_dept, departments.department,salaryappraisals.gross, salaryappraisals.erningbasic, salaryappraisals.hra, salaryappraisals.profitionaltax, salaryappraisals.esi, salaryappraisals.providentfund,salaryappraisals.conveyance, salaryappraisals.medicalerning, salaryappraisals.washingallowance, salaryappraisals.travelconveyance, salaryappraisals.salaryperyear FROM employedetails INNER JOIN designation ON employedetails.designationid = designation.designationid INNER JOIN monthly_attendance ON employedetails.empid = monthly_attendance.empid INNER JOIN branchmaster ON employedetails.branchid = branchmaster.branchid INNER JOIN departments ON employedetails.employee_dept = departments.deptid INNER JOIN salaryappraisals ON employedetails.empid = salaryappraisals.empid LEFT OUTER JOIN employebankdetails ON employedetails.empid = employebankdetails.employeid WHERE (employedetails.status = 'No') AND (monthly_attendance.month = @month) AND (monthly_attendance.year = @year) AND (employedetails.employee_type ='Driver' OR employedetails.employee_type='Cleaner' ) AND (employedetails.branchid = @branchid) AND (salaryappraisals.endingdate IS NULL) AND (salaryappraisals.startingdate <= @d1) OR (employedetails.status = 'No') AND (monthly_attendance.month = @month) AND (monthly_attendance.year = @year) AND (employedetails.employee_type ='Driver' OR employedetails.employee_type='Cleaner' ) AND (employedetails.branchid = @branchid) AND (salaryappraisals.endingdate > @d1) AND (salaryappraisals.startingdate <= @d1)");
                            //paystrcture
                            //cmd = new SqlCommand("SELECT employedetails.pfeligible, employedetails.pfdate, employedetails.esidate, employebankdetails.ifsccode, employedetails.esieligible, monthly_attendance.month,  monthly_attendance.year, employedetails.employee_type, employedetails.empid, employedetails.employee_num, pay_structure.erningbasic, pay_structure.esi,  pay_structure.providentfund, employedetails.fullname, designation.designation, pay_structure.gross, pay_structure.hra, pay_structure.conveyance,  pay_structure.washingallowance, pay_structure.medicalerning, pay_structure.profitionaltax, employebankdetails.accountno, branchmaster.statename,  employedetails.employee_dept, departments.department FROM employedetails INNER JOIN designation ON employedetails.designationid = designation.designationid INNER JOIN monthly_attendance ON employedetails.empid = monthly_attendance.empid INNER JOIN pay_structure ON employedetails.empid = pay_structure.empid INNER JOIN branchmaster ON employedetails.branchid = branchmaster.branchid INNER JOIN departments ON employedetails.employee_dept = departments.deptid LEFT OUTER JOIN employebankdetails ON employedetails.empid = employebankdetails.employeid WHERE(employedetails.branchid = @branchid) AND (employedetails.status = 'No') AND (employedetails.employee_type = @emptype) AND  (monthly_attendance.month = @month) AND (monthly_attendance.year = @year)");
                            cmd.Parameters.Add("@branchid", branchid);
                            cmd.Parameters.Add("@month", Month);
                            cmd.Parameters.Add("@year", Year);
                            //cmd.Parameters.Add("@emptype", employee_type);
                            cmd.Parameters.Add("@d1", date);
                            DataTable dtsalary = vdm.SelectQuery(cmd).Tables[0];
                            cmd = new SqlCommand("SELECT monthly_attendance.sno, monthly_attendance.empid,monthly_attendance.clorwo, monthly_attendance.doe, monthly_attendance.month, monthly_attendance.year, monthly_attendance.otdays, employedetails.employee_num, branchmaster.fromdate, branchmaster.todate, monthly_attendance.lop, branchmaster.branchid, monthly_attendance.numberofworkingdays FROM  monthly_attendance INNER JOIN  employedetails ON monthly_attendance.empid = employedetails.empid INNER JOIN branchmaster ON employedetails.branchid = branchmaster.branchid WHERE  (monthly_attendance.month = @month) AND (monthly_attendance.year = @year) AND (employedetails.branchid = @branchid)");
                            //cmd = new SqlCommand("SELECT monthly_attendance.sno, monthly_attendance.empid, monthly_attendance.doe, monthly_attendance.month, monthly_attendance.year, monthly_attendance.otdays, employedetails.employee_num, branchmaster.fromdate, branchmaster.todate, monthly_workingdays.numberofworkingdays, monthly_attendance.lop,  branchmaster.branchid FROM  monthly_attendance INNER JOIN employedetails ON monthly_attendance.empid = employedetails.empid INNER JOIN branchmaster ON employedetails.branchid = branchmaster.branchid INNER JOIN monthly_workingdays ON branchmaster.branchid = monthly_workingdays.branchid WHERE (monthly_attendance.month = @month) AND (monthly_attendance.year = @year) AND (employedetails.branchid=@branchid)");
                            cmd.Parameters.Add("@month", Month);
                            cmd.Parameters.Add("@year", Year);
                            cmd.Parameters.Add("@branchid", branchid);
                            DataTable dtattendence = vdm.SelectQuery(cmd).Tables[0];
                            cmd = new SqlCommand("SELECT  employedetails.employee_num, salaryadvance.amount, salaryadvance.monthofpaid, employedetails.fullname, salaryadvance.empid FROM   salaryadvance INNER JOIN  employedetails ON salaryadvance.empid = employedetails.empid where (employedetails.branchid=@branchid) AND (salaryadvance.month = @month) AND (salaryadvance.year = @year)");
                            cmd.Parameters.Add("@month", Month);
                            cmd.Parameters.Add("@year", Year);
                            cmd.Parameters.Add("@branchid", branchid);
                            DataTable dtsa = vdm.SelectQuery(cmd).Tables[0];
                            cmd = new SqlCommand("SELECT employedetails.employee_num, loan_request.loanemimonth, loan_request.months, loan_request.startdate FROM employedetails INNER JOIN  loan_request ON employedetails.empid = loan_request.empid where (employedetails.branchid=@branchid) AND (loan_request.month = @month) AND (loan_request.year = @year)");
                            cmd.Parameters.Add("@month", Month);
                            cmd.Parameters.Add("@year", Year);
                            cmd.Parameters.Add("@branchid", branchid);
                            DataTable dtloan = vdm.SelectQuery(cmd).Tables[0];
                            cmd = new SqlCommand("SELECT  employedetails.employee_num, mobile_deduction.deductionamount, employedetails.fullname, employedetails.empid FROM  mobile_deduction INNER JOIN employedetails ON mobile_deduction.employee_num = employedetails.employee_num   where (employedetails.branchid=@branchid) AND (mobile_deduction.month = @month) AND (mobile_deduction.year = @year)");
                            cmd.Parameters.Add("@branchid", branchid);
                            cmd.Parameters.Add("@month", Month);
                            cmd.Parameters.Add("@year", Year);
                            DataTable dtmobile = vdm.SelectQuery(cmd).Tables[0];
                            cmd = new SqlCommand("SELECT  employedetails.employee_num, canteendeductions.amount, employedetails.fullname, employedetails.empid FROM  canteendeductions INNER JOIN employedetails ON canteendeductions.employee_num = employedetails.employee_num where (employedetails.branchid=@branchid) AND (canteendeductions.month = @month) AND (canteendeductions.year = @year)");
                            cmd.Parameters.Add("@branchid", branchid);
                            cmd.Parameters.Add("@month", Month);
                            cmd.Parameters.Add("@year", Year);
                            DataTable dtcanteen = vdm.SelectQuery(cmd).Tables[0];
                            cmd = new SqlCommand("SELECT employedetails.employee_num, employedetails.fullname, employedetails.empid, otherdeduction.otherdeductionamount FROM employedetails INNER JOIN otherdeduction ON employedetails.empid = otherdeduction.empid WHERE (employedetails.branchid = @branchid) AND (otherdeduction.month = @month) AND (otherdeduction.year = @year)");
                            cmd.Parameters.Add("@branchid", branchid);
                            cmd.Parameters.Add("@month", Month);
                            cmd.Parameters.Add("@year", Year);
                            DataTable dtotherdeduction = vdm.SelectQuery(cmd).Tables[0];
                            if (dtsalary.Rows.Count > 0)
                            {
                                var i = 1;
                                foreach (DataRow dr in dtsalary.Rows)
                                {
                                    double totalpresentdays = 0;
                                    double profitionaltax = 0;
                                    double salaryadvance = 0;
                                    double loan = 0;
                                    double canteendeduction = 0;
                                    double mobilededuction = 0;
                                    double totaldeduction;
                                    double numberofworkingdays = 0;
                                    //double totalearnings;
                                    double daysinmonth = 0;
                                    string statename = "";
                                    DataRow newrow = Report.NewRow();
                                    newrow["SNO"] = i++.ToString();
                                    //newrow["Employeeid"] = dr["empid"].ToString();
                                    newrow["Employee Code"] = dr["employee_num"].ToString();
                                    newrow["Name"] = dr["fullname"].ToString();
                                    newrow["DESIGNATION"] = (dr["department"].ToString() + " " + dr["designation"].ToString());
                                    //newrow["Department"] = dr["department"].ToString();
                                    double BASIC = Convert.ToDouble(dr["erningbasic"].ToString());
                                    statename = dr["statename"].ToString();
                                    //newrow["PT"] = dr["profitionaltax"].ToString();
                                    double rateper = Convert.ToDouble(dr["gross"].ToString());
                                    //profitionaltax = Convert.ToDouble(dr["profitionaltax"].ToString());
                                    newrow["Bank Acc NO"] = dr["accountno"].ToString();
                                    newrow["IFSC Code"] = dr["ifsccode"].ToString();
                                    //Report.Rows.Add(newrow);
                                    if (dtattendence.Rows.Count > 0)
                                    {
                                        foreach (DataRow dra in dtattendence.Select("employee_num='" + dr["employee_num"].ToString() + "'"))
                                        {

                                            double.TryParse(dra["numberofworkingdays"].ToString(), out numberofworkingdays);
                                            double clorwo = 0;
                                            double.TryParse(dra["clorwo"].ToString(), out clorwo);
                                            daysinmonth = numberofworkingdays + clorwo;
                                            newrow["DAYS MONTH"] = daysinmonth.ToString();
                                            //double rateperday = 0;
                                            double paydays = 0;
                                            double lop = 0;
                                            double.TryParse(dra["lop"].ToString(), out lop);
                                            paydays = daysinmonth - lop;
                                            double holidays = 0;
                                            holidays = daysinmonth - numberofworkingdays;
                                            newrow["Payable Days"] = paydays;
                                            totalpresentdays = holidays + paydays;
                                            //double perdaybasic = BASIC / daysinmonth;
                                            double rate = Convert.ToDouble(dr["gross"].ToString());
                                            newrow["Rate/Day"] = rateper;
                                            double batta = 80;
                                            string empnumber = dr["employee_num"].ToString();
                                            if (empnumber == "SVDS080135" || empnumber == "SVDS100095")
                                            {
                                                newrow["Batta/Day"] = "0";
                                                batta = 0;
                                            }
                                            else
                                            {
                                                newrow["Batta/Day"] = batta;
                                            }
                                            double rateperday = rate + batta;
                                            totalearnings = rateperday * paydays;
                                            double totalpdays = numberofworkingdays - lop;
                                            totalearnings = Math.Round(totalearnings);
                                            newrow["GROSS Earnings"] = totalearnings;
                                            if (statename == "AndraPrdesh")
                                            {
                                                if (totalearnings > 1000 && totalearnings <= 15000)
                                                {
                                                    profitionaltax = 0;
                                                }
                                                else if (totalearnings >= 15001 && totalearnings <= 20000)
                                                {
                                                    profitionaltax = 150;
                                                }
                                                else if (totalearnings >= 20001)
                                                {
                                                    profitionaltax = 200;
                                                }
                                            }
                                            if (statename == "Tamilnadu")
                                            {
                                                if (totalearnings < 7000)
                                                {
                                                    profitionaltax = 0;
                                                }
                                                else if (totalearnings >= 7001 && totalearnings <= 10000)
                                                {
                                                    profitionaltax = 115;
                                                }
                                                else if (totalearnings >= 10001 && totalearnings <= 11000)
                                                {
                                                    profitionaltax = 171;
                                                }
                                                else if (totalearnings >= 11001 && totalearnings <= 12000)
                                                {
                                                    profitionaltax = 171;
                                                }
                                                else if (totalearnings >= 12001)
                                                {
                                                    profitionaltax = 208;
                                                }
                                            }
                                            if (statename == "karnataka")
                                            {
                                                if (totalearnings <= 15000 && totalearnings <= 15001)
                                                {
                                                    profitionaltax = 0;
                                                }
                                                else if (totalearnings >= 15001)
                                                {
                                                    profitionaltax = 200;
                                                }
                                            }
                                            newrow["PT"] = profitionaltax;
                                        }
                                    }



                                    if (dtsa.Rows.Count > 0)
                                    {
                                        DataRow[] drr = dtsa.Select("employee_num='" + dr["employee_num"].ToString() + "'");
                                        if (drr.Length > 0)
                                        {
                                            foreach (DataRow drsa in dtsa.Select("employee_num='" + dr["employee_num"].ToString() + "'"))
                                            {
                                                double amount = 0;
                                                double.TryParse(drsa["amount"].ToString(), out amount);
                                                newrow["SALARY ADVANCE"] = amount.ToString();
                                                salaryadvance = Convert.ToDouble(amount);
                                                salaryadvance = Math.Round(amount, 0);
                                            }
                                        }
                                        else
                                        {
                                            salaryadvance = 0;
                                            newrow["SALARY ADVANCE"] = salaryadvance;
                                        }
                                    }
                                    if (dtloan.Rows.Count > 0)
                                    {
                                        DataRow[] drr = dtloan.Select("employee_num='" + dr["employee_num"].ToString() + "'");
                                        if (drr.Length > 0)
                                        {
                                            foreach (DataRow drloan in dtloan.Select("employee_num='" + dr["employee_num"].ToString() + "'"))
                                            {
                                                double loanemimonth = 0;
                                                double.TryParse(drloan["loanemimonth"].ToString(), out loanemimonth);
                                                newrow["Loan"] = loanemimonth.ToString();
                                                loan = Convert.ToDouble(loanemimonth);
                                                loan = Math.Round(loanemimonth, 0);
                                            }
                                        }
                                        else
                                        {
                                            loan = 0;
                                            newrow["Loan"] = loan;
                                        }
                                    }
                                    mobilededuction = 0;
                                    if (dtmobile.Rows.Count > 0)
                                    {
                                        DataRow[] drr = dtmobile.Select("employee_num='" + dr["employee_num"].ToString() + "'");
                                        if (drr.Length > 0)
                                        {
                                            foreach (DataRow drmobile in dtmobile.Select("employee_num='" + dr["employee_num"].ToString() + "'"))
                                            {
                                                double deductionamount = 0;
                                                double.TryParse(drmobile["deductionamount"].ToString(), out deductionamount);
                                                newrow["MOBILE DEDUCTION"] = deductionamount.ToString();
                                                string st = deductionamount.ToString();
                                                if (st == "0.0")
                                                {
                                                    mobilededuction = 0;
                                                    newrow["MOBILE DEDUCTION"] = mobilededuction;

                                                }
                                                else
                                                {
                                                    mobilededuction = Convert.ToDouble(deductionamount);
                                                    mobilededuction = Math.Round(deductionamount, 0);
                                                }
                                            }
                                        }
                                        else
                                        {
                                            mobilededuction = 0;
                                            newrow["MOBILE DEDUCTION"] = mobilededuction;
                                        }
                                    }
                                    canteendeduction = 0;
                                    if (dtcanteen.Rows.Count > 0)
                                    {
                                        DataRow[] drr = dtcanteen.Select("employee_num='" + dr["employee_num"].ToString() + "'");
                                        if (drr.Length > 0)
                                        {
                                            foreach (DataRow drcanteen in dtcanteen.Select("employee_num='" + dr["employee_num"].ToString() + "'"))
                                            {
                                                double deductionamount = 0;
                                                double.TryParse(drcanteen["amount"].ToString(), out deductionamount);
                                                newrow["CANTEEN DEDUCTION"] = deductionamount.ToString();
                                                string st = deductionamount.ToString();
                                                canteendeduction = Convert.ToDouble(deductionamount);
                                                canteendeduction = Math.Round(deductionamount, 0);
                                            }
                                        }
                                        else
                                        {
                                            canteendeduction = 0;
                                            newrow["CANTEEN DEDUCTION"] = canteendeduction;
                                        }
                                    }
                                    double otherdeduction = 0;
                                    if (dtotherdeduction.Rows.Count > 0)
                                    {
                                        DataRow[] drr = dtotherdeduction.Select("employee_num='" + dr["employee_num"].ToString() + "'");
                                        if (drr.Length > 0)
                                        {
                                            foreach (DataRow drotherdeduction in dtotherdeduction.Select("employee_num='" + dr["employee_num"].ToString() + "'"))
                                            {
                                                double amount = 0;
                                                double.TryParse(drotherdeduction["otherdeductionamount"].ToString(), out amount);
                                                newrow["OTHER DEDUCTIONS"] = amount.ToString();
                                                string st = amount.ToString();
                                                otherdeduction = Convert.ToDouble(amount);
                                                otherdeduction = Math.Round(amount, 0);
                                            }
                                        }
                                        else
                                        {
                                            otherdeduction = 0;
                                            newrow["OTHER DEDUCTIONS"] = otherdeduction;
                                        }
                                    }
                                    else
                                    {
                                    }
                                    newrow["TOTAL DEDUCTIONS"] = Math.Round(profitionaltax + canteendeduction + salaryadvance + loan + mobilededuction + otherdeduction);
                                    totaldeduction = Math.Round(profitionaltax + canteendeduction + salaryadvance + loan + mobilededuction + otherdeduction);
                                    double netpay = 0;
                                    netpay = Math.Round(totalearnings - totaldeduction);
                                    netpay = Math.Round(netpay, 0);
                                    string stramount = "";
                                    stramount = netpay.ToString();
                                    if (stramount == "NaN" || stramount == "" || numberofworkingdays == 0)
                                    {
                                    }
                                    else
                                    {
                                        newrow["NET PAY"] = Math.Round(netpay, 0);
                                        Report.Rows.Add(newrow);
                                    }
                                }
                            }
                        }
                        DataRow newTotal = Report.NewRow();
                        newTotal["DESIGNATION"] = "Total";
                        double val = 0.0;
                        foreach (DataColumn dc in Report.Columns)
                        {
                            if (dc.DataType == typeof(Double))
                            {
                                val = 0.0;
                                double.TryParse(Report.Compute("sum([" + dc.ToString() + "])", "[" + dc.ToString() + "]<>'0'").ToString(), out val);
                                newTotal[dc.ToString()] = val;
                            }
                        }

                        Report.Rows.Add(newTotal);
                        string designation = "Total";
                        foreach (DataRow dreport in Report.Select("DESIGNATION='" + designation + "'"))
                        {
                            DataRow nr_sp = dtnew.NewRow();
                            nr_sp["SNO"] = k++.ToString();
                            nr_sp["Month"] = Month;
                            nr_sp["loacation"] = branchname;
                            nr_sp["Amount"] = dreport["NET PAY"].ToString();
                            nr_sp["GrossAmount"] = dreport["GROSS"].ToString();
                            nr_sp["Rate/Day"] = dreport["Rate/Day"].ToString();
                            nr_sp["Batta/Day"] = dreport["Batta/Day"].ToString();
                            nr_sp["PT"] = dreport["PT"].ToString();
                            nr_sp["PF"] = dreport["PF"].ToString();
                            nr_sp["TDS"] = dreport["Tds DEDUCTION"].ToString();
                            nr_sp["ESI"] = dreport["ESI"].ToString();
                            nr_sp["Canteen"] = dreport["CANTEEN DEDUCTION"].ToString();
                            nr_sp["Mobilededuction"] = dreport["MOBILE DEDUCTION"].ToString();
                            nr_sp["Loan"] = dreport["Loan"].ToString();
                            nr_sp["Salaryadv"] = dreport["SALARY ADVANCE"].ToString();
                            nr_sp["OTHER DEDUCTION"] = dreport["OTHER DEDUCTION"].ToString();
                            nr_sp["TOTAL DEDUCTIONS"] = dreport["TOTAL DEDUCTIONS"].ToString();
                            nr_sp["GROSS Earnings"] = dreport["GROSS Earnings"].ToString();
                            nr_sp["CONVEYANCE"] = dreport["CONVEYANCE"].ToString();
                            nr_sp["FIXEDCONVEYANCE"] = dreport["FIXEDCONVEYANCE"].ToString();
                            nr_sp["ShiftAllowance"] = dreport["SHIFT ALLOWANCE"].ToString();
                            nr_sp["Extrapay"] = dreport["Extra Pay"].ToString();
                            dtnew.Rows.Add(nr_sp);
                        }
                    }


                    DataRow newTotal3 = dtnew.NewRow();
                    newTotal3["loacation"] = "Total";
                    double val1 = 0.0;
                    foreach (DataColumn dc1 in dtnew.Columns)
                    {

                        if (dc1.DataType == typeof(Double))
                        {
                            val1 = 0.0;
                            double.TryParse(dtnew.Compute("sum([" + dc1.ToString() + "])", "[" + dc1.ToString() + "]<>'0'").ToString(), out val1);
                            newTotal3[dc1.ToString()] = val1;
                        }

                    }
                    dtnew.Rows.Add(newTotal3);
                    foreach (DataRow dr in dtnew.Rows)
                    {
                        Summaryvalues getbrcdetails = new Summaryvalues();
                        getbrcdetails.branchname = dr["loacation"].ToString();
                        //getbrcdetails.Employeetype = dr["employeetype"].ToString();
                        getbrcdetails.month = dr["Month"].ToString();
                        getbrcdetails.TotalAmount = dr["Amount"].ToString();
                        getbrcdetails.TotalgrossAmount = dr["GrossAmount"].ToString();
                        getbrcdetails.RateDay = dr["Rate/Day"].ToString();
                        getbrcdetails.BettaDay = dr["Batta/Day"].ToString();
                        getbrcdetails.PT = dr["PT"].ToString();
                        getbrcdetails.PF = dr["PF"].ToString();
                        getbrcdetails.ESI = dr["ESI"].ToString();
                        getbrcdetails.Salaryadv = dr["Salaryadv"].ToString();
                        getbrcdetails.loan = dr["Loan"].ToString();
                        getbrcdetails.Canteen = dr["Canteen"].ToString();
                        getbrcdetails.Mobilededuction = dr["Mobilededuction"].ToString();
                        getbrcdetails.GROSSEarnings = dr["GROSS Earnings"].ToString();
                        getbrcdetails.TDS = dr["TDS"].ToString();
                        getbrcdetails.Otherdeductions = dr["OTHER DEDUCTION"].ToString();
                        getbrcdetails.totaldeductions = dr["TOTAL DEDUCTIONS"].ToString();
                        getbrcdetails.CONVEYANCE = dr["CONVEYANCE"].ToString();
                        getbrcdetails.FIXEDCONVEYANCE = dr["FIXEDCONVEYANCE"].ToString();
                        getbrcdetails.Extrapay = dr["Extrapay"].ToString();
                        getbrcdetails.shift = dr["ShiftAllowance"].ToString();
                        //getbrcdetails.filename = filename;
                        getbrcdetails.title = Title;
                        getbrcdetails.address = Address;
                        summarysalaryDetalis.Add(getbrcdetails);
                    }
                    Summaryvalues GetPieValues = new Summaryvalues();
                    GetPieValues.summarysalaryDetalis = summarysalaryDetalis;
                    //lsummarysalaryValueslist.Add(GetPieValues);
                    //string errresponse = GetJson(lsummarysalaryValueslist);
                    //context.Response.Write(errresponse);
                    // grdReports.DataSource = dtnew;
                    //grdReports.DataBind();
                    //Session["xportdata"] = dtnew;
                    //hidepanel.Visible = true;
                }
            }
            // }
            //}
            double totalextrapay = 0;
            mainbranch = context.Session["mainbranch"].ToString();
            cmd = new SqlCommand(" SELECT bankname, sno FROM bankmaster");
            cmd.Parameters.Add("@m", mainbranch);
            DataTable dtbank = vdm.SelectQuery(cmd).Tables[0];
            //if (branchtype == "Driver")
            //{
            //    cmd = new SqlCommand(" SELECT   branchmaster.branchid, branchmaster.branchname, branchmaster.branchtype, branchmaster.company_code, employedetails.employee_type FROM    branchmaster INNER JOIN branchmapping ON branchmaster.branchid = branchmapping.subbranch INNER JOIN employedetails ON branchmaster.branchid = employedetails.branchid WHERE        (branchmapping.mainbranch = @m) AND (employedetails.employee_type = 'Driver' OR  employedetails.employee_type = 'Cleaner') GROUP BY branchmaster.branchid, branchmaster.branchname, branchmaster.branchtype, branchmaster.company_code, employedetails.employee_type ORDER BY branchmaster.branchid");
            //    cmd.Parameters.Add("@m", mainbranch);
            //}
            //DataTable dtbranch1 = vdm.SelectQuery(cmd).Tables[0];
            //string branchid1 = dtbranch1.Rows[0]["branchid"].ToString();
            DataTable dtbanknew = new DataTable();
            dtbanknew.Columns.Add("SNO");
            dtbanknew.Columns.Add("MOnth");
            dtbanknew.Columns.Add("Bank Name");
            dtbanknew.Columns.Add("Amount1").DataType = typeof(double);
            if (dtbank.Rows.Count > 0)
            {
                var n = 1;
                foreach (DataRow dtbn in dtbank.Rows)
                {
                    Report1 = new DataTable();
                    Report1.Columns.Add("Location1");
                    Report1.Columns.Add("Employee Code1");
                    Report1.Columns.Add("EmployeeName");
                    Report1.Columns.Add("Bank Acc NO");
                    Report1.Columns.Add("IFSC Code");
                    Report1.Columns.Add("GROSS1").DataType = typeof(double);
                    Report1.Columns.Add("Extra Pay").DataType = typeof(double);
                    Report1.Columns.Add("CONVEYANCE").DataType = typeof(double);
                    Report1.Columns.Add("FIXEDCONVEYANCE").DataType = typeof(double);
                    Report1.Columns.Add("Shift Allowance").DataType = typeof(double);
                    Report1.Columns.Add("NET PAY1").DataType = typeof(double);
                    string bankid = dtbn["sno"].ToString();
                    string bankname = dtbn["bankname"].ToString();
                    if (branchtype == "SalesOffice" || branchtype == "CC" || branchtype == "Plant")
                    {
                        if (branchtype == "Plant")
                        {
                            //cmd = new SqlCommand("SELECT employedetails.pfeligible, employedetails.esieligible, employedetails.empid, employedetails.fullname, employedetails.employee_num, pay_structure.erningbasic, pay_structure.travelconveyance, pay_structure.esi, pay_structure.providentfund, employedetails.fullname AS Expr2, designation.designation, pay_structure.salaryperyear, pay_structure.hra, pay_structure.conveyance, pay_structure.washingallowance, pay_structure.medicalerning, pay_structure.profitionaltax, employebankdetails.accountno, employebankdetails.ifsccode, branchmaster.branchname FROM employedetails INNER JOIN designation ON employedetails.designationid = designation.designationid INNER JOIN pay_structure ON employedetails.empid = pay_structure.empid INNER JOIN branchmapping ON employedetails.branchid = branchmapping.subbranch LEFT OUTER JOIN employebankdetails ON employedetails.empid = employebankdetails.employeid LEFT OUTER JOIN branchmaster ON branchmaster.branchid = employedetails.branchid LEFT OUTER JOIN bankmaster ON bankmaster.sno = employebankdetails.bankid WHERE (branchmaster.branchtype = @branchtype) AND (employebankdetails.bankid = @bankid)  AND  (branchmapping.mainbranch = @m) AND (employedetails.status = 'No') and (employedetails.employee_type = 'Staff' OR employedetails.employee_type = 'Retainers') and (branchmaster.branchid='6')  ORDER BY branchmaster.branchname ");
                            //cmd = new SqlCommand("SELECT employedetails.pfeligible, employedetails.branchid,employedetails.esieligible, employedetails.empid, employedetails.fullname, employedetails.employee_num,employedetails.fullname AS Expr2, designation.designation, employebankdetails.accountno, employebankdetails.ifsccode, branchmaster.branchname, salaryappraisals.gross, salaryappraisals.erningbasic, salaryappraisals.hra, salaryappraisals.profitionaltax, salaryappraisals.esi, salaryappraisals.providentfund,salaryappraisals.conveyance, salaryappraisals.medicalerning, salaryappraisals.washingallowance, salaryappraisals.travelconveyance,salaryappraisals.salaryperyear FROM employedetails INNER JOIN designation ON employedetails.designationid = designation.designationid INNER JOIN branchmapping ON employedetails.branchid = branchmapping.subbranch INNER JOIN salaryappraisals ON employedetails.empid = salaryappraisals.empid LEFT OUTER JOIN employebankdetails ON employedetails.empid = employebankdetails.employeid LEFT OUTER JOIN branchmaster ON branchmaster.branchid = employedetails.branchid LEFT OUTER JOIN bankmaster ON bankmaster.sno = employebankdetails.bankid WHERE (employedetails.branchid='6') AND(branchmaster.branchtype = @branchtype) AND (employebankdetails.bankid = @bankid) AND (branchmapping.mainbranch = @m) AND (employedetails.status = 'No') AND (employedetails.employee_type = 'Staff' OR employedetails.employee_type = 'Retainers') AND (salaryappraisals.endingdate IS NULL) AND (salaryappraisals.startingdate <= @d1) OR (branchmaster.branchtype = @branchtype) AND (employebankdetails.bankid = @bankid)  AND (branchmapping.mainbranch = @m) AND (employedetails.status = 'No') AND (employedetails.employee_type = 'Staff' OR employedetails.employee_type = 'Retainers') AND (salaryappraisals.endingdate > @d1) AND (salaryappraisals.startingdate <= @d1) and (branchmaster.branchid='6') ORDER BY branchmaster.branchname");
                            cmd = new SqlCommand("SELECT        employedetails.pfeligible, employedetails.esieligible, employedetails.empid, employedetails.fullname, employedetails.employee_num, pay_structure.erningbasic, pay_structure.travelconveyance,  pay_structure.esi, pay_structure.providentfund, employedetails.fullname AS Expr2, designation.designation, pay_structure.salaryperyear, pay_structure.hra, pay_structure.conveyance,  pay_structure.washingallowance, pay_structure.medicalerning, pay_structure.profitionaltax, employebankdetails.accountno, employebankdetails.ifsccode, branchmaster.branchname FROM            employedetails INNER JOIN designation ON employedetails.designationid = designation.designationid INNER JOIN  pay_structure ON employedetails.empid = pay_structure.empid INNER JOIN   branchmapping ON employedetails.branchid = branchmapping.subbranch INNER JOIN  salaryappraisals ON employedetails.empid = salaryappraisals.empid LEFT OUTER JOIN employebankdetails ON employedetails.empid = employebankdetails.employeid LEFT OUTER JOIN   branchmaster ON branchmaster.branchid = employedetails.branchid LEFT OUTER JOIN   bankmaster ON bankmaster.sno = employebankdetails.bankid WHERE        (branchmaster.branchtype = @branchtype) AND (employebankdetails.bankid = @bankid) AND (branchmapping.mainbranch = @m) AND (employedetails.status = 'No') AND  (employedetails.employee_type = 'Staff' OR  employedetails.employee_type = 'Retainers') AND (employedetails.branchid = '6') AND (salaryappraisals.endingdate IS NULL) AND (salaryappraisals.startingdate <= @d1) OR (branchmaster.branchtype = @branchtype) AND (employebankdetails.bankid = @bankid) AND (branchmapping.mainbranch = @m) AND (employedetails.status = 'No') AND   (employedetails.employee_type = 'Staff' OR   employedetails.employee_type = 'Retainers') AND (branchmaster.branchid = '6') AND (salaryappraisals.endingdate > @d1) AND (salaryappraisals.startingdate <= @d1) ORDER BY branchmaster.branchname");
                            cmd.Parameters.Add("@m", mainbranch);
                            cmd.Parameters.Add("@bankid", bankid);
                            cmd.Parameters.Add("@branchtype", branchtype);
                            cmd.Parameters.Add("@month", Month);
                            cmd.Parameters.Add("@d1", date);
                            cmd.Parameters.Add("@year", Year);
                        }
                        else
                        {
                            cmd = new SqlCommand("SELECT employedetails.pfeligible, employedetails.esieligible, employedetails.empid, employedetails.fullname, employedetails.employee_num, pay_structure.erningbasic, pay_structure.travelconveyance, pay_structure.esi, pay_structure.providentfund, employedetails.fullname AS Expr2, designation.designation, pay_structure.salaryperyear, pay_structure.hra, pay_structure.conveyance, pay_structure.washingallowance, pay_structure.medicalerning, pay_structure.profitionaltax, employebankdetails.accountno, employebankdetails.ifsccode, branchmaster.branchname FROM employedetails INNER JOIN designation ON employedetails.designationid = designation.designationid INNER JOIN pay_structure ON employedetails.empid = pay_structure.empid INNER JOIN branchmapping ON employedetails.branchid = branchmapping.subbranch LEFT OUTER JOIN employebankdetails ON employedetails.empid = employebankdetails.employeid LEFT OUTER JOIN branchmaster ON branchmaster.branchid = employedetails.branchid LEFT OUTER JOIN bankmaster ON bankmaster.sno = employebankdetails.bankid WHERE (branchmaster.branchtype = @branchtype) AND (employebankdetails.bankid = @bankid)  AND  (branchmapping.mainbranch = @m) AND (employedetails.status = 'No') and (employedetails.employee_type = 'Staff')  ORDER BY branchmaster.branchname ");
                            cmd.Parameters.Add("@m", mainbranch);
                            cmd.Parameters.Add("@bankid", bankid);
                            cmd.Parameters.Add("@branchtype", branchtype);
                            cmd.Parameters.Add("@month", Month);
                            cmd.Parameters.Add("@year", Year);
                        }
                        DataTable dtsalary1 = vdm.SelectQuery(cmd).Tables[0];

                        cmd = new SqlCommand("SELECT monthly_attendance.sno, monthly_attendance.empid,monthly_attendance.clorwo, monthly_attendance.doe, monthly_attendance.month, monthly_attendance.year, monthly_attendance.otdays, monthly_attendance.extradays, employedetails.employee_num, branchmaster.fromdate,branchmaster.night_allowance,monthly_attendance.night_days, branchmaster.todate, monthly_attendance.lop, branchmaster.branchid, monthly_attendance.numberofworkingdays FROM  monthly_attendance INNER JOIN  employedetails ON monthly_attendance.empid = employedetails.empid INNER JOIN branchmaster ON employedetails.branchid = branchmaster.branchid WHERE  (monthly_attendance.month = @month) AND (monthly_attendance.year = @year)  ");
                        cmd.Parameters.Add("@month", Month);
                        cmd.Parameters.Add("@year", Year);


                        DataTable dtattendence1 = vdm.SelectQuery(cmd).Tables[0];

                        cmd = new SqlCommand("SELECT  employedetails.employee_num, salaryadvance.amount, salaryadvance.monthofpaid, employedetails.fullname, salaryadvance.empid FROM   salaryadvance INNER JOIN  employedetails ON salaryadvance.empid = employedetails.empid where  (salaryadvance.month = @month) AND (salaryadvance.year = @year)");
                        cmd.Parameters.Add("@month", Month);
                        cmd.Parameters.Add("@year", Year);

                        DataTable dtsa1 = vdm.SelectQuery(cmd).Tables[0];

                        cmd = new SqlCommand("SELECT employedetails.employee_num, loan_request.loanemimonth, loan_request.months, loan_request.startdate FROM employedetails INNER JOIN  loan_request ON employedetails.empid = loan_request.empid where  (loan_request.month = @month) AND (loan_request.year = @year)");
                        cmd.Parameters.Add("@month", Month);
                        cmd.Parameters.Add("@year", Year);

                        DataTable dtloan1 = vdm.SelectQuery(cmd).Tables[0];

                        cmd = new SqlCommand("SELECT  employedetails.employee_num, mobile_deduction.deductionamount, employedetails.fullname, employedetails.empid FROM  mobile_deduction INNER JOIN employedetails ON mobile_deduction.employee_num = employedetails.employee_num   where  (mobile_deduction.month = @month) AND (mobile_deduction.year = @year)");
                        cmd.Parameters.Add("@month", Month);
                        cmd.Parameters.Add("@year", Year);

                        DataTable dtmobile1 = vdm.SelectQuery(cmd).Tables[0];

                        cmd = new SqlCommand("SELECT  employedetails.employee_num, canteendeductions.amount, employedetails.fullname, employedetails.empid FROM  canteendeductions INNER JOIN employedetails ON canteendeductions.employee_num = employedetails.employee_num where  (canteendeductions.month = @month) AND (canteendeductions.year = @year)");
                        cmd.Parameters.Add("@month", Month);
                        cmd.Parameters.Add("@year", Year);

                        DataTable dtcanteen1 = vdm.SelectQuery(cmd).Tables[0];

                        cmd = new SqlCommand("SELECT employedetails.employee_num, employedetails.fullname, employedetails.empid, mediclaimdeduction.medicliamamount FROM employedetails INNER JOIN mediclaimdeduction ON employedetails.empid = mediclaimdeduction.empid");
                        //cmd.Parameters.Add("@month", mymonth);
                        //cmd.Parameters.Add("@year", str[2]);

                        DataTable dtmedicliam1 = vdm.SelectQuery(cmd).Tables[0];

                        cmd = new SqlCommand("SELECT employedetails.employee_num, employedetails.fullname, employedetails.empid, otherdeduction.otherdeductionamount FROM employedetails INNER JOIN otherdeduction ON employedetails.empid = otherdeduction.empid WHERE  (otherdeduction.month = @month) AND (otherdeduction.year = @year)");
                        cmd.Parameters.Add("@month", Month);
                        cmd.Parameters.Add("@year", Year);

                        DataTable dtotherdeduction1 = vdm.SelectQuery(cmd).Tables[0];

                        cmd = new SqlCommand("SELECT employedetails.employee_num, employedetails.fullname, employedetails.empid, tds_deduction.tdsamount FROM employedetails INNER JOIN tds_deduction ON employedetails.empid = tds_deduction.empid ");
                        //cmd.Parameters.Add("@month", mymonth);
                        //cmd.Parameters.Add("@year", str[2]);

                        DataTable dttdsdeduction = vdm.SelectQuery(cmd).Tables[0];
                        if (dtsalary1.Rows.Count > 0)
                        {
                            //var i = 1;
                            foreach (DataRow dr in dtsalary1.Rows)
                            {
                                double otamount = 0;
                                double otvalue = 0;
                                double ptax = 0;
                                double totalpresentdays = 0;
                                double profitionaltax = 0;
                                double salaryadvance = 0;
                                double otherdeduction = 0;
                                double tdsdeduction = 0;
                                double loan = 0;
                                double medicliamdeduction = 0;
                                double canteendeduction = 0;
                                double mobilededuction = 0;
                                double totaldeduction;
                                double totalearnings;
                                double providentfund = 0;
                                double medicalerning = 0;
                                double washingallowance = 0;
                                double convenyance = 0;
                                double esi = 0;
                                double daysinmonth = 0;
                                double loseamount = 0;
                                double loseofconviyance = 0;
                                double loseofwashing = 0;
                                double loseofmedical = 0;
                                double losofprofitionaltax = 0;
                                DataRow newrow = Report1.NewRow();
                                //newrow["Location1"] = dr["branchname"].ToString();
                                newrow["Employee Code1"] = dr["employee_num"].ToString();
                                newrow["EmployeeName"] = dr["fullname"].ToString();
                                double peryanam = Convert.ToDouble(dr["salaryperyear"].ToString());
                                newrow["GROSS1"] = peryanam / 12;
                                double permonth = peryanam / 12;
                                double HRA = Convert.ToDouble(dr["hra"].ToString());
                                double BASIC = Convert.ToDouble(dr["erningbasic"].ToString());
                                convenyance = Convert.ToDouble(dr["conveyance"].ToString());
                                profitionaltax = Convert.ToDouble(dr["profitionaltax"].ToString());
                                medicalerning = Convert.ToDouble(dr["medicalerning"].ToString());
                                washingallowance = Convert.ToDouble(dr["washingallowance"].ToString());
                                double travelconveyance = 0;
                                double shiftamount = 0;

                                if (dtattendence1.Rows.Count > 0)
                                {
                                    foreach (DataRow dra in dtattendence1.Select("employee_num='" + dr["employee_num"].ToString() + "'"))
                                    {

                                        double numberofworkingdays = 0;
                                        double.TryParse(dra["numberofworkingdays"].ToString(), out numberofworkingdays);
                                        double clorwo = 0;
                                        double.TryParse(dra["clorwo"].ToString(), out clorwo);
                                        daysinmonth = numberofworkingdays + clorwo;
                                        double paydays = 0;
                                        double lop = 0;
                                        //double otvalue = 0;

                                        double.TryParse(dra["lop"].ToString(), out lop);
                                        paydays = numberofworkingdays - lop;
                                        double holidays = 0;
                                        holidays = daysinmonth - numberofworkingdays;
                                        double paybledays = 0;
                                        paybledays = numberofworkingdays + clorwo;
                                        totalpresentdays = holidays + paydays;
                                        double totalpdays = permonth / daysinmonth;
                                        loseamount = lop * totalpdays;
                                        double perdayconveyance = convenyance / daysinmonth;
                                        loseofconviyance = lop * perdayconveyance;
                                        double perdaywashing = washingallowance / daysinmonth;
                                        loseofwashing = lop * perdaywashing;
                                        double perdaymedical = medicalerning / daysinmonth;
                                        loseofmedical = lop * perdaymedical;
                                        double perdaybasic = BASIC / daysinmonth;
                                        string ot = dra["extradays"].ToString();
                                        double perdayamt = permonth / daysinmonth;

                                        double perdaprofitionaltax = profitionaltax / daysinmonth;
                                        losofprofitionaltax = lop * perdaprofitionaltax;
                                        if (branchtype == "SalesOffice" || branchtype == "CC")
                                        {

                                            double nightdays = 0;
                                            double.TryParse(dra["night_days"].ToString(), out nightdays);
                                            double perdaycost = 0;
                                            double.TryParse(dra["night_allowance"].ToString(), out perdaycost);
                                            shiftamount = nightdays * perdaycost;
                                            shiftamount = Math.Round(shiftamount);
                                            newrow["Shift Allowance"] = shiftamount;

                                        }
                                        if (branchtype == "SalesOffice" || branchtype == "CC")
                                        {
                                            double totldays = 0;
                                            //double travelconveyance = 0;
                                            double.TryParse(dr["travelconveyance"].ToString(), out travelconveyance);
                                            double days = 0;
                                            days = numberofworkingdays + clorwo;
                                            totldays = days - lop;
                                            double totamount1 = 0;
                                            double perdaycost1 = 0;
                                            perdaycost1 = travelconveyance / days;
                                            totamount1 = totldays * perdaycost1;
                                            newrow["CONVEYANCE"] = Math.Round(totamount1);
                                            newrow["FIXEDCONVEYANCE"] = dr["travelconveyance"].ToString();
                                            double.TryParse(dr["travelconveyance"].ToString(), out travelconveyance);
                                            //newrow["CONVEYANCE"] = travelconveyance;

                                            //Report.Columns.Add("CONVEYANCE").DataType = typeof(double);
                                        }
                                        double otdays = 0;
                                        if (ot == "" || ot == "0")
                                        {
                                            otdays = 0;
                                        }
                                        else
                                        {
                                            otdays = Convert.ToDouble(dra["extradays"].ToString());
                                            otvalue = perdayamt * otdays;
                                            newrow["Extra Pay"] = Math.Round(otvalue);
                                            otamount = Math.Round(otvalue); ;
                                        }
                                    }
                                }
                                double perdaysal = permonth / daysinmonth;
                                double basic = 50;
                                double basicsalary = (permonth * 50) / 100;
                                double basicpermonth = basicsalary / daysinmonth;
                                double bs = basicpermonth * totalpresentdays;
                                double basicsal = Math.Round(basicsalary - loseamount);
                                double conve = Math.Round(convenyance - loseofconviyance);
                                double medical = Math.Round(medicalerning - loseofmedical);
                                double washing = Math.Round(washingallowance - loseofwashing);
                                double tt = bs + conve + medical + washing;
                                double thra = permonth - loseamount;
                                double hra = Math.Round(thra - tt);
                                totalearnings = Math.Round(hra + tt);
                                double.TryParse(dr["travelconveyance"].ToString(), out travelconveyance);
                                double totamount = 0;
                                //double perdaycost = 0;
                                //perdaycost = travelconveyance / daysinmonth;
                                //totamount = totalpresentdays * perdaycost;
                                string pfeligible = dr["pfeligible"].ToString();
                                if (pfeligible == "Yes")
                                {
                                    providentfund = (totalearnings * 6) / 100;
                                    if (providentfund > 1800)
                                    {
                                        providentfund = 1800;
                                    }
                                    providentfund = Math.Round(providentfund);
                                }
                                else
                                {
                                    providentfund = 0;
                                }
                                string esieligible = dr["esieligible"].ToString();
                                if (esieligible == "Yes")
                                {
                                    esi = (totalearnings * 1.75) / 100;
                                    esi = Math.Round(esi);
                                }
                                else
                                {
                                    esi = 0;
                                }
                                if (dtsa1.Rows.Count > 0)
                                {
                                    DataRow[] drr = dtsa1.Select("employee_num='" + dr["employee_num"].ToString() + "'");
                                    if (drr.Length > 0)
                                    {
                                        foreach (DataRow drsa in dtsa1.Select("employee_num='" + dr["employee_num"].ToString() + "'"))
                                        {
                                            double amount = 0;
                                            double.TryParse(drsa["amount"].ToString(), out amount);
                                            salaryadvance = Convert.ToDouble(amount);
                                            salaryadvance = Math.Round(amount);
                                        }
                                    }
                                    else
                                    {
                                        salaryadvance = 0;
                                    }
                                }
                                else
                                {
                                    salaryadvance = 0;
                                }
                                if (dtloan1.Rows.Count > 0)
                                {
                                    DataRow[] drr = dtloan1.Select("employee_num='" + dr["employee_num"].ToString() + "'");
                                    if (drr.Length > 0)
                                    {
                                        foreach (DataRow drloan in dtloan1.Select("employee_num='" + dr["employee_num"].ToString() + "'"))
                                        {
                                            double loanemimonth = 0;
                                            double.TryParse(drloan["loanemimonth"].ToString(), out loanemimonth);
                                            loan = Convert.ToDouble(loanemimonth);
                                            loan = Math.Round(loanemimonth);
                                        }
                                    }
                                    else
                                    {
                                        loan = 0;
                                    }
                                }
                                else
                                {
                                    loan = 0;
                                }
                                mobilededuction = 0;
                                if (dtmobile1.Rows.Count > 0)
                                {
                                    DataRow[] drr = dtmobile1.Select("employee_num='" + dr["employee_num"].ToString() + "'");
                                    if (drr.Length > 0)
                                    {
                                        foreach (DataRow drmobile in dtmobile1.Select("employee_num='" + dr["employee_num"].ToString() + "'"))
                                        {
                                            double deductionamount = 0;
                                            double.TryParse(drmobile["deductionamount"].ToString(), out deductionamount);
                                            string st = deductionamount.ToString();
                                            if (st == "0.0")
                                            {
                                                mobilededuction = 0;
                                            }
                                            else
                                            {
                                                mobilededuction = Convert.ToDouble(deductionamount);
                                                mobilededuction = Math.Round(deductionamount);
                                            }
                                        }
                                    }
                                    else
                                    {
                                        mobilededuction = 0;
                                    }
                                }
                                else
                                {
                                    mobilededuction = 0;
                                }
                                canteendeduction = 0;
                                if (dtcanteen1.Rows.Count > 0)
                                {
                                    DataRow[] drr = dtcanteen1.Select("employee_num='" + dr["employee_num"].ToString() + "'");
                                    if (drr.Length > 0)
                                    {
                                        foreach (DataRow drcanteen in dtcanteen1.Select("employee_num='" + dr["employee_num"].ToString() + "'"))
                                        {
                                            double deductionamount = 0;
                                            double.TryParse(drcanteen["amount"].ToString(), out deductionamount);
                                            string st = deductionamount.ToString();
                                            canteendeduction = Convert.ToDouble(deductionamount);
                                            canteendeduction = Math.Round(deductionamount);
                                        }
                                    }
                                    else
                                    {
                                        canteendeduction = 0;
                                    }
                                }
                                else
                                {
                                    canteendeduction = 0;
                                }

                                medicliamdeduction = 0;
                                if (dtmedicliam1.Rows.Count > 0)
                                {
                                    DataRow[] drr = dtmedicliam1.Select("employee_num='" + dr["employee_num"].ToString() + "'");
                                    if (drr.Length > 0)
                                    {
                                        foreach (DataRow drmedicliam in dtmedicliam1.Select("employee_num='" + dr["employee_num"].ToString() + "'"))
                                        {
                                            double amount = 0;
                                            double.TryParse(drmedicliam["medicliamamount"].ToString(), out amount);
                                            string st = amount.ToString();
                                            medicliamdeduction = Convert.ToDouble(amount);
                                            medicliamdeduction = Math.Round(amount, 0);
                                        }
                                    }
                                    else
                                    {
                                        medicliamdeduction = 0;
                                    }
                                }
                                else
                                {
                                }
                                otherdeduction = 0;
                                if (dtotherdeduction1.Rows.Count > 0)
                                {
                                    DataRow[] drr = dtotherdeduction1.Select("employee_num='" + dr["employee_num"].ToString() + "'");
                                    if (drr.Length > 0)
                                    {
                                        foreach (DataRow drotherdeduction in dtotherdeduction1.Select("employee_num='" + dr["employee_num"].ToString() + "'"))
                                        {
                                            double amount = 0;
                                            double.TryParse(drotherdeduction["otherdeductionamount"].ToString(), out amount);
                                            string st = amount.ToString();
                                            otherdeduction = Convert.ToDouble(amount);
                                            otherdeduction = Math.Round(amount, 0);
                                        }
                                    }
                                    else
                                    {
                                        otherdeduction = 0;
                                    }
                                }
                                else
                                {
                                }
                                tdsdeduction = 0;
                                if (dttdsdeduction.Rows.Count > 0)
                                {
                                    DataRow[] drr = dttdsdeduction.Select("employee_num='" + dr["employee_num"].ToString() + "'");
                                    if (drr.Length > 0)
                                    {
                                        foreach (DataRow drtdsdeduction in dttdsdeduction.Select("employee_num='" + dr["employee_num"].ToString() + "'"))
                                        {
                                            double amount = 0;
                                            double.TryParse(drtdsdeduction["tdsamount"].ToString(), out amount);
                                            string st = amount.ToString();
                                            tdsdeduction = Convert.ToDouble(amount);
                                            tdsdeduction = Math.Round(amount, 0);
                                        }
                                    }
                                    else
                                    {
                                        tdsdeduction = 0;
                                    }
                                }
                                else
                                {
                                    tdsdeduction = 0;
                                }
                                ptax = profitionaltax - losofprofitionaltax;
                                totaldeduction = Math.Round(profitionaltax + canteendeduction + salaryadvance + loan + mobilededuction + providentfund + esi + medicliamdeduction + otherdeduction + tdsdeduction);
                                double netpay = 0;
                                netpay = totalearnings - totaldeduction;
                                netpay = Math.Round(netpay, 2);

                                string stramount = "0";
                                stramount = netpay.ToString();
                                if (stramount == "NaN")
                                {
                                    //newrow["NET PAY1"] = netpay;
                                    //Report1.Rows.Add(newrow);
                                }
                                else
                                {
                                    //if (stramount == "NaN" || stramount == "0")
                                    //{
                                    newrow["NET PAY1"] = netpay;
                                    netpay = netpay + travelconveyance + shiftamount;
                                    double NEGATIVE = Math.Round(netpay + otvalue);
                                    if (NEGATIVE > 0)
                                    {
                                        Report1.Rows.Add(newrow);
                                    }
                                    else
                                    {
                                        Report1.Rows.Add(newrow);
                                    }
                                    //}

                                }
                            }
                        }
                        DataRow newTotal1 = Report1.NewRow();
                        newTotal1["EmployeeName"] = "Total";
                        double val = 0.0;
                        foreach (DataColumn dc1 in Report1.Columns)
                        {

                            if (dc1.DataType == typeof(Double))
                            {
                                val = 0.0;
                                double.TryParse(Report1.Compute("sum([" + dc1.ToString() + "])", "[" + dc1.ToString() + "]<>'0'").ToString(), out val);
                                newTotal1[dc1.ToString()] = val;
                            }

                        }
                        Report1.Rows.Add(newTotal1);
                        //var n = 1;
                        string name = "Total";
                        foreach (DataRow dbreport in Report1.Select("EmployeeName='" + name + "'"))
                        {
                            DataRow nr_bank = dtbanknew.NewRow();
                            nr_bank["SNO"] = n++.ToString();
                            //string mymonth1 = mymonth("MMM");
                            nr_bank["MOnth"] = Month;
                            string branch = "";
                            nr_bank["Bank Name"] = bankname;
                            double temp = Convert.ToDouble(dbreport["NET PAY1"].ToString());
                            if (temp > 0)
                            {
                                nr_bank["Amount1"] = dbreport["NET PAY1"].ToString();
                                dtbanknew.Rows.Add(nr_bank);

                            }

                            //nr_bank["Amount2"] = dbreport["Extra Pay"].ToString();

                            //foreach (DataRow dreport in Report1.Select("EmployeeName='" + name + "'"))
                            //{
                            DataRow nr_mp = dtbanknew.NewRow();
                            nr_mp["MOnth"] = Month;
                            nr_mp["Bank Name"] = "Extra Pay" + " " + bankname;
                            double temp1 = Convert.ToDouble(dbreport["Extra Pay"].ToString());
                            if (temp1 > 0)
                            {
                                nr_mp["Amount1"] = dbreport["Extra Pay"].ToString();
                                dtbanknew.Rows.Add(nr_mp);
                            }

                            DataRow nr_conv = dtbanknew.NewRow();
                            nr_conv["MOnth"] = Month;
                            nr_conv["Bank Name"] = "CONVEYANCE" + " " + bankname;
                            double temp2 = Convert.ToDouble(dbreport["CONVEYANCE"].ToString());
                            if (temp2 > 0)
                            {
                                nr_conv["Amount1"] = dbreport["CONVEYANCE"].ToString();
                                dtbanknew.Rows.Add(nr_conv);
                            }

                            DataRow nr_nightshift = dtbanknew.NewRow();
                            nr_nightshift["MOnth"] = Month;
                            nr_nightshift["Bank Name"] = "Shift Allowance" + " " + bankname;
                            double temp3 = Convert.ToDouble(dbreport["Shift Allowance"].ToString());
                            if (temp3 > 0)
                            {
                                nr_nightshift["Amount1"] = dbreport["Shift Allowance"].ToString();
                                dtbanknew.Rows.Add(nr_nightshift);

                            }

                            //} 
                        }

                    }
                    else if (branchtype == "Driver")
                    {
                        {
                            //Report.Columns.Add("SNO");
                            //Report.Columns.Add("Location");
                            //Report.Columns.Add("Employee Code1");
                            //Report.Columns.Add("Employee Name");
                            //Report.Columns.Add("DESIGNATION");
                            Report1.Columns.Add("OTHER DEDUCTIONS");
                            Report1.Columns.Add("GROSS Earnings");
                            //Report.Columns.Add("NET PAY").DataType = typeof(double);
                            //Report.Columns.Add("NET AMOUNT").DataType = typeof(double);
                            //Report.Columns.Add("Bank Acc NO");
                            //Report.Columns.Add("IFSC Code");
                            int branchid = Convert.ToInt32(mainbranch);
                            cmd = new SqlCommand("SELECT employedetails.pfeligible, employedetails.pfdate, branchmaster.branchname, employedetails.esidate, employebankdetails.ifsccode, employedetails.esieligible, monthly_attendance.month, monthly_attendance.year, employedetails.employee_type, employedetails.empid, employedetails.employee_num, employedetails.fullname, designation.designation, employebankdetails.accountno, branchmaster.statename, salaryappraisals.gross, salaryappraisals.erningbasic, salaryappraisals.hra, salaryappraisals.profitionaltax, salaryappraisals.esi, salaryappraisals.providentfund, salaryappraisals.conveyance, salaryappraisals.medicalerning, salaryappraisals.washingallowance, salaryappraisals.travelconveyance, salaryappraisals.salaryperyear FROM employedetails INNER JOIN designation ON employedetails.designationid = designation.designationid INNER JOIN monthly_attendance ON employedetails.empid = monthly_attendance.empid LEFT OUTER JOIN branchmaster ON employedetails.branchid = branchmaster.branchid LEFT OUTER JOIN employebankdetails ON employedetails.empid = employebankdetails.employeid INNER JOIN branchmapping ON employedetails.branchid = branchmapping.subbranch INNER JOIN salaryappraisals ON employedetails.empid = salaryappraisals.empid WHERE(employebankdetails.bankid = @bankid) AND (branchmapping.mainbranch = @branchid) AND (employedetails.status = 'No') AND (employedetails.employee_type = 'Driver' OR employedetails.employee_type = 'Cleaner') AND (monthly_attendance.month = @month) AND (monthly_attendance.year = @year) AND (salaryappraisals.endingdate IS NULL) AND (salaryappraisals.startingdate <= @d1) OR (employebankdetails.bankid = @bankid) AND (branchmapping.mainbranch = @branchid) AND (employedetails.status = 'No') AND (employedetails.employee_type = 'Driver' OR employedetails.employee_type = 'Cleaner') AND (monthly_attendance.month = @month) AND (monthly_attendance.year = @year) AND (salaryappraisals.endingdate > @d1) AND (salaryappraisals.startingdate <= @d1)");
                            //paystrure
                            //cmd = new SqlCommand("SELECT employedetails.pfeligible, employedetails.pfdate, branchmaster.branchname, employedetails.esidate, employebankdetails.ifsccode, employedetails.esieligible, monthly_attendance.month, monthly_attendance.year,employedetails.employee_type, employedetails.empid, employedetails.employee_num, pay_structure.erningbasic, pay_structure.esi, pay_structure.providentfund, employedetails.fullname, designation.designation, pay_structure.gross, pay_structure.hra, pay_structure.conveyance, pay_structure.washingallowance, pay_structure.medicalerning, pay_structure.profitionaltax, employebankdetails.accountno, branchmaster.statename FROM employedetails INNER JOIN designation ON employedetails.designationid = designation.designationid INNER JOIN monthly_attendance ON employedetails.empid = monthly_attendance.empid INNER JOIN pay_structure ON employedetails.empid = pay_structure.empid Left Outer Join branchmaster ON employedetails.branchid = branchmaster.branchid LEFT OUTER JOIN employebankdetails ON employedetails.empid = employebankdetails.employeid INNER JOIN branchmapping ON employedetails.branchid = branchmapping.subbranch WHERE (branchmapping.mainbranch = @branchid) AND (employedetails.status = 'No') AND (employebankdetails.bankid = @bankid) AND ((employedetails.employee_type ='Driver') OR (employedetails.employee_type ='Cleaner')) AND (monthly_attendance.month = @month) AND (monthly_attendance.year = @year)");
                            cmd.Parameters.Add("@bankid", bankid);
                            cmd.Parameters.Add("@branchid", branchid);
                            cmd.Parameters.Add("@month", Month);
                            cmd.Parameters.Add("@year", Year);
                            cmd.Parameters.Add("@d1", date);
                            DataTable dtsalary = vdm.SelectQuery(cmd).Tables[0];
                            cmd = new SqlCommand("SELECT monthly_attendance.sno, monthly_attendance.empid,monthly_attendance.clorwo, monthly_attendance.doe, monthly_attendance.month, monthly_attendance.year, monthly_attendance.otdays, employedetails.employee_num, branchmaster.fromdate, branchmaster.todate, monthly_attendance.lop, branchmaster.branchid, monthly_attendance.numberofworkingdays FROM  monthly_attendance INNER JOIN  employedetails ON monthly_attendance.empid = employedetails.empid INNER JOIN branchmaster ON employedetails.branchid = branchmaster.branchid WHERE  (monthly_attendance.month = @month) AND (monthly_attendance.year = @year)");
                            //cmd = new SqlCommand("SELECT monthly_attendance.sno, monthly_attendance.empid, monthly_attendance.doe, monthly_attendance.month, monthly_attendance.year, monthly_attendance.otdays, employedetails.employee_num, branchmaster.fromdate, branchmaster.todate, monthly_workingdays.numberofworkingdays, monthly_attendance.lop,  branchmaster.branchid FROM  monthly_attendance INNER JOIN employedetails ON monthly_attendance.empid = employedetails.empid INNER JOIN branchmaster ON employedetails.branchid = branchmaster.branchid INNER JOIN monthly_workingdays ON branchmaster.branchid = monthly_workingdays.branchid WHERE (monthly_attendance.month = @month) AND (monthly_attendance.year = @year) AND (employedetails.branchid=@branchid)");
                            cmd.Parameters.Add("@month", Month);
                            cmd.Parameters.Add("@year", Year);
                            //cmd.Parameters.Add("@branchid", branchid);
                            DataTable dtattendence = vdm.SelectQuery(cmd).Tables[0];
                            cmd = new SqlCommand("SELECT  employedetails.employee_num, salaryadvance.amount, salaryadvance.monthofpaid, employedetails.fullname, salaryadvance.empid FROM   salaryadvance INNER JOIN  employedetails ON salaryadvance.empid = employedetails.empid where (salaryadvance.month = @month) AND (salaryadvance.year = @year)");
                            cmd.Parameters.Add("@month", Month);
                            cmd.Parameters.Add("@year", Year);
                            cmd.Parameters.Add("@branchid", branchid);
                            DataTable dtsa = vdm.SelectQuery(cmd).Tables[0];
                            cmd = new SqlCommand("SELECT employedetails.employee_num, loan_request.loanemimonth, loan_request.months, loan_request.startdate FROM employedetails INNER JOIN  loan_request ON employedetails.empid = loan_request.empid where (loan_request.month = @month) AND (loan_request.year = @year)");
                            cmd.Parameters.Add("@month", Month);
                            cmd.Parameters.Add("@year", Year);
                            DataTable dtloan = vdm.SelectQuery(cmd).Tables[0];
                            cmd = new SqlCommand("SELECT  employedetails.employee_num, mobile_deduction.deductionamount, employedetails.fullname, employedetails.empid FROM  mobile_deduction INNER JOIN employedetails ON mobile_deduction.employee_num = employedetails.employee_num   where (mobile_deduction.month = @month) AND (mobile_deduction.year = @year)");
                            cmd.Parameters.Add("@month", Month);
                            cmd.Parameters.Add("@year", Year);
                            DataTable dtmobile = vdm.SelectQuery(cmd).Tables[0];
                            cmd = new SqlCommand("SELECT  employedetails.employee_num, canteendeductions.amount, employedetails.fullname, employedetails.empid FROM  canteendeductions INNER JOIN employedetails ON canteendeductions.employee_num = employedetails.employee_num where  (canteendeductions.month = @month) AND (canteendeductions.year = @year)");
                            cmd.Parameters.Add("@month", Month);
                            cmd.Parameters.Add("@year", Year);
                            DataTable dtcanteen = vdm.SelectQuery(cmd).Tables[0];
                            cmd = new SqlCommand("SELECT employedetails.employee_num, employedetails.fullname, employedetails.empid, otherdeduction.otherdeductionamount FROM employedetails INNER JOIN otherdeduction ON employedetails.empid = otherdeduction.empid WHERE (employedetails.branchid = @branchid) AND (otherdeduction.month = @month) AND (otherdeduction.year = @year)");
                            cmd.Parameters.Add("@branchid", branchid);
                            cmd.Parameters.Add("@month", Month);
                            cmd.Parameters.Add("@year", Year);
                            DataTable dtotherdeduction = vdm.SelectQuery(cmd).Tables[0];
                            if (dtsalary.Rows.Count > 0)
                            {
                                var i = 1;
                                foreach (DataRow dr in dtsalary.Rows)
                                {
                                    double totalpresentdays = 0;
                                    double profitionaltax = 0;
                                    double salaryadvance = 0;
                                    double loan = 0;
                                    double canteendeduction = 0;
                                    double mobilededuction = 0;
                                    double totaldeduction;
                                    double numberofworkingdays = 0;
                                    double totalearnings = 0;
                                    double daysinmonth = 0;
                                    string statename = "";
                                    DataRow newrow = Report1.NewRow();
                                    //newrow["SNO"] = i++.ToString();
                                    //newrow["Location"] = dr["branchname"].ToString();
                                    newrow["Employee Code1"] = dr["employee_num"].ToString();
                                    newrow["EmployeeName"] = dr["fullname"].ToString();
                                    ////newrow["Bank Name"] = dr["fullname"].ToString();
                                    ////newrow["DESIGNATION"] = dr["designation"].ToString();
                                    double BASIC = Convert.ToDouble(dr["erningbasic"].ToString());
                                    statename = dr["statename"].ToString();
                                    //newrow["PT"] = dr["profitionaltax"].ToString();
                                    double rateper = Convert.ToDouble(dr["gross"].ToString());
                                    //profitionaltax = Convert.ToDouble(dr["profitionaltax"].ToString());
                                    newrow["Bank Acc NO"] = dr["accountno"].ToString();
                                    newrow["IFSC Code"] = dr["ifsccode"].ToString();
                                    //Report.Rows.Add(newrow);
                                    if (dtattendence.Rows.Count > 0)
                                    {
                                        foreach (DataRow dra in dtattendence.Select("employee_num='" + dr["employee_num"].ToString() + "'"))
                                        {
                                            double.TryParse(dra["numberofworkingdays"].ToString(), out numberofworkingdays);
                                            double clorwo = 0;
                                            double.TryParse(dra["clorwo"].ToString(), out clorwo);
                                            daysinmonth = numberofworkingdays + clorwo;
                                            // newrow["Work Days"] = daysinmonth.ToString();
                                            //double rateperday = 0;
                                            double paydays = 0;
                                            double lop = 0;
                                            double.TryParse(dra["lop"].ToString(), out lop);
                                            paydays = daysinmonth - lop;
                                            double holidays = 0;
                                            holidays = daysinmonth - numberofworkingdays;
                                            //newrow["Payable Days"] = paydays;
                                            totalpresentdays = holidays + paydays;
                                            //double perdaybasic = BASIC / daysinmonth;
                                            double rate = Convert.ToDouble(dr["gross"].ToString());
                                            // newrow["Rate/Day"] = rateper;
                                            double batta = 80;
                                            string empnumber = dr["employee_num"].ToString();
                                            if (empnumber == "SVDS080135" || empnumber == "SVDS100095")
                                            {
                                                // newrow["Batta/Day"] = "0";
                                                batta = 0;
                                            }
                                            else
                                            {
                                                // newrow["Batta/Day"] = batta;
                                            }
                                            double rateperday = rate + batta;
                                            totalearnings = rateperday * paydays;
                                            double totalpdays = numberofworkingdays - lop;
                                            totalearnings = Math.Round(totalearnings);
                                            newrow["GROSS Earnings"] = totalearnings;
                                            if (statename == "AndraPrdesh")
                                            {
                                                if (totalearnings > 1000 && totalearnings <= 15000)
                                                {
                                                    profitionaltax = 0;
                                                }
                                                else if (totalearnings >= 15001 && totalearnings <= 20000)
                                                {
                                                    profitionaltax = 150;
                                                }
                                                else if (totalearnings >= 20001)
                                                {
                                                    profitionaltax = 200;
                                                }
                                            }
                                            if (statename == "Tamilnadu")
                                            {
                                                if (totalearnings < 7000)
                                                {
                                                    profitionaltax = 0;
                                                }
                                                else if (totalearnings >= 7001 && totalearnings <= 10000)
                                                {
                                                    profitionaltax = 115;
                                                }
                                                else if (totalearnings >= 10001 && totalearnings <= 11000)
                                                {
                                                    profitionaltax = 171;
                                                }
                                                else if (totalearnings >= 11001 && totalearnings <= 12000)
                                                {
                                                    profitionaltax = 171;
                                                }
                                                else if (totalearnings >= 12001)
                                                {
                                                    profitionaltax = 208;
                                                }
                                            }
                                            if (statename == "karnataka")
                                            {
                                                if (totalearnings <= 15000 && totalearnings <= 15001)
                                                {
                                                    profitionaltax = 0;
                                                }
                                                else if (totalearnings >= 15001)
                                                {
                                                    profitionaltax = 200;
                                                }
                                            }
                                            //newrow["PT"] = profitionaltax;
                                        }
                                    }
                                    if (dtsa.Rows.Count > 0)
                                    {
                                        DataRow[] drr = dtsa.Select("employee_num='" + dr["employee_num"].ToString() + "'");
                                        if (drr.Length > 0)
                                        {
                                            foreach (DataRow drsa in dtsa.Select("employee_num='" + dr["employee_num"].ToString() + "'"))
                                            {
                                                double amount = 0;
                                                double.TryParse(drsa["amount"].ToString(), out amount);
                                                //newrow["SALARY ADVANCE"] = amount.ToString();
                                                salaryadvance = Convert.ToDouble(amount);
                                                salaryadvance = Math.Round(amount, 0);
                                            }
                                        }
                                        else
                                        {
                                            salaryadvance = 0;
                                            // newrow["SALARY ADVANCE"] = salaryadvance;
                                        }
                                    }
                                    if (dtloan.Rows.Count > 0)
                                    {
                                        DataRow[] drr = dtloan.Select("employee_num='" + dr["employee_num"].ToString() + "'");
                                        if (drr.Length > 0)
                                        {
                                            foreach (DataRow drloan in dtloan.Select("employee_num='" + dr["employee_num"].ToString() + "'"))
                                            {
                                                double loanemimonth = 0;
                                                double.TryParse(drloan["loanemimonth"].ToString(), out loanemimonth);
                                                //newrow["Loan"] = loanemimonth.ToString();
                                                loan = Convert.ToDouble(loanemimonth);
                                                loan = Math.Round(loanemimonth, 0);
                                            }
                                        }
                                        else
                                        {
                                            loan = 0;
                                            //newrow["Loan"] = loan;
                                        }
                                    }
                                    mobilededuction = 0;
                                    if (dtmobile.Rows.Count > 0)
                                    {
                                        DataRow[] drr = dtmobile.Select("employee_num='" + dr["employee_num"].ToString() + "'");
                                        if (drr.Length > 0)
                                        {
                                            foreach (DataRow drmobile in dtmobile.Select("employee_num='" + dr["employee_num"].ToString() + "'"))
                                            {
                                                double deductionamount = 0;
                                                double.TryParse(drmobile["deductionamount"].ToString(), out deductionamount);
                                                //newrow["MOBILE DEDUCTION"] = deductionamount.ToString();
                                                string st = deductionamount.ToString();
                                                if (st == "0.0")
                                                {
                                                    mobilededuction = 0;
                                                    //newrow["MOBILE DEDUCTION"] = mobilededuction;

                                                }
                                                else
                                                {
                                                    mobilededuction = Convert.ToDouble(deductionamount);
                                                    mobilededuction = Math.Round(deductionamount, 0);
                                                }
                                            }
                                        }
                                        else
                                        {
                                            mobilededuction = 0;
                                            //newrow["MOBILE DEDUCTION"] = mobilededuction;
                                        }
                                    }
                                    canteendeduction = 0;
                                    if (dtcanteen.Rows.Count > 0)
                                    {
                                        DataRow[] drr = dtcanteen.Select("employee_num='" + dr["employee_num"].ToString() + "'");
                                        if (drr.Length > 0)
                                        {
                                            foreach (DataRow drcanteen in dtcanteen.Select("employee_num='" + dr["employee_num"].ToString() + "'"))
                                            {
                                                double deductionamount = 0;
                                                double.TryParse(drcanteen["amount"].ToString(), out deductionamount);
                                                //newrow["CANTEEN DEDUCTION"] = deductionamount.ToString();
                                                string st = deductionamount.ToString();
                                                canteendeduction = Convert.ToDouble(deductionamount);
                                                canteendeduction = Math.Round(deductionamount, 0);
                                            }
                                        }
                                        else
                                        {
                                            canteendeduction = 0;
                                            //newrow["CANTEEN DEDUCTION"] = canteendeduction;
                                        }
                                    }
                                    double otherdeduction = 0;
                                    if (dtotherdeduction.Rows.Count > 0)
                                    {
                                        DataRow[] drr = dtotherdeduction.Select("employee_num='" + dr["employee_num"].ToString() + "'");
                                        if (drr.Length > 0)
                                        {
                                            foreach (DataRow drotherdeduction in dtotherdeduction.Select("employee_num='" + dr["employee_num"].ToString() + "'"))
                                            {
                                                double amount = 0;
                                                double.TryParse(drotherdeduction["otherdeductionamount"].ToString(), out amount);
                                                newrow["OTHER DEDUCTIONS"] = amount.ToString();
                                                string st = amount.ToString();
                                                otherdeduction = Convert.ToDouble(amount);
                                                otherdeduction = Math.Round(amount, 0);
                                            }
                                        }
                                        else
                                        {
                                            otherdeduction = 0;
                                            newrow["OTHER DEDUCTIONS"] = otherdeduction;
                                        }
                                    }
                                    else
                                    {
                                    }
                                    // newrow["TOTAL DEDUCTIONS"] = Math.Round(profitionaltax + canteendeduction + salaryadvance + loan + mobilededuction);
                                    totaldeduction = Math.Round(profitionaltax + canteendeduction + salaryadvance + loan + mobilededuction + otherdeduction);
                                    double netpay = 0;
                                    netpay = Math.Round(totalearnings - totaldeduction);
                                    netpay = Math.Round(netpay, 0);
                                    string stramount = "";
                                    stramount = netpay.ToString();
                                    if (stramount == "NaN" || stramount == "" || numberofworkingdays == 0)
                                    {
                                    }
                                    else
                                    {
                                        newrow["NET PAY1"] = Math.Round(netpay, 0);
                                        Report1.Rows.Add(newrow);
                                    }
                                    //newrow["NET PAY"] = Math.Ceiling(netpay);
                                }
                            }

                            DataRow newTotal1 = Report1.NewRow();
                            newTotal1["EmployeeName"] = "Total";
                            double val = 0.0;
                            foreach (DataColumn dc1 in Report1.Columns)
                            {

                                if (dc1.DataType == typeof(Double))
                                {
                                    val = 0.0;
                                    double.TryParse(Report1.Compute("sum([" + dc1.ToString() + "])", "[" + dc1.ToString() + "]<>'0'").ToString(), out val);
                                    newTotal1[dc1.ToString()] = val;
                                }

                            }
                            Report1.Rows.Add(newTotal1);
                            //var n = 1;
                            string name = "Total";
                            foreach (DataRow dbreport in Report1.Select("EmployeeName='" + name + "'"))
                            {
                                DataRow nr_bank = dtbanknew.NewRow();
                                nr_bank["SNO"] = n++.ToString();
                                //string mymonth1 = mymonth("MMM");
                                nr_bank["MOnth"] = Month;
                                string branch = "";
                                nr_bank["Bank Name"] = bankname;
                                double temp = Convert.ToDouble(dbreport["NET PAY1"].ToString());
                                if (temp > 0)
                                {
                                    nr_bank["Amount1"] = dbreport["NET PAY1"].ToString();
                                    dtbanknew.Rows.Add(nr_bank);

                                }

                                //nr_bank["Amount2"] = dbreport["Extra Pay"].ToString();

                                //foreach (DataRow dreport in Report1.Select("EmployeeName='" + name + "'"))
                                //{
                                DataRow nr_mp = dtbanknew.NewRow();
                                nr_mp["MOnth"] = Month;
                                nr_mp["Bank Name"] = "Extra Pay" + " " + bankname;
                                double temp1 = Convert.ToDouble(dbreport["Extra Pay"].ToString());
                                if (temp1 > 0)
                                {
                                    nr_mp["Amount1"] = dbreport["Extra Pay"].ToString();
                                    dtbanknew.Rows.Add(nr_mp);
                                }

                                DataRow nr_conv = dtbanknew.NewRow();
                                nr_conv["MOnth"] = Month;
                                nr_conv["Bank Name"] = "CONVEYANCE" + " " + bankname;
                                double temp2 = Convert.ToDouble(dbreport["CONVEYANCE"].ToString());
                                if (temp2 > 0)
                                {
                                    nr_conv["Amount1"] = dbreport["CONVEYANCE"].ToString();
                                    dtbanknew.Rows.Add(nr_conv);
                                }

                                DataRow nr_nightshift = dtbanknew.NewRow();
                                nr_nightshift["MOnth"] = Month;
                                nr_nightshift["Bank Name"] = "Shift Allowance" + " " + bankname;
                                double temp3 = Convert.ToDouble(dbreport["Shift Allowance"].ToString());
                                if (temp3 > 0)
                                {
                                    nr_nightshift["Amount1"] = dbreport["Shift Allowance"].ToString();
                                    dtbanknew.Rows.Add(nr_nightshift);

                                }

                                //} 
                            }

                        }
                    }



                }
                DataRow newTotal2 = dtbanknew.NewRow();
                newTotal2["Bank Name"] = "Total";
                double val1 = 0.0;
                foreach (DataColumn dc1 in dtbanknew.Columns)
                {

                    if (dc1.DataType == typeof(Double))
                    {
                        val1 = 0.0;
                        double.TryParse(dtbanknew.Compute("sum([" + dc1.ToString() + "])", "[" + dc1.ToString() + "]<>'0'").ToString(), out val1);
                        newTotal2[dc1.ToString()] = val1;
                    }

                }
                dtbanknew.Rows.Add(newTotal2);
                foreach (DataRow dr in dtbanknew.Rows)
                {
                    Summaryvalues getbrcdetails = new Summaryvalues();
                    getbrcdetails.month = dr["MOnth"].ToString();
                    getbrcdetails.bankname = dr["Bank Name"].ToString();
                    getbrcdetails.TotalAmount = dr["Amount1"].ToString();
                    summarybankDetalis.Add(getbrcdetails);
                }
                Summaryvalues GetPieValues1 = new Summaryvalues();
                GetPieValues1.summarybankDetalis = summarybankDetalis;
                GetPieValues1.summarysalaryDetalis = summarysalaryDetalis;
                //GetPieValues1.summaryDetalis = summaryDetalis;
                summaryDetalislist.Add(GetPieValues1);
                string errresponse1 = GetJson(summaryDetalislist);
                context.Response.Write(errresponse1);
                // gridBank.DataSource = dtbanknew;
                // gridBank.DataBind();
                //  Session["xportdata"] = dtbanknew;
                // hidepanel.Visible = true;
            }
            //}
        }
        catch (Exception ex)
        {
            // lblmsg.Text = ex.Message;
            //hidepanel.Visible = false;
        }
    }


    protected void btn_Generatesum_Click(HttpContext context)
    {
        try
        {
            DataTable Report = new DataTable();
            DataTable Report1 = new DataTable();
            //lblmsg.Text = "";
            DBManager SalesDB = new DBManager();
            DateTime fromdate = DateTime.Now;
            DateTime mydate = DateTime.Now;
            string currentyear = (mydate.Year).ToString();
            string mainbranch = context.Session["mainbranch"].ToString();
            string type = context.Request["type"];
            string Month = context.Request["Month"];
            string Year = context.Request["Year"];
            // string branchid = context.Request["name"];
            string branchtype = context.Request["branchtype"];
            string ChartType = context.Request["ChartType"];
            List<Summaryvalues> lsummarysalaryValueslist = new List<Summaryvalues>();
            List<Summaryvalues> summarysalaryDetalis = new List<Summaryvalues>();
            List<Summaryvalues> lsummarybankValueslist = new List<Summaryvalues>();
            List<Summaryvalues> summarybankDetalis = new List<Summaryvalues>();
            List<Summaryvalues> summaryDetalislist = new List<Summaryvalues>();
            List<Summaryvalues> convneanceDetails = new List<Summaryvalues>();
            string Address;
            string Title;
            string day = "";
            if (Month == "02")
            {
                day = "28";
            }
            else
            {
                day = (mydate.Day).ToString();
            }
            //string day = (mydate.Day).ToString();
            string d = "00";
            string date = Month + "/" + day + "/" + Year;
            //lblHeading.Text = " Summary Salary Statement" + ddlmonth.SelectedItem.Text + year;
            DateTime dtfrom = fromdate;
            string frmdate = dtfrom.ToString("dd/MM/yyyy");
            string[] str = frmdate.Split('/');
            //lblFromDate.Text = Month;
            fromdate = Convert.ToDateTime(date);
            context.Session["filename"] = " Summary Salary Statement " + Month + Year;
            context.Session["title"] = " Summary Salary Statement " + Month + Year;

            cmd = new SqlCommand("SELECT company_master.address, company_master.companyname FROM branchmaster INNER JOIN company_master ON branchmaster.company_code = company_master.sno");
            DataTable dtcompany = vdm.SelectQuery(cmd).Tables[0];
            if (dtcompany.Rows.Count > 0)
            {
                Address = dtcompany.Rows[0]["address"].ToString();
                Title = dtcompany.Rows[0]["companyname"].ToString();
            }
            else
            {
                Address = context.Session["Address"].ToString();
                Title = context.Session["TitleName"].ToString();
            }
            // string mainbranch = Session["mainbranch"].ToString();
            //if (branchtype== "SalesOffice" || branchtype == "CC" || branchtype == "Plant")
            //{
            if (ChartType == "Location")
            {
                if (branchtype == "Plant")
                {
                    cmd = new SqlCommand(" SELECT  branchmaster.branchid, branchmaster.branchname, branchmaster.branchtype, branchmaster.company_code FROM branchmaster INNER JOIN branchmapping ON branchmaster.branchid = branchmapping.subbranch  Where branchmaster.branchtype=@branchtype and  (branchmapping.mainbranch = @m) and (branchmaster.branchid='6')");
                    cmd.Parameters.Add("@m", mainbranch);
                    cmd.Parameters.Add("@branchtype", branchtype);

                }
                else if (branchtype == "Driver")
                {
                    cmd = new SqlCommand(" SELECT  branchmaster.branchid, branchmaster.branchname, branchmaster.branchtype, branchmaster.company_code FROM            branchmaster INNER JOIN   branchmapping ON branchmaster.branchid = branchmapping.subbranch INNER JOIN  employedetails ON branchmaster.branchid = employedetails.branchid WHERE    (employedetails.branchid ='6') AND (branchmapping.mainbranch = @m) AND (employedetails.employee_type = 'Driver' OR employedetails.employee_type = 'Cleaner') GROUP BY branchmaster.branchid, branchmaster.branchname, branchmaster.branchtype, branchmaster.company_code");
                    cmd.Parameters.Add("@m", mainbranch);
                }
                else
                {
                    cmd = new SqlCommand("SELECT  branchmaster.branchid, branchmaster.branchname, branchmaster.branchtype, branchmaster.company_code FROM branchmaster INNER JOIN branchmapping ON branchmaster.branchid = branchmapping.subbranch  Where branchmaster.branchtype=@branchtype and (branchmapping.mainbranch = @m)");
                    cmd.Parameters.Add("@m", mainbranch);
                    cmd.Parameters.Add("@branchtype", branchtype);
                }
                DataTable dtbranch = vdm.SelectQuery(cmd).Tables[0];
                DataTable dtnew = new DataTable();
                dtnew.Columns.Add("SNO");
                dtnew.Columns.Add("Month");
                dtnew.Columns.Add("loacation");
                dtnew.Columns.Add("Amount").DataType = typeof(double);
                dtnew.Columns.Add("GrossAmount").DataType = typeof(double);
                dtnew.Columns.Add("PT").DataType = typeof(double);
                dtnew.Columns.Add("PF").DataType = typeof(double);
                dtnew.Columns.Add("TDS").DataType = typeof(double);
                dtnew.Columns.Add("ESI").DataType = typeof(double);
                dtnew.Columns.Add("Canteen").DataType = typeof(double);
                dtnew.Columns.Add("Mobilededuction").DataType = typeof(double);
                dtnew.Columns.Add("Loan").DataType = typeof(double);
                dtnew.Columns.Add("Salaryadv").DataType = typeof(double);
                dtnew.Columns.Add("OTHER DEDUCTION").DataType = typeof(double);
                dtnew.Columns.Add("TOTAL DEDUCTIONS").DataType = typeof(double);
                dtnew.Columns.Add("GROSS Earnings").DataType = typeof(double);
                dtnew.Columns.Add("CONVEYANCE").DataType = typeof(double);
                dtnew.Columns.Add("FIXEDCONVEYANCE").DataType = typeof(double);
                dtnew.Columns.Add("ShiftAllowance").DataType = typeof(double);
                dtnew.Columns.Add("Extrapay").DataType = typeof(double);
                dtnew.Columns.Add("Rate/Day").DataType = typeof(double);
                dtnew.Columns.Add("Batta/Day").DataType = typeof(double);
                if (dtbranch.Rows.Count > 0)
                {
                    var k = 1;
                    foreach (DataRow dtbr in dtbranch.Rows)
                    {

                        Report = new DataTable();
                        Report.Columns.Add("Employee Code");
                        Report.Columns.Add("Name");
                        Report.Columns.Add("Extra Pay").DataType = typeof(double);
                        Report.Columns.Add("Location");
                        Report.Columns.Add("DESIGNATION");
                        Report.Columns.Add("GROSS").DataType = typeof(double);
                        Report.Columns.Add("DAYS MONTH").DataType = typeof(double);
                        Report.Columns.Add("Attendance Days").DataType = typeof(double);
                        Report.Columns.Add("CL HOLIDAY AND OFF").DataType = typeof(double);
                        Report.Columns.Add("Payable Days").DataType = typeof(double);
                        Report.Columns.Add("BASIC").DataType = typeof(double);
                        Report.Columns.Add("HRA").DataType = typeof(double);
                        Report.Columns.Add("CONVEYANCE ALLOWANCE").DataType = typeof(double);
                        Report.Columns.Add("CONVEYANCE").DataType = typeof(double);
                        Report.Columns.Add("FIXEDCONVEYANCE").DataType = typeof(double);
                        Report.Columns.Add("MEDICAL ALLOWANCE").DataType = typeof(double);
                        Report.Columns.Add("WASHING ALLOWANCE").DataType = typeof(double);
                        Report.Columns.Add("SHIFT ALLOWANCE").DataType = typeof(double);
                        Report.Columns.Add("GROSS Earnings").DataType = typeof(double);
                        Report.Columns.Add("PT").DataType = typeof(double);
                        Report.Columns.Add("PF").DataType = typeof(double);
                        Report.Columns.Add("ESI").DataType = typeof(double);
                        Report.Columns.Add("SALARY ADVANCE").DataType = typeof(double);
                        Report.Columns.Add("Loan").DataType = typeof(double);
                        Report.Columns.Add("CANTEEN DEDUCTION").DataType = typeof(double);
                        Report.Columns.Add("MOBILE DEDUCTION").DataType = typeof(double);
                        Report.Columns.Add("MEDICLAIM DEDUCTION").DataType = typeof(double);
                        Report.Columns.Add("OTHER DEDUCTION").DataType = typeof(double);
                        Report.Columns.Add("TOTAL DEDUCTIONS").DataType = typeof(double);
                        Report.Columns.Add("Tds DEDUCTION").DataType = typeof(double);
                        Report.Columns.Add("NET PAY").DataType = typeof(double);
                        Report.Columns.Add("Rate/Day").DataType = typeof(double);
                        Report.Columns.Add("Batta/Day").DataType = typeof(double);
                        Report.Columns.Add("Bank Acc NO");
                        Report.Columns.Add("IFSC Code");
                        string branchid = dtbr["branchid"].ToString();
                        string branchname = dtbr["branchname"].ToString();
                        if (branchtype == "SalesOffice" || branchtype == "CC" || branchtype == "Plant")
                        {
                            if (branchtype == "Plant")
                            {
                                //SELECT employedetails.pfeligible, employedetails.branchid,employedetails.esieligible, employedetails.empid, employedetails.fullname, employedetails.employee_num,employedetails.fullname AS Expr2, designation.designation, employebankdetails.accountno, employebankdetails.ifsccode, branchmaster.branchname, salaryappraisals.gross, salaryappraisals.erningbasic, salaryappraisals.hra, salaryappraisals.profitionaltax, salaryappraisals.esi, salaryappraisals.providentfund,salaryappraisals.conveyance, salaryappraisals.medicalerning, salaryappraisals.washingallowance, salaryappraisals.travelconveyance,salaryappraisals.salaryperyear FROM employedetails INNER JOIN designation ON employedetails.designationid = designation.designationid INNER JOIN branchmapping ON employedetails.branchid = branchmapping.subbranch INNER JOIN salaryappraisals ON employedetails.empid = salaryappraisals.empid LEFT OUTER JOIN employebankdetails ON employedetails.empid = employebankdetails.employeid LEFT OUTER JOIN branchmaster ON branchmaster.branchid = employedetails.branchid LEFT OUTER JOIN bankmaster ON bankmaster.sno = employebankdetails.bankid WHERE (branchmaster.branchtype = @branchtype) AND (employebankdetails.bankid = @bankid) AND (branchmaster.branchid= '6') AND (branchmapping.mainbranch = @m) AND (employedetails.status = 'No') AND (employedetails.employee_type = 'Staff' OR employedetails.employee_type = 'Retainers') AND (salaryappraisals.endingdate IS NULL) AND (salaryappraisals.startingdate <= @d1) OR (branchmaster.branchtype = @branchtype) AND (employebankdetails.bankid = @bankid) AND (branchmaster.branchid ='6') AND (branchmapping.mainbranch = @m) AND (employedetails.status = 'No') AND (employedetails.employee_type = 'Staff' OR employedetails.employee_type = 'Retainers') AND (salaryappraisals.endingdate > @d1) AND (salaryappraisals.startingdate <= @d1)ORDER BY branchmaster.branchname
                                //cmd = new SqlCommand("SELECT employedetails.pfeligible, employedetails.pfdate, employedetails.esidate, employedetails.esieligible, employedetails.employee_type, employedetails.empid,employedetails.employee_num, employedetails.fullname, designation.designation, employebankdetails.accountno, employebankdetails.ifsccode, monthly_attendance.month, monthly_attendance.year, employedetails.employee_dept, departments.department, salaryappraisals.esi, salaryappraisals.providentfund, salaryappraisals.conveyance, salaryappraisals.washingallowance, salaryappraisals.salaryperyear, salaryappraisals.medicalerning, salaryappraisals.profitionaltax, salaryappraisals.hra, salaryappraisals.erningbasic FROM employedetails INNER JOIN designation ON employedetails.designationid = designation.designationid INNER JOIN monthly_attendance ON employedetails.empid = monthly_attendance.empid INNER JOIN departments ON employedetails.employee_dept = departments.deptid INNER JOIN  salaryappraisals ON employedetails.empid = salaryappraisals.empid LEFT OUTER JOIN employebankdetails ON employedetails.empid = employebankdetails.employeid WHERE (employedetails.branchid = @branchid) AND (employedetails.status = 'No') AND (employedetails.employee_type = @emptype) AND (monthly_attendance.month = @month) AND (monthly_attendance.year = @year) AND (salaryappraisals.endingdate IS NULL) AND (salaryappraisals.startingdate <= @d1) OR (employedetails.branchid = @branchid) AND (employedetails.status = 'No') AND (employedetails.employee_type = @emptype) AND (monthly_attendance.month = @month) AND (monthly_attendance.year = @year) AND (salaryappraisals.endingdate > @d1)AND (salaryappraisals.startingdate <= @d1)");
                                cmd = new SqlCommand("SELECT employedetails.pfeligible, employedetails.pfdate, employedetails.esidate, employedetails.esieligible, employedetails.employee_type, employedetails.empid,employedetails.employee_num, employedetails.fullname, designation.designation, employebankdetails.accountno, employebankdetails.ifsccode, monthly_attendance.month, monthly_attendance.year, employedetails.employee_dept, departments.department, salaryappraisals.esi, salaryappraisals.providentfund, salaryappraisals.conveyance, salaryappraisals.washingallowance, salaryappraisals.salaryperyear, salaryappraisals.medicalerning, salaryappraisals.profitionaltax, salaryappraisals.hra, salaryappraisals.erningbasic,salaryappraisals.travelconveyance FROM employedetails INNER JOIN designation ON employedetails.designationid = designation.designationid INNER JOIN monthly_attendance ON employedetails.empid = monthly_attendance.empid INNER JOIN departments ON employedetails.employee_dept = departments.deptid INNER JOIN  salaryappraisals ON employedetails.empid = salaryappraisals.empid LEFT OUTER JOIN employebankdetails ON employedetails.empid = employebankdetails.employeid WHERE (employedetails.branchid ='6') AND (employedetails.status = 'No') AND (employedetails.employee_type ='Staff' OR employedetails.employee_type ='Retainers') AND (monthly_attendance.month = @month) AND (monthly_attendance.year = @year) AND (salaryappraisals.endingdate IS NULL) AND (salaryappraisals.startingdate <= @d1) OR (employedetails.branchid ='6') AND (employedetails.status = 'No') AND (employedetails.employee_type = 'Staff' OR employedetails.employee_type = 'Retainers') AND (monthly_attendance.month = @month) AND (monthly_attendance.year = @year) AND (salaryappraisals.endingdate > @d1)AND (salaryappraisals.startingdate <= @d1)");
                                cmd.Parameters.Add("@m", mainbranch);
                                cmd.Parameters.Add("@branchtype", branchtype);
                                cmd.Parameters.Add("@month", Month);
                                cmd.Parameters.Add("@year", Year);
                                cmd.Parameters.Add("@d1", date);
                            }

                            else
                            {
                                cmd = new SqlCommand("SELECT employedetails.pfeligible,  employedetails.pfdate, employedetails.esidate, employedetails.esieligible, employedetails.employee_type, employedetails.empid, employedetails.employee_num,pay_structure.erningbasic, pay_structure.esi, pay_structure.providentfund, employedetails.fullname, designation.designation, pay_structure.salaryperyear, pay_structure.hra, pay_structure.conveyance,pay_structure.travelconveyance, pay_structure.washingallowance, pay_structure.medicalerning, pay_structure.profitionaltax,employebankdetails.accountno, employebankdetails.ifsccode, branchmaster.branchname,monthly_attendance.month, monthly_attendance.year FROM  employedetails INNER JOIN designation ON employedetails.designationid = designation.designationid INNER JOIN pay_structure ON employedetails.empid = pay_structure.empid INNER JOIN monthly_attendance ON employedetails.empid = monthly_attendance.empid INNER JOIN  branchmapping ON employedetails.branchid = branchmapping.subbranch LEFT OUTER JOIN employebankdetails ON employedetails.empid = employebankdetails.employeid  INNER JOIN branchmaster ON employedetails.branchid = branchmaster.branchid  WHERE (employedetails.status = 'No') AND (monthly_attendance.month = @month) AND (monthly_attendance.year = @year) AND (branchmapping.mainbranch = @m) and (employedetails.branchid = @branchid) AND  (employedetails.employee_type = 'Staff')");
                                cmd.Parameters.Add("@m", mainbranch);
                                cmd.Parameters.Add("@branchid", branchid);
                                cmd.Parameters.Add("@month", Month);
                                cmd.Parameters.Add("@year", Year);
                            }
                            DataTable dtsalary = vdm.SelectQuery(cmd).Tables[0];

                            cmd = new SqlCommand("SELECT monthly_attendance.sno, monthly_attendance.empid,monthly_attendance.clorwo, monthly_attendance.doe, monthly_attendance.month, monthly_attendance.year, monthly_attendance.otdays, employedetails.employee_num, branchmaster.fromdate, branchmaster.todate, monthly_attendance.lop, branchmaster.branchid, monthly_attendance.numberofworkingdays FROM  monthly_attendance INNER JOIN  employedetails ON monthly_attendance.empid = employedetails.empid INNER JOIN branchmaster ON employedetails.branchid = branchmaster.branchid WHERE  (monthly_attendance.month = @month) AND (monthly_attendance.year = @year) AND (employedetails.branchid = @branchid)");
                            cmd.Parameters.Add("@month", Month);
                            cmd.Parameters.Add("@year", Year);
                            cmd.Parameters.Add("@branchid", branchid);
                            DataTable dtattendence = vdm.SelectQuery(cmd).Tables[0];
                            cmd = new SqlCommand("SELECT  employedetails.employee_num, salaryadvance.amount, salaryadvance.monthofpaid, employedetails.fullname, salaryadvance.empid FROM   salaryadvance INNER JOIN  employedetails ON salaryadvance.empid = employedetails.empid where (employedetails.branchid=@branchid) AND (salaryadvance.month = @month) AND (salaryadvance.year = @year)");
                            cmd.Parameters.Add("@month", Month);
                            cmd.Parameters.Add("@year", Year);
                            cmd.Parameters.Add("@branchid", branchid);
                            DataTable dtsa = vdm.SelectQuery(cmd).Tables[0];
                            cmd = new SqlCommand("SELECT employedetails.employee_num, loan_request.loanemimonth, loan_request.month FROM employedetails INNER JOIN  loan_request ON employedetails.empid = loan_request.empid where (employedetails.branchid=@branchid) AND (loan_request.month = @month) AND (loan_request.year = @year)");
                            cmd.Parameters.Add("@month", Month);
                            cmd.Parameters.Add("@year", Year);
                            cmd.Parameters.Add("@branchid", branchid);
                            DataTable dtloan = vdm.SelectQuery(cmd).Tables[0];
                            cmd = new SqlCommand("SELECT  employedetails.employee_num, mobile_deduction.deductionamount, employedetails.fullname, employedetails.empid FROM  mobile_deduction INNER JOIN employedetails ON mobile_deduction.employee_num = employedetails.employee_num   where (employedetails.branchid=@branchid) AND (mobile_deduction.month = @month) AND (mobile_deduction.year = @year)");
                            cmd.Parameters.Add("@branchid", branchid);
                            cmd.Parameters.Add("@month", Month);
                            cmd.Parameters.Add("@year", Year);
                            DataTable dtmobile = vdm.SelectQuery(cmd).Tables[0];
                            cmd = new SqlCommand("SELECT  employedetails.employee_num, canteendeductions.amount, employedetails.fullname, employedetails.empid FROM  canteendeductions INNER JOIN employedetails ON canteendeductions.employee_num = employedetails.employee_num where (employedetails.branchid=@branchid) AND (canteendeductions.month = @month) AND (canteendeductions.year = @year)");
                            cmd.Parameters.Add("@branchid", branchid);
                            cmd.Parameters.Add("@month", Month);
                            cmd.Parameters.Add("@year", Year);
                            DataTable dtcanteen = vdm.SelectQuery(cmd).Tables[0];
                            cmd = new SqlCommand("SELECT employedetails.employee_num, employedetails.fullname, employedetails.empid, mediclaimdeduction.medicliamamount FROM employedetails INNER JOIN mediclaimdeduction ON employedetails.empid = mediclaimdeduction.empid WHERE (employedetails.branchid = @branchid) AND (mediclaimdeduction.flag='1')");
                            cmd.Parameters.Add("@branchid", branchid);
                            DataTable dtmedicliam = vdm.SelectQuery(cmd).Tables[0];
                            cmd = new SqlCommand("SELECT employedetails.employee_num, employedetails.fullname, employedetails.empid, otherdeduction.otherdeductionamount FROM employedetails INNER JOIN otherdeduction ON employedetails.empid = otherdeduction.empid WHERE (employedetails.branchid = @branchid) AND (otherdeduction.month = @month) AND (otherdeduction.year = @year)");
                            cmd.Parameters.Add("@branchid", branchid);
                            cmd.Parameters.Add("@month", Month);
                            cmd.Parameters.Add("@year", Year);
                            DataTable dtotherdeduction = vdm.SelectQuery(cmd).Tables[0];

                            cmd = new SqlCommand("SELECT sno, employecode, tdsdeduction, month, year FROM monthlysalarystatement WHERE month=@prmonth and year=@pryear");
                            cmd.Parameters.Add("@prmonth", Month);
                            cmd.Parameters.Add("@pryear", Year);
                            DataTable dtprevtds = vdm.SelectQuery(cmd).Tables[0];

                            cmd = new SqlCommand("SELECT employedetails.employee_num, employedetails.fullname, employedetails.empid, tds_deduction.tdsamount FROM employedetails INNER JOIN tds_deduction ON employedetails.empid = tds_deduction.empid WHERE (employedetails.branchid = @branchid)");
                            cmd.Parameters.Add("@branchid", branchid);
                            DataTable dttdsdeduction = vdm.SelectQuery(cmd).Tables[0];


                            //cmd = new SqlCommand("SELECT monthly_attendance.sno, monthly_attendance.empid, monthly_attendance.extradays,monthly_attendance.clorwo, monthly_attendance.doe, monthly_attendance.month, monthly_attendance.year, monthly_attendance.otdays, employedetails.employee_num,branchmaster.night_allowance,monthly_attendance.night_days, branchmaster.fromdate, branchmaster.todate, monthly_attendance.lop, branchmaster.branchid, monthly_attendance.numberofworkingdays FROM  monthly_attendance INNER JOIN  employedetails ON monthly_attendance.empid = employedetails.empid INNER JOIN branchmaster ON employedetails.branchid = branchmaster.branchid WHERE  (monthly_attendance.month = @month) AND (monthly_attendance.year = @year) AND (employedetails.branchid = @branchid)");
                            //cmd.Parameters.Add("@month", Month);
                            //cmd.Parameters.Add("@year", Year);
                            //cmd.Parameters.Add("@branchid", branchid);
                            //DataTable dtattendence = vdm.SelectQuery(cmd).Tables[0];
                            //cmd = new SqlCommand("SELECT  employedetails.employee_num, salaryadvance.amount, salaryadvance.monthofpaid, employedetails.fullname, salaryadvance.empid FROM   salaryadvance INNER JOIN  employedetails ON salaryadvance.empid = employedetails.empid where (employedetails.branchid=@branchid) AND (salaryadvance.month = @month) AND (salaryadvance.year = @year)");
                            //cmd.Parameters.Add("@month", Month);
                            //cmd.Parameters.Add("@year", Year);
                            //cmd.Parameters.Add("@branchid", branchid);
                            //DataTable dtsa = vdm.SelectQuery(cmd).Tables[0];
                            //cmd = new SqlCommand("SELECT employedetails.employee_num, loan_request.loanemimonth, loan_request.months, loan_request.startdate FROM employedetails INNER JOIN  loan_request ON employedetails.empid = loan_request.empid where (employedetails.branchid=@branchid) AND (loan_request.month = @month) AND (loan_request.year = @year)");
                            //cmd.Parameters.Add("@month", Month);
                            //cmd.Parameters.Add("@year", Year);
                            //cmd.Parameters.Add("@branchid", branchid);
                            //DataTable dtloan = vdm.SelectQuery(cmd).Tables[0];
                            //cmd = new SqlCommand("SELECT  employedetails.employee_num, mobile_deduction.deductionamount, employedetails.fullname, employedetails.empid FROM  mobile_deduction INNER JOIN employedetails ON mobile_deduction.employee_num = employedetails.employee_num   where (employedetails.branchid=@branchid) AND (mobile_deduction.month = @month) AND (mobile_deduction.year = @year)");
                            //cmd.Parameters.Add("@branchid", branchid);
                            //cmd.Parameters.Add("@month", Month);
                            //cmd.Parameters.Add("@year", Year);
                            //DataTable dtmobile = vdm.SelectQuery(cmd).Tables[0];
                            //cmd = new SqlCommand("SELECT  employedetails.employee_num, canteendeductions.amount, employedetails.fullname, employedetails.empid FROM  canteendeductions INNER JOIN employedetails ON canteendeductions.employee_num = employedetails.employee_num where (employedetails.branchid=@branchid) AND (canteendeductions.month = @month) AND (canteendeductions.year = @year)");
                            //cmd.Parameters.Add("@branchid", branchid);
                            //cmd.Parameters.Add("@month", Month);
                            //cmd.Parameters.Add("@year", Year);
                            //DataTable dtcanteen = vdm.SelectQuery(cmd).Tables[0];
                            //cmd = new SqlCommand("SELECT employedetails.employee_num, employedetails.fullname, employedetails.empid, mediclaimdeduction.medicliamamount FROM employedetails INNER JOIN mediclaimdeduction ON employedetails.empid = mediclaimdeduction.empid WHERE (employedetails.branchid = @branchid)");
                            //cmd.Parameters.Add("@branchid", branchid);
                            ////cmd.Parameters.Add("@month", mymonth);
                            ////cmd.Parameters.Add("@year", str[2]);
                            //DataTable dtmedicliam = vdm.SelectQuery(cmd).Tables[0];
                            //cmd = new SqlCommand("SELECT employedetails.employee_num, employedetails.fullname, employedetails.empid, otherdeduction.otherdeductionamount FROM employedetails INNER JOIN otherdeduction ON employedetails.empid = otherdeduction.empid WHERE (employedetails.branchid = @branchid) AND (otherdeduction.month = @month) AND (otherdeduction.year = @year)");
                            //cmd.Parameters.Add("@branchid", branchid);
                            //cmd.Parameters.Add("@month", Month);
                            //cmd.Parameters.Add("@year", Year);
                            //DataTable dtotherdeduction = vdm.SelectQuery(cmd).Tables[0];
                            //cmd = new SqlCommand("SELECT employedetails.employee_num, employedetails.fullname, employedetails.empid, tds_deduction.tdsamount FROM employedetails INNER JOIN tds_deduction ON employedetails.empid = tds_deduction.empid WHERE (employedetails.branchid = @branchid)");
                            //cmd.Parameters.Add("@branchid", branchid);
                            //DataTable dttdsdeduction = vdm.SelectQuery(cmd).Tables[0];
                            if (dtsalary.Rows.Count > 0)
                            {
                                var i = 1;
                                foreach (DataRow dr in dtsalary.Rows)
                                {
                                    double otamount = 0;
                                    double totalpresentdays = 0;
                                    double profitionaltax = 0;
                                    double salaryadvance = 0;
                                    double loan = 0;
                                    double canteendeduction = 0;
                                    double otherdeduction = 0;
                                    double tdsdeduction = 0;
                                    double medicliamdeduction = 0;
                                    double mobilededuction = 0;
                                    double totaldeduction;
                                    double totalearnings;
                                    double providentfund = 0;
                                    double medicalerning = 0;
                                    double washingallowance = 0;
                                    double convenyance = 0;
                                    double esi = 0;
                                    double daysinmonth = 0;
                                    double loseamount = 0;
                                    double loseofconviyance = 0;
                                    double loseofwashing = 0;
                                    double loseofmedical = 0;
                                    double losofprofitionaltax = 0;
                                    double rate = 0;
                                    DataRow newrow = Report.NewRow();
                                    newrow["Employee Code"] = dr["employee_num"].ToString();
                                    newrow["Name"] = dr["fullname"].ToString();
                                    newrow["DESIGNATION"] = dr["designation"].ToString();
                                    double peryanam = Convert.ToDouble(dr["salaryperyear"].ToString());
                                    newrow["GROSS"] = peryanam / 12;
                                    double permonth = peryanam / 12;
                                    double HRA = Convert.ToDouble(dr["hra"].ToString());
                                    double BASIC = Convert.ToDouble(dr["erningbasic"].ToString());
                                    convenyance = Convert.ToDouble(dr["conveyance"].ToString());
                                    profitionaltax = Convert.ToDouble(dr["profitionaltax"].ToString());
                                    medicalerning = Convert.ToDouble(dr["medicalerning"].ToString());
                                    washingallowance = Convert.ToDouble(dr["washingallowance"].ToString());
                                    newrow["Bank Acc NO"] = dr["accountno"].ToString();
                                    newrow["IFSC Code"] = dr["ifsccode"].ToString();

                                    if (dtattendence.Rows.Count > 0)
                                    {
                                        foreach (DataRow dra in dtattendence.Select("employee_num='" + dr["employee_num"].ToString() + "'"))
                                        {
                                            double numberofworkingdays = 0;
                                            double.TryParse(dra["numberofworkingdays"].ToString(), out numberofworkingdays);
                                            double clorwo = 0;
                                            double.TryParse(dra["clorwo"].ToString(), out clorwo);
                                            daysinmonth = numberofworkingdays + clorwo;
                                            newrow["DAYS MONTH"] = daysinmonth.ToString();
                                            double paydays = 0;
                                            double lop = 0;
                                            double.TryParse(dra["lop"].ToString(), out lop);
                                            paydays = numberofworkingdays - lop;
                                            newrow["Attendance Days"] = paydays.ToString();
                                            double holidays = 0;
                                            holidays = daysinmonth - numberofworkingdays;

                                            if (lop != 0)
                                            {
                                                double totaldays = paydays + clorwo;
                                                newrow["Payable Days"] = totaldays;
                                            }
                                            else
                                            {
                                                newrow["Payable Days"] = paydays + clorwo;
                                            }
                                            if (clorwo == 0)
                                            {
                                            }
                                            else
                                            {
                                                newrow["CL HOLIDAY AND OFF"] = clorwo;
                                            }
                                            totalpresentdays = holidays + paydays;
                                            double totalpdays = permonth / daysinmonth;
                                            loseamount = lop * totalpdays;
                                            double perdayconveyance = convenyance / daysinmonth;
                                            loseofconviyance = lop * perdayconveyance;
                                            double perdaywashing = washingallowance / daysinmonth;
                                            loseofwashing = lop * perdaywashing;
                                            double perdaymedical = medicalerning / daysinmonth;
                                            loseofmedical = lop * perdaymedical;
                                            double perdaybasic = BASIC / daysinmonth;
                                            double perdaprofitionaltax = profitionaltax / daysinmonth;
                                            losofprofitionaltax = lop * perdaprofitionaltax;
                                        }
                                    }

                                    rate = permonth;
                                    double perdaysal = permonth / daysinmonth;
                                    double basic = 50;
                                    double basicsalary = (permonth * 50) / 100;
                                    double basicpermonth = basicsalary / daysinmonth;
                                    double bs = basicpermonth * totalpresentdays;
                                    newrow["BASIC"] = Math.Round(bs);
                                    newrow["CONVEYANCE ALLOWANCE"] = Math.Round(convenyance - loseofconviyance);
                                    newrow["MEDICAL ALLOWANCE"] = Math.Round(medicalerning - loseofmedical);
                                    newrow["WASHING ALLOWANCE"] = Math.Round(washingallowance - loseofwashing);
                                    double basicsal = Math.Round(basicsalary - loseamount);
                                    double conve = Math.Round(convenyance - loseofconviyance);
                                    double medical = Math.Round(medicalerning - loseofmedical);
                                    double washing = Math.Round(washingallowance - loseofwashing);
                                    double tt = bs + conve + medical + washing;
                                    double thra = permonth - loseamount;
                                    double hra = Math.Round(thra - tt);
                                    totalearnings = Math.Round(hra + tt);
                                    double ptax = 0;
                                    if (branchid == "6")
                                    {
                                        if (totalearnings >= 15000)
                                        {
                                            ptax = profitionaltax;
                                            newrow["PT"] = profitionaltax;
                                        }
                                        else
                                        {
                                            ptax = 0;
                                            profitionaltax = ptax;
                                            newrow["PT"] = ptax;
                                        }
                                    }
                                    else
                                    {
                                        newrow["PT"] = profitionaltax;
                                    }
                                    if (hra > 0)
                                    {
                                        newrow["HRA"] = hra;
                                    }
                                    else
                                    {
                                        newrow["HRA"] = 0;
                                    }
                                    newrow["GROSS Earnings"] = totalearnings;
                                    string pfeligible = dr["pfeligible"].ToString();
                                    if (pfeligible == "Yes")
                                    {
                                        providentfund = (totalearnings * 6) / 100;
                                        if (providentfund > 1800)
                                        {
                                            providentfund = 1800;
                                        }
                                        providentfund = Math.Round(providentfund, 0);
                                        newrow["PF"] = Math.Round(providentfund, 0);
                                    }
                                    else
                                    {
                                        providentfund = 0;
                                        newrow["PF"] = providentfund;
                                    }
                                    string esieligible = dr["esieligible"].ToString();
                                    if (branchid == "42")
                                    {

                                    }
                                    else
                                    {
                                        if (esieligible == "Yes")
                                        {
                                            esi = (totalearnings * 1.75) / 100;
                                            esi = Math.Round(esi, 0);
                                            newrow["ESI"] = esi;
                                        }
                                        else
                                        {
                                            esi = 0;
                                            newrow["ESI"] = esi;
                                        }
                                    }
                                    if (dtsa.Rows.Count > 0)
                                    {
                                        DataRow[] drr = dtsa.Select("employee_num='" + dr["employee_num"].ToString() + "'");
                                        if (drr.Length > 0)
                                        {
                                            foreach (DataRow drsa in dtsa.Select("employee_num='" + dr["employee_num"].ToString() + "'"))
                                            {
                                                double amount = 0;
                                                double.TryParse(drsa["amount"].ToString(), out amount);
                                                if (amount == 0)
                                                {
                                                }
                                                else
                                                {
                                                    newrow["SALARY ADVANCE"] = amount.ToString();
                                                    salaryadvance = Convert.ToDouble(amount);
                                                    salaryadvance = Math.Round(amount, 0);
                                                }
                                            }
                                        }
                                        else
                                        {
                                            salaryadvance = 0;
                                            if (salaryadvance == 0)
                                            {
                                            }
                                            else
                                            {
                                                newrow["SALARY ADVANCE"] = salaryadvance;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        salaryadvance = 0;
                                        if (salaryadvance == 0)
                                        {
                                        }
                                        else
                                        {
                                            newrow["SALARY ADVANCE"] = salaryadvance;
                                        }
                                    }
                                    if (dtloan.Rows.Count > 0)
                                    {
                                        DataRow[] drr = dtloan.Select("employee_num='" + dr["employee_num"].ToString() + "'");
                                        if (drr.Length > 0)
                                        {
                                            foreach (DataRow drloan in dtloan.Select("employee_num='" + dr["employee_num"].ToString() + "'"))
                                            {
                                                double loanemimonth = 0;
                                                double.TryParse(drloan["loanemimonth"].ToString(), out loanemimonth);
                                                if (loanemimonth == 0)
                                                {
                                                }
                                                else
                                                {
                                                    newrow["Loan"] = loanemimonth.ToString();
                                                    loan = Convert.ToDouble(loanemimonth);
                                                    loan = Math.Round(loanemimonth, 0);
                                                }
                                            }
                                        }
                                        else
                                        {
                                            loan = 0;
                                            if (loan == 0)
                                            {
                                            }
                                            else
                                            {
                                                newrow["Loan"] = loan;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        loan = 0;
                                        if (loan == 0)
                                        {
                                        }
                                        else
                                        {
                                            newrow["Loan"] = loan;
                                        }
                                    }
                                    mobilededuction = 0;
                                    if (dtmobile.Rows.Count > 0)
                                    {
                                        DataRow[] drr = dtmobile.Select("employee_num='" + dr["employee_num"].ToString() + "'");
                                        if (drr.Length > 0)
                                        {
                                            foreach (DataRow drmobile in dtmobile.Select("employee_num='" + dr["employee_num"].ToString() + "'"))
                                            {
                                                double deductionamount = 0;
                                                double.TryParse(drmobile["deductionamount"].ToString(), out deductionamount);
                                                if (deductionamount == 0)
                                                {
                                                }
                                                else
                                                {
                                                    newrow["MOBILE DEDUCTION"] = deductionamount.ToString();
                                                    string st = deductionamount.ToString();
                                                    mobilededuction = Convert.ToDouble(deductionamount);
                                                    mobilededuction = Math.Round(deductionamount, 0);
                                                }
                                            }
                                        }
                                        else
                                        {
                                            mobilededuction = 0;
                                            if (mobilededuction == 0)
                                            {
                                            }
                                            else
                                            {
                                                newrow["MOBILE DEDUCTION"] = Math.Round(mobilededuction, 0);
                                            }
                                        }
                                    }
                                    else
                                    {
                                        mobilededuction = 0;
                                        if (mobilededuction == 0)
                                        {
                                        }
                                        else
                                        {
                                            newrow["MOBILE DEDUCTION"] = Math.Round(mobilededuction, 0);
                                        }
                                    }
                                    canteendeduction = 0;
                                    if (dtcanteen.Rows.Count > 0)
                                    {
                                        DataRow[] drr = dtcanteen.Select("employee_num='" + dr["employee_num"].ToString() + "'");
                                        if (drr.Length > 0)
                                        {
                                            foreach (DataRow drcanteen in dtcanteen.Select("employee_num='" + dr["employee_num"].ToString() + "'"))
                                            {
                                                double deductionamount = 0;
                                                double.TryParse(drcanteen["amount"].ToString(), out deductionamount);
                                                if (deductionamount == 0)
                                                {
                                                }
                                                else
                                                {
                                                    newrow["CANTEEN DEDUCTION"] = deductionamount.ToString();
                                                    string st = deductionamount.ToString();
                                                    canteendeduction = Convert.ToDouble(deductionamount);
                                                    canteendeduction = Math.Round(deductionamount);
                                                }
                                            }
                                        }
                                        else
                                        {
                                            canteendeduction = 0;
                                            if (canteendeduction == 0)
                                            {
                                            }
                                            else
                                            {
                                                newrow["CANTEEN DEDUCTION"] = canteendeduction;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        canteendeduction = 0;
                                        if (canteendeduction == 0)
                                        {
                                        }
                                        else
                                        {
                                            newrow["CANTEEN DEDUCTION"] = canteendeduction;
                                        }
                                    }
                                    medicliamdeduction = 0;
                                    if (dtmedicliam.Rows.Count > 0)
                                    {
                                        DataRow[] drr = dtmedicliam.Select("employee_num='" + dr["employee_num"].ToString() + "'");
                                        if (drr.Length > 0)
                                        {
                                            foreach (DataRow drmedicliam in dtmedicliam.Select("employee_num='" + dr["employee_num"].ToString() + "'"))
                                            {
                                                double amount = 0;
                                                double.TryParse(drmedicliam["medicliamamount"].ToString(), out amount);
                                                newrow["MEDICLAIM DEDUCTION"] = amount.ToString();
                                                string st = amount.ToString();
                                                medicliamdeduction = Convert.ToDouble(amount);
                                                medicliamdeduction = Math.Round(amount, 0);
                                            }
                                        }
                                        else
                                        {
                                            medicliamdeduction = 0;
                                            newrow["MEDICLAIM DEDUCTION"] = medicliamdeduction;
                                        }
                                    }
                                    else
                                    {
                                        medicliamdeduction = 0;
                                        newrow["MEDICLAIM DEDUCTION"] = medicliamdeduction;
                                    }
                                    otherdeduction = 0;
                                    if (dtotherdeduction.Rows.Count > 0)
                                    {
                                        DataRow[] drr = dtotherdeduction.Select("employee_num='" + dr["employee_num"].ToString() + "'");
                                        if (drr.Length > 0)
                                        {
                                            foreach (DataRow drotherdeduction in dtotherdeduction.Select("employee_num='" + dr["employee_num"].ToString() + "'"))
                                            {
                                                double amount = 0;
                                                double.TryParse(drotherdeduction["otherdeductionamount"].ToString(), out amount);
                                                if (amount == 0)
                                                {
                                                }
                                                else
                                                {
                                                    newrow["OTHER DEDUCTION"] = amount.ToString();
                                                    string st = amount.ToString();
                                                    otherdeduction = Convert.ToDouble(amount);
                                                    otherdeduction = Math.Round(amount, 0);
                                                }
                                            }
                                        }
                                        else
                                        {
                                            otherdeduction = 0;
                                            if (otherdeduction == 0)
                                            {
                                            }
                                            else
                                            {
                                                //otherdeduction = 0;
                                                newrow["OTHER DEDUCTION"] = otherdeduction;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        otherdeduction = 0;
                                        if (otherdeduction == 0)
                                        {
                                        }
                                        else
                                        {
                                            //otherdeduction = 0;
                                            newrow["OTHER DEDUCTION"] = otherdeduction;
                                        }
                                    }
                                    tdsdeduction = 0;
                                    if (dttdsdeduction.Rows.Count > 0)
                                    {
                                        DataRow[] drprevtds = dtprevtds.Select("employecode='" + dr["employee_num"].ToString() + "'");
                                        if (drprevtds.Length > 0)
                                        {
                                            foreach (DataRow drprevtdsdeduction in dtprevtds.Select("employecode='" + dr["employee_num"].ToString() + "'"))
                                            {
                                                double amount = 0;
                                                double.TryParse(drprevtdsdeduction["tdsdeduction"].ToString(), out amount);
                                                if (amount == 0)
                                                {
                                                }
                                                else
                                                {
                                                    newrow["Tds DEDUCTION"] = amount.ToString();
                                                    string st = amount.ToString();
                                                    tdsdeduction = Convert.ToDouble(amount);
                                                    tdsdeduction = Math.Round(amount, 0);
                                                }
                                            }
                                        }
                                        else
                                        {

                                            DataRow[] drr = dttdsdeduction.Select("employee_num='" + dr["employee_num"].ToString() + "'");
                                            if (drr.Length > 0)
                                            {
                                                foreach (DataRow drtdsdeduction in dttdsdeduction.Select("employee_num='" + dr["employee_num"].ToString() + "'"))
                                                {
                                                    double amount = 0;
                                                    double.TryParse(drtdsdeduction["tdsamount"].ToString(), out amount);
                                                    if (amount == 0)
                                                    {
                                                    }
                                                    else
                                                    {
                                                        newrow["Tds DEDUCTION"] = amount.ToString();
                                                        string st = amount.ToString();
                                                        tdsdeduction = Convert.ToDouble(amount);
                                                        tdsdeduction = Math.Round(amount, 0);
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                tdsdeduction = 0;
                                                if (tdsdeduction == 0)
                                                {
                                                }
                                                else
                                                {

                                                    newrow["Tds DEDUCTION"] = tdsdeduction;
                                                }
                                            }
                                        }
                                    }
                                    else
                                    {
                                        tdsdeduction = 0;
                                        if (tdsdeduction == 0)
                                        {
                                        }
                                        else
                                        {
                                            newrow["Tds DEDUCTION"] = tdsdeduction;
                                        }
                                    }
                                    newrow["TOTAL DEDUCTIONS"] = Math.Round(profitionaltax + canteendeduction + salaryadvance + loan + mobilededuction + providentfund + esi + medicliamdeduction + otherdeduction + tdsdeduction);
                                    totaldeduction = Math.Round(profitionaltax + canteendeduction + salaryadvance + loan + mobilededuction + providentfund + esi + medicliamdeduction + otherdeduction + tdsdeduction);
                                    double netpay = 0;
                                    netpay = Math.Round(totalearnings - totaldeduction);
                                    netpay = Math.Round(netpay, 0);
                                    newrow["NET PAY"] = Math.Round(netpay, 0);
                                    Report.Rows.Add(newrow);
                                    //total += netpay;
                                    //netpay = 0;
                                }
                            }
                        }
                        else if (branchtype == "Driver")
                        {
                            double totalearnings = 0;
                            Report.Columns.Add("SNO");
                            //Report.Columns.Add("Employee Code");
                            //Report.Columns.Add("Name");
                            //Report.Columns.Add("DESIGNATION");
                            //Report.Columns.Add("Rate/Day");
                            //Report.Columns.Add("Batta/Day");
                            //Report.Columns.Add("Work Days");
                            //Report.Columns.Add("Payable Days");
                            //Report.Columns.Add("GROSS Earnings").DataType = typeof(double);
                            //Report.Columns.Add("PT").DataType = typeof(double);
                            //Report.Columns.Add("SALARY ADVANCE").DataType = typeof(double);
                            //Report.Columns.Add("Loan").DataType = typeof(double);

                            //Report.Columns.Add("OTHER DEDUCTIONS").DataType = typeof(double);
                            //Report.Columns.Add("TOTAL DEDUCTIONS").DataType = typeof(double);
                            //Report.Columns.Add("NET PAY").DataType = typeof(double);
                            //Report.Columns.Add("Bank Acc NO");
                            //Report.Columns.Add("IFSC Code");
                            //int branchid = Convert.ToInt32(ddlbranch.SelectedItem.Value);
                            //string employee_type = ddlemptype.SelectedItem.Value;
                            cmd = new SqlCommand("SELECT employedetails.pfeligible, employedetails.pfdate, employedetails.esidate, employebankdetails.ifsccode, employedetails.esieligible, monthly_attendance.month,monthly_attendance.year, employedetails.employee_type, employedetails.empid, employedetails.employee_num, employedetails.fullname,designation.designation, employebankdetails.accountno, branchmaster.statename, employedetails.employee_dept, departments.department,salaryappraisals.gross, salaryappraisals.erningbasic, salaryappraisals.hra, salaryappraisals.profitionaltax, salaryappraisals.esi, salaryappraisals.providentfund,salaryappraisals.conveyance, salaryappraisals.medicalerning, salaryappraisals.washingallowance, salaryappraisals.travelconveyance, salaryappraisals.salaryperyear FROM employedetails INNER JOIN designation ON employedetails.designationid = designation.designationid INNER JOIN monthly_attendance ON employedetails.empid = monthly_attendance.empid INNER JOIN branchmaster ON employedetails.branchid = branchmaster.branchid INNER JOIN departments ON employedetails.employee_dept = departments.deptid INNER JOIN salaryappraisals ON employedetails.empid = salaryappraisals.empid LEFT OUTER JOIN employebankdetails ON employedetails.empid = employebankdetails.employeid WHERE (employedetails.status = 'No') AND (monthly_attendance.month = @month) AND (monthly_attendance.year = @year) AND (employedetails.employee_type ='Driver' OR employedetails.employee_type='Cleaner' ) AND (employedetails.branchid = @branchid) AND (salaryappraisals.endingdate IS NULL) AND (salaryappraisals.startingdate <= @d1) OR (employedetails.status = 'No') AND (monthly_attendance.month = @month) AND (monthly_attendance.year = @year) AND (employedetails.employee_type ='Driver' OR employedetails.employee_type='Cleaner' ) AND (employedetails.branchid = @branchid) AND (salaryappraisals.endingdate > @d1) AND (salaryappraisals.startingdate <= @d1)");
                            //paystrcture
                            //cmd = new SqlCommand("SELECT employedetails.pfeligible, employedetails.pfdate, employedetails.esidate, employebankdetails.ifsccode, employedetails.esieligible, monthly_attendance.month,  monthly_attendance.year, employedetails.employee_type, employedetails.empid, employedetails.employee_num, pay_structure.erningbasic, pay_structure.esi,  pay_structure.providentfund, employedetails.fullname, designation.designation, pay_structure.gross, pay_structure.hra, pay_structure.conveyance,  pay_structure.washingallowance, pay_structure.medicalerning, pay_structure.profitionaltax, employebankdetails.accountno, branchmaster.statename,  employedetails.employee_dept, departments.department FROM employedetails INNER JOIN designation ON employedetails.designationid = designation.designationid INNER JOIN monthly_attendance ON employedetails.empid = monthly_attendance.empid INNER JOIN pay_structure ON employedetails.empid = pay_structure.empid INNER JOIN branchmaster ON employedetails.branchid = branchmaster.branchid INNER JOIN departments ON employedetails.employee_dept = departments.deptid LEFT OUTER JOIN employebankdetails ON employedetails.empid = employebankdetails.employeid WHERE(employedetails.branchid = @branchid) AND (employedetails.status = 'No') AND (employedetails.employee_type = @emptype) AND  (monthly_attendance.month = @month) AND (monthly_attendance.year = @year)");
                            cmd.Parameters.Add("@branchid", branchid);
                            cmd.Parameters.Add("@month", Month);
                            cmd.Parameters.Add("@year", Year);
                            //cmd.Parameters.Add("@emptype", employee_type);
                            cmd.Parameters.Add("@d1", date);
                            DataTable dtsalary = vdm.SelectQuery(cmd).Tables[0];
                            cmd = new SqlCommand("SELECT monthly_attendance.sno, monthly_attendance.empid,monthly_attendance.clorwo, monthly_attendance.doe, monthly_attendance.month, monthly_attendance.year, monthly_attendance.otdays, employedetails.employee_num, branchmaster.fromdate, branchmaster.todate, monthly_attendance.lop, branchmaster.branchid, monthly_attendance.numberofworkingdays FROM  monthly_attendance INNER JOIN  employedetails ON monthly_attendance.empid = employedetails.empid INNER JOIN branchmaster ON employedetails.branchid = branchmaster.branchid WHERE  (monthly_attendance.month = @month) AND (monthly_attendance.year = @year) AND (employedetails.branchid = @branchid)");
                            //cmd = new SqlCommand("SELECT monthly_attendance.sno, monthly_attendance.empid, monthly_attendance.doe, monthly_attendance.month, monthly_attendance.year, monthly_attendance.otdays, employedetails.employee_num, branchmaster.fromdate, branchmaster.todate, monthly_workingdays.numberofworkingdays, monthly_attendance.lop,  branchmaster.branchid FROM  monthly_attendance INNER JOIN employedetails ON monthly_attendance.empid = employedetails.empid INNER JOIN branchmaster ON employedetails.branchid = branchmaster.branchid INNER JOIN monthly_workingdays ON branchmaster.branchid = monthly_workingdays.branchid WHERE (monthly_attendance.month = @month) AND (monthly_attendance.year = @year) AND (employedetails.branchid=@branchid)");
                            cmd.Parameters.Add("@month", Month);
                            cmd.Parameters.Add("@year", Year);
                            cmd.Parameters.Add("@branchid", branchid);
                            DataTable dtattendence = vdm.SelectQuery(cmd).Tables[0];
                            cmd = new SqlCommand("SELECT  employedetails.employee_num, salaryadvance.amount, salaryadvance.monthofpaid, employedetails.fullname, salaryadvance.empid FROM   salaryadvance INNER JOIN  employedetails ON salaryadvance.empid = employedetails.empid where (employedetails.branchid=@branchid) AND (salaryadvance.month = @month) AND (salaryadvance.year = @year)");
                            cmd.Parameters.Add("@month", Month);
                            cmd.Parameters.Add("@year", Year);
                            cmd.Parameters.Add("@branchid", branchid);
                            DataTable dtsa = vdm.SelectQuery(cmd).Tables[0];
                            cmd = new SqlCommand("SELECT employedetails.employee_num, loan_request.loanemimonth, loan_request.months, loan_request.startdate FROM employedetails INNER JOIN  loan_request ON employedetails.empid = loan_request.empid where (employedetails.branchid=@branchid) AND (loan_request.month = @month) AND (loan_request.year = @year)");
                            cmd.Parameters.Add("@month", Month);
                            cmd.Parameters.Add("@year", Year);
                            cmd.Parameters.Add("@branchid", branchid);
                            DataTable dtloan = vdm.SelectQuery(cmd).Tables[0];
                            cmd = new SqlCommand("SELECT  employedetails.employee_num, mobile_deduction.deductionamount, employedetails.fullname, employedetails.empid FROM  mobile_deduction INNER JOIN employedetails ON mobile_deduction.employee_num = employedetails.employee_num   where (employedetails.branchid=@branchid) AND (mobile_deduction.month = @month) AND (mobile_deduction.year = @year)");
                            cmd.Parameters.Add("@branchid", branchid);
                            cmd.Parameters.Add("@month", Month);
                            cmd.Parameters.Add("@year", Year);
                            DataTable dtmobile = vdm.SelectQuery(cmd).Tables[0];
                            cmd = new SqlCommand("SELECT  employedetails.employee_num, canteendeductions.amount, employedetails.fullname, employedetails.empid FROM  canteendeductions INNER JOIN employedetails ON canteendeductions.employee_num = employedetails.employee_num where (employedetails.branchid=@branchid) AND (canteendeductions.month = @month) AND (canteendeductions.year = @year)");
                            cmd.Parameters.Add("@branchid", branchid);
                            cmd.Parameters.Add("@month", Month);
                            cmd.Parameters.Add("@year", Year);
                            DataTable dtcanteen = vdm.SelectQuery(cmd).Tables[0];
                            cmd = new SqlCommand("SELECT employedetails.employee_num, employedetails.fullname, employedetails.empid, otherdeduction.otherdeductionamount FROM employedetails INNER JOIN otherdeduction ON employedetails.empid = otherdeduction.empid WHERE (employedetails.branchid = @branchid) AND (otherdeduction.month = @month) AND (otherdeduction.year = @year)");
                            cmd.Parameters.Add("@branchid", branchid);
                            cmd.Parameters.Add("@month", Month);
                            cmd.Parameters.Add("@year", Year);
                            DataTable dtotherdeduction = vdm.SelectQuery(cmd).Tables[0];
                            if (dtsalary.Rows.Count > 0)
                            {
                                var i = 1;
                                foreach (DataRow dr in dtsalary.Rows)
                                {
                                    double totalpresentdays = 0;
                                    double profitionaltax = 0;
                                    double salaryadvance = 0;
                                    double loan = 0;
                                    double canteendeduction = 0;
                                    double mobilededuction = 0;
                                    double totaldeduction;
                                    double numberofworkingdays = 0;
                                    //double totalearnings;
                                    double daysinmonth = 0;
                                    string statename = "";
                                    DataRow newrow = Report.NewRow();
                                    newrow["SNO"] = i++.ToString();
                                    //newrow["Employeeid"] = dr["empid"].ToString();
                                    newrow["Employee Code"] = dr["employee_num"].ToString();
                                    newrow["Name"] = dr["fullname"].ToString();
                                    newrow["DESIGNATION"] = (dr["department"].ToString() + " " + dr["designation"].ToString());
                                    //newrow["Department"] = dr["department"].ToString();
                                    double BASIC = Convert.ToDouble(dr["erningbasic"].ToString());
                                    statename = dr["statename"].ToString();
                                    //newrow["PT"] = dr["profitionaltax"].ToString();
                                    double rateper = Convert.ToDouble(dr["gross"].ToString());
                                    //profitionaltax = Convert.ToDouble(dr["profitionaltax"].ToString());
                                    newrow["Bank Acc NO"] = dr["accountno"].ToString();
                                    newrow["IFSC Code"] = dr["ifsccode"].ToString();
                                    //Report.Rows.Add(newrow);
                                    if (dtattendence.Rows.Count > 0)
                                    {
                                        foreach (DataRow dra in dtattendence.Select("employee_num='" + dr["employee_num"].ToString() + "'"))
                                        {

                                            double.TryParse(dra["numberofworkingdays"].ToString(), out numberofworkingdays);
                                            double clorwo = 0;
                                            double.TryParse(dra["clorwo"].ToString(), out clorwo);
                                            daysinmonth = numberofworkingdays + clorwo;
                                            newrow["DAYS MONTH"] = daysinmonth.ToString();
                                            //double rateperday = 0;
                                            double paydays = 0;
                                            double lop = 0;
                                            double.TryParse(dra["lop"].ToString(), out lop);
                                            paydays = daysinmonth - lop;
                                            double holidays = 0;
                                            holidays = daysinmonth - numberofworkingdays;
                                            newrow["Payable Days"] = paydays;
                                            totalpresentdays = holidays + paydays;
                                            //double perdaybasic = BASIC / daysinmonth;
                                            double rate = Convert.ToDouble(dr["gross"].ToString());
                                            newrow["Rate/Day"] = rateper;
                                            double batta = 80;
                                            string empnumber = dr["employee_num"].ToString();
                                            if (empnumber == "SVDS080135" || empnumber == "SVDS100095")
                                            {
                                                newrow["Batta/Day"] = "0";
                                                batta = 0;
                                            }
                                            else
                                            {
                                                newrow["Batta/Day"] = batta;
                                            }
                                            double rateperday = rate + batta;
                                            totalearnings = rateperday * paydays;
                                            double totalpdays = numberofworkingdays - lop;
                                            totalearnings = Math.Round(totalearnings);
                                            newrow["GROSS Earnings"] = totalearnings;
                                            if (statename == "AndraPrdesh")
                                            {
                                                if (totalearnings > 1000 && totalearnings <= 15000)
                                                {
                                                    profitionaltax = 0;
                                                }
                                                else if (totalearnings >= 15001 && totalearnings <= 20000)
                                                {
                                                    profitionaltax = 150;
                                                }
                                                else if (totalearnings >= 20001)
                                                {
                                                    profitionaltax = 200;
                                                }
                                            }
                                            if (statename == "Tamilnadu")
                                            {
                                                if (totalearnings < 7000)
                                                {
                                                    profitionaltax = 0;
                                                }
                                                else if (totalearnings >= 7001 && totalearnings <= 10000)
                                                {
                                                    profitionaltax = 115;
                                                }
                                                else if (totalearnings >= 10001 && totalearnings <= 11000)
                                                {
                                                    profitionaltax = 171;
                                                }
                                                else if (totalearnings >= 11001 && totalearnings <= 12000)
                                                {
                                                    profitionaltax = 171;
                                                }
                                                else if (totalearnings >= 12001)
                                                {
                                                    profitionaltax = 208;
                                                }
                                            }
                                            if (statename == "karnataka")
                                            {
                                                if (totalearnings <= 15000 && totalearnings <= 15001)
                                                {
                                                    profitionaltax = 0;
                                                }
                                                else if (totalearnings >= 15001)
                                                {
                                                    profitionaltax = 200;
                                                }
                                            }
                                            newrow["PT"] = profitionaltax;
                                        }
                                    }



                                    if (dtsa.Rows.Count > 0)
                                    {
                                        DataRow[] drr = dtsa.Select("employee_num='" + dr["employee_num"].ToString() + "'");
                                        if (drr.Length > 0)
                                        {
                                            foreach (DataRow drsa in dtsa.Select("employee_num='" + dr["employee_num"].ToString() + "'"))
                                            {
                                                double amount = 0;
                                                double.TryParse(drsa["amount"].ToString(), out amount);
                                                newrow["SALARY ADVANCE"] = amount.ToString();
                                                salaryadvance = Convert.ToDouble(amount);
                                                salaryadvance = Math.Round(amount, 0);
                                            }
                                        }
                                        else
                                        {
                                            salaryadvance = 0;
                                            newrow["SALARY ADVANCE"] = salaryadvance;
                                        }
                                    }
                                    if (dtloan.Rows.Count > 0)
                                    {
                                        DataRow[] drr = dtloan.Select("employee_num='" + dr["employee_num"].ToString() + "'");
                                        if (drr.Length > 0)
                                        {
                                            foreach (DataRow drloan in dtloan.Select("employee_num='" + dr["employee_num"].ToString() + "'"))
                                            {
                                                double loanemimonth = 0;
                                                double.TryParse(drloan["loanemimonth"].ToString(), out loanemimonth);
                                                newrow["Loan"] = loanemimonth.ToString();
                                                loan = Convert.ToDouble(loanemimonth);
                                                loan = Math.Round(loanemimonth, 0);
                                            }
                                        }
                                        else
                                        {
                                            loan = 0;
                                            newrow["Loan"] = loan;
                                        }
                                    }
                                    mobilededuction = 0;
                                    if (dtmobile.Rows.Count > 0)
                                    {
                                        DataRow[] drr = dtmobile.Select("employee_num='" + dr["employee_num"].ToString() + "'");
                                        if (drr.Length > 0)
                                        {
                                            foreach (DataRow drmobile in dtmobile.Select("employee_num='" + dr["employee_num"].ToString() + "'"))
                                            {
                                                double deductionamount = 0;
                                                double.TryParse(drmobile["deductionamount"].ToString(), out deductionamount);
                                                newrow["MOBILE DEDUCTION"] = deductionamount.ToString();
                                                string st = deductionamount.ToString();
                                                if (st == "0.0")
                                                {
                                                    mobilededuction = 0;
                                                    newrow["MOBILE DEDUCTION"] = mobilededuction;

                                                }
                                                else
                                                {
                                                    mobilededuction = Convert.ToDouble(deductionamount);
                                                    mobilededuction = Math.Round(deductionamount, 0);
                                                }
                                            }
                                        }
                                        else
                                        {
                                            mobilededuction = 0;
                                            newrow["MOBILE DEDUCTION"] = mobilededuction;
                                        }
                                    }
                                    canteendeduction = 0;
                                    if (dtcanteen.Rows.Count > 0)
                                    {
                                        DataRow[] drr = dtcanteen.Select("employee_num='" + dr["employee_num"].ToString() + "'");
                                        if (drr.Length > 0)
                                        {
                                            foreach (DataRow drcanteen in dtcanteen.Select("employee_num='" + dr["employee_num"].ToString() + "'"))
                                            {
                                                double deductionamount = 0;
                                                double.TryParse(drcanteen["amount"].ToString(), out deductionamount);
                                                newrow["CANTEEN DEDUCTION"] = deductionamount.ToString();
                                                string st = deductionamount.ToString();
                                                canteendeduction = Convert.ToDouble(deductionamount);
                                                canteendeduction = Math.Round(deductionamount, 0);
                                            }
                                        }
                                        else
                                        {
                                            canteendeduction = 0;
                                            newrow["CANTEEN DEDUCTION"] = canteendeduction;
                                        }
                                    }
                                    double otherdeduction = 0;
                                    if (dtotherdeduction.Rows.Count > 0)
                                    {
                                        DataRow[] drr = dtotherdeduction.Select("employee_num='" + dr["employee_num"].ToString() + "'");
                                        if (drr.Length > 0)
                                        {
                                            foreach (DataRow drotherdeduction in dtotherdeduction.Select("employee_num='" + dr["employee_num"].ToString() + "'"))
                                            {
                                                double amount = 0;
                                                double.TryParse(drotherdeduction["otherdeductionamount"].ToString(), out amount);
                                                newrow["OTHER DEDUCTIONS"] = amount.ToString();
                                                string st = amount.ToString();
                                                otherdeduction = Convert.ToDouble(amount);
                                                otherdeduction = Math.Round(amount, 0);
                                            }
                                        }
                                        else
                                        {
                                            otherdeduction = 0;
                                            newrow["OTHER DEDUCTIONS"] = otherdeduction;
                                        }
                                    }
                                    else
                                    {
                                    }
                                    newrow["TOTAL DEDUCTIONS"] = Math.Round(profitionaltax + canteendeduction + salaryadvance + loan + mobilededuction + otherdeduction);
                                    totaldeduction = Math.Round(profitionaltax + canteendeduction + salaryadvance + loan + mobilededuction + otherdeduction);
                                    double netpay = 0;
                                    netpay = Math.Round(totalearnings - totaldeduction);
                                    netpay = Math.Round(netpay, 0);
                                    string stramount = "";
                                    stramount = netpay.ToString();
                                    if (stramount == "NaN" || stramount == "" || numberofworkingdays == 0)
                                    {
                                    }
                                    else
                                    {
                                        newrow["NET PAY"] = Math.Round(netpay, 0);
                                        Report.Rows.Add(newrow);
                                    }
                                }
                            }
                        }
                        DataRow newTotal = Report.NewRow();
                        newTotal["DESIGNATION"] = "Total";
                        double val = 0.0;
                        foreach (DataColumn dc in Report.Columns)
                        {
                            if (dc.DataType == typeof(Double))
                            {
                                val = 0.0;
                                double.TryParse(Report.Compute("sum([" + dc.ToString() + "])", "[" + dc.ToString() + "]<>'0'").ToString(), out val);
                                newTotal[dc.ToString()] = val;
                            }
                        }

                        Report.Rows.Add(newTotal);
                        string designation = "Total";
                        foreach (DataRow dreport in Report.Select("DESIGNATION='" + designation + "'"))
                        {
                            DataRow nr_sp = dtnew.NewRow();
                            nr_sp["SNO"] = k++.ToString();
                            nr_sp["Month"] = Month;
                            nr_sp["loacation"] = branchname;
                            nr_sp["Amount"] = dreport["NET PAY"].ToString();
                            nr_sp["GrossAmount"] = dreport["GROSS"].ToString();
                            nr_sp["Rate/Day"] = dreport["Rate/Day"].ToString();
                            nr_sp["Batta/Day"] = dreport["Batta/Day"].ToString();
                            nr_sp["PT"] = dreport["PT"].ToString();
                            nr_sp["PF"] = dreport["PF"].ToString();
                            nr_sp["TDS"] = dreport["Tds DEDUCTION"].ToString();
                            nr_sp["ESI"] = dreport["ESI"].ToString();
                            nr_sp["Canteen"] = dreport["CANTEEN DEDUCTION"].ToString();
                            nr_sp["Mobilededuction"] = dreport["MOBILE DEDUCTION"].ToString();
                            nr_sp["Loan"] = dreport["Loan"].ToString();
                            nr_sp["Salaryadv"] = dreport["SALARY ADVANCE"].ToString();
                            nr_sp["OTHER DEDUCTION"] = dreport["OTHER DEDUCTION"].ToString();
                            nr_sp["TOTAL DEDUCTIONS"] = dreport["TOTAL DEDUCTIONS"].ToString();
                            nr_sp["GROSS Earnings"] = dreport["GROSS Earnings"].ToString();
                            nr_sp["CONVEYANCE"] = dreport["CONVEYANCE"].ToString();
                            nr_sp["FIXEDCONVEYANCE"] = dreport["FIXEDCONVEYANCE"].ToString();
                            nr_sp["ShiftAllowance"] = dreport["SHIFT ALLOWANCE"].ToString();
                            nr_sp["Extrapay"] = dreport["Extra Pay"].ToString();
                            dtnew.Rows.Add(nr_sp);
                        }
                    }


                    DataRow newTotal3 = dtnew.NewRow();
                    newTotal3["loacation"] = "Total";
                    double val1 = 0.0;
                    foreach (DataColumn dc1 in dtnew.Columns)
                    {

                        if (dc1.DataType == typeof(Double))
                        {
                            val1 = 0.0;
                            double.TryParse(dtnew.Compute("sum([" + dc1.ToString() + "])", "[" + dc1.ToString() + "]<>'0'").ToString(), out val1);
                            newTotal3[dc1.ToString()] = val1;
                        }

                    }
                    dtnew.Rows.Add(newTotal3);
                    foreach (DataRow dr in dtnew.Rows)
                    {
                        Summaryvalues getbrcdetails = new Summaryvalues();
                        getbrcdetails.branchname = dr["loacation"].ToString();
                        //getbrcdetails.Employeetype = dr["employeetype"].ToString();
                        getbrcdetails.month = dr["Month"].ToString();
                        getbrcdetails.TotalAmount = dr["Amount"].ToString();
                        getbrcdetails.TotalgrossAmount = dr["GrossAmount"].ToString();
                        getbrcdetails.RateDay = dr["Rate/Day"].ToString();
                        getbrcdetails.BettaDay = dr["Batta/Day"].ToString();
                        getbrcdetails.PT = dr["PT"].ToString();
                        getbrcdetails.PF = dr["PF"].ToString();
                        getbrcdetails.ESI = dr["ESI"].ToString();
                        getbrcdetails.Salaryadv = dr["Salaryadv"].ToString();
                        getbrcdetails.loan = dr["Loan"].ToString();
                        getbrcdetails.Canteen = dr["Canteen"].ToString();
                        getbrcdetails.Mobilededuction = dr["Mobilededuction"].ToString();
                        getbrcdetails.GROSSEarnings = dr["GROSS Earnings"].ToString();
                        getbrcdetails.TDS = dr["TDS"].ToString();
                        getbrcdetails.Otherdeductions = dr["OTHER DEDUCTION"].ToString();
                        getbrcdetails.totaldeductions = dr["TOTAL DEDUCTIONS"].ToString();
                        getbrcdetails.CONVEYANCE = dr["CONVEYANCE"].ToString();
                        getbrcdetails.FIXEDCONVEYANCE = dr["FIXEDCONVEYANCE"].ToString();
                        getbrcdetails.Extrapay = dr["Extrapay"].ToString();
                        getbrcdetails.shift = dr["ShiftAllowance"].ToString();
                        //getbrcdetails.filename = filename;
                        getbrcdetails.title = Title;
                        getbrcdetails.address = Address;
                        summarysalaryDetalis.Add(getbrcdetails);
                    }
                    Summaryvalues GetPieValues = new Summaryvalues();
                    GetPieValues.summarysalaryDetalis = summarysalaryDetalis;
                    //lsummarysalaryValueslist.Add(GetPieValues);
                    //string errresponse = GetJson(lsummarysalaryValueslist);
                    //context.Response.Write(errresponse);
                    // grdReports.DataSource = dtnew;
                    //grdReports.DataBind();
                    //Session["xportdata"] = dtnew;
                    //hidepanel.Visible = true;
                }
            }
            // }
            //}
            double totalextrapay = 0;
            mainbranch = context.Session["mainbranch"].ToString();
            cmd = new SqlCommand(" SELECT bankname, sno FROM bankmaster");
            cmd.Parameters.Add("@m", mainbranch);
            DataTable dtbank = vdm.SelectQuery(cmd).Tables[0];
            //if (branchtype == "Driver")
            //{
            //    cmd = new SqlCommand(" SELECT   branchmaster.branchid, branchmaster.branchname, branchmaster.branchtype, branchmaster.company_code, employedetails.employee_type FROM    branchmaster INNER JOIN branchmapping ON branchmaster.branchid = branchmapping.subbranch INNER JOIN employedetails ON branchmaster.branchid = employedetails.branchid WHERE        (branchmapping.mainbranch = @m) AND (employedetails.employee_type = 'Driver' OR  employedetails.employee_type = 'Cleaner') GROUP BY branchmaster.branchid, branchmaster.branchname, branchmaster.branchtype, branchmaster.company_code, employedetails.employee_type ORDER BY branchmaster.branchid");
            //    cmd.Parameters.Add("@m", mainbranch);
            //}
            //DataTable dtbranch1 = vdm.SelectQuery(cmd).Tables[0];
            //string branchid1 = dtbranch1.Rows[0]["branchid"].ToString();
            DataTable dtbanknew = new DataTable();
            dtbanknew.Columns.Add("SNO");
            dtbanknew.Columns.Add("MOnth");
            dtbanknew.Columns.Add("Bank Name");
            dtbanknew.Columns.Add("Amount1").DataType = typeof(double);
            if (dtbank.Rows.Count > 0)
            {
                var n = 1;
                foreach (DataRow dtbn in dtbank.Rows)
                {
                    Report1 = new DataTable();
                    Report1.Columns.Add("Location1");
                    Report1.Columns.Add("Employee Code1");
                    Report1.Columns.Add("EmployeeName");
                    Report1.Columns.Add("Bank Acc NO");
                    Report1.Columns.Add("IFSC Code");
                    Report1.Columns.Add("GROSS1").DataType = typeof(double);
                    Report1.Columns.Add("Extra Pay").DataType = typeof(double);
                    Report1.Columns.Add("CONVEYANCE").DataType = typeof(double);
                    Report1.Columns.Add("FIXEDCONVEYANCE").DataType = typeof(double);
                    Report1.Columns.Add("Shift Allowance").DataType = typeof(double);
                    Report1.Columns.Add("NET PAY1").DataType = typeof(double);
                    string bankid = dtbn["sno"].ToString();
                    string bankname = dtbn["bankname"].ToString();
                    if (branchtype == "SalesOffice" || branchtype == "CC" || branchtype == "Plant")
                    {
                        if (branchtype == "Plant")
                        {
                            //cmd = new SqlCommand("SELECT employedetails.pfeligible, employedetails.esieligible, employedetails.empid, employedetails.fullname, employedetails.employee_num, pay_structure.erningbasic, pay_structure.travelconveyance, pay_structure.esi, pay_structure.providentfund, employedetails.fullname AS Expr2, designation.designation, pay_structure.salaryperyear, pay_structure.hra, pay_structure.conveyance, pay_structure.washingallowance, pay_structure.medicalerning, pay_structure.profitionaltax, employebankdetails.accountno, employebankdetails.ifsccode, branchmaster.branchname FROM employedetails INNER JOIN designation ON employedetails.designationid = designation.designationid INNER JOIN pay_structure ON employedetails.empid = pay_structure.empid INNER JOIN branchmapping ON employedetails.branchid = branchmapping.subbranch LEFT OUTER JOIN employebankdetails ON employedetails.empid = employebankdetails.employeid LEFT OUTER JOIN branchmaster ON branchmaster.branchid = employedetails.branchid LEFT OUTER JOIN bankmaster ON bankmaster.sno = employebankdetails.bankid WHERE (branchmaster.branchtype = @branchtype) AND (employebankdetails.bankid = @bankid)  AND  (branchmapping.mainbranch = @m) AND (employedetails.status = 'No') and (employedetails.employee_type = 'Staff' OR employedetails.employee_type = 'Retainers') and (branchmaster.branchid='6')  ORDER BY branchmaster.branchname ");
                            //cmd = new SqlCommand("SELECT employedetails.pfeligible, employedetails.branchid,employedetails.esieligible, employedetails.empid, employedetails.fullname, employedetails.employee_num,employedetails.fullname AS Expr2, designation.designation, employebankdetails.accountno, employebankdetails.ifsccode, branchmaster.branchname, salaryappraisals.gross, salaryappraisals.erningbasic, salaryappraisals.hra, salaryappraisals.profitionaltax, salaryappraisals.esi, salaryappraisals.providentfund,salaryappraisals.conveyance, salaryappraisals.medicalerning, salaryappraisals.washingallowance, salaryappraisals.travelconveyance,salaryappraisals.salaryperyear FROM employedetails INNER JOIN designation ON employedetails.designationid = designation.designationid INNER JOIN branchmapping ON employedetails.branchid = branchmapping.subbranch INNER JOIN salaryappraisals ON employedetails.empid = salaryappraisals.empid LEFT OUTER JOIN employebankdetails ON employedetails.empid = employebankdetails.employeid LEFT OUTER JOIN branchmaster ON branchmaster.branchid = employedetails.branchid LEFT OUTER JOIN bankmaster ON bankmaster.sno = employebankdetails.bankid WHERE (employedetails.branchid='6') AND(branchmaster.branchtype = @branchtype) AND (employebankdetails.bankid = @bankid) AND (branchmapping.mainbranch = @m) AND (employedetails.status = 'No') AND (employedetails.employee_type = 'Staff' OR employedetails.employee_type = 'Retainers') AND (salaryappraisals.endingdate IS NULL) AND (salaryappraisals.startingdate <= @d1) OR (branchmaster.branchtype = @branchtype) AND (employebankdetails.bankid = @bankid)  AND (branchmapping.mainbranch = @m) AND (employedetails.status = 'No') AND (employedetails.employee_type = 'Staff' OR employedetails.employee_type = 'Retainers') AND (salaryappraisals.endingdate > @d1) AND (salaryappraisals.startingdate <= @d1) and (branchmaster.branchid='6') ORDER BY branchmaster.branchname");
                            cmd = new SqlCommand("SELECT        employedetails.pfeligible, employedetails.esieligible, employedetails.empid, employedetails.fullname, employedetails.employee_num, pay_structure.erningbasic, pay_structure.travelconveyance,  pay_structure.esi, pay_structure.providentfund, employedetails.fullname AS Expr2, designation.designation, pay_structure.salaryperyear, pay_structure.hra, pay_structure.conveyance,  pay_structure.washingallowance, pay_structure.medicalerning, pay_structure.profitionaltax, employebankdetails.accountno, employebankdetails.ifsccode, branchmaster.branchname FROM            employedetails INNER JOIN designation ON employedetails.designationid = designation.designationid INNER JOIN  pay_structure ON employedetails.empid = pay_structure.empid INNER JOIN   branchmapping ON employedetails.branchid = branchmapping.subbranch INNER JOIN  salaryappraisals ON employedetails.empid = salaryappraisals.empid LEFT OUTER JOIN employebankdetails ON employedetails.empid = employebankdetails.employeid LEFT OUTER JOIN   branchmaster ON branchmaster.branchid = employedetails.branchid LEFT OUTER JOIN   bankmaster ON bankmaster.sno = employebankdetails.bankid WHERE        (branchmaster.branchtype = @branchtype) AND (employebankdetails.bankid = @bankid) AND (branchmapping.mainbranch = @m) AND (employedetails.status = 'No') AND  (employedetails.employee_type = 'Staff' OR  employedetails.employee_type = 'Retainers') AND (employedetails.branchid = '6') AND (salaryappraisals.endingdate IS NULL) AND (salaryappraisals.startingdate <= @d1) OR (branchmaster.branchtype = @branchtype) AND (employebankdetails.bankid = @bankid) AND (branchmapping.mainbranch = @m) AND (employedetails.status = 'No') AND   (employedetails.employee_type = 'Staff' OR   employedetails.employee_type = 'Retainers') AND (branchmaster.branchid = '6') AND (salaryappraisals.endingdate > @d1) AND (salaryappraisals.startingdate <= @d1) ORDER BY branchmaster.branchname");
                            cmd.Parameters.Add("@m", mainbranch);
                            cmd.Parameters.Add("@bankid", bankid);
                            cmd.Parameters.Add("@branchtype", branchtype);
                            cmd.Parameters.Add("@month", Month);
                            cmd.Parameters.Add("@d1", date);
                            cmd.Parameters.Add("@year", Year);
                        }
                        else
                        {
                            cmd = new SqlCommand("SELECT employedetails.pfeligible, employedetails.esieligible, employedetails.empid, employedetails.fullname, employedetails.employee_num, pay_structure.erningbasic, pay_structure.travelconveyance, pay_structure.esi, pay_structure.providentfund, employedetails.fullname AS Expr2, designation.designation, pay_structure.salaryperyear, pay_structure.hra, pay_structure.conveyance, pay_structure.washingallowance, pay_structure.medicalerning, pay_structure.profitionaltax, employebankdetails.accountno, employebankdetails.ifsccode, branchmaster.branchname FROM employedetails INNER JOIN designation ON employedetails.designationid = designation.designationid INNER JOIN pay_structure ON employedetails.empid = pay_structure.empid INNER JOIN branchmapping ON employedetails.branchid = branchmapping.subbranch LEFT OUTER JOIN employebankdetails ON employedetails.empid = employebankdetails.employeid LEFT OUTER JOIN branchmaster ON branchmaster.branchid = employedetails.branchid LEFT OUTER JOIN bankmaster ON bankmaster.sno = employebankdetails.bankid WHERE (branchmaster.branchtype = @branchtype) AND (employebankdetails.bankid = @bankid)  AND  (branchmapping.mainbranch = @m) AND (employedetails.status = 'No') and (employedetails.employee_type = 'Staff')  ORDER BY branchmaster.branchname ");
                            cmd.Parameters.Add("@m", mainbranch);
                            cmd.Parameters.Add("@bankid", bankid);
                            cmd.Parameters.Add("@branchtype", branchtype);
                            cmd.Parameters.Add("@month", Month);
                            cmd.Parameters.Add("@year", Year);
                        }
                        DataTable dtsalary1 = vdm.SelectQuery(cmd).Tables[0];

                        cmd = new SqlCommand("SELECT monthly_attendance.sno, monthly_attendance.empid,monthly_attendance.clorwo, monthly_attendance.doe, monthly_attendance.month, monthly_attendance.year, monthly_attendance.otdays, monthly_attendance.extradays, employedetails.employee_num, branchmaster.fromdate,branchmaster.night_allowance,monthly_attendance.night_days, branchmaster.todate, monthly_attendance.lop, branchmaster.branchid, monthly_attendance.numberofworkingdays FROM  monthly_attendance INNER JOIN  employedetails ON monthly_attendance.empid = employedetails.empid INNER JOIN branchmaster ON employedetails.branchid = branchmaster.branchid WHERE  (monthly_attendance.month = @month) AND (monthly_attendance.year = @year)  ");
                        cmd.Parameters.Add("@month", Month);
                        cmd.Parameters.Add("@year", Year);


                        DataTable dtattendence1 = vdm.SelectQuery(cmd).Tables[0];

                        cmd = new SqlCommand("SELECT  employedetails.employee_num, salaryadvance.amount, salaryadvance.monthofpaid, employedetails.fullname, salaryadvance.empid FROM   salaryadvance INNER JOIN  employedetails ON salaryadvance.empid = employedetails.empid where  (salaryadvance.month = @month) AND (salaryadvance.year = @year)");
                        cmd.Parameters.Add("@month", Month);
                        cmd.Parameters.Add("@year", Year);

                        DataTable dtsa1 = vdm.SelectQuery(cmd).Tables[0];

                        cmd = new SqlCommand("SELECT employedetails.employee_num, loan_request.loanemimonth, loan_request.months, loan_request.startdate FROM employedetails INNER JOIN  loan_request ON employedetails.empid = loan_request.empid where  (loan_request.month = @month) AND (loan_request.year = @year)");
                        cmd.Parameters.Add("@month", Month);
                        cmd.Parameters.Add("@year", Year);

                        DataTable dtloan1 = vdm.SelectQuery(cmd).Tables[0];

                        cmd = new SqlCommand("SELECT  employedetails.employee_num, mobile_deduction.deductionamount, employedetails.fullname, employedetails.empid FROM  mobile_deduction INNER JOIN employedetails ON mobile_deduction.employee_num = employedetails.employee_num   where  (mobile_deduction.month = @month) AND (mobile_deduction.year = @year)");
                        cmd.Parameters.Add("@month", Month);
                        cmd.Parameters.Add("@year", Year);

                        DataTable dtmobile1 = vdm.SelectQuery(cmd).Tables[0];

                        cmd = new SqlCommand("SELECT  employedetails.employee_num, canteendeductions.amount, employedetails.fullname, employedetails.empid FROM  canteendeductions INNER JOIN employedetails ON canteendeductions.employee_num = employedetails.employee_num where  (canteendeductions.month = @month) AND (canteendeductions.year = @year)");
                        cmd.Parameters.Add("@month", Month);
                        cmd.Parameters.Add("@year", Year);

                        DataTable dtcanteen1 = vdm.SelectQuery(cmd).Tables[0];

                        cmd = new SqlCommand("SELECT employedetails.employee_num, employedetails.fullname, employedetails.empid, mediclaimdeduction.medicliamamount FROM employedetails INNER JOIN mediclaimdeduction ON employedetails.empid = mediclaimdeduction.empid");
                        //cmd.Parameters.Add("@month", mymonth);
                        //cmd.Parameters.Add("@year", str[2]);

                        DataTable dtmedicliam1 = vdm.SelectQuery(cmd).Tables[0];

                        cmd = new SqlCommand("SELECT employedetails.employee_num, employedetails.fullname, employedetails.empid, otherdeduction.otherdeductionamount FROM employedetails INNER JOIN otherdeduction ON employedetails.empid = otherdeduction.empid WHERE  (otherdeduction.month = @month) AND (otherdeduction.year = @year)");
                        cmd.Parameters.Add("@month", Month);
                        cmd.Parameters.Add("@year", Year);

                        DataTable dtotherdeduction1 = vdm.SelectQuery(cmd).Tables[0];

                        cmd = new SqlCommand("SELECT employedetails.employee_num, employedetails.fullname, employedetails.empid, tds_deduction.tdsamount FROM employedetails INNER JOIN tds_deduction ON employedetails.empid = tds_deduction.empid ");
                        //cmd.Parameters.Add("@month", mymonth);
                        //cmd.Parameters.Add("@year", str[2]);

                        DataTable dttdsdeduction = vdm.SelectQuery(cmd).Tables[0];
                        if (dtsalary1.Rows.Count > 0)
                        {
                            //var i = 1;
                            foreach (DataRow dr in dtsalary1.Rows)
                            {
                                double otamount = 0;
                                double otvalue = 0;
                                double ptax = 0;
                                double totalpresentdays = 0;
                                double profitionaltax = 0;
                                double salaryadvance = 0;
                                double otherdeduction = 0;
                                double tdsdeduction = 0;
                                double loan = 0;
                                double medicliamdeduction = 0;
                                double canteendeduction = 0;
                                double mobilededuction = 0;
                                double totaldeduction;
                                double totalearnings;
                                double providentfund = 0;
                                double medicalerning = 0;
                                double washingallowance = 0;
                                double convenyance = 0;
                                double esi = 0;
                                double daysinmonth = 0;
                                double loseamount = 0;
                                double loseofconviyance = 0;
                                double loseofwashing = 0;
                                double loseofmedical = 0;
                                double losofprofitionaltax = 0;
                                DataRow newrow = Report1.NewRow();
                                //newrow["Location1"] = dr["branchname"].ToString();
                                newrow["Employee Code1"] = dr["employee_num"].ToString();
                                newrow["EmployeeName"] = dr["fullname"].ToString();
                                double peryanam = Convert.ToDouble(dr["salaryperyear"].ToString());
                                newrow["GROSS1"] = peryanam / 12;
                                double permonth = peryanam / 12;
                                double HRA = Convert.ToDouble(dr["hra"].ToString());
                                double BASIC = Convert.ToDouble(dr["erningbasic"].ToString());
                                convenyance = Convert.ToDouble(dr["conveyance"].ToString());
                                profitionaltax = Convert.ToDouble(dr["profitionaltax"].ToString());
                                medicalerning = Convert.ToDouble(dr["medicalerning"].ToString());
                                washingallowance = Convert.ToDouble(dr["washingallowance"].ToString());
                                double travelconveyance = 0;
                                double shiftamount = 0;

                                if (dtattendence1.Rows.Count > 0)
                                {
                                    foreach (DataRow dra in dtattendence1.Select("employee_num='" + dr["employee_num"].ToString() + "'"))
                                    {

                                        double numberofworkingdays = 0;
                                        double.TryParse(dra["numberofworkingdays"].ToString(), out numberofworkingdays);
                                        double clorwo = 0;
                                        double.TryParse(dra["clorwo"].ToString(), out clorwo);
                                        daysinmonth = numberofworkingdays + clorwo;
                                        double paydays = 0;
                                        double lop = 0;
                                        //double otvalue = 0;

                                        double.TryParse(dra["lop"].ToString(), out lop);
                                        paydays = numberofworkingdays - lop;
                                        double holidays = 0;
                                        holidays = daysinmonth - numberofworkingdays;
                                        double paybledays = 0;
                                        paybledays = numberofworkingdays + clorwo;
                                        totalpresentdays = holidays + paydays;
                                        double totalpdays = permonth / daysinmonth;
                                        loseamount = lop * totalpdays;
                                        double perdayconveyance = convenyance / daysinmonth;
                                        loseofconviyance = lop * perdayconveyance;
                                        double perdaywashing = washingallowance / daysinmonth;
                                        loseofwashing = lop * perdaywashing;
                                        double perdaymedical = medicalerning / daysinmonth;
                                        loseofmedical = lop * perdaymedical;
                                        double perdaybasic = BASIC / daysinmonth;
                                        string ot = dra["extradays"].ToString();
                                        double perdayamt = permonth / daysinmonth;

                                        double perdaprofitionaltax = profitionaltax / daysinmonth;
                                        losofprofitionaltax = lop * perdaprofitionaltax;
                                        if (branchtype == "SalesOffice" || branchtype == "CC")
                                        {

                                            double nightdays = 0;
                                            double.TryParse(dra["night_days"].ToString(), out nightdays);
                                            double perdaycost = 0;
                                            double.TryParse(dra["night_allowance"].ToString(), out perdaycost);
                                            shiftamount = nightdays * perdaycost;
                                            shiftamount = Math.Round(shiftamount);
                                            newrow["Shift Allowance"] = shiftamount;

                                        }
                                        if (branchtype == "SalesOffice" || branchtype == "CC")
                                        {
                                            double totldays = 0;
                                            //double travelconveyance = 0;
                                            double.TryParse(dr["travelconveyance"].ToString(), out travelconveyance);
                                            double days = 0;
                                            days = numberofworkingdays + clorwo;
                                            totldays = days - lop;
                                            double totamount1 = 0;
                                            double perdaycost1 = 0;
                                            perdaycost1 = travelconveyance / days;
                                            totamount1 = totldays * perdaycost1;
                                            newrow["CONVEYANCE"] = Math.Round(totamount1);
                                            newrow["FIXEDCONVEYANCE"] = dr["travelconveyance"].ToString();
                                            double.TryParse(dr["travelconveyance"].ToString(), out travelconveyance);
                                            //newrow["CONVEYANCE"] = travelconveyance;

                                            //Report.Columns.Add("CONVEYANCE").DataType = typeof(double);
                                        }
                                        double otdays = 0;
                                        if (ot == "" || ot == "0")
                                        {
                                            otdays = 0;
                                        }
                                        else
                                        {
                                            otdays = Convert.ToDouble(dra["extradays"].ToString());
                                            otvalue = perdayamt * otdays;
                                            newrow["Extra Pay"] = Math.Round(otvalue);
                                            otamount = Math.Round(otvalue); ;
                                        }
                                    }
                                }
                                double perdaysal = permonth / daysinmonth;
                                double basic = 50;
                                double basicsalary = (permonth * 50) / 100;
                                double basicpermonth = basicsalary / daysinmonth;
                                double bs = basicpermonth * totalpresentdays;
                                double basicsal = Math.Round(basicsalary - loseamount);
                                double conve = Math.Round(convenyance - loseofconviyance);
                                double medical = Math.Round(medicalerning - loseofmedical);
                                double washing = Math.Round(washingallowance - loseofwashing);
                                double tt = bs + conve + medical + washing;
                                double thra = permonth - loseamount;
                                double hra = Math.Round(thra - tt);
                                totalearnings = Math.Round(hra + tt);
                                double.TryParse(dr["travelconveyance"].ToString(), out travelconveyance);
                                double totamount = 0;
                                //double perdaycost = 0;
                                //perdaycost = travelconveyance / daysinmonth;
                                //totamount = totalpresentdays * perdaycost;
                                string pfeligible = dr["pfeligible"].ToString();
                                if (pfeligible == "Yes")
                                {
                                    providentfund = (totalearnings * 6) / 100;
                                    if (providentfund > 1800)
                                    {
                                        providentfund = 1800;
                                    }
                                    providentfund = Math.Round(providentfund);
                                }
                                else
                                {
                                    providentfund = 0;
                                }
                                string esieligible = dr["esieligible"].ToString();
                                if (esieligible == "Yes")
                                {
                                    esi = (totalearnings * 1.75) / 100;
                                    esi = Math.Round(esi);
                                }
                                else
                                {
                                    esi = 0;
                                }
                                if (dtsa1.Rows.Count > 0)
                                {
                                    DataRow[] drr = dtsa1.Select("employee_num='" + dr["employee_num"].ToString() + "'");
                                    if (drr.Length > 0)
                                    {
                                        foreach (DataRow drsa in dtsa1.Select("employee_num='" + dr["employee_num"].ToString() + "'"))
                                        {
                                            double amount = 0;
                                            double.TryParse(drsa["amount"].ToString(), out amount);
                                            salaryadvance = Convert.ToDouble(amount);
                                            salaryadvance = Math.Round(amount);
                                        }
                                    }
                                    else
                                    {
                                        salaryadvance = 0;
                                    }
                                }
                                else
                                {
                                    salaryadvance = 0;
                                }
                                if (dtloan1.Rows.Count > 0)
                                {
                                    DataRow[] drr = dtloan1.Select("employee_num='" + dr["employee_num"].ToString() + "'");
                                    if (drr.Length > 0)
                                    {
                                        foreach (DataRow drloan in dtloan1.Select("employee_num='" + dr["employee_num"].ToString() + "'"))
                                        {
                                            double loanemimonth = 0;
                                            double.TryParse(drloan["loanemimonth"].ToString(), out loanemimonth);
                                            loan = Convert.ToDouble(loanemimonth);
                                            loan = Math.Round(loanemimonth);
                                        }
                                    }
                                    else
                                    {
                                        loan = 0;
                                    }
                                }
                                else
                                {
                                    loan = 0;
                                }
                                mobilededuction = 0;
                                if (dtmobile1.Rows.Count > 0)
                                {
                                    DataRow[] drr = dtmobile1.Select("employee_num='" + dr["employee_num"].ToString() + "'");
                                    if (drr.Length > 0)
                                    {
                                        foreach (DataRow drmobile in dtmobile1.Select("employee_num='" + dr["employee_num"].ToString() + "'"))
                                        {
                                            double deductionamount = 0;
                                            double.TryParse(drmobile["deductionamount"].ToString(), out deductionamount);
                                            string st = deductionamount.ToString();
                                            if (st == "0.0")
                                            {
                                                mobilededuction = 0;
                                            }
                                            else
                                            {
                                                mobilededuction = Convert.ToDouble(deductionamount);
                                                mobilededuction = Math.Round(deductionamount);
                                            }
                                        }
                                    }
                                    else
                                    {
                                        mobilededuction = 0;
                                    }
                                }
                                else
                                {
                                    mobilededuction = 0;
                                }
                                canteendeduction = 0;
                                if (dtcanteen1.Rows.Count > 0)
                                {
                                    DataRow[] drr = dtcanteen1.Select("employee_num='" + dr["employee_num"].ToString() + "'");
                                    if (drr.Length > 0)
                                    {
                                        foreach (DataRow drcanteen in dtcanteen1.Select("employee_num='" + dr["employee_num"].ToString() + "'"))
                                        {
                                            double deductionamount = 0;
                                            double.TryParse(drcanteen["amount"].ToString(), out deductionamount);
                                            string st = deductionamount.ToString();
                                            canteendeduction = Convert.ToDouble(deductionamount);
                                            canteendeduction = Math.Round(deductionamount);
                                        }
                                    }
                                    else
                                    {
                                        canteendeduction = 0;
                                    }
                                }
                                else
                                {
                                    canteendeduction = 0;
                                }

                                medicliamdeduction = 0;
                                if (dtmedicliam1.Rows.Count > 0)
                                {
                                    DataRow[] drr = dtmedicliam1.Select("employee_num='" + dr["employee_num"].ToString() + "'");
                                    if (drr.Length > 0)
                                    {
                                        foreach (DataRow drmedicliam in dtmedicliam1.Select("employee_num='" + dr["employee_num"].ToString() + "'"))
                                        {
                                            double amount = 0;
                                            double.TryParse(drmedicliam["medicliamamount"].ToString(), out amount);
                                            string st = amount.ToString();
                                            medicliamdeduction = Convert.ToDouble(amount);
                                            medicliamdeduction = Math.Round(amount, 0);
                                        }
                                    }
                                    else
                                    {
                                        medicliamdeduction = 0;
                                    }
                                }
                                else
                                {
                                }
                                otherdeduction = 0;
                                if (dtotherdeduction1.Rows.Count > 0)
                                {
                                    DataRow[] drr = dtotherdeduction1.Select("employee_num='" + dr["employee_num"].ToString() + "'");
                                    if (drr.Length > 0)
                                    {
                                        foreach (DataRow drotherdeduction in dtotherdeduction1.Select("employee_num='" + dr["employee_num"].ToString() + "'"))
                                        {
                                            double amount = 0;
                                            double.TryParse(drotherdeduction["otherdeductionamount"].ToString(), out amount);
                                            string st = amount.ToString();
                                            otherdeduction = Convert.ToDouble(amount);
                                            otherdeduction = Math.Round(amount, 0);
                                        }
                                    }
                                    else
                                    {
                                        otherdeduction = 0;
                                    }
                                }
                                else
                                {
                                }
                                tdsdeduction = 0;
                                if (dttdsdeduction.Rows.Count > 0)
                                {
                                    DataRow[] drr = dttdsdeduction.Select("employee_num='" + dr["employee_num"].ToString() + "'");
                                    if (drr.Length > 0)
                                    {
                                        foreach (DataRow drtdsdeduction in dttdsdeduction.Select("employee_num='" + dr["employee_num"].ToString() + "'"))
                                        {
                                            double amount = 0;
                                            double.TryParse(drtdsdeduction["tdsamount"].ToString(), out amount);
                                            string st = amount.ToString();
                                            tdsdeduction = Convert.ToDouble(amount);
                                            tdsdeduction = Math.Round(amount, 0);
                                        }
                                    }
                                    else
                                    {
                                        tdsdeduction = 0;
                                    }
                                }
                                else
                                {
                                    tdsdeduction = 0;
                                }
                                ptax = profitionaltax - losofprofitionaltax;
                                totaldeduction = Math.Round(profitionaltax + canteendeduction + salaryadvance + loan + mobilededuction + providentfund + esi + medicliamdeduction + otherdeduction + tdsdeduction);
                                double netpay = 0;
                                netpay = totalearnings - totaldeduction;
                                netpay = Math.Round(netpay, 2);

                                string stramount = "0";
                                stramount = netpay.ToString();
                                if (stramount == "NaN")
                                {
                                    //newrow["NET PAY1"] = netpay;
                                    //Report1.Rows.Add(newrow);
                                }
                                else
                                {
                                    //if (stramount == "NaN" || stramount == "0")
                                    //{
                                    newrow["NET PAY1"] = netpay;
                                    netpay = netpay + travelconveyance + shiftamount;
                                    double NEGATIVE = Math.Round(netpay + otvalue);
                                    if (NEGATIVE > 0)
                                    {
                                        Report1.Rows.Add(newrow);
                                    }
                                    else
                                    {
                                        Report1.Rows.Add(newrow);
                                    }
                                    //}

                                }
                            }
                        }
                        DataRow newTotal1 = Report1.NewRow();
                        newTotal1["EmployeeName"] = "Total";
                        double val = 0.0;
                        foreach (DataColumn dc1 in Report1.Columns)
                        {

                            if (dc1.DataType == typeof(Double))
                            {
                                val = 0.0;
                                double.TryParse(Report1.Compute("sum([" + dc1.ToString() + "])", "[" + dc1.ToString() + "]<>'0'").ToString(), out val);
                                newTotal1[dc1.ToString()] = val;
                            }

                        }
                        Report1.Rows.Add(newTotal1);
                        //var n = 1;
                        string name = "Total";
                        foreach (DataRow dbreport in Report1.Select("EmployeeName='" + name + "'"))
                        {
                            DataRow nr_bank = dtbanknew.NewRow();
                            nr_bank["SNO"] = n++.ToString();
                            //string mymonth1 = mymonth("MMM");
                            nr_bank["MOnth"] = Month;
                            string branch = "";
                            nr_bank["Bank Name"] = bankname;
                            double temp = Convert.ToDouble(dbreport["NET PAY1"].ToString());
                            if (temp > 0)
                            {
                                nr_bank["Amount1"] = dbreport["NET PAY1"].ToString();
                                dtbanknew.Rows.Add(nr_bank);

                            }

                            //nr_bank["Amount2"] = dbreport["Extra Pay"].ToString();

                            //foreach (DataRow dreport in Report1.Select("EmployeeName='" + name + "'"))
                            //{
                            DataRow nr_mp = dtbanknew.NewRow();
                            nr_mp["MOnth"] = Month;
                            nr_mp["Bank Name"] = "Extra Pay" + " " + bankname;
                            double temp1 = Convert.ToDouble(dbreport["Extra Pay"].ToString());
                            if (temp1 > 0)
                            {
                                nr_mp["Amount1"] = dbreport["Extra Pay"].ToString();
                                dtbanknew.Rows.Add(nr_mp);
                            }

                            DataRow nr_conv = dtbanknew.NewRow();
                            nr_conv["MOnth"] = Month;
                            nr_conv["Bank Name"] = "CONVEYANCE" + " " + bankname;
                            double temp2 = Convert.ToDouble(dbreport["CONVEYANCE"].ToString());
                            if (temp2 > 0)
                            {
                                nr_conv["Amount1"] = dbreport["CONVEYANCE"].ToString();
                                dtbanknew.Rows.Add(nr_conv);
                            }

                            DataRow nr_nightshift = dtbanknew.NewRow();
                            nr_nightshift["MOnth"] = Month;
                            nr_nightshift["Bank Name"] = "Shift Allowance" + " " + bankname;
                            double temp3 = Convert.ToDouble(dbreport["Shift Allowance"].ToString());
                            if (temp3 > 0)
                            {
                                nr_nightshift["Amount1"] = dbreport["Shift Allowance"].ToString();
                                dtbanknew.Rows.Add(nr_nightshift);

                            }

                            //} 
                        }

                    }
                    else if (branchtype == "Driver")
                    {
                        {
                            //Report.Columns.Add("SNO");
                            //Report.Columns.Add("Location");
                            //Report.Columns.Add("Employee Code1");
                            //Report.Columns.Add("Employee Name");
                            //Report.Columns.Add("DESIGNATION");
                            Report1.Columns.Add("OTHER DEDUCTIONS");
                            Report1.Columns.Add("GROSS Earnings");
                            //Report.Columns.Add("NET PAY").DataType = typeof(double);
                            //Report.Columns.Add("NET AMOUNT").DataType = typeof(double);
                            //Report.Columns.Add("Bank Acc NO");
                            //Report.Columns.Add("IFSC Code");
                            int branchid = Convert.ToInt32(mainbranch);
                            cmd = new SqlCommand("SELECT employedetails.pfeligible, employedetails.pfdate, branchmaster.branchname, employedetails.esidate, employebankdetails.ifsccode, employedetails.esieligible, monthly_attendance.month, monthly_attendance.year, employedetails.employee_type, employedetails.empid, employedetails.employee_num, employedetails.fullname, designation.designation, employebankdetails.accountno, branchmaster.statename, salaryappraisals.gross, salaryappraisals.erningbasic, salaryappraisals.hra, salaryappraisals.profitionaltax, salaryappraisals.esi, salaryappraisals.providentfund, salaryappraisals.conveyance, salaryappraisals.medicalerning, salaryappraisals.washingallowance, salaryappraisals.travelconveyance, salaryappraisals.salaryperyear FROM employedetails INNER JOIN designation ON employedetails.designationid = designation.designationid INNER JOIN monthly_attendance ON employedetails.empid = monthly_attendance.empid LEFT OUTER JOIN branchmaster ON employedetails.branchid = branchmaster.branchid LEFT OUTER JOIN employebankdetails ON employedetails.empid = employebankdetails.employeid INNER JOIN branchmapping ON employedetails.branchid = branchmapping.subbranch INNER JOIN salaryappraisals ON employedetails.empid = salaryappraisals.empid WHERE(employebankdetails.bankid = @bankid) AND (branchmapping.mainbranch = @branchid) AND (employedetails.status = 'No') AND (employedetails.employee_type = 'Driver' OR employedetails.employee_type = 'Cleaner') AND (monthly_attendance.month = @month) AND (monthly_attendance.year = @year) AND (salaryappraisals.endingdate IS NULL) AND (salaryappraisals.startingdate <= @d1) OR (employebankdetails.bankid = @bankid) AND (branchmapping.mainbranch = @branchid) AND (employedetails.status = 'No') AND (employedetails.employee_type = 'Driver' OR employedetails.employee_type = 'Cleaner') AND (monthly_attendance.month = @month) AND (monthly_attendance.year = @year) AND (salaryappraisals.endingdate > @d1) AND (salaryappraisals.startingdate <= @d1)");
                            //paystrure
                            //cmd = new SqlCommand("SELECT employedetails.pfeligible, employedetails.pfdate, branchmaster.branchname, employedetails.esidate, employebankdetails.ifsccode, employedetails.esieligible, monthly_attendance.month, monthly_attendance.year,employedetails.employee_type, employedetails.empid, employedetails.employee_num, pay_structure.erningbasic, pay_structure.esi, pay_structure.providentfund, employedetails.fullname, designation.designation, pay_structure.gross, pay_structure.hra, pay_structure.conveyance, pay_structure.washingallowance, pay_structure.medicalerning, pay_structure.profitionaltax, employebankdetails.accountno, branchmaster.statename FROM employedetails INNER JOIN designation ON employedetails.designationid = designation.designationid INNER JOIN monthly_attendance ON employedetails.empid = monthly_attendance.empid INNER JOIN pay_structure ON employedetails.empid = pay_structure.empid Left Outer Join branchmaster ON employedetails.branchid = branchmaster.branchid LEFT OUTER JOIN employebankdetails ON employedetails.empid = employebankdetails.employeid INNER JOIN branchmapping ON employedetails.branchid = branchmapping.subbranch WHERE (branchmapping.mainbranch = @branchid) AND (employedetails.status = 'No') AND (employebankdetails.bankid = @bankid) AND ((employedetails.employee_type ='Driver') OR (employedetails.employee_type ='Cleaner')) AND (monthly_attendance.month = @month) AND (monthly_attendance.year = @year)");
                            cmd.Parameters.Add("@bankid", bankid);
                            cmd.Parameters.Add("@branchid", branchid);
                            cmd.Parameters.Add("@month", Month);
                            cmd.Parameters.Add("@year", Year);
                            cmd.Parameters.Add("@d1", date);
                            DataTable dtsalary = vdm.SelectQuery(cmd).Tables[0];
                            cmd = new SqlCommand("SELECT monthly_attendance.sno, monthly_attendance.empid,monthly_attendance.clorwo, monthly_attendance.doe, monthly_attendance.month, monthly_attendance.year, monthly_attendance.otdays, employedetails.employee_num, branchmaster.fromdate, branchmaster.todate, monthly_attendance.lop, branchmaster.branchid, monthly_attendance.numberofworkingdays FROM  monthly_attendance INNER JOIN  employedetails ON monthly_attendance.empid = employedetails.empid INNER JOIN branchmaster ON employedetails.branchid = branchmaster.branchid WHERE  (monthly_attendance.month = @month) AND (monthly_attendance.year = @year)");
                            //cmd = new SqlCommand("SELECT monthly_attendance.sno, monthly_attendance.empid, monthly_attendance.doe, monthly_attendance.month, monthly_attendance.year, monthly_attendance.otdays, employedetails.employee_num, branchmaster.fromdate, branchmaster.todate, monthly_workingdays.numberofworkingdays, monthly_attendance.lop,  branchmaster.branchid FROM  monthly_attendance INNER JOIN employedetails ON monthly_attendance.empid = employedetails.empid INNER JOIN branchmaster ON employedetails.branchid = branchmaster.branchid INNER JOIN monthly_workingdays ON branchmaster.branchid = monthly_workingdays.branchid WHERE (monthly_attendance.month = @month) AND (monthly_attendance.year = @year) AND (employedetails.branchid=@branchid)");
                            cmd.Parameters.Add("@month", Month);
                            cmd.Parameters.Add("@year", Year);
                            //cmd.Parameters.Add("@branchid", branchid);
                            DataTable dtattendence = vdm.SelectQuery(cmd).Tables[0];
                            cmd = new SqlCommand("SELECT  employedetails.employee_num, salaryadvance.amount, salaryadvance.monthofpaid, employedetails.fullname, salaryadvance.empid FROM   salaryadvance INNER JOIN  employedetails ON salaryadvance.empid = employedetails.empid where (salaryadvance.month = @month) AND (salaryadvance.year = @year)");
                            cmd.Parameters.Add("@month", Month);
                            cmd.Parameters.Add("@year", Year);
                            cmd.Parameters.Add("@branchid", branchid);
                            DataTable dtsa = vdm.SelectQuery(cmd).Tables[0];
                            cmd = new SqlCommand("SELECT employedetails.employee_num, loan_request.loanemimonth, loan_request.months, loan_request.startdate FROM employedetails INNER JOIN  loan_request ON employedetails.empid = loan_request.empid where (loan_request.month = @month) AND (loan_request.year = @year)");
                            cmd.Parameters.Add("@month", Month);
                            cmd.Parameters.Add("@year", Year);
                            DataTable dtloan = vdm.SelectQuery(cmd).Tables[0];
                            cmd = new SqlCommand("SELECT  employedetails.employee_num, mobile_deduction.deductionamount, employedetails.fullname, employedetails.empid FROM  mobile_deduction INNER JOIN employedetails ON mobile_deduction.employee_num = employedetails.employee_num   where (mobile_deduction.month = @month) AND (mobile_deduction.year = @year)");
                            cmd.Parameters.Add("@month", Month);
                            cmd.Parameters.Add("@year", Year);
                            DataTable dtmobile = vdm.SelectQuery(cmd).Tables[0];
                            cmd = new SqlCommand("SELECT  employedetails.employee_num, canteendeductions.amount, employedetails.fullname, employedetails.empid FROM  canteendeductions INNER JOIN employedetails ON canteendeductions.employee_num = employedetails.employee_num where  (canteendeductions.month = @month) AND (canteendeductions.year = @year)");
                            cmd.Parameters.Add("@month", Month);
                            cmd.Parameters.Add("@year", Year);
                            DataTable dtcanteen = vdm.SelectQuery(cmd).Tables[0];
                            cmd = new SqlCommand("SELECT employedetails.employee_num, employedetails.fullname, employedetails.empid, otherdeduction.otherdeductionamount FROM employedetails INNER JOIN otherdeduction ON employedetails.empid = otherdeduction.empid WHERE (employedetails.branchid = @branchid) AND (otherdeduction.month = @month) AND (otherdeduction.year = @year)");
                            cmd.Parameters.Add("@branchid", branchid);
                            cmd.Parameters.Add("@month", Month);
                            cmd.Parameters.Add("@year", Year);
                            DataTable dtotherdeduction = vdm.SelectQuery(cmd).Tables[0];
                            if (dtsalary.Rows.Count > 0)
                            {
                                var i = 1;
                                foreach (DataRow dr in dtsalary.Rows)
                                {
                                    double totalpresentdays = 0;
                                    double profitionaltax = 0;
                                    double salaryadvance = 0;
                                    double loan = 0;
                                    double canteendeduction = 0;
                                    double mobilededuction = 0;
                                    double totaldeduction;
                                    double numberofworkingdays = 0;
                                    double totalearnings = 0;
                                    double daysinmonth = 0;
                                    string statename = "";
                                    DataRow newrow = Report1.NewRow();
                                    //newrow["SNO"] = i++.ToString();
                                    //newrow["Location"] = dr["branchname"].ToString();
                                    newrow["Employee Code1"] = dr["employee_num"].ToString();
                                    newrow["EmployeeName"] = dr["fullname"].ToString();
                                    ////newrow["Bank Name"] = dr["fullname"].ToString();
                                    ////newrow["DESIGNATION"] = dr["designation"].ToString();
                                    double BASIC = Convert.ToDouble(dr["erningbasic"].ToString());
                                    statename = dr["statename"].ToString();
                                    //newrow["PT"] = dr["profitionaltax"].ToString();
                                    double rateper = Convert.ToDouble(dr["gross"].ToString());
                                    //profitionaltax = Convert.ToDouble(dr["profitionaltax"].ToString());
                                    newrow["Bank Acc NO"] = dr["accountno"].ToString();
                                    newrow["IFSC Code"] = dr["ifsccode"].ToString();
                                    //Report.Rows.Add(newrow);
                                    if (dtattendence.Rows.Count > 0)
                                    {
                                        foreach (DataRow dra in dtattendence.Select("employee_num='" + dr["employee_num"].ToString() + "'"))
                                        {
                                            double.TryParse(dra["numberofworkingdays"].ToString(), out numberofworkingdays);
                                            double clorwo = 0;
                                            double.TryParse(dra["clorwo"].ToString(), out clorwo);
                                            daysinmonth = numberofworkingdays + clorwo;
                                            // newrow["Work Days"] = daysinmonth.ToString();
                                            //double rateperday = 0;
                                            double paydays = 0;
                                            double lop = 0;
                                            double.TryParse(dra["lop"].ToString(), out lop);
                                            paydays = daysinmonth - lop;
                                            double holidays = 0;
                                            holidays = daysinmonth - numberofworkingdays;
                                            //newrow["Payable Days"] = paydays;
                                            totalpresentdays = holidays + paydays;
                                            //double perdaybasic = BASIC / daysinmonth;
                                            double rate = Convert.ToDouble(dr["gross"].ToString());
                                            // newrow["Rate/Day"] = rateper;
                                            double batta = 80;
                                            string empnumber = dr["employee_num"].ToString();
                                            if (empnumber == "SVDS080135" || empnumber == "SVDS100095")
                                            {
                                                // newrow["Batta/Day"] = "0";
                                                batta = 0;
                                            }
                                            else
                                            {
                                                // newrow["Batta/Day"] = batta;
                                            }
                                            double rateperday = rate + batta;
                                            totalearnings = rateperday * paydays;
                                            double totalpdays = numberofworkingdays - lop;
                                            totalearnings = Math.Round(totalearnings);
                                            newrow["GROSS Earnings"] = totalearnings;
                                            if (statename == "AndraPrdesh")
                                            {
                                                if (totalearnings > 1000 && totalearnings <= 15000)
                                                {
                                                    profitionaltax = 0;
                                                }
                                                else if (totalearnings >= 15001 && totalearnings <= 20000)
                                                {
                                                    profitionaltax = 150;
                                                }
                                                else if (totalearnings >= 20001)
                                                {
                                                    profitionaltax = 200;
                                                }
                                            }
                                            if (statename == "Tamilnadu")
                                            {
                                                if (totalearnings < 7000)
                                                {
                                                    profitionaltax = 0;
                                                }
                                                else if (totalearnings >= 7001 && totalearnings <= 10000)
                                                {
                                                    profitionaltax = 115;
                                                }
                                                else if (totalearnings >= 10001 && totalearnings <= 11000)
                                                {
                                                    profitionaltax = 171;
                                                }
                                                else if (totalearnings >= 11001 && totalearnings <= 12000)
                                                {
                                                    profitionaltax = 171;
                                                }
                                                else if (totalearnings >= 12001)
                                                {
                                                    profitionaltax = 208;
                                                }
                                            }
                                            if (statename == "karnataka")
                                            {
                                                if (totalearnings <= 15000 && totalearnings <= 15001)
                                                {
                                                    profitionaltax = 0;
                                                }
                                                else if (totalearnings >= 15001)
                                                {
                                                    profitionaltax = 200;
                                                }
                                            }
                                            //newrow["PT"] = profitionaltax;
                                        }
                                    }
                                    if (dtsa.Rows.Count > 0)
                                    {
                                        DataRow[] drr = dtsa.Select("employee_num='" + dr["employee_num"].ToString() + "'");
                                        if (drr.Length > 0)
                                        {
                                            foreach (DataRow drsa in dtsa.Select("employee_num='" + dr["employee_num"].ToString() + "'"))
                                            {
                                                double amount = 0;
                                                double.TryParse(drsa["amount"].ToString(), out amount);
                                                //newrow["SALARY ADVANCE"] = amount.ToString();
                                                salaryadvance = Convert.ToDouble(amount);
                                                salaryadvance = Math.Round(amount, 0);
                                            }
                                        }
                                        else
                                        {
                                            salaryadvance = 0;
                                            // newrow["SALARY ADVANCE"] = salaryadvance;
                                        }
                                    }
                                    if (dtloan.Rows.Count > 0)
                                    {
                                        DataRow[] drr = dtloan.Select("employee_num='" + dr["employee_num"].ToString() + "'");
                                        if (drr.Length > 0)
                                        {
                                            foreach (DataRow drloan in dtloan.Select("employee_num='" + dr["employee_num"].ToString() + "'"))
                                            {
                                                double loanemimonth = 0;
                                                double.TryParse(drloan["loanemimonth"].ToString(), out loanemimonth);
                                                //newrow["Loan"] = loanemimonth.ToString();
                                                loan = Convert.ToDouble(loanemimonth);
                                                loan = Math.Round(loanemimonth, 0);
                                            }
                                        }
                                        else
                                        {
                                            loan = 0;
                                            //newrow["Loan"] = loan;
                                        }
                                    }
                                    mobilededuction = 0;
                                    if (dtmobile.Rows.Count > 0)
                                    {
                                        DataRow[] drr = dtmobile.Select("employee_num='" + dr["employee_num"].ToString() + "'");
                                        if (drr.Length > 0)
                                        {
                                            foreach (DataRow drmobile in dtmobile.Select("employee_num='" + dr["employee_num"].ToString() + "'"))
                                            {
                                                double deductionamount = 0;
                                                double.TryParse(drmobile["deductionamount"].ToString(), out deductionamount);
                                                //newrow["MOBILE DEDUCTION"] = deductionamount.ToString();
                                                string st = deductionamount.ToString();
                                                if (st == "0.0")
                                                {
                                                    mobilededuction = 0;
                                                    //newrow["MOBILE DEDUCTION"] = mobilededuction;

                                                }
                                                else
                                                {
                                                    mobilededuction = Convert.ToDouble(deductionamount);
                                                    mobilededuction = Math.Round(deductionamount, 0);
                                                }
                                            }
                                        }
                                        else
                                        {
                                            mobilededuction = 0;
                                            //newrow["MOBILE DEDUCTION"] = mobilededuction;
                                        }
                                    }
                                    canteendeduction = 0;
                                    if (dtcanteen.Rows.Count > 0)
                                    {
                                        DataRow[] drr = dtcanteen.Select("employee_num='" + dr["employee_num"].ToString() + "'");
                                        if (drr.Length > 0)
                                        {
                                            foreach (DataRow drcanteen in dtcanteen.Select("employee_num='" + dr["employee_num"].ToString() + "'"))
                                            {
                                                double deductionamount = 0;
                                                double.TryParse(drcanteen["amount"].ToString(), out deductionamount);
                                                //newrow["CANTEEN DEDUCTION"] = deductionamount.ToString();
                                                string st = deductionamount.ToString();
                                                canteendeduction = Convert.ToDouble(deductionamount);
                                                canteendeduction = Math.Round(deductionamount, 0);
                                            }
                                        }
                                        else
                                        {
                                            canteendeduction = 0;
                                            //newrow["CANTEEN DEDUCTION"] = canteendeduction;
                                        }
                                    }
                                    double otherdeduction = 0;
                                    if (dtotherdeduction.Rows.Count > 0)
                                    {
                                        DataRow[] drr = dtotherdeduction.Select("employee_num='" + dr["employee_num"].ToString() + "'");
                                        if (drr.Length > 0)
                                        {
                                            foreach (DataRow drotherdeduction in dtotherdeduction.Select("employee_num='" + dr["employee_num"].ToString() + "'"))
                                            {
                                                double amount = 0;
                                                double.TryParse(drotherdeduction["otherdeductionamount"].ToString(), out amount);
                                                newrow["OTHER DEDUCTIONS"] = amount.ToString();
                                                string st = amount.ToString();
                                                otherdeduction = Convert.ToDouble(amount);
                                                otherdeduction = Math.Round(amount, 0);
                                            }
                                        }
                                        else
                                        {
                                            otherdeduction = 0;
                                            newrow["OTHER DEDUCTIONS"] = otherdeduction;
                                        }
                                    }
                                    else
                                    {
                                    }
                                    // newrow["TOTAL DEDUCTIONS"] = Math.Round(profitionaltax + canteendeduction + salaryadvance + loan + mobilededuction);
                                    totaldeduction = Math.Round(profitionaltax + canteendeduction + salaryadvance + loan + mobilededuction + otherdeduction);
                                    double netpay = 0;
                                    netpay = Math.Round(totalearnings - totaldeduction);
                                    netpay = Math.Round(netpay, 0);
                                    string stramount = "";
                                    stramount = netpay.ToString();
                                    if (stramount == "NaN" || stramount == "" || numberofworkingdays == 0)
                                    {
                                    }
                                    else
                                    {
                                        newrow["NET PAY1"] = Math.Round(netpay, 0);
                                        Report1.Rows.Add(newrow);
                                    }
                                    //newrow["NET PAY"] = Math.Ceiling(netpay);
                                }
                            }

                            DataRow newTotal1 = Report1.NewRow();
                            newTotal1["EmployeeName"] = "Total";
                            double val = 0.0;
                            foreach (DataColumn dc1 in Report1.Columns)
                            {

                                if (dc1.DataType == typeof(Double))
                                {
                                    val = 0.0;
                                    double.TryParse(Report1.Compute("sum([" + dc1.ToString() + "])", "[" + dc1.ToString() + "]<>'0'").ToString(), out val);
                                    newTotal1[dc1.ToString()] = val;
                                }

                            }
                            Report1.Rows.Add(newTotal1);
                            //var n = 1;
                            string name = "Total";
                            foreach (DataRow dbreport in Report1.Select("EmployeeName='" + name + "'"))
                            {
                                DataRow nr_bank = dtbanknew.NewRow();
                                nr_bank["SNO"] = n++.ToString();
                                //string mymonth1 = mymonth("MMM");
                                nr_bank["MOnth"] = Month;
                                string branch = "";
                                nr_bank["Bank Name"] = bankname;
                                double temp = Convert.ToDouble(dbreport["NET PAY1"].ToString());
                                if (temp > 0)
                                {
                                    nr_bank["Amount1"] = dbreport["NET PAY1"].ToString();
                                    dtbanknew.Rows.Add(nr_bank);

                                }

                                //nr_bank["Amount2"] = dbreport["Extra Pay"].ToString();

                                //foreach (DataRow dreport in Report1.Select("EmployeeName='" + name + "'"))
                                //{
                                DataRow nr_mp = dtbanknew.NewRow();
                                nr_mp["MOnth"] = Month;
                                nr_mp["Bank Name"] = "Extra Pay" + " " + bankname;
                                double temp1 = Convert.ToDouble(dbreport["Extra Pay"].ToString());
                                if (temp1 > 0)
                                {
                                    nr_mp["Amount1"] = dbreport["Extra Pay"].ToString();
                                    dtbanknew.Rows.Add(nr_mp);
                                }

                                DataRow nr_conv = dtbanknew.NewRow();
                                nr_conv["MOnth"] = Month;
                                nr_conv["Bank Name"] = "CONVEYANCE" + " " + bankname;
                                double temp2 = Convert.ToDouble(dbreport["CONVEYANCE"].ToString());
                                if (temp2 > 0)
                                {
                                    nr_conv["Amount1"] = dbreport["CONVEYANCE"].ToString();
                                    dtbanknew.Rows.Add(nr_conv);
                                }

                                DataRow nr_nightshift = dtbanknew.NewRow();
                                nr_nightshift["MOnth"] = Month;
                                nr_nightshift["Bank Name"] = "Shift Allowance" + " " + bankname;
                                double temp3 = Convert.ToDouble(dbreport["Shift Allowance"].ToString());
                                if (temp3 > 0)
                                {
                                    nr_nightshift["Amount1"] = dbreport["Shift Allowance"].ToString();
                                    dtbanknew.Rows.Add(nr_nightshift);

                                }

                                //} 
                            }

                        }
                    }



                }
                DataRow newTotal2 = dtbanknew.NewRow();
                newTotal2["Bank Name"] = "Total";
                double val1 = 0.0;
                foreach (DataColumn dc1 in dtbanknew.Columns)
                {

                    if (dc1.DataType == typeof(Double))
                    {
                        val1 = 0.0;
                        double.TryParse(dtbanknew.Compute("sum([" + dc1.ToString() + "])", "[" + dc1.ToString() + "]<>'0'").ToString(), out val1);
                        newTotal2[dc1.ToString()] = val1;
                    }

                }
                dtbanknew.Rows.Add(newTotal2);
                foreach (DataRow dr in dtbanknew.Rows)
                {
                    Summaryvalues getbrcdetails = new Summaryvalues();
                    getbrcdetails.month = dr["MOnth"].ToString();
                    getbrcdetails.bankname = dr["Bank Name"].ToString();
                    getbrcdetails.TotalAmount = dr["Amount1"].ToString();
                    summarybankDetalis.Add(getbrcdetails);
                }
                Summaryvalues GetPieValues1 = new Summaryvalues();
                GetPieValues1.summarybankDetalis = summarybankDetalis;
                GetPieValues1.summarysalaryDetalis = summarysalaryDetalis;
                //GetPieValues1.summaryDetalis = summaryDetalis;
                summaryDetalislist.Add(GetPieValues1);
                string errresponse1 = GetJson(summaryDetalislist);
                context.Response.Write(errresponse1);
                // gridBank.DataSource = dtbanknew;
                // gridBank.DataBind();
                //  Session["xportdata"] = dtbanknew;
                // hidepanel.Visible = true;
            }
            //}
        }
        catch (Exception ex)
        {
            // lblmsg.Text = ex.Message;
            //hidepanel.Visible = false;

        }
    }





    private void get_departmentmanagers_fill_Details(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            string dep = context.Request["dep"];
            string branchid = context.Request["branchid"];
            string mainbranch = context.Session["mainbranch"].ToString();
            //string empcode1 = context.Request["empcode1"].ToString();
            cmd = new SqlCommand("SELECT   employedetails.empid, employedetails.fullname, departments.department, branchmaster.branchname, designation.designation FROM            employedetails INNER JOIN   branchmaster ON employedetails.branchid = branchmaster.branchid INNER JOIN  departments ON employedetails.employee_dept = departments.deptid INNER JOIN  designation ON employedetails.designationid = designation.designationid INNER JOIN   branchmapping ON employedetails.branchid = branchmapping.subbranch WHERE        (designation.designation = 'Manager') AND (branchmapping.mainbranch = @m) AND (departments.department = @dep) AND (branchmaster.branchname = @branchname)");
            cmd.Parameters.Add("@dep", dep);
            cmd.Parameters.Add("@branchname", branchid);
            cmd.Parameters.Add("@m", mainbranch);
            // cmd.Parameters.Add("@empcode", empcode1);
            //cmd = new SqlCommand("SELECT emppaystructure.netpay, departments.department, designation.designationid, pay_structure.salaryperyear, departments.deptid, employedetails.employee_num, employedetails.joindate, employedetails.fullname, employedetails.empid, emppaystructure.totaldeduction, emppaystructure.monthlygrosspay,emppaystructure.totalearnings, designation.designation, employedetails.salarymode FROM employedetails INNER JOIN emppaystructure ON employedetails.empid = emppaystructure.empid INNER JOIN departments ON employedetails.employee_dept = departments.deptid INNER JOIN pay_structure ON employedetails.empid = pay_structure.empid INNER JOIN designation ON employedetails.designationid = designation.designationid");
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<apprasialdetales> salaDetails = new List<apprasialdetales>();
            foreach (DataRow dr in routes.Rows)
            {
                apprasialdetales getapsaldetails = new apprasialdetales();
                getapsaldetails.department = dr["department"].ToString();
                getapsaldetails.designation = dr["designation"].ToString();
                getapsaldetails.employeid = dr["empid"].ToString();
                //getapsaldetails.salary = dr["gross"].ToString();
                getapsaldetails.fullname = dr["fullname"].ToString();
                //getapsaldetails.joindate = dr["joindate"].ToString();
                //getapsaldetails.employee_num = dr["employee_num"].ToString();
                getapsaldetails.branchname = dr["branchname"].ToString();
                //getapsaldetails.netpay = dr["gross"].ToString();
                //getapsaldetails.salarymode = dr["salarymode"].ToString();
                //getapsaldetails.monthsarl = dr["gross"].ToString();
                salaDetails.Add(getapsaldetails);
            }
            string response = GetJson(salaDetails);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }


    private void get_branchdepartmentmanagers_fill_Details(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            string Address;
            string Title;
            cmd = new SqlCommand("SELECT company_master.address, company_master.companyname FROM branchmaster INNER JOIN company_master ON branchmaster.company_code = company_master.sno");
            DataTable dtcompany = vdm.SelectQuery(cmd).Tables[0];
            if (dtcompany.Rows.Count > 0)
            {
                Address = dtcompany.Rows[0]["address"].ToString();
                Title = dtcompany.Rows[0]["companyname"].ToString();
            }
            else
            {
                Address = context.Session["Address"].ToString();
                Title = context.Session["TitleName"].ToString();
            }
            //string dep = context.Request["dep"];
            string branchid = context.Request["branchid"];
            string mainbranch = context.Session["mainbranch"].ToString();
            //string empcode1 = context.Request["empcode1"].ToString();
            cmd = new SqlCommand("SELECT        employedetails.empid, employedetails.fullname, departments.department, branchmaster.branchname, designation.designation FROM            employedetails INNER JOIN  branchmaster ON employedetails.branchid = branchmaster.branchid INNER JOIN  departments ON employedetails.employee_dept = departments.deptid INNER JOIN   designation ON employedetails.designationid = designation.designationid INNER JOIN   branchmapping ON employedetails.branchid = branchmapping.subbranch WHERE        (designation.designation = 'Manager' OR  designation.designation = 'Sr. System (IT)') AND (branchmapping.mainbranch = @mainbranch)");
            //cmd.Parameters.Add("@dep", dep);
            cmd.Parameters.Add("@branchid", branchid);
            cmd.Parameters.Add("@mainbranch", mainbranch);
            // cmd.Parameters.Add("@empcode", empcode1);
            //cmd = new SqlCommand("SELECT emppaystructure.netpay, departments.department, designation.designationid, pay_structure.salaryperyear, departments.deptid, employedetails.employee_num, employedetails.joindate, employedetails.fullname, employedetails.empid, emppaystructure.totaldeduction, emppaystructure.monthlygrosspay,emppaystructure.totalearnings, designation.designation, employedetails.salarymode FROM employedetails INNER JOIN emppaystructure ON employedetails.empid = emppaystructure.empid INNER JOIN departments ON employedetails.employee_dept = departments.deptid INNER JOIN pay_structure ON employedetails.empid = pay_structure.empid INNER JOIN designation ON employedetails.designationid = designation.designationid");
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<apprasialdetales> salaDetails = new List<apprasialdetales>();
            foreach (DataRow dr in routes.Rows)
            {
                apprasialdetales getapsaldetails = new apprasialdetales();
                getapsaldetails.department = dr["department"].ToString();
                getapsaldetails.designation = dr["designation"].ToString();
                getapsaldetails.employeid = dr["empid"].ToString();
                //getapsaldetails.salary = dr["gross"].ToString();
                getapsaldetails.fullname = dr["fullname"].ToString();
                //getapsaldetails.joindate = dr["joindate"].ToString();
                //getapsaldetails.employee_num = dr["employee_num"].ToString();
                getapsaldetails.branchname = dr["branchname"].ToString();
                getapsaldetails.Address = Address;
                getapsaldetails.Title = Title;
                //getapsaldetails.monthsarl = dr["gross"].ToString();
                salaDetails.Add(getapsaldetails);
            }
            string response = GetJson(salaDetails);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }




    private void save_noduecertificate_click(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            string employeename = context.Request["employeename"];
            string employeecode = context.Request["employeecode"];
            string department = context.Request["department"];
            string location = context.Request["location"];
            string lastworkingdaydate = context.Request["lastworkingdaydate"];
            string Reportinghead = context.Request["Reportinghead"];
            string Reportingheadremarks = context.Request["Reportingheadremarks"];
            string Accountsdepartment = context.Request["Accountsdepartment"];
            string accountsdepremarks = context.Request["accountsdepremarks"];
            string Financedepartment = context.Request["Financedepartment"];
            string Financedepremarks = context.Request["Financedepremarks"];
            string systemadmin = context.Request["systemadmin"];
            string systemadminremarks = context.Request["systemadminremarks"];
            string Hrdepartment = context.Request["Hrdepartment"];
            string hrremarks = context.Request["hrremarks"];
            string btnval = context.Request["btnval"];
            if (btnval == "Save")
            {
                cmd = new SqlCommand("insert into leavetypes (employeename,employeecode, department,  location,lastworkingdaydate,Reportinghead,Reportingheadremarks,Accountsdepartment,accountsdepremarks,Financedepartment,Financedepremarks,systemadmin,systemadminremarks,Hrdepartment,hrremarks) values (@employeename,@employeecode, @department,  @location,@lastworkingdaydate,@Reportinghead,@Reportingheadremarks,@Accountsdepartment,@accountsdepremarks,@Financedepartment,@Financedepremarks,@systemadmin,@systemadminremarks,@Hrdepartment,@hrremarks))");
                cmd.Parameters.Add("@employeename", employeename);
                cmd.Parameters.Add("@employeecode", employeecode);
                cmd.Parameters.Add("@department", department);
                cmd.Parameters.Add("@location", location);
                cmd.Parameters.Add("@lastworkingdaydate", lastworkingdaydate);
                cmd.Parameters.Add("@Reportinghead", Reportinghead);
                cmd.Parameters.Add("@Reportingheadremarks", Reportingheadremarks);
                cmd.Parameters.Add("@Accountsdepartment", Accountsdepartment);
                cmd.Parameters.Add("@accountsdepremarks", accountsdepremarks);
                cmd.Parameters.Add("@systemadmin", Financedepartment);
                cmd.Parameters.Add("@systemadminremarks", Financedepremarks);
                cmd.Parameters.Add("@systemadmin", systemadmin);
                cmd.Parameters.Add("@systemadminremarks", systemadminremarks);
                cmd.Parameters.Add("@Hrdepartment", Hrdepartment);
                cmd.Parameters.Add("@hrremarks", hrremarks);
                vdm.insert(cmd);
                string response = GetJson("Insert Successfully");
                context.Response.Write(response);
            }

        }
        catch (Exception ex)
        {
            string response = GetJson(ex.Message);
            context.Response.Write(response);
        }
    }
    public class branchwisebankdetails
    {
        public string bankid { get; set; }
        public string ifsc { get; set; }
        public string sno { get; set; }
        public string Bankname { get; set; }
        public string branchname { get; set; }
        public string branchid { get; set; }
        public string Employeename { get; set; }
        public string Employeecode { get; set; }
        public string Netpay { get; set; }
        public string month { get; set; }
        public string year { get; set; }
        public string btnval { get; set; }
        public string Selectedid { get; set; }
        public string designation { get; set; }
        public string salary { get; set; }
        public string basic { get; set; }
        public string gross { get; set; }
        public string bankaccountno { get; set; }
        public string emptype { get; set; }
        public string deptid { get; set; }
        public string empid { get; set; }
        public string empphonnum { get; set; }
        public List<branchwisebankdetails> bankarry { get; set; }
        public List<branchwisebankdetails> emparry { get; set; }
        public string bankarrysid { set; get; }
    }
    private void get_brancwisebankdetails(HttpContext context)
    {
        try
        {
            vdm = new DBManager();

            string branchname = context.Request["branchname"].ToString();
            string month = context.Request["month"].ToString();
            string year = context.Request["year"].ToString();
            string Employeetype = context.Request["Employeetype"].ToString();
            cmd = new SqlCommand("SELECT bankmaster.bankname, bankmaster.code, bankmaster.sno, monthlysalarystatement.branchid, branchmaster.branchname FROM bankmaster INNER JOIN employebankdetails ON bankmaster.sno = employebankdetails.bankid INNER JOIN monthlysalarystatement ON employebankdetails.accountno = monthlysalarystatement.bankaccountno INNER JOIN branchmaster ON monthlysalarystatement.branchid = branchmaster.branchid WHERE        (monthlysalarystatement.branchid = @branchid) AND (monthlysalarystatement.month = @month) AND (monthlysalarystatement.year = @year) AND (monthlysalarystatement.emptype = @emptype) GROUP BY bankmaster.bankname, bankmaster.sno, bankmaster.code, monthlysalarystatement.branchid, branchmaster.branchname ORDER BY bankmaster.sno");
            cmd.Parameters.Add("@branchid", branchname);
            cmd.Parameters.Add("@month", month);
            cmd.Parameters.Add("@year", year);
            cmd.Parameters.Add("@emptype", Employeetype);
            DataTable Branchdata = vdm.SelectQuery(cmd).Tables[0];
            List<branchwisebankdetails> getBranchList = new List<branchwisebankdetails>();
            int i = 0;
            foreach (DataRow dr in Branchdata.Rows)
            {
                branchwisebankdetails getBranches = new branchwisebankdetails();
                getBranches.branchid = dr["branchid"].ToString();
                getBranches.branchname = dr["branchname"].ToString();
                getBranches.ifsc = dr["code"].ToString();
                getBranches.Bankname = dr["bankname"].ToString();
                getBranches.bankid = dr["sno"].ToString();
                getBranchList.Add(getBranches);
            }

            string respnceString = GetJson(getBranchList);
            context.Response.Write(respnceString);
        }
        catch
        {
        }
    }

    private void get_bankwiseemployeedetails(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            var js = new JavaScriptSerializer();
            var banknametitle = context.Request.Params[1];
            string btype = string.Empty;
            branchwisebankdetails obj1 = js.Deserialize<branchwisebankdetails>(banknametitle);

            List<branchwisebankdetails> getBranchList = new List<branchwisebankdetails>();
            if ((obj1.bankarry.Count > 0))
            {
                foreach (branchwisebankdetails bank in obj1.bankarry)
                {
                    string branchname = obj1.branchname;
                    string month = obj1.month;
                    string year = obj1.year;
                    string bankid = bank.bankarrysid;
                    //
                    //cmd = new SqlCommand("SELECT bankid, empid, branchid, designation, ifsccode, branchname, fullname, employee_num, netpay, bankaccountno, Expr1, emptype, gross, basic, salary, deptid FROM            (SELECT        TOP (100) PERCENT employebankdetails.bankid, employedetails.empid, monthlysalarystatement.branchid, monthlysalarystatement.designation, employebankdetails.ifsccode,  branchmaster.branchname, employedetails.fullname, employedetails.employee_num, monthlysalarystatement.netpay, monthlysalarystatement.bankaccountno,  monthlysalarystatement.ifsccode AS Expr1, monthlysalarystatement.emptype, monthlysalarystatement.gross, monthlysalarystatement.basic, monthlysalarystatement.salary, monthlysalarystatement.deptid FROM  bankmaster INNER JOIN employebankdetails ON bankmaster.sno = employebankdetails.bankid INNER JOIN monthlysalarystatement ON employebankdetails.accountno = monthlysalarystatement.bankaccountno INNER JOIN branchmaster ON monthlysalarystatement.branchid = branchmaster.branchid INNER JOIN  employedetails ON monthlysalarystatement.empid = employedetails.empid WHERE        (monthlysalarystatement.branchid = @branchid) AND (monthlysalarystatement.month = @month) AND (monthlysalarystatement.year = @year) AND (employebankdetails.bankid = @bankid) AND  (employedetails.status = 'NO') AND (monthlysalarystatement.bankaccountno != '') GROUP BY bankmaster.sno, monthlysalarystatement.branchid, branchmaster.branchname, employedetails.fullname, employedetails.employee_num, monthlysalarystatement.netpay, employedetails.empid, employebankdetails.bankid, employebankdetails.ifsccode, monthlysalarystatement.bankaccountno, monthlysalarystatement.ifsccode, monthlysalarystatement.emptype,  monthlysalarystatement.gross, monthlysalarystatement.basic, monthlysalarystatement.salary, monthlysalarystatement.deptid, monthlysalarystatement.designation ORDER BY employedetails.empid) AS A WHERE        (NOT EXISTS (SELECT  B.sno, B.Companyid, B.branchid, B.empid, B.employecode, B.empname, B.designation, B.netpay, B.bankaccountno, B.ifsccode, B.emptype, B.bankid, B.deptid, B.refno FROM   subbankformatmaster AS B INNER JOIN  bankformatmaster ON B.refno = bankformatmaster.sno WHERE (A.empid = B.empid) AND (bankformatmaster.month = @month) AND (bankformatmaster.year = @year)))");
                    cmd = new SqlCommand("SELECT bankid, empid, branchid, designation, ifsccode, branchname, fullname, employee_num, netpay, bankaccountno, Expr1, emptype, gross, basic, salary, deptid, cellphone,extrapay FROM            (SELECT        TOP (100) PERCENT employebankdetails.bankid, employedetails.empid, monthlysalarystatement.branchid, monthlysalarystatement.designation, employebankdetails.ifsccode,  branchmaster.branchname, employedetails.fullname, employedetails.employee_num, monthlysalarystatement.netpay, monthlysalarystatement.bankaccountno,    monthlysalarystatement.ifsccode AS Expr1, monthlysalarystatement.emptype, monthlysalarystatement.gross, monthlysalarystatement.basic, monthlysalarystatement.salary,  monthlysalarystatement.deptid, employedetails.cellphone, monthlysalarystatement.extrapay FROM   bankmaster INNER JOIN employebankdetails ON bankmaster.sno = employebankdetails.bankid INNER JOIN monthlysalarystatement ON employebankdetails.accountno = monthlysalarystatement.bankaccountno INNER JOIN branchmaster ON monthlysalarystatement.branchid = branchmaster.branchid INNER JOIN employedetails ON monthlysalarystatement.empid = employedetails.empid WHERE (monthlysalarystatement.branchid = @branchid) AND (monthlysalarystatement.month = @month) AND (monthlysalarystatement.year = @year) AND (employebankdetails.bankid = @bankid) AND  (employedetails.status = 'NO') AND (monthlysalarystatement.bankaccountno <> '') GROUP BY bankmaster.sno, monthlysalarystatement.branchid, branchmaster.branchname, employedetails.fullname, employedetails.employee_num, monthlysalarystatement.netpay, employedetails.empid,  employebankdetails.bankid, employebankdetails.ifsccode, monthlysalarystatement.bankaccountno, monthlysalarystatement.ifsccode, monthlysalarystatement.emptype,  monthlysalarystatement.gross,  monthlysalarystatement.basic, monthlysalarystatement.salary, monthlysalarystatement.deptid, monthlysalarystatement.designation, employedetails.cellphone, monthlysalarystatement.extrapay ORDER BY employedetails.empid) AS A WHERE  (NOT EXISTS (SELECT        B.sno, B.Companyid, B.branchid, B.empid, B.employecode, B.empname, B.designation, B.netpay, B.bankaccountno, B.ifsccode, B.emptype, B.bankid, B.deptid, B.refno FROM  subbankformatmaster AS B INNER JOIN bankformatmaster ON B.refno = bankformatmaster.sno WHERE (A.empid = B.empid) AND (bankformatmaster.month = @month) AND (bankformatmaster.year = @year)))");
                    cmd.Parameters.Add("@branchid", branchname);
                    cmd.Parameters.Add("@month", month);
                    cmd.Parameters.Add("@year", year);
                    cmd.Parameters.Add("@bankid", bankid);
                    DataTable Branchdata = vdm.SelectQuery(cmd).Tables[0];
                    btype = string.Empty;
                    btype = bank.bankarrysid;
                    foreach (DataRow dr in Branchdata.Rows)
                    {
                        branchwisebankdetails getBranches = new branchwisebankdetails();
                        getBranches.branchid = dr["branchid"].ToString();
                        getBranches.bankid = dr["bankid"].ToString();
                        getBranches.ifsc = dr["ifsccode"].ToString();
                        getBranches.branchname = dr["branchname"].ToString();
                        getBranches.Employeename = dr["fullname"].ToString();
                        getBranches.Employeecode = dr["employee_num"].ToString();

                        getBranches.designation = dr["designation"].ToString();
                        getBranches.salary = dr["salary"].ToString();
                        getBranches.basic = dr["basic"].ToString();
                        getBranches.empphonnum = dr["cellphone"].ToString();
                        getBranches.gross = dr["gross"].ToString();
                        getBranches.bankaccountno = dr["bankaccountno"].ToString();
                        getBranches.emptype = dr["emptype"].ToString();
                        getBranches.deptid = dr["deptid"].ToString();
                        getBranches.empid = dr["empid"].ToString();
                        string extrapay = dr["extrapay"].ToString();
                        string netpay = dr["netpay"].ToString();
                        if (extrapay != "")
                        {
                            double extramount = Convert.ToDouble(extrapay);
                            double netamt = Convert.ToDouble(netpay);
                            double totalamount = Math.Round(extramount + netamt, 0);
                            getBranches.Netpay = totalamount.ToString();
                        }
                        else
                        {
                            getBranches.Netpay = dr["netpay"].ToString();
                        }
                        getBranchList.Add(getBranches);
                    }
                }
            }
            else
            {
            }
            string respnceString = GetJson(getBranchList);
            context.Response.Write(respnceString);
        }
        catch
        {
        }
    }
    public class bankwiseempdetails
    {
        public string bankid { get; set; }
        public string ifsccode { get; set; }
        public string sno { get; set; }
        public string Bankname { get; set; }
        public string branchname { get; set; }
        public string branchid { get; set; }
        public string empname { get; set; }
        public string empcode { get; set; }
        public string Netpay { get; set; }
        public string month { get; set; }
        public string year { get; set; }
        public string filename { get; set; }
        public string btnval { get; set; }
        public string designation { get; set; }
        public string department { get; set; }
        public string salary { get; set; }
        public string basic { get; set; }
        public string gross { get; set; }
        public string bankaccountno { get; set; }
        public string emptype { get; set; }
        public string deptid { get; set; }
        public string empid { get; set; }
        public string Selectedid { get; set; }
        public string empphonnum { get; set; }
        public List<bankwiseempdetails> emparry { get; set; }
        public string bankarrysid { set; get; }
    }
    private void save_emp_bankformatedetails(string jsonString, HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            var js = new JavaScriptSerializer();
            var emptitle1 = context.Request.Params[1];
            bankwiseempdetails obj = js.Deserialize<bankwiseempdetails>(jsonString);
            string bankid = obj.bankid;
            string filename = obj.filename;
            string ifsc = obj.ifsccode;
            string branchid = obj.branchid;
            string Employeecode = obj.empcode;
            string Employeename = obj.empname;
            string Netpay = obj.Netpay;
            string designation = obj.designation;
            string salary = obj.salary;
            string basic = obj.basic;
            string gross = obj.gross;
            string emptype = obj.emptype;
            string deptid = obj.deptid;
            string bankaccountno = obj.bankaccountno;
            string empid = obj.empid;
            string month = obj.month;
            string year = obj.year;
            string userid = context.Session["userid"].ToString();
            string Companyid = context.Session["company_id"].ToString();
            string btnval = obj.btnval;
            DateTime ServerDateCurrentdate = DBManager.GetTime(vdm.conn);

            cmd = new SqlCommand("SELECT filename, branchid, month, year, doe, status, userid FROM bankformatmaster WHERE  (branchid = @branchid) AND (filename=@filename) GROUP BY filename, branchid, month, year, doe, status, userid");
            cmd.Parameters.Add("@branchid", obj.branchid);
            cmd.Parameters.Add("@filename", obj.filename);
            DataTable Branchdata = vdm.SelectQuery(cmd).Tables[0];
            if (Branchdata.Rows.Count > 0)
            {
                string response = GetJson("THIS FILENAME ALREADY EXIST ");
                context.Response.Write(response);
            }
            else
            {
                cmd = new SqlCommand("insert into bankformatmaster (filename, branchid, month, year, doe, status, userid ) values (@filename,@branchid,@month,@year,@doe,@status,@userid)");
                cmd.Parameters.Add("@filename", obj.filename);
                cmd.Parameters.Add("@branchid", obj.branchid);
                cmd.Parameters.Add("@month", month);
                cmd.Parameters.Add("@year", obj.year);
                cmd.Parameters.Add("@status", "1");
                cmd.Parameters.Add("@userid", userid);
                cmd.Parameters.Add("@doe", ServerDateCurrentdate);
                vdm.insert(cmd);
                cmd = new SqlCommand("Select max(sno) as sno From bankformatmaster");
                DataTable dtcollection = vdm.SelectQuery(cmd).Tables[0];
                string refsno = dtcollection.Rows[0]["sno"].ToString();
                foreach (bankwiseempdetails es in obj.emparry)
                {

                    cmd = new SqlCommand("insert into subbankformatmaster ( Companyid, branchid, empid, employecode, empname, designation, netpay, bankaccountno, ifsccode, emptype, bankid, deptid,mobileno, refno) values (@Companyid,@branchid,@empid,@employecode,@empname,@designation,@netpay,@bankaccountno,@ifsccode,@emptype,@bankid,@deptid,@empphonnum,@refno)");
                    cmd.Parameters.Add("@Companyid", Companyid);
                    cmd.Parameters.Add("@branchid", es.branchid);
                    cmd.Parameters.Add("@empid", es.empid);
                    cmd.Parameters.Add("@employecode", es.empcode);
                    cmd.Parameters.Add("@empname", es.empname);
                    cmd.Parameters.Add("@designation", es.designation);
                    cmd.Parameters.Add("@netpay", es.Netpay);
                    cmd.Parameters.Add("@bankaccountno", es.bankaccountno);
                    cmd.Parameters.Add("@ifsccode", es.ifsccode);
                    cmd.Parameters.Add("@emptype", es.emptype);
                    cmd.Parameters.Add("@bankid", es.bankid);
                    cmd.Parameters.Add("@deptid", es.deptid);
                    cmd.Parameters.Add("@empphonnum", es.empphonnum);
                    cmd.Parameters.Add("@refno", refsno);
                    vdm.insert(cmd);
                }
                string response1 = GetJson("Insert Successfully");
                context.Response.Write(response1);

            }

        }
        catch (Exception ex)
        {
            string response = GetJson(ex.Message);
            context.Response.Write(response);
        }
    }
    //
    private void get_filenames_details(HttpContext context)
    {
        try
        {
            vdm = new DBManager();

            string branchname = context.Request["branchname"].ToString();
            string month = context.Request["month"].ToString();
            string year = context.Request["year"].ToString();
            cmd = new SqlCommand("SELECT filename, branchid, month, year, doe, status, userid FROM bankformatmaster WHERE (month = @month) AND (year = @year) AND (branchid = @branchid) GROUP BY filename, branchid, month, year, doe, status, userid");
            cmd.Parameters.Add("@branchid", branchname);
            cmd.Parameters.Add("@month", month);
            cmd.Parameters.Add("@year", year);
            DataTable Branchdata = vdm.SelectQuery(cmd).Tables[0];
            List<bankwiseempdetails> getBranchList = new List<bankwiseempdetails>();

            foreach (DataRow dr in Branchdata.Rows)
            {
                bankwiseempdetails getBranches = new bankwiseempdetails();
                getBranches.filename = dr["filename"].ToString();
                getBranchList.Add(getBranches);
            }

            string respnceString = GetJson(getBranchList);
            context.Response.Write(respnceString);
        }
        catch
        {
        }
    }

    private void get_empbankformate_details(HttpContext context)
    {
        try
        {
            vdm = new DBManager();

            string branchname = context.Request["branchname"].ToString();
            string month = context.Request["month"].ToString();
            string year = context.Request["year"].ToString();
            string filename = context.Request["filename"].ToString();
            cmd = new SqlCommand("SELECT subbankformatmaster.refno AS refsno, subbankformatmaster.sno AS Sno, subbankformatmaster.Companyid, subbankformatmaster.branchid, subbankformatmaster.empid, subbankformatmaster.employecode,  subbankformatmaster.empname, subbankformatmaster.designation, subbankformatmaster.netpay, subbankformatmaster.bankaccountno, subbankformatmaster.ifsccode, subbankformatmaster.emptype, subbankformatmaster.bankid, subbankformatmaster.deptid, bankformatmaster.filename FROM   bankformatmaster INNER JOIN subbankformatmaster ON bankformatmaster.sno = subbankformatmaster.refno WHERE        (bankformatmaster.month = @month) AND (bankformatmaster.year = @year) AND (bankformatmaster.branchid = @branchid) AND (bankformatmaster.filename = @filename)");
            cmd.Parameters.Add("@branchid", branchname);
            cmd.Parameters.Add("@month", month);
            cmd.Parameters.Add("@year", year);
            cmd.Parameters.Add("@filename", filename);
            DataTable Branchdata = vdm.SelectQuery(cmd).Tables[0];
            DataSet ds = new DataSet();
            List<bankwiseempdetails> getBranchList = new List<bankwiseempdetails>();

            foreach (DataRow dr in Branchdata.Rows)
            {
                bankwiseempdetails getBranches = new bankwiseempdetails();
                getBranches.empcode = dr["employecode"].ToString();
                getBranches.empname = dr["empname"].ToString();
                getBranches.designation = dr["designation"].ToString();
                getBranches.filename = dr["filename"].ToString();
                getBranches.Netpay = dr["netpay"].ToString();
                //getBranches.filename = dr["filename"].ToString();
                //getBranches.filename = dr["filename"].ToString();
                //getBranches.filename = dr["filename"].ToString();
                //getBranches.filename = dr["filename"].ToString();
                //getBranches.filename = dr["filename"].ToString();
                getBranchList.Add(getBranches);
            }

            string respnceString = GetJson(getBranchList);
            context.Response.Write(respnceString);
        }
        catch
        {
        }
    }


    private void Getdepartemntandbranchwisesalary(HttpContext context)
    {
        try
        {
            vdm = new DBManager();

            string mainbranch = context.Session["mainbranch"].ToString();
            string month = context.Request["month"];
            string Year = context.Request["year"];
            cmd = new SqlCommand("SELECT SUM(CAST(monthlysalarystatement.netpay AS numeric(9, 2))) AS Netpay, departments.department, branchmaster.branchname FROM monthlysalarystatement INNER JOIN branchmapping ON monthlysalarystatement.branchid = branchmapping.subbranch INNER JOIN branchmaster ON monthlysalarystatement.branchid = branchmaster.branchid INNER JOIN departments ON monthlysalarystatement.deptid = departments.deptid WHERE (monthlysalarystatement.month = @month) AND (monthlysalarystatement.year = @year) AND (branchmapping.mainbranch = @m) GROUP BY departments.department, branchmaster.branchname");
            cmd.Parameters.Add("@m", mainbranch);
            cmd.Parameters.Add("@month", month);
            cmd.Parameters.Add("@year", Year);
            DataTable Branchdata = vdm.SelectQuery(cmd).Tables[0];
            DataSet ds = new DataSet();
            List<branchwiseesalary> getBranchList = new List<branchwiseesalary>();
            List<branchwiseesalary> EmployeDetalis = new List<branchwiseesalary>();

            foreach (DataRow dr in Branchdata.Rows)
            {
                branchwiseesalary getBranches = new branchwiseesalary();
                getBranches.Netpay = dr["Netpay"].ToString();
                getBranches.department = dr["department"].ToString();
                getBranches.branchname = dr["branchname"].ToString();
                EmployeDetalis.Add(getBranches);
            }
            branchwiseesalary GetValues = new branchwiseesalary();
            GetValues.EmployeDetalis = EmployeDetalis;
            getBranchList.Add(GetValues);
            string respnceString = GetJson(getBranchList);
            context.Response.Write(respnceString);
        }
        catch
        {
        }
    }
    public class branchwiseesalary
    {
        public string bankid { get; set; }
        public string ifsccode { get; set; }
        public string sno { get; set; }
        public string Bankname { get; set; }
        public string branchname { get; set; }
        public string branchid { get; set; }
        public string empname { get; set; }
        public string empcode { get; set; }
        public string grosspay { get; set; }
        public string Netpay { get; set; }
        public string month { get; set; }
        public string year { get; set; }
        public string filename { get; set; }
        public string btnval { get; set; }
        public string designation { get; set; }
        public string department { get; set; }
        public string salary { get; set; }
        public string basic { get; set; }
        public string gross { get; set; }
        public string bankaccountno { get; set; }
        public string emptype { get; set; }
        public string employeecount { get; set; }
        public string deptid { get; set; }
        public string empid { get; set; }
        public string Selectedid { get; set; }
        public List<branchwiseesalary> Employecount { get; set; }
        public List<branchwiseesalary> EmployeDetalis { get; set; }
        public List<string> branchnamecount { get; set; }
        public List<string> countgross { get; set; }
        public List<string> countgen { get; set; }
        public List<string> departmentcount { get; set; }
        public List<string> netpay2 { get; set; }
        public List<string> netpay1 { get; set; }
        public string bankarrysid { set; get; }

        public string branchtype { set; get; }
        public string branchnames { set; get; }
        public string empcounts { set; get; }
        public string Netpays { set; get; }
        public string totgrosss { set; get; }
        public string staffempcounts { set; get; }
        public string casualempcounts { set; get; }

        public string totalbankpaymenyt { set; get; }
        public string totaloutstandings { set; get; }
    }
    private void Getbranchwisesalaryandemployeecount(HttpContext context)
    {
        try
        {
            vdm = new DBManager();

            string mainbranch = context.Session["mainbranch"].ToString();
            string company_code = context.Session["company_code"].ToString();
            DataSet ds = new DataSet();
            List<branchwiseesalary> getBranchList = new List<branchwiseesalary>();
            List<branchwiseesalary> EmployeDetalis = new List<branchwiseesalary>();
            List<branchwiseesalary> Employecount = new List<branchwiseesalary>();
            List<string> branchlistList = new List<string>();
            List<string> countList = new List<string>();
            string month = context.Request["month"];
            string Year = context.Request["year"];
            //DateTime mydate = DateTime.Now;
            //DateTime dt = DateTime.Now;
            //dt = dt.AddMonths(-1);
            //int month = dt.Month;
            //int Year = mydate.Year;
            DataTable dttotalemployes = new DataTable();
            DataTable dtbranch = new DataTable();
            string branch_id;
            string branchname;
            double total;
            cmd = new SqlCommand("SELECT branchmaster.branchname, branchmaster.branchid, company_master.companyname FROM branchmaster INNER JOIN branchmapping ON branchmaster.branchid = branchmapping.subbranch INNER JOIN company_master ON branchmaster.company_code = company_master.sno WHERE (branchmapping.mainbranch = @m) AND (branchmaster.company_code = @company) GROUP BY branchmaster.branchname, branchmaster.branchid, company_master.companyname");
            cmd.Parameters.Add("@m", mainbranch);
            cmd.Parameters.Add("@company", company_code);
            dtbranch = vdm.SelectQuery(cmd).Tables[0];
            if (dtbranch.Rows.Count > 0)
            {
                foreach (DataRow dr in dtbranch.Rows)
                {
                    string branch = dr["branchname"].ToString();
                    branch_id = dr["branchid"].ToString();
                    branchname = branch;
                    cmd = new SqlCommand("SELECT COUNT(*) AS totalemp FROM  employedetails INNER JOIN branchmapping ON employedetails.branchid = branchmapping.subbranch WHERE (employedetails.status = 'No') AND (employedetails.branchid = @branchid) AND (branchmapping.mainbranch = @m)");
                    //cmd = new SqlCommand("SELECT Count(*) AS totalemp FROM employedetails WHERE branchid=@branchid AND status='No'");
                    cmd.Parameters.Add("@branchid", branch_id);
                    cmd.Parameters.Add("@m", mainbranch);
                    dttotalemployes = vdm.SelectQuery(cmd).Tables[0];
                    if (dttotalemployes.Rows.Count > 0)
                    {
                        foreach (DataRow drr in dttotalemployes.Rows)
                        {
                            string temp = drr["totalemp"].ToString();//totalemployee
                            total = Convert.ToInt32(temp);
                            branchwiseesalary getBranches = new branchwiseesalary();
                            string empcount = drr["totalemp"].ToString();
                            if (empcount != "0")
                            {
                                getBranches.employeecount = drr["totalemp"].ToString();
                                getBranches.branchname = branch;
                                Employecount.Add(getBranches);
                                branchlistList.Add(branch);
                            }
                            else
                            {
                                getBranches.employeecount = "0";
                                getBranches.branchname = branch;
                                Employecount.Add(getBranches);
                                branchlistList.Add(branch);
                            }
                        }
                    }


                    cmd = new SqlCommand("SELECT  SUM(CAST(monthlysalarystatement.netpay AS numeric(9, 2))) AS Netpay, branchmaster.branchname, branchmaster.branchid, company_master.companyname FROM            branchmaster INNER JOIN branchmapping ON branchmaster.branchid = branchmapping.subbranch INNER JOIN      company_master ON branchmaster.company_code = company_master.sno INNER JOIN monthlysalarystatement ON branchmaster.branchid = monthlysalarystatement.branchid WHERE        (branchmapping.mainbranch = @m) AND (branchmaster.company_code = @company) AND (monthlysalarystatement.month = @month) AND (monthlysalarystatement.year = @year) AND  (monthlysalarystatement.branchid = @branchid) GROUP BY branchmaster.branchname, branchmaster.branchid, company_master.companyname ORDER BY branchmaster.branchid");
                    cmd.Parameters.Add("@company", company_code);
                    cmd.Parameters.Add("@branchid", branch_id);
                    cmd.Parameters.Add("@m", mainbranch);
                    cmd.Parameters.Add("@month", month);
                    cmd.Parameters.Add("@year", Year);
                    DataTable Branchdata = vdm.SelectQuery(cmd).Tables[0];

                    foreach (DataRow drn in Branchdata.Rows)
                    {
                        branchwiseesalary getBranches = new branchwiseesalary();
                        string netpay = drn["Netpay"].ToString();
                        if (netpay == "")
                        {
                            getBranches.Netpay = "0";
                        }
                        else
                        {
                            getBranches.Netpay = drn["Netpay"].ToString();
                        }
                        getBranches.branchname = branch;
                        EmployeDetalis.Add(getBranches);

                        string countgen = drn["Netpay"].ToString();
                        if (countgen == "")
                        {
                            countgen = "0";
                        }
                        countList.Add(countgen);
                    }
                }
            }
            branchwiseesalary GetValues = new branchwiseesalary();
            GetValues.EmployeDetalis = EmployeDetalis;
            GetValues.Employecount = Employecount;
            GetValues.countgen = countList;
            GetValues.branchnamecount = branchlistList;
            getBranchList.Add(GetValues);
            string respnceString = GetJson(getBranchList);
            context.Response.Write(respnceString);
        }
        catch
        {
        }
    }


    private void Getdepartemntandbranchwisesalarychart(HttpContext context)
    {
        try
        {
            vdm = new DBManager();

            string mainbranch = context.Session["mainbranch"].ToString();
            string branchid = context.Request["branchid"].ToString();
            DateTime mydate = DateTime.Now;
            DateTime dt = DateTime.Now;
            dt = dt.AddMonths(-2);
            int month = dt.Month;
            int Year = mydate.Year;
            cmd = new SqlCommand("SELECT SUM(CAST(monthlysalarystatement.netpay AS numeric(9, 2))) AS Netpay, departments.department FROM monthlysalarystatement INNER JOIN branchmapping ON monthlysalarystatement.branchid = branchmapping.subbranch INNER JOIN branchmaster ON monthlysalarystatement.branchid = branchmaster.branchid INNER JOIN departments ON monthlysalarystatement.deptid = departments.deptid WHERE (monthlysalarystatement.month = @month) AND (monthlysalarystatement.year = @year) AND (branchmapping.mainbranch = @m)  AND (branchmaster.branchname = @branchid) GROUP BY departments.department, branchmaster.branchname");
            cmd.Parameters.Add("@branchid", branchid);
            cmd.Parameters.Add("@m", mainbranch);
            cmd.Parameters.Add("@month", month);
            cmd.Parameters.Add("@year", Year);
            DataTable dt2 = vdm.SelectQuery(cmd).Tables[0];
            List<branchwiseesalary> departbranchnetpaylist = new List<branchwiseesalary>();
            List<branchwiseesalary> branchnamelist = new List<branchwiseesalary>();
            List<string> branchlist = new List<string>();
            List<string> branchnetpaylist = new List<string>();
            List<string> getdepartmentList = new List<string>();
            List<string> netpay2list = new List<string>();
            List<string> branchname2list = new List<string>();
            foreach (DataRow dr in dt2.Rows)
            {
                getdepartmentList.Add(dr["department"].ToString());
                string netpay1 = dr["Netpay"].ToString();
                if (netpay1 == "")
                {
                    netpay1 = "0";
                }
                branchnetpaylist.Add(netpay1);
            }
            branchwiseesalary GetValues = new branchwiseesalary();
            GetValues.netpay1 = branchnetpaylist;
            GetValues.departmentcount = getdepartmentList;
            departbranchnetpaylist.Add(GetValues);
            string respnceString = GetJson(departbranchnetpaylist);
            context.Response.Write(respnceString);
        }
        catch
        {
        }
    }
    private void get_DeptemployeesAttendence(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            string branchid = context.Request["branchid"];
            string department = context.Request["department"];
            string mainbranch = context.Session["mainbranch"].ToString();
            string DOA = context.Request["doe"];
            DateTime dtDOE = Convert.ToDateTime(DOA);
            DateTime ServerDateCurrentdate = DBManager.GetTime(vdm.conn);
            string curentdt = Convert.ToDateTime(ServerDateCurrentdate).ToString("MM/dd/yyyy");
            DateTime dt = Convert.ToDateTime(curentdt);
            //if (dtDOE == dt)
            //{
            //    dtDOE = GetLowDate(dtDOE).AddDays(-1);
            //}
            //cmd = new SqlCommand("SELECT  Atten.empid, Atten.fullname, Atten.Expr1, Atten.employee_num, daily.sno, daily.branchid, daily.empid AS Expr2, daily.status, daily.doe, daily.attendance_date,daily.remarks FROM  (SELECT t1.empid, t1.fullname, ISNULL(f2.D, '') AS Expr1, t1.employee_num FROM (SELECT empid, fullname, employee_num FROM employedetails WHERE (branchid = @branchid) AND (employee_dept = @empdept) AND (status = 'No')) AS t1 LEFT OUTER JOIN (SELECT Eid, D FROM  (SELECT EmpId AS Eid, CONVERT(nvarchar(20), LogDate, 103) AS D FROM AttendanceLogs WHERE (LogDate BETWEEN @d1 AND @d2) AND (BranchId = @branchid) GROUP BY EmpId, LogDate) AS t2 GROUP BY Eid, D) AS f2 ON t1.empid = f2.Eid) AS Atten LEFT OUTER JOIN (SELECT sno, branchid, empid, status, doe, attendance_date, remarks FROM dailyattandancedetails WHERE (attendance_date BETWEEN @d1 AND @d2)) AS daily ON Atten.empid = daily.empid");
            cmd = new SqlCommand("SELECT   t1.EmpId, t1.logdate, employedetails.empid AS empsno, employedetails.fullname, branchmaster.branchname, branchmaster.branchid, designation.designation FROM  branchmaster INNER JOIN employedetails ON branchmaster.branchid = employedetails.branchid INNER JOIN designation ON employedetails.designationid = designation.designationid INNER JOIN branchmapping ON branchmaster.branchid = branchmapping.subbranch INNER JOIN departments ON employedetails.employee_dept = departments.deptid LEFT OUTER JOIN (SELECT DISTINCT EmpId, CONVERT(varchar, LogDate, 103) AS logdate FROM   AttendanceLogs WHERE  (LogDate BETWEEN @d1 AND @d2)) AS t1 ON employedetails.empid = t1.EmpId WHERE  (employedetails.status = 'No') AND (employedetails.empid IS NOT NULL) AND (branchmapping.mainbranch <> 0) AND (branchmaster.branchid = @branchid) AND (departments.deptid = @deptid)");
            cmd.Parameters.Add("@branchid", branchid);
            cmd.Parameters.Add("@deptid", department);
            cmd.Parameters.Add("@d1", GetLowDate(dtDOE));
            cmd.Parameters.Add("@d2", GetHighDate(dtDOE));
            DataTable dtemp = vdm.SelectQuery(cmd).Tables[0];
            List<Employeedet> bankMasterlist = new List<Employeedet>();
            if (dtemp.Rows.Count > 0)
            {
                foreach (DataRow dr in dtemp.Rows)
                {
                    Employeedet GetEmployee = new Employeedet();
                    GetEmployee.empsno = dr["empsno"].ToString();
                    GetEmployee.employee_name = dr["fullname"].ToString();
                    //GetEmployee.registrationid = dr["employee_num"].ToString();
                    GetEmployee.branchid = dr["branchid"].ToString();
                    GetEmployee.status = dr["EmpId"].ToString();
                    string EmpId = dr["EmpId"].ToString();
                    if (EmpId != "")
                    {
                        GetEmployee.status = "P";
                    }
                    string date = dr["logdate"].ToString();
                    GetEmployee.Date = date;
                    bankMasterlist.Add(GetEmployee);
                }
            }
            string response = GetJson(bankMasterlist);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }
    public class todayleavedetails
    {
        public string empname { get; set; }
        public string status { get; set; }

    }
    private void Gettodayleavedetails(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            DateTime todate = DateTime.Now;
            DateTime fromdate = DateTime.Now;
            string mainbranch = context.Session["mainbranch"].ToString();
            string txtfromdate = context.Request["fromdate"].ToString();
            string txttodate = context.Request["todate"].ToString();

            DateTime dtfromdate = Convert.ToDateTime(txtfromdate);
            DateTime dttodate = Convert.ToDateTime(txttodate);
            //DateTime todate = DateTime.Now;
            //DateTime fromdate = DateTime.Now;
            //string filename = context.Request["filename"].ToString();
            cmd = new SqlCommand("SELECT la.leaveapplicationid, la.employee_no, la.remarks, la.leave_description, la.request_to, la.request_date, la.leave_from_dt, la.leave_to_dt, la.leave_satus, la.employee_no AS Expr1, la.aproved_by, la.operated_by, la.leave_type_id, la.mobile_number, la.leave_days, ed.fullname, lt.leavetypecode, et.fullname AS approvedby, lt.leavetype FROM  leave_application AS la INNER JOIN leavetypes AS lt ON la.leave_type_id = lt.leavetypeid INNER JOIN employedetails AS et ON et.empid = la.request_to INNER JOIN employedetails AS ed ON la.employee_no = ed.empid INNER JOIN branchmapping ON et.branchid = branchmapping.subbranch INNER JOIN branchmaster ON ed.branchid = branchmaster.branchid WHERE (et.status = 'No') AND (branchmapping.mainbranch = @m) AND (la.request_date BETWEEN @d1 AND @d2) ORDER BY la.leave_from_dt");
            cmd.Parameters.Add("@m", mainbranch);
            cmd.Parameters.Add("@d1", GetLowDate(dtfromdate));
            cmd.Parameters.Add("@d2", GetHighDate(dttodate));
            DataTable Branchdata = vdm.SelectQuery(cmd).Tables[0];
            DataSet ds = new DataSet();
            List<todayleavedetails> getBranchList = new List<todayleavedetails>();
            foreach (DataRow dr in Branchdata.Rows)
            {
                todayleavedetails getBranches = new todayleavedetails();
                getBranches.empname = dr["fullname"].ToString();
                string status = dr["leave_satus"].ToString();
                if (status == "P")
                {
                    getBranches.status = "Pending";
                }
                else if (status == "A")
                {
                    getBranches.status = "Approved";
                }
                else if (status == "R")
                {
                    getBranches.status = "Reject";

                }
                getBranchList.Add(getBranches);
            }
            string respnceString = GetJson(getBranchList);
            context.Response.Write(respnceString);
        }
        catch
        {
        }
    }



    public class salaryadvanceRequest
    {
        public string sno { set; get; }
        public string empid { set; get; }
        public string joindate { set; get; }
        public string purpose_of_advance { set; get; }
        public string Advanceamount { set; get; }
        public string fullname { set; get; }
        public string status { set; get; }
        public string designation { set; get; }
        public string branchname { set; get; }
        public string Empcode { set; get; }
    }

    private void get_salaryadvanceRequestDetails(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            string mainbranch = context.Session["mainbranch"].ToString();
            cmd = new SqlCommand("SELECT salaryadvance.empid, salaryadvance.amount,  salaryadvance.sno, salaryadvance.status, salaryadvance.remarks, salaryadvance.doe, salaryadvance.employee_num, employedetails.joindate, employedetails.fullname, branchmaster.branchname FROM            salaryadvance INNER JOIN employedetails ON salaryadvance.empid = employedetails.empid INNER JOIN  branchmaster ON employedetails.branchid = branchmaster.branchid INNER JOIN   branchmapping ON branchmaster.branchid = branchmapping.subbranch WHERE        (employedetails.status = 'No') AND (branchmapping.mainbranch = @m) AND (salaryadvance.status ='P')");
            cmd.Parameters.Add("@m", mainbranch);
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<salaryadvanceRequest> emploanlist = new List<salaryadvanceRequest>();
            foreach (DataRow dr in routes.Rows)
            {
                salaryadvanceRequest getloanrequest = new salaryadvanceRequest();
                getloanrequest.sno = dr["sno"].ToString();
                getloanrequest.empid = dr["empid"].ToString();
                getloanrequest.Empcode = dr["employee_num"].ToString();
                getloanrequest.branchname = dr["branchname"].ToString();
                getloanrequest.Advanceamount = dr["amount"].ToString();
                getloanrequest.joindate = ((DateTime)dr["joindate"]).ToString("yyyy-MM-dd"); //dr["joindate"].ToString();
                getloanrequest.purpose_of_advance = dr["remarks"].ToString();
                getloanrequest.fullname = dr["fullname"].ToString();
                string loanstatus = dr["status"].ToString();
                if (loanstatus == "P")
                {
                    loanstatus = "Pending";

                }
                else if (loanstatus == "A")
                {
                    loanstatus = "Approved";

                }
                else if (loanstatus == "R")
                {
                    loanstatus = "Reject";

                }
                getloanrequest.status = loanstatus;
                emploanlist.Add(getloanrequest);
            }
            string response = GetJson(emploanlist);
            context.Response.Write(response);
        }
        catch
        {
        }
    }
    private void save_salaryadvancerequest_approve_click(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            DateTime ServerDateCurrentdate = DBManager.GetTime(vdm.conn);
            string sno = context.Request["sno"];
            string purpose_of_loan = context.Request["purpose_of_loan"];
            cmd = new SqlCommand("update salaryadvance set doe=@doe,status=@status  where sno=@sno");
            cmd.Parameters.Add("@doe", ServerDateCurrentdate);
            cmd.Parameters.Add("@status", "A");
            cmd.Parameters.Add("@sno", sno);
            vdm.Update(cmd);
            string msg = " loan Aporval successfully Approved";
            string Response = GetJson(msg);
            context.Response.Write(Response);
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);

        }
    }

    private void save_salaryadvancerequest_reject_click(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            DateTime ServerDateCurrentdate = DBManager.GetTime(vdm.conn);
            string sno = context.Request["sno"];
            string rejectremarks = context.Request["rejectremarks"];
            cmd = new SqlCommand("update salaryadvance set doe=@doe,status=@status where sno=@sno");
            cmd.Parameters.Add("@doe", ServerDateCurrentdate);
            cmd.Parameters.Add("@status", "R");
            cmd.Parameters.Add("@sno", sno);
            vdm.Update(cmd);
            string msg = " Regination successfully rejected";
            string Response = GetJson(msg);
            context.Response.Write(Response);
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);

        }
    }

    private void get_Branch_details_id(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            string mainbranch = context.Session["mainbranch"].ToString();
            string branchid = context.Request["branchname"];
            //cmd = new SqlCommand("SELECT branchname,branchid,statename,emailid,phone,address,todate,fromdate,branchtype,night_allowance FROM branchmaster order by branchname");
            cmd = new SqlCommand("SELECT branchmaster.branchname,branchmaster.sapcode, branchmaster.company_code, branchmaster.branchcode, branchmaster.branchid, branchmaster.statename, branchmaster.emailid, branchmaster.phone, branchmaster.address,  branchmaster.todate, branchmaster.fromdate, branchmaster.branchtype, branchmaster.night_allowance, company_master.companyname FROM  branchmaster INNER JOIN company_master ON branchmaster.company_code = company_master.sno INNER JOIN branchmapping ON branchmaster.branchid = branchmapping.subbranch WHERE (branchmapping.mainbranch = @m)and (branchmaster.branchid=@branchid) ORDER BY branchmaster.branchname");
            cmd.Parameters.Add("@m", mainbranch);
            cmd.Parameters.Add("@branchid", branchid);
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<BranchDetalis> EmployeDetalis = new List<BranchDetalis>();
            foreach (DataRow dr in routes.Rows)
            {
                BranchDetalis getbrcdetails = new BranchDetalis();
                getbrcdetails.branchname = dr["branchname"].ToString();
                getbrcdetails.companyname = dr["companyname"].ToString();
                getbrcdetails.company_code = dr["company_code"].ToString();
                getbrcdetails.branchid = dr["branchid"].ToString();
                getbrcdetails.statename = dr["statename"].ToString();
                getbrcdetails.emailid = dr["emailid"].ToString();
                getbrcdetails.Phone = dr["phone"].ToString();
                getbrcdetails.address = dr["address"].ToString();
                getbrcdetails.todate = dr["todate"].ToString();
                getbrcdetails.fromdate = dr["fromdate"].ToString();
                getbrcdetails.nightallowance = dr["night_allowance"].ToString();
                getbrcdetails.branchtype = dr["branchtype"].ToString();
                getbrcdetails.branchcode = dr["branchcode"].ToString();
                getbrcdetails.sapcode = dr["sapcode"].ToString();

                EmployeDetalis.Add(getbrcdetails);
            }
            string response = GetJson(EmployeDetalis);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }
    public class loginemployeedetails
    {
        public string sno { get; set; }
        public string employeename { get; set; }
        public string logintime { get; set; }
        public string logouttime { get; set; }
        public string ipaddress { get; set; }
        public string devicetype { get; set; }
        public string leveltype { get; set; }
        public string loginstatus { get; set; }
        public string sessiontimeout { get; set; }

        public string indate { get; set; }
        public string intime { get; set; }
        public string outdate { get; set; }
        public string outtime { get; set; }
        public string timeinterval { get; set; }
    }
    private void get_loginemployee_details(HttpContext context)
    {
        string BranchID = context.Session["branchid"].ToString();
        cmd = new SqlCommand("SELECT employedetails.fullname,  employe_logins.empcode, employe_logins.empid, employe_logins.username, employe_logins.password, employe_logins.loginstatus, employe_logins.leveltype, employe_logins.branchid FROM  employe_logins INNER JOIN employedetails ON employe_logins.empid = employedetails.empid  WHERE (employe_logins.branchid = @branchid)");
        cmd.Parameters.Add("@branchid", BranchID);
        DataTable dtemployee = vdm.SelectQuery(cmd).Tables[0];
        List<loginemployeedetails> emloyeeedetalis = new List<loginemployeedetails>();
        if (dtemployee.Rows.Count > 0)
        {
            foreach (DataRow dr in dtemployee.Rows)
            {
                loginemployeedetails details = new loginemployeedetails();
                details.sno = dr["empid"].ToString();
                details.employeename = dr["fullname"].ToString();
                details.leveltype = dr["leveltype"].ToString();
                string status = dr["loginstatus"].ToString();
                if (status == "False")
                {
                    status = "InActive";
                }
                if (status == "True")
                {
                    status = "Active";
                }
                details.loginstatus = status;
                emloyeeedetalis.Add(details);
            }
            string response = GetJson(emloyeeedetalis);
            context.Response.Write(response);
        }
    }
    private void btn_getlogininfoemployee_details(HttpContext context)
    {
        string BranchID = context.Session["branchid"].ToString();
        string employeeid = context.Request["employeeid"];
        string fromdate = context.Request["fromdate"];
        string todate = context.Request["todate"];
        string date = context.Request["date"];
        DateTime dtfromdate = Convert.ToDateTime(fromdate);
        DateTime dttodate = Convert.ToDateTime(todate);
        DateTime dtdate = Convert.ToDateTime(date);
        if (employeeid == "" || employeeid == null)
        {
            //cmd = new SqlCommand("SELECT  employedetails.fullname, employe_logins.loginstatus, logininfo.logintime, logininfo.logouttime, logininfo.ipaddress, logininfo.devicetype, employe_logins.empid FROM  employe_logins INNER JOIN employedetails ON employe_logins.empid = employedetails.empid INNER JOIN logininfo ON employedetails.empid = logininfo.empid WHERE  (employe_logins.branchid = @branchid) AND (logininfo.logintime BETWEEN @D1 AND @D2)");
            cmd = new SqlCommand("SELECT  employedetails.fullname, employe_logins.loginstatus, logininfo.logintime, CONVERT(VARCHAR(11), logininfo.Logintime, 106) AS indate,CONVERT(VARCHAR(11), logininfo.Logintime, 108) AS intime, CONVERT(VARCHAR(11), logininfo.LogoutTime, 106) AS outdate, CONVERT(VARCHAR(11), logininfo.LogoutTime, 108) AS outtime, logininfo.logouttime, logininfo.ipaddress, logininfo.devicetype, employe_logins.empid FROM  employe_logins INNER JOIN employedetails ON employe_logins.empid = employedetails.empid INNER JOIN logininfo ON employedetails.empid = logininfo.empid WHERE  (employe_logins.branchid = @branchid) AND (logininfo.logintime BETWEEN @D1 AND @D2)");
            cmd.Parameters.Add("@d1", GetLowDate(dtdate));
            cmd.Parameters.Add("@d2", GetHighDate(dtdate));
            cmd.Parameters.Add("@branchid", BranchID);
        }
        else
        {
            //cmd = new SqlCommand("SELECT  employedetails.fullname, employe_logins.loginstatus, logininfo.logintime, logininfo.logouttime, logininfo.ipaddress, logininfo.devicetype, employe_logins.empid FROM  employe_logins INNER JOIN employedetails ON employe_logins.empid = employedetails.empid INNER JOIN logininfo ON employedetails.empid = logininfo.empid WHERE   (employe_logins.branchid = @branchid) AND (logininfo.logintime BETWEEN @D1 AND @D2) AND (employedetails.empid = @userid)");
            cmd = new SqlCommand("SELECT  employedetails.fullname, employe_logins.loginstatus, logininfo.logintime, logininfo.logouttime, CONVERT(VARCHAR(11), logininfo.Logintime, 106) AS indate,CONVERT(VARCHAR(11), logininfo.Logintime, 108) AS intime, CONVERT(VARCHAR(11), logininfo.LogoutTime, 106) AS outdate, CONVERT(VARCHAR(11), logininfo.LogoutTime, 108) AS outtime, logininfo.ipaddress, logininfo.devicetype, employe_logins.empid FROM  employe_logins INNER JOIN employedetails ON employe_logins.empid = employedetails.empid INNER JOIN logininfo ON employedetails.empid = logininfo.empid WHERE   (employe_logins.branchid = @branchid) AND (logininfo.logintime BETWEEN @D1 AND @D2) AND (employedetails.empid = @userid)");
            cmd.Parameters.Add("@userid", employeeid);
            cmd.Parameters.Add("@d1", GetLowDate(dtfromdate));
            cmd.Parameters.Add("@d2", GetHighDate(dttodate));
            cmd.Parameters.Add("@branchid", BranchID);
        }
        DataTable dtloginfo = vdm.SelectQuery(cmd).Tables[0];
        List<loginemployeedetails> emloyeeedetalis = new List<loginemployeedetails>();
        if (dtloginfo.Rows.Count > 0)
        {
            foreach (DataRow dr in dtloginfo.Rows)
            {
                string LogoutTimes = dr["LogoutTime"].ToString();
                if (LogoutTimes != "")
                {
                    loginemployeedetails details = new loginemployeedetails();
                    details.sno = dr["empid"].ToString();
                    details.employeename = dr["fullname"].ToString();
                    details.logintime = dr["logintime"].ToString();
                    details.logouttime = dr["logouttime"].ToString();

                    details.ipaddress = dr["IpAddress"].ToString();
                    details.devicetype = dr["devicetype"].ToString();
                    details.indate = dr["indate"].ToString();
                    details.intime = dr["intime"].ToString();
                    details.outdate = dr["outdate"].ToString();
                    details.outtime = dr["outtime"].ToString();
                    string Logintime = dr["Logintime"].ToString();
                    string LogoutTime = dr["LogoutTime"].ToString();
                    string intime = dr["intime"].ToString();
                    string outtime = dr["outtime"].ToString();
                    TimeSpan difference = DateTime.Parse(outtime) - DateTime.Parse(intime);
                    double hourDiff = difference.TotalHours;
                    double minutes = difference.TotalMinutes;
                    details.timeinterval = Math.Round(hourDiff, 2).ToString();
                    emloyeeedetalis.Add(details);
                }
            }
            string response = GetJson(emloyeeedetalis);
            context.Response.Write(response);
        }
    }
    private void get_branchdetails(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            string companyid = context.Session["company_id"].ToString();
            string bid = context.Session["branchid"].ToString();
            string mainbranch = context.Session["mainbranch"].ToString();
            if (bid == mainbranch || bid == "1")
            {
                cmd = new SqlCommand("SELECT branchmaster.branchid, branchmaster.branchname, company_master.sno,company_master.companyname FROM branchmapping INNER JOIN branchmaster ON branchmapping.subbranch = branchmaster.branchid INNER JOIN company_master ON branchmaster.company_code = company_master.sno WHERE (branchmapping.mainbranch = @m) AND (branchmaster.company_code = @company)");
                cmd.Parameters.Add("@company", companyid);
                cmd.Parameters.Add("@m", mainbranch);
            }
            else
            {
                cmd = new SqlCommand("SELECT branchmaster.branchid, branchmaster.branchname, company_master.sno,company_master.companyname FROM branchmapping INNER JOIN branchmaster ON branchmapping.subbranch = branchmaster.branchid INNER JOIN company_master ON branchmaster.company_code = company_master.sno WHERE (branchmapping.subbranch = @m) AND (branchmaster.company_code = @company)");
                cmd.Parameters.Add("@company", companyid);
                cmd.Parameters.Add("@m", bid);
            }
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<Companyfillbranch> companyMasterlist = new List<Companyfillbranch>();
            foreach (DataRow dr in routes.Rows)
            {
                Companyfillbranch getcompanydetails = new Companyfillbranch();
                getcompanydetails.CompanyCode = dr["sno"].ToString();
                getcompanydetails.CompanyName = dr["companyname"].ToString();
                getcompanydetails.branchname = dr["branchname"].ToString();
                getcompanydetails.branchid = dr["branchid"].ToString();
                companyMasterlist.Add(getcompanydetails);
            }
            string response = GetJson(companyMasterlist);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }
    private void get_canteenAttendence(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            string branchid = context.Request["branchid"];
            string DOA = context.Request["DOA"];
            DateTime dtDOE = Convert.ToDateTime(DOA);

            if (branchid == "ALL")
            {
                cmd = new SqlCommand("SELECT empid,employee_num, fullname FROM employedetails where  (status = 'No') ");
            }
            else
            {
                cmd = new SqlCommand("SELECT empid,employee_num, fullname FROM employedetails where (branchid = @branchid) AND (status = 'No') ");
                cmd.Parameters.Add("@branchid", branchid);
            }
            DataTable dtemp = vdm.SelectQuery(cmd).Tables[0];

            if (branchid == "ALL")
            {
                cmd = new SqlCommand("SELECT   * FROM canteen_attendence WHERE  (doe BETWEEN @d1 AND @d2)");
                cmd.Parameters.Add("@d1", GetLowDate(dtDOE));
                cmd.Parameters.Add("@d2", GetHighDate(dtDOE));
            }
            else
            {
                cmd = new SqlCommand("SELECT   * FROM canteen_attendence WHERE  (doe BETWEEN @d1 AND @d2) AND (branchid = @branchid)");
                cmd.Parameters.Add("@d1", GetLowDate(dtDOE));
                cmd.Parameters.Add("@d2", GetHighDate(dtDOE));
                cmd.Parameters.Add("@branchid", branchid);
            }
            DataTable dtcanatt = vdm.SelectQuery(cmd).Tables[0];
            List<Employeecanteen> bankMasterlist = new List<Employeecanteen>();
            int breakfastcount = 0;
            int lunchcount = 0;
            int dinnercount = 0;
            if (dtemp.Rows.Count > 0)
            {

                foreach (DataRow dr in dtemp.Rows)
                {
                    string empid = dr["empid"].ToString();
                    string empname = dr["fullname"].ToString();
                    string empno = dr["employee_num"].ToString();
                    string breakfast = "";
                    string lunch = "";
                    string dinner = "";
                    string datetime = "";
                    foreach (DataRow dra in dtcanatt.Select("empid='" + dr["empid"].ToString() + "'"))
                    {
                        breakfast = dra["breakfast"].ToString();
                        lunch = dra["lunch"].ToString();
                        dinner = dra["dinner"].ToString();

                        string date = dra["doe"].ToString();
                        DateTime Date1 = Convert.ToDateTime(date);
                        datetime = Date1.ToString("dd/MM/yyyy");
                    }
                    Employeecanteen GetEmployee = new Employeecanteen();
                    GetEmployee.empsno = empid;
                    GetEmployee.employee_name = empname;
                    GetEmployee.employee_num = empno;
                    if (breakfast == "0" || breakfast == "")
                    {
                        GetEmployee.breakfast = "";
                    }
                    else
                    {
                        GetEmployee.breakfast = breakfast;
                        breakfastcount++;
                    }
                    if (lunch == "0" || lunch == "")
                    {
                        GetEmployee.lunch = "";
                    }
                    else
                    {
                        GetEmployee.lunch = lunch;
                        lunchcount++;

                    }
                    if (dinner == "0" || dinner == "")
                    {
                        GetEmployee.dinner = "";
                    }
                    else
                    {
                        GetEmployee.dinner = dinner;
                        dinnercount++;
                    }
                    GetEmployee.date = datetime;
                    GetEmployee.breakfastcount = breakfastcount.ToString();
                    GetEmployee.lunchcount = lunchcount.ToString();
                    GetEmployee.dinnercount = dinnercount.ToString();
                    bankMasterlist.Add(GetEmployee);
                }
            }
            string response = GetJson(bankMasterlist);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }

    private void save_Finalize_Attendence(string jsonString, HttpContext context)
    {
        try
        {
            var js = new JavaScriptSerializer();
            var title1 = context.Request.Params[1];
            canteenAttence obj = js.Deserialize<canteenAttence>(jsonString);
            string pdate = obj.DOA;
            DateTime DOA = Convert.ToDateTime(pdate);
            string entry_by = context.Session["empid"].ToString();
            string branchid = context.Session["branchid"].ToString();
            string bid = obj.branchid;
            DateTime ServerDateCurrentdate = DBManager.GetTime(vdm.conn);
            vdm = new DBManager();
            cmd = new SqlCommand("DELETE FROM canteen_attendence WHERE doe BETWEEN @d1 AND @d2 AND branchid=@bid");
            cmd.Parameters.Add("@d1", GetLowDate(DOA));
            cmd.Parameters.Add("@d2", GetHighDate(DOA));
            cmd.Parameters.Add("@bid", bid);
            vdm.Delete(cmd);
            foreach (empCanteenclass es in obj.employeeslist)
            {
                cmd = new SqlCommand("insert into canteen_attendence (empid,doe,branchid,entry_by,entrydate,breakfast,lunch,dinner) values (@employee ,@doe,@branchid,@entry_by,@entrydate,@breakfast,@lunch,@dinner)");
                cmd.Parameters.Add("@employee", es.employee);
                cmd.Parameters.Add("@doe", DOA);
                cmd.Parameters.Add("@entrydate", ServerDateCurrentdate);
                cmd.Parameters.Add("@entry_by", entry_by);
                cmd.Parameters.Add("@breakfast", es.Breakfast);
                cmd.Parameters.Add("@lunch", es.lunch);
                cmd.Parameters.Add("@dinner", es.dinner);
                if (bid == "ALL")
                {
                    cmd.Parameters.Add("@branchid", branchid);
                }
                else
                {
                    cmd.Parameters.Add("@branchid", bid);
                }
                vdm.insert(cmd);
            }

            string response = GetJson("Insert Successfully");
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string response = GetJson(ex.Message);
            context.Response.Write(response);
        }
    }
    private void save_canteen_Details(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            string branchid = context.Request["branchid"];
            string Sno = context.Request["Sno"];
            string type = context.Request["type"];
            string amount = context.Request["amount"];
            string btnval = context.Request["btnval"];
            if (btnval == "Save")
            {
                cmd = new SqlCommand("insert into Canteen_Master (branchid,type,amount) values (@branchid,@type,@amount)");
                cmd.Parameters.Add("@branchid", branchid);
                cmd.Parameters.Add("@type", type);
                cmd.Parameters.Add("@amount", amount);
                vdm.insert(cmd);
                string Response = GetJson("Insert Successfully");
                context.Response.Write(Response);
            }
            else
            {
                cmd = new SqlCommand("Update Canteen_Master set branchid=@branchid,type=@type,amount=@amount where Sno=@Sno");
                cmd.Parameters.Add("@type", type);
                cmd.Parameters.Add("@branchid", branchid);
                cmd.Parameters.Add("@amount", amount);
                cmd.Parameters.Add("@Sno", Sno);
                vdm.Update(cmd);
                string response = GetJson("Update Successfully");
                context.Response.Write(response);
            }
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }

    }
    public class getcanteendetailes
    {
        public string Sno { get; set; }
        public string breakfast { get; set; }
        public string lunch { get; set; }
        public string dinner { get; set; }
        public string branchid { get; set; }
        public string branchname { get; set; }
        public string type { get; set; }
        public string amount { get; set; }

    }
    private void get_canteen_details(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            string branchid = context.Session["branchid"].ToString();
            cmd = new SqlCommand("SELECT   branchmaster.branchname, Canteen_Master.branchid,Canteen_Master.type, Canteen_Master.amount,Canteen_Master.Sno FROM Canteen_Master INNER JOIN  branchmaster ON Canteen_Master.branchid = branchmaster.branchid");
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<getcanteendetailes> bankMasterlist = new List<getcanteendetailes>();
            foreach (DataRow dr in routes.Rows)
            {
                getcanteendetailes canteendetails = new getcanteendetailes();
                canteendetails.branchname = dr["branchname"].ToString();
                canteendetails.Sno = dr["Sno"].ToString();
                canteendetails.branchid = dr["branchid"].ToString();
                string b = "";
                string type = dr["type"].ToString();
                if (type == "1")
                {
                    b = "Breakfast";
                }
                if (type == "2")
                {
                    b = "Lunch";
                }
                if (type == "3")
                {
                    b = "Dinner";
                }
                canteendetails.type = b;
                canteendetails.amount = dr["amount"].ToString();
                bankMasterlist.Add(canteendetails);
            }
            string response = GetJson(bankMasterlist);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);

        }
    }
    private void get_salaryadvanceDetails(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            string mainbranch = context.Session["mainbranch"].ToString();
            cmd = new SqlCommand("SELECT salaryadvance.empid, salaryadvance.amount,  salaryadvance.sno, salaryadvance.status, salaryadvance.remarks, salaryadvance.doe, salaryadvance.employee_num, employedetails.joindate, employedetails.fullname, branchmaster.branchname FROM salaryadvance INNER JOIN employedetails ON salaryadvance.empid = employedetails.empid INNER JOIN  branchmaster ON employedetails.branchid = branchmaster.branchid INNER JOIN   branchmapping ON branchmaster.branchid = branchmapping.subbranch WHERE (employedetails.status = 'No') AND (branchmapping.mainbranch = @m) AND (salaryadvance.status ='P')");
            cmd.Parameters.Add("@m", mainbranch);
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<salaryadvanceRequest> emploanlist = new List<salaryadvanceRequest>();
            foreach (DataRow dr in routes.Rows)
            {
                salaryadvanceRequest getloanrequest = new salaryadvanceRequest();
                getloanrequest.sno = dr["sno"].ToString();
                getloanrequest.empid = dr["empid"].ToString();
                getloanrequest.Empcode = dr["employee_num"].ToString();
                getloanrequest.branchname = dr["branchname"].ToString();
                getloanrequest.Advanceamount = dr["amount"].ToString();
                getloanrequest.joindate = ((DateTime)dr["joindate"]).ToString("yyyy-MM-dd"); //dr["joindate"].ToString();
                getloanrequest.purpose_of_advance = dr["remarks"].ToString();
                getloanrequest.fullname = dr["fullname"].ToString();
                string loanstatus = dr["status"].ToString();
                if (loanstatus == "P")
                {
                    loanstatus = "Pending";

                }
                else if (loanstatus == "A")
                {
                    loanstatus = "Approved";

                }
                else if (loanstatus == "R")
                {
                    loanstatus = "Reject";

                }
                getloanrequest.status = loanstatus;
                emploanlist.Add(getloanrequest);
            }
            string response = GetJson(emploanlist);
            context.Response.Write(response);
        }
        catch
        {
        }
    }
    private void save_salaryadvance_reject_click(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            DateTime ServerDateCurrentdate = DBManager.GetTime(vdm.conn);
            string sno = context.Request["sno"];
            string rejectremarks = context.Request["rejectremarks"];
            cmd = new SqlCommand("update salaryadvance set doe=@doe,status=@status where sno=@sno");
            cmd.Parameters.Add("@doe", ServerDateCurrentdate);
            cmd.Parameters.Add("@status", "R");
            cmd.Parameters.Add("@sno", sno);
            vdm.Update(cmd);
            string msg = " Regination successfully rejected";
            string Response = GetJson(msg);
            context.Response.Write(Response);
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);

        }
    }
    private void save_salaryadvance_approve_click(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            DateTime ServerDateCurrentdate = DBManager.GetTime(vdm.conn);
            string sno = context.Request["sno"];
            string purpose_of_loan = context.Request["purpose_of_loan"];
            cmd = new SqlCommand("update salaryadvance set doe=@doe,status=@status  where sno=@sno");
            cmd.Parameters.Add("@doe", ServerDateCurrentdate);
            cmd.Parameters.Add("@status", "A");
            cmd.Parameters.Add("@sno", sno);
            vdm.Update(cmd);
            string msg = " loan Aporval successfully Approved";
            string Response = GetJson(msg);
            context.Response.Write(Response);
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);

        }
    }
    private void get_employeetype_fill(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            string mainbranch = context.Session["mainbranch"].ToString();
            cmd = new SqlCommand("SELECT employee_type FROM employedetails INNER JOIN branchmapping ON employedetails.branchid = branchmapping.subbranch where (employee_type<>'') AND (branchmapping.mainbranch = @mainbranch) GROUP BY employee_type");
            cmd.Parameters.Add("@mainbranch", mainbranch);
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<Companyfillbranch> empMasterlist = new List<Companyfillbranch>();
            foreach (DataRow dr in routes.Rows)
            {
                Companyfillbranch getempdetails = new Companyfillbranch();
                getempdetails.employee_type = dr["employee_type"].ToString();
                empMasterlist.Add(getempdetails);
            }
            string response = GetJson(empMasterlist);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }
    public class pttaxlist
    {
        public string empnum { get; set; }
        public string fullname { get; set; }
        public string pttax { get; set; }
        public string branchname { get; set; }
        public string branchid { get; set; }
        public string pttaxsum { get; set; }
        public string title { get; set; }
        public string address { get; set; }
    }
    private void get_professionaltax_details(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            string type = context.Request["type"];
            string branchid = context.Request["branchid"];
            string month = context.Request["month"];
            string year = context.Request["year"];
            string title = "";
            string address = "";
            address = context.Session["Address"].ToString();
            title = context.Session["TitleName"].ToString();

            if (type == "1")
            {
                cmd = new SqlCommand("SELECT employedetails.employee_num, employedetails.fullname, monthlysalarystatement.pt, monthlysalarystatement.month, monthlysalarystatement.year FROM employedetails INNER JOIN monthlysalarystatement ON employedetails.empid = monthlysalarystatement.empid WHERE (employedetails.branchid = @branchid) AND (monthlysalarystatement.month = @month) AND (monthlysalarystatement.year = @year)");
                cmd.Parameters.Add("@branchid", branchid);
                cmd.Parameters.Add("@month", month);
                cmd.Parameters.Add("@year", year);
                DataTable dtpttax = vdm.SelectQuery(cmd).Tables[0];
                List<pttaxlist> pttaxlist = new List<pttaxlist>();
                if (dtpttax.Rows.Count > 0)
                {
                    var i = 1;
                    foreach (DataRow dr in dtpttax.Rows)
                    {

                        pttaxlist getpttaxdetails = new pttaxlist();
                        getpttaxdetails.empnum = dr["employee_num"].ToString();
                        getpttaxdetails.fullname = dr["fullname"].ToString();
                        getpttaxdetails.pttax = dr["pt"].ToString();
                        getpttaxdetails.title = title;
                        getpttaxdetails.address = address;
                        pttaxlist.Add(getpttaxdetails);
                    }
                    string response = GetJson(pttaxlist);
                    context.Response.Write(response);
                }
                else
                {
                    string response = "No data Found";
                    context.Response.Write(response);
                }
            }
            else
            {
                cmd = new SqlCommand("SELECT branchmaster.branchname, ROUND(SUM(monthlysalarystatement.pt), 2) AS ProfessionalTax, monthlysalarystatement.month, monthlysalarystatement.year FROM employedetails INNER JOIN branchmaster ON employedetails.branchid = branchmaster.branchid INNER JOIN monthlysalarystatement ON employedetails.empid = monthlysalarystatement.empid WHERE (monthlysalarystatement.month = @month) AND (monthlysalarystatement.year = @year) GROUP BY branchmaster.branchname, monthlysalarystatement.month, monthlysalarystatement.year");
                cmd.Parameters.Add("@month", month);
                cmd.Parameters.Add("@year", year);
                DataTable dtpttax = vdm.SelectQuery(cmd).Tables[0];
                List<pttaxlist> pttaxlist = new List<pttaxlist>();
                if (dtpttax.Rows.Count > 0)
                {
                    var i = 1;
                    foreach (DataRow dr in dtpttax.Rows)
                    {
                        pttaxlist getpttaxdetails = new pttaxlist();
                        getpttaxdetails.branchid = dr["branchname"].ToString();
                        getpttaxdetails.pttaxsum = dr["ProfessionalTax"].ToString();
                        getpttaxdetails.title = title;
                        getpttaxdetails.address = address;
                        pttaxlist.Add(getpttaxdetails);
                    }
                    string response = GetJson(pttaxlist);
                    context.Response.Write(response);
                }
                else
                {
                    string response = "No data Found";
                    context.Response.Write(response);
                }
            }
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }
    private void get_branch_details(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            string mbranchname = context.Request["mbranchname"].ToString();
            string mainbranch = context.Session["mainbranch"].ToString();
            cmd = new SqlCommand("SELECT    branchmaster.branchid, branchmaster.branchname, branchmaster.address, branchmaster.phone, branchmaster.emailid, branchmaster.statename, branchmaster.fromdate, branchmaster.todate, branchmaster.night_allowance, branchmaster.branchtype, branchmaster.company_code, branchmaster.branchcode, branchmaster.sapcode, branchmaster.estdyear, branchmaster.incharge, branchmaster.lat, branchmaster.long FROM     branchmaster INNER JOIN branchmapping ON branchmaster.branchid = branchmapping.subbranch WHERE   (branchmaster.company_code = @companyid) AND (branchmapping.mainbranch = @m)");
            cmd.Parameters.Add("@companyid", mbranchname);
            cmd.Parameters.Add("@m", mainbranch);
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<Companyfillbranch> empMasterlist = new List<Companyfillbranch>();
            foreach (DataRow dr in routes.Rows)
            {
                Companyfillbranch getempdetails = new Companyfillbranch();
                getempdetails.branchname = dr["branchname"].ToString();
                getempdetails.branchid = dr["branchid"].ToString();
                empMasterlist.Add(getempdetails);
            }
            string response = GetJson(empMasterlist);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }
    private void save_ProfessionalTax_Details(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            string statename = context.Request["statename"];
            string Sno = context.Request["Sno"];
            string operation = context.Request["operation"];
            string salary = context.Request["salary"];
            string amount = context.Request["amount"];
            string btnval = context.Request["btnval"];
            if (btnval == "Save")
            {
                cmd = new SqlCommand("insert into ProfessionalTax_Master (state,operation,salary,amount) values (@state,@operation,@salary,@amount)");
                cmd.Parameters.Add("@state", statename);
                cmd.Parameters.Add("@operation", operation);
                cmd.Parameters.Add("@salary", salary);
                cmd.Parameters.Add("@amount", amount);
                vdm.insert(cmd);
                string Response = GetJson("Insert Successfully");
                context.Response.Write(Response);
            }
            else
            {
                cmd = new SqlCommand("Update ProfessionalTax_Master set state=@state,operation=@operation,salary=@salary,amount=@amount where Sno=@Sno");
                cmd.Parameters.Add("@state", statename);
                cmd.Parameters.Add("@operation", operation);
                cmd.Parameters.Add("@salary", salary);
                cmd.Parameters.Add("@amount", amount);
                cmd.Parameters.Add("@Sno", Sno);
                vdm.Update(cmd);
                string response = GetJson("Update Successfully");
                context.Response.Write(response);
            }
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }

    }
    public class ProfessionalTax
    {
        public string statename { get; set; }
        public string operation { get; set; }
        public string salary { get; set; }
        public string amount { get; set; }
        public string Sno { get; set; }
        public string operation1 { get; set; }

    }
    private void get_ProfessionalTax_details(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            cmd = new SqlCommand("SELECT   Sno, state, operation, salary, amount FROM ProfessionalTax_Master ");
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<ProfessionalTax> pttaxdetails = new List<ProfessionalTax>();
            foreach (DataRow dr in routes.Rows)
            {
                ProfessionalTax getpttaxdetails = new ProfessionalTax();
                getpttaxdetails.statename = dr["state"].ToString();
                getpttaxdetails.operation1 = dr["operation"].ToString();
                string opt = "";
                string operation = dr["operation"].ToString();
                if (operation == "1")
                {
                    opt = "equal to";
                }
                if (operation == "2")
                {
                    opt = "not equal";
                }
                if (operation == "3")
                {
                    opt = "greater than";
                }
                if (operation == "4")
                {
                    opt = "less than";
                }
                if (operation == "5")
                {
                    opt = "greater than or equal to";
                }
                if (operation == "6")
                {
                    opt = "less than or equal to";
                }
                if (operation == "7")
                {
                    opt = "greater than or equal to and less than or equal to";
                }
                if (operation == "8")
                {
                    opt = "less than or equal to and greater than or equal to";
                }
                getpttaxdetails.operation = opt;
                getpttaxdetails.salary = dr["salary"].ToString();
                getpttaxdetails.amount = dr["amount"].ToString();
                getpttaxdetails.Sno = dr["Sno"].ToString();
                pttaxdetails.Add(getpttaxdetails);
            }
            string response = GetJson(pttaxdetails);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);

        }
    }

    public class employeeagedetails
    {
        public string empnum { get; set; }
        public string fullname { get; set; }
        public string branchname { get; set; }
        public string branchid { get; set; }
        public string age { get; set; }
        public string title { get; set; }
        public string employee_type { get; set; }
        public string address { get; set; }
    }
    private void get_employeeage_details(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            string branchid = context.Request["branchid"];
            string title = "";
            string address = "";
            address = context.Session["Address"].ToString();
            title = context.Session["TitleName"].ToString();
            cmd = new SqlCommand("SELECT employee_num,fullname,employee_type,age FROM employedetails WHERE (branchid = @branchid) AND (status = 'No')");
            cmd.Parameters.Add("@branchid", branchid);
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<employeeagedetails> empagelist = new List<employeeagedetails>();
            foreach (DataRow dr in routes.Rows)
            {
                employeeagedetails getempagedetails = new employeeagedetails();
                getempagedetails.empnum = dr["employee_num"].ToString();
                getempagedetails.fullname = dr["fullname"].ToString();
                getempagedetails.age = dr["age"].ToString();
                getempagedetails.employee_type = dr["employee_type"].ToString();
                getempagedetails.title = title;
                getempagedetails.address = address;
                empagelist.Add(getempagedetails);
            }
            string response = GetJson(empagelist);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }
    //----shiva-----//

    public class Leavemngmnt
    {
        public string description { get; set; }
        public string request_to { get; set; }
        public string request_date { get; set; }
        public string leave_from_dt { get; set; }
        public string fromdate { get; set; }
        public string todate { get; set; }
        public string leave_satus { get; set; }
        public string employee_no { get; set; }
        public string aproved_by { get; set; }
        public string operated_by { get; set; }
        public string department { get; set; }
        public string mobile_number { get; set; }
        public string NoOfdays { get; set; }
        public string remarks { get; set; }
        public string approve_remarks { get; set; }
        public string fullname { get; set; }
        public string designation { get; set; }
        public string branchcode { get; set; }
        public string leavetype { get; set; }
        public string mobilenum { get; set; }

    }
    private void get_leaveapprv_details(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            cmd = new SqlCommand("SELECT employedetails.empid, employedetails.fullname, leave_application.leave_to_dt AS Expr1, leave_application.leave_days AS Expr2, leave_application.leaveapplicationid, leave_application.leave_description, leave_application.request_to, leave_application.request_date, leave_application.leave_from_dt, leave_application.leave_to_dt, leave_application.leave_satus, leave_application.employee_no, leave_application.aproved_by, leave_application.operated_by, leave_application.leave_type_id, leave_application.mobile_number, leave_application.leave_days, leave_application.remarks,leave_application.approve_remarks, designation.designation, departments.department, branchmaster.branchcode  FROM     leave_application INNER JOIN employedetails ON leave_application.employee_no = employedetails.empid INNER JOIN designation ON employedetails.designationid = designation.designationid INNER JOIN departments ON employedetails.employee_dept = departments.deptid INNER JOIN branchmaster ON employedetails.branchid = branchmaster.branchid");
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<Leavemngmnt> IDProofslist = new List<Leavemngmnt>();
            foreach (DataRow dr in routes.Rows)
            {
                Leavemngmnt getIDProofs = new Leavemngmnt();
                getIDProofs.description = dr["leave_description"].ToString();
                getIDProofs.fromdate = ((DateTime)dr["leave_from_dt"]).ToString("MM-dd-yyy");
                getIDProofs.todate = ((DateTime)dr["leave_to_dt"]).ToString("MM-dd-yyy");
                getIDProofs.leave_satus = dr["leave_satus"].ToString();
                getIDProofs.employee_no = dr["fullname"].ToString();
                getIDProofs.fullname = dr["employee_no"].ToString();
                getIDProofs.aproved_by = dr["aproved_by"].ToString();
                getIDProofs.operated_by = dr["operated_by"].ToString();
                getIDProofs.department = dr["department"].ToString();
                getIDProofs.mobile_number = dr["mobile_number"].ToString();
                getIDProofs.NoOfdays = dr["leave_days"].ToString();
                getIDProofs.branchcode = dr["branchcode"].ToString();
                getIDProofs.designation = dr["designation"].ToString();
                getIDProofs.leavetype = dr["leave_type_id"].ToString();
                getIDProofs.mobilenum = dr["mobile_number"].ToString();
                IDProofslist.Add(getIDProofs);
            }
            string response = GetJson(IDProofslist);
            context.Response.Write(response);
        }
        catch
        {
        }
    }

    public class branchwisefill
    {
        public string branchname { get; set; }
        public string branchid { get; set; }
    }
    private void get_branchwise_details(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            cmd = new SqlCommand("SELECT   branchid,branchname from branchmaster");
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<branchwisefill> branchwiselist = new List<branchwisefill>();
            foreach (DataRow dr in routes.Rows)
            {
                branchwisefill getbranchlist = new branchwisefill();
                getbranchlist.branchid = dr["branchid"].ToString();
                getbranchlist.branchname = dr["branchname"].ToString();
                branchwiselist.Add(getbranchlist);
            }
            string response = GetJson(branchwiselist);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }
    public class conso_report
    {
        public string branchname { get; set; }
        public string branchid { get; set; }
        public string gross { get; set; }
        public string Netpay { get; set; }
    }
    private void get_conso_report(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            string branchid = context.Request["branchid"];
            string year = context.Request["year"];
            cmd = new SqlCommand("SELECT    branchmaster.branchname, SUM(monthlysalarystatement.gross) AS gross, SUM(monthlysalarystatement.netpay) AS Netpay   FROM    monthlysalarystatement INNER JOIN  branchmaster ON monthlysalarystatement.branchid = branchmaster.branchid   WHERE (monthlysalarystatement.year = @year) AND (monthlysalarystatement.branchid = @branch) GROUP BY branchmaster.branchname");
            cmd.Parameters.Add("@branch", branchid);
            cmd.Parameters.Add("@year", year);
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<conso_report> consoreport = new List<conso_report>();
            foreach (DataRow dr in routes.Rows)
            {
                conso_report getconsoreport = new conso_report();
                getconsoreport.branchname = dr["branchname"].ToString();
                getconsoreport.gross = dr["gross"].ToString();
                getconsoreport.Netpay = dr["Netpay"].ToString();
                consoreport.Add(getconsoreport);
            }
            string response = GetJson(consoreport);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }
    //--------------shiva----------------//
    public class attendancefill
    {
        public string ToatalEmpPresent { get; set; }
        public string totemp { get; set; }
        public string absentemploys { get; set; }
        public string branchname { get; set; }
    }
    private void btn_attendance_click(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            string doe = context.Request["doe"].ToString();
            DateTime dtDOE = Convert.ToDateTime(doe);
            string company_code = context.Request["company_code"].ToString();
            string branchid = context.Request["branchid"].ToString();

            if (branchid != "ALL")
            {
                List<attendancefill> empMasterlist = new List<attendancefill>();
                //cmd = new SqlCommand("SELECT  COUNT(*) AS ToatalEmpPresent FROM  (SELECT   TOP (100) PERCENT adl.EmpId, adl.BranchId, adl.Status, bm.company_code, bm.branchname FROM  AttendanceLogs AS adl INNER JOIN branchmaster AS bm ON adl.BranchId = bm.branchid WHERE  (adl.LogDate BETWEEN @d1 AND @d2) AND (bm.company_code = @companycode) AND (adl.BranchId = @branchid) GROUP BY adl.EmpId, adl.BranchId, adl.Status, bm.company_code, bm.branchname ORDER BY adl.EmpId) AS t1");
                cmd = new SqlCommand("SELECT COUNT(DISTINCT AttendanceLogs_1.EmpId) AS ToatalEmpPresent, branchmaster.branchname, branchmaster.branchid, branchmaster.company_code FROM  AttendanceLogs AS AttendanceLogs_1 INNER JOIN branchmaster ON AttendanceLogs_1.BranchId = branchmaster.branchid WHERE  (AttendanceLogs_1.BranchId = @branchid) AND (AttendanceLogs_1.LogDate BETWEEN @d1 AND @d2) AND (branchmaster.company_code = @companycode) GROUP BY branchmaster.branchname, branchmaster.branchid, branchmaster.company_code");
                cmd.Parameters.Add("@d1", GetLowDate(dtDOE));
                cmd.Parameters.Add("@d2", GetHighDate(dtDOE));
                cmd.Parameters.Add("@companycode", company_code);
                cmd.Parameters.Add("@branchid", branchid);
                DataTable routes = vdm.SelectQuery(cmd).Tables[0];
                string prasentemp = routes.Rows[0]["ToatalEmpPresent"].ToString();
                string branchname = routes.Rows[0]["branchname"].ToString();
                // total emp 
                cmd = new SqlCommand("SELECT COUNT(employedetails.empid) AS totemp FROM  employedetails INNER JOIN branchmaster ON employedetails.branchid = branchmaster.branchid WHERE (branchmaster.branchid = @branchid) AND (branchmaster.company_code = @companycode) AND (employedetails.status = 'no') GROUP BY branchmaster.branchid, branchmaster.company_code");
                cmd.Parameters.Add("@companycode", company_code);
                cmd.Parameters.Add("@branchid", branchid);
                DataTable routess = vdm.SelectQuery(cmd).Tables[0];
                double absentemployes = 0;
                string totemp = routess.Rows[0]["totemp"].ToString();

                attendancefill getempdetails = new attendancefill();
                getempdetails.branchname = branchname;
                getempdetails.ToatalEmpPresent = prasentemp;
                double totempprsnt = Convert.ToDouble(prasentemp.ToString());
                getempdetails.totemp = totemp;
                double totempls = Convert.ToDouble(totemp.ToString());
                absentemployes = totempls - totempprsnt;
                getempdetails.absentemploys = absentemployes.ToString();
                empMasterlist.Add(getempdetails);
                string response = GetJson(empMasterlist);
                context.Response.Write(response);
            }
            else
            {
                List<attendancefill> empMasterlist = new List<attendancefill>();
                cmd = new SqlCommand("SELECT COUNT(DISTINCT AttendanceLogs_1.EmpId) AS ToatalEmpPresent, branchmaster.company_code FROM  AttendanceLogs AS AttendanceLogs_1 INNER JOIN branchmaster ON AttendanceLogs_1.BranchId = branchmaster.branchid WHERE  (AttendanceLogs_1.LogDate BETWEEN @d1 AND @d2) AND (branchmaster.company_code = @companycode) GROUP BY branchmaster.company_code");
                cmd.Parameters.Add("@d1", GetLowDate(dtDOE));
                cmd.Parameters.Add("@d2", GetHighDate(dtDOE));
                cmd.Parameters.Add("@companycode", company_code);
                DataTable routes = vdm.SelectQuery(cmd).Tables[0];
                string ToatalEmpPresent = routes.Rows[0]["ToatalEmpPresent"].ToString();

                cmd = new SqlCommand("SELECT COUNT(employedetails.empid) AS totemp, branchmaster.company_code FROM  employedetails INNER JOIN branchmaster ON employedetails.branchid = branchmaster.branchid WHERE  (employedetails.status = 'no') AND (branchmaster.company_code = @companycode) GROUP BY branchmaster.company_code");
                cmd.Parameters.Add("@companycode", company_code);
                DataTable routess = vdm.SelectQuery(cmd).Tables[0];
                double totalemply = 0;
                string totemp = routess.Rows[0]["totemp"].ToString();

                attendancefill getempdetails = new attendancefill();
                getempdetails.branchname = "All";
                getempdetails.ToatalEmpPresent = ToatalEmpPresent;
                double totempprsnt = Convert.ToDouble(ToatalEmpPresent.ToString());
                getempdetails.totemp = totemp;
                double totalemp = Convert.ToDouble(totemp.ToString());
                totalemply = totalemp - totempprsnt;
                getempdetails.absentemploys = totalemply.ToString();
                empMasterlist.Add(getempdetails);
                string response = GetJson(empMasterlist);
                context.Response.Write(response);
            }
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }
    public class prasent_empreport
    {
        public string branchname { get; set; }
        public string totempprsnt { get; set; }
        public string totemply { get; set; }
        public string absentemply { get; set; }
        public string branchid { get; set; }
    }
    private void btn_prsntattendance_click(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            string doe = context.Request["doe"].ToString();
            DateTime dtDOE = Convert.ToDateTime(doe);
            string company_code = context.Request["company_code"].ToString();
            cmd = new SqlCommand("SELECT COUNT(DISTINCT AttendanceLogs_1.EmpId) AS ToatalEmpPresent, branchmaster.branchname, COUNT(DISTINCT employedetails.empid) AS totemp, branchmaster.branchid FROM   AttendanceLogs AS AttendanceLogs_1 INNER JOIN branchmaster ON AttendanceLogs_1.BranchId = branchmaster.branchid INNER JOIN employedetails ON branchmaster.branchid = employedetails.branchid WHERE (employedetails.status = 'no') AND (branchmaster.company_code = @companycode) AND (AttendanceLogs_1.LogDate BETWEEN @d1 AND @d2) GROUP BY branchmaster.branchname, branchmaster.branchid");
            //cmd = new SqlCommand("SELECT COUNT(DISTINCT AttendanceLogs_1.EmpId) AS ToatalEmpPresent, branchmaster.branchname, COUNT(DISTINCT employedetails.empid) AS totemp, branchmaster.branchid FROM   AttendanceLogs AS AttendanceLogs_1 INNER JOIN branchmaster ON AttendanceLogs_1.BranchId = branchmaster.branchid INNER JOIN employedetails ON branchmaster.branchid = employedetails.branchid WHERE (employedetails.status = 'no') AND (branchmaster.company_code = @companycode) AND (AttendanceLogs_1.LogDate BETWEEN @d1 AND @d2) GROUP BY branchmaster.branchname, branchmaster.branchid");
            cmd.Parameters.Add("@d1", GetLowDate(dtDOE));
            cmd.Parameters.Add("@d2", GetHighDate(dtDOE));
            cmd.Parameters.Add("@companycode", company_code);
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            double absentemp = 0;
            List<prasent_empreport> consoreport = new List<prasent_empreport>();
            foreach (DataRow dr in routes.Rows)
            {
                prasent_empreport getconsoreport = new prasent_empreport();
                getconsoreport.branchid = dr["branchid"].ToString();
                getconsoreport.branchname = dr["branchname"].ToString();
                string ToatalEmpPresent = dr["ToatalEmpPresent"].ToString();
                double totempprsnts = Convert.ToDouble(ToatalEmpPresent);
                getconsoreport.totempprsnt = totempprsnts.ToString();
                string totemp = dr["totemp"].ToString();
                double totemply = Convert.ToDouble(totemp);
                getconsoreport.totemply = totemply.ToString();
                absentemp = totemply - totempprsnts;
                getconsoreport.absentemply = absentemp.ToString();
                consoreport.Add(getconsoreport);
            }
            string response = GetJson(consoreport);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }
    public class depwisetotempprsnt
    {

        public string totalemployes { get; set; }
        public string presentemployes { get; set; }
        public string absentemployes { get; set; }
        public string branchname { get; set; }
        public string deptname { get; set; }
        public string branch { get; set; }
        public string deptid { get; set; }
        public string branch_id { get; set; }
        public string msg { get; set; }
        public string address { get; set; }

    }

    private void empdept_wise_attandance_details(HttpContext context)
    {
        //
        try
        {
            vdm = new DBManager();
            string branchid = context.Request["branchid"];
            string doe = context.Request["doe"];

            List<depwisetotempprsnt> attlst = new List<depwisetotempprsnt>();
            int present = 0;
            int total = 0;
            int absent = 0;
            DateTime dtdoe = Convert.ToDateTime(doe);
            DateTime ServerDateCurrentdate = DBManager.GetTime(vdm.conn);
            string curentdt = Convert.ToDateTime(ServerDateCurrentdate).ToString("MM/dd/yyyy");
            DateTime dt = Convert.ToDateTime(curentdt);
            if (dtdoe == dt)
            {
                dtdoe = GetLowDate(dtdoe).AddDays(-0);
            }
            cmd = new SqlCommand("SELECT deptid, department, status, reason, createdby, createdon, editedby, editedon  FROM  departments");
            DataTable dtdepartments = vdm.SelectQuery(cmd).Tables[0];
            if (dtdepartments.Rows.Count > 0)
            {
                foreach (DataRow drr in dtdepartments.Rows)
                {
                    string dept = drr["deptid"].ToString();
                    string department = drr["department"].ToString();
                    cmd = new SqlCommand("SELECT COUNT(*) AS totalemp, employee_dept, branchid  FROM   employedetails WHERE (employedetails.employee_dept = @deptid) AND (employedetails.status = 'No') AND (employedetails.branchid = @bid) GROUP BY employee_dept, branchid");
                    cmd.Parameters.Add("@deptid", dept);
                    cmd.Parameters.Add("@bid", branchid);
                    DataTable dtemployes = vdm.SelectQuery(cmd).Tables[0];
                    if (dtemployes.Rows.Count > 0)
                    {
                        string totaldeptemployes = dtemployes.Rows[0]["totalemp"].ToString();
                        total = Convert.ToInt32(totaldeptemployes);
                        string deptid = dtemployes.Rows[0]["employee_dept"].ToString();
                        string branch = dtemployes.Rows[0]["branchid"].ToString();
                        cmd = new SqlCommand("SELECT COUNT(*) AS totalemppresent, branchmaster_1.branchname, branchmaster_1.address FROM  (SELECT DISTINCT AttendanceLogs_1.EmpId AS ToatalEmpPresent, branchmaster.branchname, employedetails.empid, branchmaster.branchid, employedetails.employee_dept FROM   AttendanceLogs AS AttendanceLogs_1 INNER JOIN branchmaster ON AttendanceLogs_1.BranchId = branchmaster.branchid INNER JOIN employedetails ON AttendanceLogs_1.EmpId = employedetails.empid WHERE  (employedetails.status = 'no') AND (AttendanceLogs_1.LogDate BETWEEN @d1 AND @d2) AND (branchmaster.branchid = @branchid) AND (employedetails.employee_dept = @did)) AS t1 INNER JOIN branchmaster AS branchmaster_1 ON t1.branchid = branchmaster_1.branchid GROUP BY branchmaster_1.branchname, branchmaster_1.address");
                        cmd.Parameters.Add("@did", dept);
                        cmd.Parameters.Add("@branchid", branchid);
                        cmd.Parameters.Add("@D1", GetLowDate(dtdoe));
                        cmd.Parameters.Add("@D2", GetHighDate(dtdoe));
                        DataTable dtattandance = vdm.SelectQuery(cmd).Tables[0];
                        if (dtattandance.Rows.Count > 0)
                        {
                            foreach (DataRow dr in dtattandance.Rows)
                            {
                                string noofemp = dr["totalemppresent"].ToString();
                                present = Convert.ToInt32(noofemp);
                                absent = total - present;
                                depwisetotempprsnt getattdepts = new depwisetotempprsnt();
                                getattdepts.branchname = dr["branchname"].ToString();
                                getattdepts.address = dr["address"].ToString();
                                getattdepts.deptname = department;
                                getattdepts.deptid = deptid;
                                getattdepts.branch = branch;
                                getattdepts.totalemployes = total.ToString();
                                getattdepts.presentemployes = present.ToString();
                                getattdepts.absentemployes = absent.ToString();
                                attlst.Add(getattdepts);
                            }
                        }
                    }
                }
            }
            string response = GetJson(attlst);
            context.Response.Write(response);
        }
        catch
        {
        }
    }
    public class Employeewiseattendance
    {
        public string empsno { get; set; }
        public string employee_name { get; set; }
        public string attendance_status { get; set; }
        public string registrationid { get; set; }
        public string attstatus { get; set; }
        public string status { get; set; }
        public string Date { get; set; }
        public string LogDate { get; set; }
        public string branchid { get; set; }
        public string totcount { get; set; }
        public string department { get; set; }
    }
    private void get_employeeAttendence(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            string branchid = context.Request["branchid"];
            string department = context.Request["department"];
            string mainbranch = context.Session["mainbranch"].ToString();
            string DOA = context.Request["doe"];
            DateTime dtDOE = Convert.ToDateTime(DOA);
            DateTime ServerDateCurrentdate = DBManager.GetTime(vdm.conn);
            string curentdt = Convert.ToDateTime(ServerDateCurrentdate).ToString("MM/dd/yyyy");
            DateTime dt = Convert.ToDateTime(curentdt);
            if (dtDOE == dt)
            {
                dtDOE = GetLowDate(dtDOE).AddDays(-0);
            }
            cmd = new SqlCommand("SELECT  Atten.empid, Atten.fullname, Atten.Expr1, Atten.employee_num, daily.sno, daily.branchid, daily.empid AS Expr2, daily.status, daily.doe, daily.attendance_date, daily.remarks, departments.department FROM  (SELECT        t1.empid, t1.fullname, ISNULL(f2.D, '') AS Expr1, t1.employee_num FROM (SELECT  empid, fullname, employee_num FROM   employedetails WHERE  (branchid = @branchid) AND (employee_dept = @empdept) AND (status = 'No')) AS t1 LEFT OUTER JOIN (SELECT        Eid, D FROM            (SELECT  EmpId AS Eid, CONVERT(nvarchar(20), LogDate, 103) AS D FROM  AttendanceLogs WHERE (LogDate BETWEEN @d1 AND @d2) AND (BranchId = @branchid) GROUP BY EmpId, LogDate) AS t2 GROUP BY Eid, D) AS f2 ON t1.empid = f2.Eid) AS Atten INNER JOIN employedetails AS employedetails_1 ON Atten.empid = employedetails_1.empid INNER JOIN departments ON employedetails_1.employee_dept = departments.deptid LEFT OUTER JOIN (SELECT  sno, branchid, empid, status, doe, attendance_date, remarks FROM   dailyattandancedetails WHERE  (attendance_date BETWEEN @d1 AND @d2)) AS daily ON Atten.empid = daily.empid");
            cmd.Parameters.Add("@branchid", branchid);
            cmd.Parameters.Add("@empdept", department);
            cmd.Parameters.Add("@d1", GetLowDate(dtDOE));
            cmd.Parameters.Add("@d2", GetHighDate(dtDOE));

            DataTable dtemp = vdm.SelectQuery(cmd).Tables[0];
            List<Employeewiseattendance> bankMasterlist = new List<Employeewiseattendance>();
            if (dtemp.Rows.Count > 0)
            {
                cmd = new SqlCommand("SELECT COUNT(*) AS totalemp, employee_dept, branchid  FROM   employedetails WHERE (employedetails.employee_dept = @deptid) AND (employedetails.status = 'No') AND (employedetails.branchid = @bid) GROUP BY employee_dept, branchid");
                cmd.Parameters.Add("@deptid", department);
                cmd.Parameters.Add("@bid", branchid);
                DataTable dtemployes = vdm.SelectQuery(cmd).Tables[0];
                if (dtemployes.Rows.Count > 0)
                {
                    foreach (DataRow dr in dtemp.Rows)
                    {
                        Employeewiseattendance GetEmployee = new Employeewiseattendance();
                        GetEmployee.department = dr["department"].ToString();
                        GetEmployee.empsno = dr["empid"].ToString();
                        GetEmployee.empsno = dr["empid"].ToString();
                        GetEmployee.employee_name = dr["fullname"].ToString();
                        GetEmployee.registrationid = dr["employee_num"].ToString();
                        GetEmployee.status = dr["status"].ToString();
                        GetEmployee.attstatus = dr["Expr1"].ToString();
                        string attstatus = dr["Expr1"].ToString();
                        if (attstatus != "")
                        {
                            GetEmployee.attstatus = "P";
                        }
                        else
                        {
                            GetEmployee.attstatus = "A";
                        }
                        string date = dr["attendance_date"].ToString();

                        if (date != "")
                        {
                            DateTime dtDoe = Convert.ToDateTime(date);
                            string strdateTime = dtDoe.ToString("HH");
                            string strdate = dtDoe.ToString("dd/MMM");
                            GetEmployee.LogDate = strdate;
                        }
                        else
                        {


                            DateTime Date1 = Convert.ToDateTime(dtDOE);
                            string strdateTime2 = dtDOE.ToString("HH");
                            string strdate1 = dtDOE.ToString("dd/MMM");
                            GetEmployee.LogDate = strdate1;

                        }
                        GetEmployee.Date = dtDOE.ToString("dd/MM/yyyy");
                        bankMasterlist.Add(GetEmployee);
                    }
                }
                string response = GetJson(bankMasterlist);
                context.Response.Write(response);
            }
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }
    public class SamEmpDetalis
    {
        public string empname { get; set; }
        public string empnum { get; set; }
        public string empstate { get; set; }
        public string empdate { get; set; }
        public string mobilenum { get; set; }
        public string discription { get; set; }
        public string empgender { get; set; }
        public string empcheckbox { get; set; }
        public string btnval { get; set; }
        public List<SubSamEmpdetails> DataTable { get; set; }
    }

    public class SubSamEmpdetails
    {
        public string name { get; set; }
        public string type { get; set; }
        public string price { get; set; }
        public string quantity { get; set; }
        public string totprice { get; set; }
    }


    private void btn_SmplDetails_save(HttpContext context)
    {
        try
        {
            var js = new JavaScriptSerializer();
            var titles1 = context.Request.Params[1];
            SamEmpDetalis obj = js.Deserialize<SamEmpDetalis>(titles1);
            string empname = obj.empname;
            string empnum = obj.empnum;
            string empstate = obj.empstate;
            string empdate = obj.empdate;
            string mobilenum = obj.mobilenum;
            string discription = obj.discription;
            string empgender = obj.empgender;
            string empcheckbox = obj.empcheckbox;
            string btnSave = obj.btnval;
            DateTime ServerDateCurrentdate = DBManager.GetTime(vdm.conn);
            if (btnSave == "Save")
            {
                cmd = new SqlCommand("insert into Emp_MainTable (empname,empnumber,state,date,mobile,description, gender,TermsAndCondi) values (@empname,@empnum,@empstate,@empdate,@mobilenum,@discription,@empgender,@empcheckbox)");
                cmd.Parameters.Add("@empname", empname);
                cmd.Parameters.Add("@empnum", empnum);
                cmd.Parameters.Add("@empstate", empstate);
                cmd.Parameters.Add("@empdate", empdate);
                cmd.Parameters.Add("@mobilenum", mobilenum);
                cmd.Parameters.Add("@discription", discription);
                cmd.Parameters.Add("@empgender", empgender);
                cmd.Parameters.Add("@empcheckbox", empcheckbox);
                vdm.insert(cmd);

                cmd = new SqlCommand("SELECT MAX(sno) as maxno from Emp_MainTable");
                DataTable dttable = vdm.SelectQuery(cmd).Tables[0];
                if (dttable.Rows.Count > 0)
                {
                    string sno = dttable.Rows[0]["maxno"].ToString();
                    foreach (SubSamEmpdetails si in obj.DataTable)
                    {
                        if (si.name != "")
                        {
                            cmd = new SqlCommand("insert into Emp_SubTable (subno, itemname, itemtype, Price, quantity, totPrice) values (@subno, @itemname, @type, @price, @quantity,  @totprice)");
                            cmd.Parameters.Add("@subno", sno);
                            cmd.Parameters.Add("@itemname", si.name);
                            cmd.Parameters.Add("@type", si.type);
                            cmd.Parameters.Add("@price", si.price);
                            cmd.Parameters.Add("@quantity", si.quantity);
                            cmd.Parameters.Add("@totprice", si.totprice);
                            vdm.insert(cmd);
                        }
                    }
                }
                string msg = "Inserted Success fully ";
                string Response = GetJson(msg);
                context.Response.Write(Response);
            }
            else
            {
            }
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }



    public class assetdetailes1
    {
        public string sno { get; set; }
        public string empname { get; set; }
        public string empnumber { get; set; }
        public string state { get; set; }
        public string date { get; set; }
        public string mobile { get; set; }
        public string description { get; set; }
        public string gender { get; set; }
        public string TermsAndCondi { get; set; }
        public List<employeeassetclass2> DataTable { get; set; }
        public List<employeeassetclass2> DataTable1 { get; set; }

    }
    public class getempassetdetailes3
    {
        public List<assetdetailes1> assetdetailes { get; set; }
        public List<employeeassetclass2> employeeassetclass { get; set; }
    }
    public class employeeassetclass2
    {
        public string itemname { get; set; }
        public string itemtype { get; set; }
        public string Price { get; set; }
        public string quantity { get; set; }
        public string totPrice { get; set; }
        public string sno { get; set; }

    }

    public class getEmployeassetsdetails4
    {
        public string employeid { get; set; }
        public string fullname { get; set; }
        public string department { get; set; }
        public string assetname { get; set; }
        public string receiveddate { get; set; }
        public string validupto { get; set; }
        public string assetvalue { get; set; }
        public string assetdetailes { get; set; }
        public string status { get; set; }
        public string remarks { get; set; }
        public string returndate { get; set; }
        public string empcode { get; set; }
    }
    private void get_samemp_details(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            DateTime ServerDateCurrentdate = DBManager.GetTime(vdm.conn);
            cmd = new SqlCommand("SELECT Sno, empname, empnumber, state, date, mobile, description, gender, TermsAndCondi FROM Emp_MainTable ");

            DataTable dtemployee = vdm.SelectQuery(cmd).Tables[0];
            DataView view = new DataView(dtemployee);
            cmd = new SqlCommand("SELECT  subno, itemname, itemtype, Price, quantity, totPrice FROM Emp_SubTable ");
            DataTable dtsubinward = vdm.SelectQuery(cmd).Tables[0];

            List<getempassetdetailes3> getfamilydetails = new List<getempassetdetailes3>();
            List<assetdetailes1> employeelist = new List<assetdetailes1>();
            List<employeeassetclass2> subemployeelist = new List<employeeassetclass2>();
            foreach (DataRow dr in dtemployee.Rows)
            {
                assetdetailes1 getemployee = new assetdetailes1();
                getemployee.sno = dr["Sno"].ToString();
                getemployee.empname = dr["empname"].ToString();
                getemployee.empnumber = dr["empnumber"].ToString();
                getemployee.state = dr["state"].ToString();
                getemployee.date = dr["date"].ToString();
                getemployee.mobile = dr["mobile"].ToString();
                getemployee.description = dr["description"].ToString();
                getemployee.gender = dr["gender"].ToString();
                getemployee.TermsAndCondi = dr["TermsAndCondi"].ToString();
                employeelist.Add(getemployee);
            }
            foreach (DataRow dr in dtsubinward.Rows)
            {
                employeeassetclass2 getsubemployee = new employeeassetclass2();
                getsubemployee.itemname = dr["itemname"].ToString();
                getsubemployee.itemtype = dr["itemtype"].ToString();
                getsubemployee.Price = dr["Price"].ToString();
                getsubemployee.quantity = dr["quantity"].ToString();
                getsubemployee.totPrice = dr["totPrice"].ToString();
                getsubemployee.sno = dr["subno"].ToString();
                subemployeelist.Add(getsubemployee);
            }
            getempassetdetailes3 getemployeeDatas = new getempassetdetailes3();
            getemployeeDatas.assetdetailes = employeelist;
            getemployeeDatas.employeeassetclass = subemployeelist;
            getfamilydetails.Add(getemployeeDatas);
            string response = GetJson(getfamilydetails);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }
    //-----------shiva------------//

    public class get_branch_master
    {
        public string companyname { get; set; }
        public string totgross { get; set; }
        public string totnetpay { get; set; }
        public string remaingtotpay { get; set; }
        public string address { get; set; }
        public string year { get; set; }
        public string sno { get; set; }
        public string branchname { get; set; }
        public string branchid { get; set; }
        public string emptype { get; set; }
        public string department { get; set; }
        public string deptid { get; set; }
        public string empname { get; set; }
        public string totemp { get; set; }
    }
    private void generate_companywise_report(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            string year = context.Request["year"].ToString();
            cmd = new SqlCommand("SELECT  company_master.companyname, SUM(monthlysalarystatement.gross) AS totgross, SUM(monthlysalarystatement.netpay) AS totnetpay, company_master.address, monthlysalarystatement.year, COUNT(monthlysalarystatement.empid) AS totemp, company_master.sno FROM   branchmaster INNER JOIN company_master ON branchmaster.company_code = company_master.sno INNER JOIN monthlysalarystatement ON branchmaster.branchid = monthlysalarystatement.branchid WHERE (monthlysalarystatement.year = @year) AND (monthlysalarystatement.month = @month) GROUP BY company_master.address, company_master.companyname, monthlysalarystatement.year, company_master.sno");
            cmd.Parameters.Add("@year", year);
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            double remainingpay = 0;
            List<get_branch_master> branch_Masterlist = new List<get_branch_master>();
            foreach (DataRow dr in routes.Rows)
            {
                get_branch_master branch_details = new get_branch_master();
                branch_details.companyname = dr["companyname"].ToString();
                branch_details.totgross = dr["totgross"].ToString();
                double totalgrass = Convert.ToDouble(dr["totgross"].ToString());
                branch_details.totnetpay = dr["totnetpay"].ToString();
                double totalnetpay = Convert.ToDouble(dr["totnetpay"].ToString());
                remainingpay = totalgrass - totalnetpay;
                branch_details.remaingtotpay = remainingpay.ToString();
                branch_details.year = dr["year"].ToString();
                branch_details.sno = dr["sno"].ToString();
                branch_details.totemp = dr["totemp"].ToString();
                branch_Masterlist.Add(branch_details);
            }
            string response = GetJson(branch_Masterlist);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }
    public class get_gsvdtot_master
    {
        public string totgross { get; set; }
        public string sno { get; set; }
    }
    private void get_gsvdtot_report(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            DateTime ServerDateCurrentdate = DBManager.GetTime(vdm.conn);
            int from_year = ServerDateCurrentdate.Year;
            string month = context.Request["month"].ToString();
            cmd = new SqlCommand("SELECT SUM(monthlysalarystatement.salary) AS totgross, company_master.sno FROM  employedetails INNER JOIN branchmaster ON employedetails.branchid = branchmaster.branchid INNER JOIN company_master ON branchmaster.company_code = company_master.sno INNER JOIN monthlysalarystatement ON employedetails.empid = monthlysalarystatement.empid WHERE  (employedetails.status = 'no') AND (monthlysalarystatement.year = @year) AND (monthlysalarystatement.month = @month) GROUP BY company_master.sno");
            cmd.Parameters.Add("@year", from_year);
            cmd.Parameters.Add("@month", month);
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<get_gsvdtot_master> branch_Masterlist = new List<get_gsvdtot_master>();
            foreach (DataRow dr in routes.Rows)
            {
                get_gsvdtot_master branch_details = new get_gsvdtot_master();
                branch_details.totgross = dr["totgross"].ToString();
                branch_details.sno = dr["sno"].ToString();
                branch_Masterlist.Add(branch_details);
            }
            string response = GetJson(branch_Masterlist);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }
    //-----------------overal view repoprt----------------//
    public class get_svdgroup_master
    {
        public string companyname { get; set; }
        public string totgross { get; set; }
        public string totnetpay { get; set; }
        public string year { get; set; }
        public string month { get; set; }
        public string sno { get; set; }
        public string totemp { get; set; }
        public string spntotgross { get; set; }
    }

    private void get_govffto_report(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            DateTime ServerDateCurrentdate = DBManager.GetTime(vdm.conn);
            int from_year = ServerDateCurrentdate.Year;
            string month = context.Request["month"].ToString();
            cmd = new SqlCommand("SELECT  SUM(monthlysalarystatement.salary) AS totsalary FROM branchmaster INNER JOIN monthlysalarystatement ON branchmaster.branchid = monthlysalarystatement.branchid INNER JOIN company_master ON branchmaster.company_code = company_master.sno WHERE  (monthlysalarystatement.year = @year) AND (monthlysalarystatement.month = @month) AND (branchmaster.company_code = '1')");
            cmd.Parameters.Add("@year", from_year);
            cmd.Parameters.Add("@month", month);
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<get_svdgroup_master> branch_Masterlist = new List<get_svdgroup_master>();
            foreach (DataRow dr in routes.Rows)
            {
                get_svdgroup_master branch_details = new get_svdgroup_master();
                branch_details.totgross = dr["totsalary"].ToString();
                branch_Masterlist.Add(branch_details);
            }
            string response = GetJson(branch_Masterlist);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }


    private void get_svds_report(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            DateTime ServerDateCurrentdate = DBManager.GetTime(vdm.conn);
            int from_year = ServerDateCurrentdate.Year;
            string month = context.Request["month"].ToString();
            cmd = new SqlCommand("SELECT  company_master.companyname, COUNT(employedetails.empid) AS totemp, SUM(monthlysalarystatement.salary) AS totgross, SUM(monthlysalarystatement.netpay) AS totnetpay, COUNT(employedetails.empid) AS totemp, monthlysalarystatement.year, monthlysalarystatement.month, company_master.sno FROM  employedetails INNER JOIN branchmaster ON employedetails.branchid = branchmaster.branchid INNER JOIN company_master ON branchmaster.company_code = company_master.sno INNER JOIN monthlysalarystatement ON employedetails.empid = monthlysalarystatement.empid WHERE  (employedetails.status = 'no') AND (monthlysalarystatement.year = @year) AND (monthlysalarystatement.month = @month) AND (company_master.sno = '1') GROUP BY company_master.companyname, monthlysalarystatement.year, monthlysalarystatement.month, company_master.sno");
            cmd.Parameters.Add("@year", from_year);
            cmd.Parameters.Add("@month", month);
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<get_svdgroup_master> branch_Masterlist = new List<get_svdgroup_master>();
            foreach (DataRow dr in routes.Rows)
            {
                get_svdgroup_master branch_details = new get_svdgroup_master();
                branch_details.companyname = dr["companyname"].ToString();
                branch_details.totgross = dr["totgross"].ToString();
                branch_details.totnetpay = dr["totnetpay"].ToString();
                branch_details.year = dr["year"].ToString();
                branch_details.month = dr["month"].ToString();
                branch_details.sno = dr["sno"].ToString();
                branch_details.totemp = dr["totemp"].ToString();
                branch_Masterlist.Add(branch_details);
            }
            string response = GetJson(branch_Masterlist);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }




    public class totaldetailess
    {
        public string totemp { get; set; }
        public string totemployee { get; set; }
        public string totcasualemployee { get; set; }
        public string totgross { get; set; }
        public string companyid { get; set; }
        public string companyname { get; set; }
        public string totnetpay { get; set; }
        public string totcasualgross { get; set; }
        public string totcasualnetpay { get; set; }
        public string totcasualemp { get; set; }
        public string totstaffgross { get; set; }
        public string totstaffnetpay { get; set; }
        public string totstaffemp { get; set; }
        public string totalbankpayment { get; set; }
        public string totaloutstanding { get; set; }

        public string stafftotalbankpayment { get; set; }
        public string stafftotaloutstanding { get; set; }

        public string casualtotalbankpayment { get; set; }
        public string casualtotaloutstanding { get; set; }
    }


    private void get_govfto_report(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            List<totaldetailess> totallist = new List<totaldetailess>();
            DateTime ServerDateCurrentdate = DBManager.GetTime(vdm.conn);
            int from_year = ServerDateCurrentdate.Year;
            string month = context.Request["month"].ToString();
            string mainbranch = context.Session["mainbranch"].ToString();

            cmd = new SqlCommand("SELECT   COUNT(employedetails.empid) AS Count FROM    employedetails INNER JOIN branchmapping ON employedetails.branchid = branchmapping.subbranch INNER JOIN branchmaster ON employedetails.branchid = branchmaster.branchid WHERE  (branchmapping.mainbranch = @m) AND (employedetails.status = 'NO') ");
            cmd.Parameters.Add("@m", mainbranch);
            DataTable dtsvdstotemploy = vdm.SelectQuery(cmd).Tables[0];
            totaldetailess getemployee = new totaldetailess();

            cmd = new SqlCommand("SELECT   SUM(CONVERT(decimal(18, 2), ROUND(subbankformatmaster.netpay, 2))) AS totcount FROM   subbankformatmaster INNER JOIN branchmaster ON subbankformatmaster.branchid = branchmaster.branchid WHERE  (subbankformatmaster.year = @year) AND (subbankformatmaster.month = @month)");
            cmd.Parameters.Add("@year", from_year);
            cmd.Parameters.Add("@month", month);
            DataTable getbankform = vdm.SelectQuery(cmd).Tables[0];


            cmd = new SqlCommand("SELECT   SUM(monthlysalarystatement.salary) AS totgross, SUM(monthlysalarystatement.netpay) AS totnetpay, COUNT(monthlysalarystatement.empid) AS totemp FROM   monthlysalarystatement INNER JOIN branchmaster ON monthlysalarystatement.branchid = branchmaster.branchid INNER JOIN branchmapping ON branchmaster.branchid = branchmapping.subbranch INNER JOIN company_master ON branchmaster.company_code = company_master.sno WHERE  (monthlysalarystatement.year = @year) AND (monthlysalarystatement.month = @month) ");
            cmd.Parameters.Add("@year", from_year);
            cmd.Parameters.Add("@month", month);
            //cmd.Parameters.Add("@m", mainbranch);
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            double totalnetpay = 0;
            double totalbankpayement = 0;
            double totoutstanding = 0;
            if (routes.Rows.Count > 0)
            {
                foreach (DataRow drr in routes.Rows)
                {
                    //getemployee.totgross = drr["totgross"].ToString();
                    CultureInfo hindi = new CultureInfo("hi-IN");
                    if (drr["totgross"].ToString() == "" || drr["totgross"].ToString() == null || drr["totgross"].ToString() == "null")
                    {
                        getemployee.totgross = "0";
                    }
                    else
                    {
                        decimal totgrosss = decimal.Parse(drr["totgross"].ToString(), CultureInfo.InvariantCulture);
                        getemployee.totgross = string.Format(hindi, "{0:#,#}", totgrosss);
                    }

                    //getemployee.totnetpay = drr["totnetpay"].ToString();
                    if (drr["totnetpay"].ToString() == "" || drr["totnetpay"].ToString() == null || drr["totnetpay"].ToString() == "null")
                    {
                        getemployee.totnetpay = "0";
                        totalnetpay = 0;
                    }
                    else
                    {
                        decimal totnetpay = decimal.Parse(drr["totnetpay"].ToString(), CultureInfo.InvariantCulture);
                        getemployee.totnetpay = string.Format(hindi, "{0:#,#}", totnetpay);
                        totalnetpay = Convert.ToDouble(drr["totnetpay"].ToString());
                    }
                    getemployee.totemp = drr["totemp"].ToString();
                }

            }
            else
            {
                getemployee.totnetpay = "0";
                getemployee.totgross = "0";
                getemployee.totemp = "0";
            }
            if (dtsvdstotemploy.Rows.Count > 0)
            {
                foreach (DataRow drr in dtsvdstotemploy.Rows)
                {

                    getemployee.totemployee = drr["Count"].ToString();

                }
            }

            if (getbankform.Rows.Count > 0)
            {
                foreach (DataRow dra in getbankform.Rows)
                {
                    CultureInfo hindi = new CultureInfo("hi-IN");
                    if (dra["totcount"].ToString() == "" || dra["totcount"].ToString() == null || dra["totcount"].ToString() == "null")
                    {
                        getemployee.totalbankpayment = "0";
                        totalbankpayement = 0;
                    }
                    else
                    {
                        decimal totbankpayment = decimal.Parse(dra["totcount"].ToString(), CultureInfo.InvariantCulture);
                        getemployee.totalbankpayment = string.Format(hindi, "{0:#,#}", totbankpayment);
                        totalbankpayement = Convert.ToDouble(dra["totcount"].ToString());

                    }
                    totoutstanding = totalnetpay - totalbankpayement;

                    if (totoutstanding.ToString() == "" || totoutstanding.ToString() == null || totoutstanding.ToString() == "null" || totoutstanding.ToString() == "0")
                    {
                        getemployee.totaloutstanding = "0";
                    }
                    else
                    {
                        decimal totoutstandings = decimal.Parse(totoutstanding.ToString(), CultureInfo.InvariantCulture);
                        getemployee.totaloutstanding = string.Format(hindi, "{0:#,#}", totoutstandings);
                    }
                }
            }
            totallist.Add(getemployee);
            string response = GetJson(totallist);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }

    private void get_svdspl_report(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            List<totaldetailess> totallist = new List<totaldetailess>();
            string mainbranch = context.Session["mainbranch"].ToString();
            DateTime ServerDateCurrentdate = DBManager.GetTime(vdm.conn);
            int from_year = ServerDateCurrentdate.Year;
            string month = context.Request["month"].ToString();
            string companycode = context.Request["companycode"].ToString();

            cmd = new SqlCommand("SELECT   COUNT(employedetails.empid) AS Count FROM    employedetails INNER JOIN branchmapping ON employedetails.branchid = branchmapping.subbranch INNER JOIN branchmaster ON employedetails.branchid = branchmaster.branchid WHERE  (branchmapping.mainbranch = @m) AND (employedetails.status = 'NO') AND (branchmaster.company_code = '1')");
            cmd.Parameters.Add("@m", mainbranch);
            DataTable dtsvdstotemploy = vdm.SelectQuery(cmd).Tables[0];
            totaldetailess getemployee = new totaldetailess();

            cmd = new SqlCommand("SELECT   SUM(CONVERT(decimal(18, 2), ROUND(subbankformatmaster.netpay, 2))) AS totcount FROM   subbankformatmaster INNER JOIN branchmaster ON subbankformatmaster.branchid = branchmaster.branchid WHERE   (subbankformatmaster.year = @year) AND (subbankformatmaster.month = @month) AND (branchmaster.company_code = @companycode)");
            cmd.Parameters.Add("@year", from_year);
            cmd.Parameters.Add("@month", month);
            cmd.Parameters.Add("@companycode", companycode);
            DataTable getbankform = vdm.SelectQuery(cmd).Tables[0];

            cmd = new SqlCommand("SELECT   SUM(monthlysalarystatement.salary) AS totgross, SUM(monthlysalarystatement.netpay) AS totnetpay, branchmaster.company_code, company_master.companyname, COUNT(monthlysalarystatement.empid) AS totemp FROM   monthlysalarystatement INNER JOIN branchmaster ON monthlysalarystatement.branchid = branchmaster.branchid INNER JOIN branchmapping ON branchmaster.branchid = branchmapping.subbranch INNER JOIN company_master ON branchmaster.company_code = company_master.sno WHERE  (monthlysalarystatement.year = @year) AND (monthlysalarystatement.month = @month) AND (branchmapping.mainbranch = @m) AND (branchmaster.company_code = @companycode) GROUP BY branchmaster.company_code, company_master.companyname");
            cmd.Parameters.Add("@year", from_year);
            cmd.Parameters.Add("@month", month);
            cmd.Parameters.Add("@m", mainbranch);
            cmd.Parameters.Add("@companycode", companycode);
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            double totalnetpay = 0;
            double totalbankpayement = 0;
            double totoutstanding = 0;
            if (routes.Rows.Count > 0)
            {
                foreach (DataRow drr in routes.Rows)
                {
                    //getemployee.totgross = drr["totgross"].ToString();

                    CultureInfo hindi = new CultureInfo("hi-IN");
                    if (drr["totgross"].ToString() == "" || drr["totgross"].ToString() == null || drr["totgross"].ToString() == "null")
                    {
                        getemployee.totgross = "0";
                    }
                    else
                    {
                        decimal totgrosss = decimal.Parse(drr["totgross"].ToString(), CultureInfo.InvariantCulture);
                        getemployee.totgross = string.Format(hindi, "{0:#,#}", totgrosss);
                    }

                    if (drr["totnetpay"].ToString() == "" || drr["totnetpay"].ToString() == null || drr["totnetpay"].ToString() == "null")
                    {
                        getemployee.totnetpay = "0";
                        totalnetpay = 0;
                    }
                    else
                    {
                        decimal totnetpay = decimal.Parse(drr["totnetpay"].ToString(), CultureInfo.InvariantCulture);
                        getemployee.totnetpay = string.Format(hindi, "{0:#,#}", totnetpay);
                        totalnetpay = Convert.ToDouble(drr["totnetpay"].ToString());

                    }
                    if (drr["totemp"].ToString() == "" || drr["totemp"].ToString() == null || drr["totemp"].ToString() == "null")
                    {
                        getemployee.totemp = "0";
                    }
                    else
                    {
                        getemployee.totemp = drr["totemp"].ToString();
                    }
                    getemployee.companyid = drr["company_code"].ToString();
                    getemployee.companyname = drr["companyname"].ToString();
                }

            }
            else
            {
                getemployee.totnetpay = "0";
                getemployee.totgross = "0";
                getemployee.totemp = "0";
            }
            if (dtsvdstotemploy.Rows.Count > 0)
            {
                foreach (DataRow drr in dtsvdstotemploy.Rows)
                {

                    getemployee.totemployee = drr["Count"].ToString();

                }
            }

            if (getbankform.Rows.Count > 0)
            {
                foreach (DataRow dra in getbankform.Rows)
                {

                    CultureInfo hindi = new CultureInfo("hi-IN");
                    if (dra["totcount"].ToString() == "" || dra["totcount"].ToString() == null || dra["totcount"].ToString() == "null")
                    {
                        getemployee.totalbankpayment = "0";
                        totalbankpayement = 0;
                    }
                    else
                    {
                        decimal totbankpayment = decimal.Parse(dra["totcount"].ToString(), CultureInfo.InvariantCulture);
                        getemployee.totalbankpayment = string.Format(hindi, "{0:#,#}", totbankpayment);
                        totalbankpayement = Convert.ToDouble(dra["totcount"].ToString());

                    }
                    totoutstanding = totalnetpay - totalbankpayement;

                    if (totoutstanding.ToString() == "" || totoutstanding.ToString() == null || totoutstanding.ToString() == "null" || totoutstanding.ToString() == "0")
                    {
                        getemployee.totaloutstanding = "0";
                    }
                    else
                    {
                        decimal totoutstandings = decimal.Parse(totoutstanding.ToString(), CultureInfo.InvariantCulture);
                        getemployee.totaloutstanding = string.Format(hindi, "{0:#,#}", totoutstandings);
                    }

                }
            }

            totallist.Add(getemployee);
            string response = GetJson(totallist);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }





    private void get_svf_report(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            List<totaldetailess> totallist = new List<totaldetailess>();
            string mainbranch = context.Session["mainbranch"].ToString();
            cmd = new SqlCommand("SELECT   COUNT(employedetails.empid) AS Count FROM    employedetails INNER JOIN branchmapping ON employedetails.branchid = branchmapping.subbranch INNER JOIN branchmaster ON employedetails.branchid = branchmaster.branchid WHERE  (branchmapping.mainbranch = @m) AND (employedetails.status = 'NO') AND (branchmaster.company_code = '3')");
            cmd.Parameters.Add("@m", mainbranch);
            DataTable dtsvdtotemploy = vdm.SelectQuery(cmd).Tables[0];
            totaldetailess getemployee = new totaldetailess();

            DateTime ServerDateCurrentdate = DBManager.GetTime(vdm.conn);
            int from_year = ServerDateCurrentdate.Year;
            string month = context.Request["month"].ToString();
            cmd = new SqlCommand("SELECT SUM(monthlysalarystatement.salary) AS totgross, SUM(monthlysalarystatement.netpay) AS totnetpay, branchmaster.company_code, company_master.companyname, COUNT(monthlysalarystatement.empid) AS totemp FROM  monthlysalarystatement INNER JOIN branchmaster ON monthlysalarystatement.branchid = branchmaster.branchid INNER JOIN branchmapping ON branchmaster.branchid = branchmapping.subbranch INNER JOIN company_master ON branchmaster.company_code = company_master.sno WHERE  (monthlysalarystatement.year = @year) AND (monthlysalarystatement.month = @month) AND (branchmapping.mainbranch = @m) AND (branchmaster.company_code = '3') GROUP BY branchmaster.company_code, company_master.companyname");
            cmd.Parameters.Add("@year", from_year);
            cmd.Parameters.Add("@month", month);
            cmd.Parameters.Add("@m", mainbranch);
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            if (routes.Rows.Count > 0)
            {
                foreach (DataRow drr in routes.Rows)
                {
                    //getemployee.totgross = drr["totgross"].ToString();
                    CultureInfo hindi = new CultureInfo("hi-IN");
                    if (drr["totgross"].ToString() == "" || drr["totgross"].ToString() == null || drr["totgross"].ToString() == "null")
                    {
                        getemployee.totgross = "0";
                    }
                    else
                    {
                        decimal totgross = decimal.Parse(drr["totgross"].ToString(), CultureInfo.InvariantCulture);
                        getemployee.totgross = string.Format(hindi, "{0:#,#}", totgross);
                    }

                    //getemployee.totnetpay = drr["totnetpay"].ToString();
                    if (drr["totnetpay"].ToString() == "" || drr["totnetpay"].ToString() == null || drr["totnetpay"].ToString() == "null")
                    {
                        getemployee.totnetpay = "0";
                    }
                    else
                    {
                        decimal totnetpay = decimal.Parse(drr["totnetpay"].ToString(), CultureInfo.InvariantCulture);
                        getemployee.totnetpay = string.Format(hindi, "{0:#,#}", totnetpay);
                    }
                    if (drr["totemp"].ToString() == "" || drr["totemp"].ToString() == null || drr["totemp"].ToString() == "null")
                    {
                        getemployee.totemp = "0";
                    }
                    else
                    {
                        getemployee.totemp = drr["totemp"].ToString();
                    }
                    getemployee.companyid = drr["company_code"].ToString();
                    getemployee.companyname = drr["companyname"].ToString();
                }

            }
            else
            {
                getemployee.totgross = "0";
                getemployee.totnetpay = "0";
            }
            if (dtsvdtotemploy.Rows.Count > 0)
            {
                foreach (DataRow drr in dtsvdtotemploy.Rows)
                {

                    getemployee.totemployee = drr["Count"].ToString();

                }
            }
            totallist.Add(getemployee);
            string response = GetJson(totallist);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }

    private void get_totstaff_casual_report(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            List<totaldetailess> totallist = new List<totaldetailess>();
            string mainbranch = context.Session["mainbranch"].ToString();
            cmd = new SqlCommand("SELECT  COUNT(employedetails.empid) AS Count FROM   employedetails INNER JOIN branchmapping ON employedetails.branchid = branchmapping.subbranch INNER JOIN branchmaster ON employedetails.branchid = branchmaster.branchid WHERE   (branchmapping.mainbranch = @m) AND (employedetails.status = 'NO') AND (employedetails.employee_type = 'Staff')");
            cmd.Parameters.Add("@m", mainbranch);
            DataTable dtstafftotemploy = vdm.SelectQuery(cmd).Tables[0];
            totaldetailess getemployee = new totaldetailess();

            cmd = new SqlCommand("SELECT  COUNT(employedetails.empid) AS Count FROM   employedetails INNER JOIN branchmapping ON employedetails.branchid = branchmapping.subbranch INNER JOIN branchmaster ON employedetails.branchid = branchmaster.branchid WHERE   (branchmapping.mainbranch = @m) AND (employedetails.status = 'NO') AND (employedetails.employee_type <> 'Staff')");
            cmd.Parameters.Add("@m", mainbranch);
            DataTable dtcasualtotemploy = vdm.SelectQuery(cmd).Tables[0];

            DateTime ServerDateCurrentdate = DBManager.GetTime(vdm.conn);
            int from_year = ServerDateCurrentdate.Year;
            string month = context.Request["month"].ToString();
            cmd = new SqlCommand("SELECT   SUM(monthlysalarystatement.salary) AS totstaffgross, SUM(monthlysalarystatement.netpay) AS totstaffnetpay, COUNT(monthlysalarystatement.empid) AS totemp FROM   monthlysalarystatement INNER JOIN branchmaster ON monthlysalarystatement.branchid = branchmaster.branchid INNER JOIN branchmapping ON branchmaster.branchid = branchmapping.subbranch INNER JOIN company_master ON branchmaster.company_code = company_master.sno WHERE  (monthlysalarystatement.year = @year) AND (monthlysalarystatement.month = @month) AND (branchmapping.mainbranch = @m) AND (monthlysalarystatement.emptype = 'Staff')");
            cmd.Parameters.Add("@year", from_year);
            cmd.Parameters.Add("@month", month);
            cmd.Parameters.Add("@m", mainbranch);
            DataTable dtstaffrepo = vdm.SelectQuery(cmd).Tables[0];

            cmd = new SqlCommand("SELECT   SUM(monthlysalarystatement.salary) AS totcasualgross, SUM(monthlysalarystatement.netpay) AS totcasualnetpay, COUNT(monthlysalarystatement.empid) AS totemp FROM   monthlysalarystatement INNER JOIN branchmaster ON monthlysalarystatement.branchid = branchmaster.branchid INNER JOIN branchmapping ON branchmaster.branchid = branchmapping.subbranch INNER JOIN company_master ON branchmaster.company_code = company_master.sno WHERE  (monthlysalarystatement.year = @year) AND (monthlysalarystatement.month = @month) AND (branchmapping.mainbranch = @m) AND (monthlysalarystatement.emptype <> 'Staff')");
            cmd.Parameters.Add("@year", from_year);
            cmd.Parameters.Add("@month", month);
            cmd.Parameters.Add("@m", mainbranch);
            DataTable dtcaualreport = vdm.SelectQuery(cmd).Tables[0];

            cmd = new SqlCommand("SELECT SUM(CONVERT(decimal(18, 2), ROUND(subbankformatmaster.netpay, 2))) AS totcount FROM    subbankformatmaster INNER JOIN branchmaster ON subbankformatmaster.branchid = branchmaster.branchid INNER JOIN employedetails ON subbankformatmaster.empid = employedetails.empid WHERE   (subbankformatmaster.year = @year) AND (subbankformatmaster.month = @month) AND (subbankformatmaster.emptype = 'Staff')");
            cmd.Parameters.Add("@year", from_year);
            cmd.Parameters.Add("@month", month);
            DataTable getbankformstaff = vdm.SelectQuery(cmd).Tables[0];

            cmd = new SqlCommand("SELECT SUM(CONVERT(decimal(18, 2), ROUND(subbankformatmaster.netpay, 2))) AS totcount FROM    subbankformatmaster INNER JOIN branchmaster ON subbankformatmaster.branchid = branchmaster.branchid INNER JOIN employedetails ON subbankformatmaster.empid = employedetails.empid WHERE   (subbankformatmaster.year = @year) AND (subbankformatmaster.month = @month) AND (subbankformatmaster.emptype <> 'Staff')");
            cmd.Parameters.Add("@year", from_year);
            cmd.Parameters.Add("@month", month);
            DataTable getbankformcasual = vdm.SelectQuery(cmd).Tables[0];

            double stafftotalnetpay = 0;
            double totcasualnetpay = 0;
            double stafftotalbankpayement = 0;
            double casualtotalbankpayement = 0;
            double stafftotoutstanding = 0;
            double casualtotoutstanding = 0;
            if (dtcaualreport.Rows.Count > 0)
            {
                foreach (DataRow drr in dtcaualreport.Rows)
                {
                    //getemployee.totcasualgross = drr["totcasualgross"].ToString();
                    CultureInfo hindi = new CultureInfo("hi-IN");
                    if (drr["totcasualgross"].ToString() == "" || drr["totcasualgross"].ToString() == null || drr["totcasualgross"].ToString() == "null")
                    {
                        getemployee.totcasualgross = "0";
                    }
                    else
                    {
                        decimal totcasualgross = decimal.Parse(drr["totcasualgross"].ToString(), CultureInfo.InvariantCulture);
                        getemployee.totcasualgross = string.Format(hindi, "{0:#,#}", totcasualgross);
                    }
                    if (drr["totcasualnetpay"].ToString() == "" || drr["totcasualnetpay"].ToString() == null || drr["totcasualnetpay"].ToString() == "null")
                    {
                        getemployee.totcasualnetpay = "0";
                        totcasualnetpay = 0;
                    }
                    else
                    {
                        decimal totcasualnetpays = decimal.Parse(drr["totcasualnetpay"].ToString(), CultureInfo.InvariantCulture);
                        getemployee.totcasualnetpay = string.Format(hindi, "{0:#,#}", totcasualnetpays);
                        totcasualnetpay = Convert.ToDouble(drr["totcasualnetpay"].ToString());

                    }
                    getemployee.totcasualemp = drr["totemp"].ToString();

                }

            }
            else
            {
                getemployee.totcasualgross = "0";
                getemployee.totcasualnetpay = "0";
            }
            if (dtstaffrepo.Rows.Count > 0)
            {
                foreach (DataRow drr in dtstaffrepo.Rows)
                {
                    //getemployee.totstaffgross = drr["totstaffgross"].ToString();
                    CultureInfo hindi = new CultureInfo("hi-IN");
                    if (drr["totstaffgross"].ToString() == "" || drr["totstaffgross"].ToString() == null || drr["totstaffgross"].ToString() == "null")
                    {
                        getemployee.totstaffgross = "0";
                    }
                    else
                    {
                        decimal totstaffgross = decimal.Parse(drr["totstaffgross"].ToString(), CultureInfo.InvariantCulture);
                        getemployee.totstaffgross = string.Format(hindi, "{0:#,#}", totstaffgross);
                    }

                    if (drr["totstaffnetpay"].ToString() == "" || drr["totstaffnetpay"].ToString() == null || drr["totstaffnetpay"].ToString() == "null")
                    {
                        getemployee.totstaffnetpay = "0";
                        stafftotalnetpay = 0;
                    }
                    else
                    {
                        decimal totstaffnetpay = decimal.Parse(drr["totstaffnetpay"].ToString(), CultureInfo.InvariantCulture);
                        getemployee.totstaffnetpay = string.Format(hindi, "{0:#,#}", totstaffnetpay);
                        stafftotalnetpay = Convert.ToDouble(drr["totstaffnetpay"].ToString());

                    }
                    getemployee.totstaffemp = drr["totemp"].ToString();
                }

            }
            else
            {
                getemployee.totstaffgross = "0";
                getemployee.totstaffnetpay = "0";
            }
            if (dtstafftotemploy.Rows.Count > 0)
            {
                foreach (DataRow drr in dtstafftotemploy.Rows)
                {
                    getemployee.totemployee = drr["Count"].ToString();
                }
            }
            if (dtcasualtotemploy.Rows.Count > 0)
            {
                foreach (DataRow drr in dtcasualtotemploy.Rows)
                {

                    getemployee.totcasualemployee = drr["Count"].ToString();

                }
            }
            if (getbankformstaff.Rows.Count > 0)
            {
                foreach (DataRow dra in getbankformstaff.Rows)
                {
                    CultureInfo hindi = new CultureInfo("hi-IN");
                    if (dra["totcount"].ToString() == "" || dra["totcount"].ToString() == null || dra["totcount"].ToString() == "null")
                    {
                        getemployee.stafftotalbankpayment = "0";
                        stafftotalbankpayement = 0;
                    }
                    else
                    {
                        decimal totbankpayment = decimal.Parse(dra["totcount"].ToString(), CultureInfo.InvariantCulture);
                        getemployee.stafftotalbankpayment = string.Format(hindi, "{0:#,#}", totbankpayment);
                        stafftotalbankpayement = Convert.ToDouble(dra["totcount"].ToString());

                    }
                    stafftotoutstanding = stafftotalnetpay - stafftotalbankpayement;

                    if (stafftotoutstanding.ToString() == "" || stafftotoutstanding.ToString() == null || stafftotoutstanding.ToString() == "null" || stafftotoutstanding.ToString() == "0")
                    {
                        getemployee.stafftotaloutstanding = "0";
                    }
                    else
                    {
                        decimal stafftotoutstandings = decimal.Parse(stafftotoutstanding.ToString(), CultureInfo.InvariantCulture);
                        getemployee.stafftotaloutstanding = string.Format(hindi, "{0:#,#}", stafftotoutstandings);
                    }
                }
            }
            if (getbankformcasual.Rows.Count > 0)
            {
                foreach (DataRow draa in getbankformcasual.Rows)
                {
                    CultureInfo hindi = new CultureInfo("hi-IN");
                    if (draa["totcount"].ToString() == "" || draa["totcount"].ToString() == null || draa["totcount"].ToString() == "null")
                    {
                        getemployee.casualtotalbankpayment = "0";
                        casualtotalbankpayement = 0;
                    }
                    else
                    {
                        decimal totbankpayment = decimal.Parse(draa["totcount"].ToString(), CultureInfo.InvariantCulture);
                        getemployee.casualtotalbankpayment = string.Format(hindi, "{0:#,#}", totbankpayment);
                        casualtotalbankpayement = Convert.ToDouble(draa["totcount"].ToString());

                    }
                    casualtotoutstanding = totcasualnetpay - casualtotalbankpayement;

                    if (casualtotoutstanding.ToString() == "" || casualtotoutstanding.ToString() == null || casualtotoutstanding.ToString() == "null" || casualtotoutstanding.ToString() == "0")
                    {
                        getemployee.casualtotaloutstanding = "0";
                    }
                    else
                    {
                        decimal casualtotoutstandings = decimal.Parse(casualtotoutstanding.ToString(), CultureInfo.InvariantCulture);
                        getemployee.casualtotaloutstanding = string.Format(hindi, "{0:#,#}", casualtotoutstandings);
                    }
                }
            }
            totallist.Add(getemployee);
            string response = GetJson(totallist);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }
    //test
    private void get_gosvd_branch_details(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            DateTime ServerDateCurrentdate = DBManager.GetTime(vdm.conn);
            int from_year = ServerDateCurrentdate.Year;
            string month = context.Request["month"].ToString();
            string mainbranch = context.Session["mainbranch"].ToString();
            List<branchwiseesalary> getBranchList = new List<branchwiseesalary>();
            CultureInfo hindi = new CultureInfo("hi-IN");
            //employee count
            cmd = new SqlCommand("SELECT    COUNT(*) AS totalemp, employedetails.branchid, branchmaster.branchname, branchmaster.branchtype FROM   employedetails INNER JOIN branchmapping ON employedetails.branchid = branchmapping.subbranch INNER JOIN branchmaster ON branchmapping.subbranch = branchmaster.branchid WHERE  (branchmapping.mainbranch = @m) AND (employedetails.status = 'No') GROUP BY employedetails.branchid, branchmaster.branchname, branchmaster.branchtype ORDER BY branchmaster.branchtype");
            cmd.Parameters.Add("@m", mainbranch);
            DataTable dttotalemployes = vdm.SelectQuery(cmd).Tables[0];
            //staff count
            cmd = new SqlCommand("SELECT    COUNT(monthlysalarystatement.empid) AS totemp, branchmaster.branchname, branchmaster.branchtype, branchmaster.branchid FROM   branchmapping INNER JOIN branchmaster ON branchmapping.subbranch = branchmaster.branchid INNER JOIN employedetails ON branchmaster.branchid = employedetails.branchid INNER JOIN monthlysalarystatement ON employedetails.empid = monthlysalarystatement.empid WHERE   (monthlysalarystatement.year = @year) AND (monthlysalarystatement.month = @month) AND (branchmapping.mainbranch = @m) AND (monthlysalarystatement.emptype = 'Staff') GROUP BY branchmaster.branchname, branchmaster.branchtype, branchmaster.branchid ORDER BY branchmaster.branchtype");
            cmd.Parameters.Add("@m", mainbranch);
            cmd.Parameters.Add("@month", month);
            cmd.Parameters.Add("@year", from_year);
            DataTable dtstafftotalemployes = vdm.SelectQuery(cmd).Tables[0];
            //casual count
            cmd = new SqlCommand("SELECT    COUNT(monthlysalarystatement.empid) AS totemp, branchmaster.branchname, branchmaster.branchtype, branchmaster.branchid FROM   branchmapping INNER JOIN branchmaster ON branchmapping.subbranch = branchmaster.branchid INNER JOIN employedetails ON branchmaster.branchid = employedetails.branchid INNER JOIN monthlysalarystatement ON employedetails.empid = monthlysalarystatement.empid WHERE   (monthlysalarystatement.year = @year) AND (monthlysalarystatement.month = @month) AND (branchmapping.mainbranch = @m) AND (monthlysalarystatement.emptype <> 'Staff') GROUP BY branchmaster.branchname, branchmaster.branchtype, branchmaster.branchid ORDER BY branchmaster.branchtype");
            cmd.Parameters.Add("@m", mainbranch);
            cmd.Parameters.Add("@month", month);
            cmd.Parameters.Add("@year", from_year);
            DataTable dtcasualtotalemployes = vdm.SelectQuery(cmd).Tables[0];
            //net pay
            cmd = new SqlCommand("SELECT   SUM(CAST(monthlysalarystatement.netpay AS numeric(9, 2))) AS Netpay, branchmaster.branchname, branchmaster.branchtype, branchmaster.branchid FROM    branchmaster INNER JOIN branchmapping ON branchmaster.branchid = branchmapping.subbranch INNER JOIN employedetails ON branchmaster.branchid = employedetails.branchid INNER JOIN monthlysalarystatement ON employedetails.empid = monthlysalarystatement.empid WHERE   (monthlysalarystatement.year = @year) AND (monthlysalarystatement.month = @month) AND (branchmapping.mainbranch = @m) GROUP BY branchmaster.branchname, branchmaster.branchtype, branchmaster.branchid ORDER BY branchmaster.branchtype");
            cmd.Parameters.Add("@m", mainbranch);
            cmd.Parameters.Add("@month", month);
            cmd.Parameters.Add("@year", from_year);
            DataTable dtnetpay = vdm.SelectQuery(cmd).Tables[0];
            //gross pay 
            cmd = new SqlCommand("SELECT   SUM(monthlysalarystatement.salary) AS totgross, SUM(monthlysalarystatement.netpay) AS totnet, COUNT(monthlysalarystatement.empid) AS totemp, branchmaster.branchname, branchmaster.branchtype,  branchmaster.branchid FROM   employedetails INNER JOIN monthlysalarystatement ON employedetails.empid = monthlysalarystatement.empid INNER JOIN branchmaster INNER JOIN branchmapping ON branchmaster.branchid = branchmapping.subbranch ON employedetails.branchid = branchmaster.branchid WHERE  (monthlysalarystatement.year = @year) AND (monthlysalarystatement.month = @month) AND (branchmapping.mainbranch = @m) GROUP BY branchmaster.branchname, branchmaster.branchtype, branchmaster.branchid ORDER BY branchmaster.branchtype");
            cmd.Parameters.Add("@m", mainbranch);
            cmd.Parameters.Add("@month", month);
            cmd.Parameters.Add("@year", from_year);
            DataTable dtgrosspay = vdm.SelectQuery(cmd).Tables[0];

            cmd = new SqlCommand("SELECT    SUM(CONVERT(decimal(18, 2), ROUND(subbankformatmaster.netpay, 2))) AS totcount, branchmaster.branchid, branchmapping.mainbranch FROM     subbankformatmaster INNER JOIN branchmaster ON subbankformatmaster.branchid = branchmaster.branchid INNER JOIN employedetails ON subbankformatmaster.empid = employedetails.empid INNER JOIN branchmapping ON branchmaster.branchid = branchmapping.subbranch WHERE   (subbankformatmaster.year = @year) AND (subbankformatmaster.month = @month) AND (branchmapping.mainbranch = @m) GROUP BY branchmaster.branchid, branchmapping.mainbranch");
            cmd.Parameters.Add("@year", from_year);
            cmd.Parameters.Add("@month", month);
            cmd.Parameters.Add("@m", mainbranch);
            DataTable dtbankpay = vdm.SelectQuery(cmd).Tables[0];

            cmd = new SqlCommand("SELECT  branchmaster.branchname, branchmaster.branchtype, branchmaster.branchid FROM    branchmaster INNER JOIN branchmapping ON branchmaster.branchid = branchmapping.subbranch INNER JOIN company_master ON branchmaster.company_code = company_master.sno WHERE  (branchmapping.mainbranch = @m) GROUP BY branchmaster.branchtype, branchmaster.branchname, branchmaster.branchid ORDER BY branchmaster.branchtype");
            cmd.Parameters.Add("@m", mainbranch);
            DataTable dtbranch = vdm.SelectQuery(cmd).Tables[0];
            if (dtbranch.Rows.Count > 0)
            {
                foreach (DataRow dr in dtbranch.Rows)
                {
                    string branchid = dr["branchid"].ToString();
                    string branchname = dr["branchname"].ToString();
                    string branchtype = dr["branchtype"].ToString();
                    string empcount = "0";
                    //string empcountf = "0";
                    string staffempcount = "0";
                    string casualempcount = "0";
                    string Netpay = "0";
                    string totgross = "0";
                    //
                    double totnetpay = 0;
                    double totbankpaymenyt = 0;
                    double totbnkpaymnt = 0;
                    double totoutstandings = 0;

                    foreach (DataRow drempco in dttotalemployes.Select("branchid='" + branchid + "'"))
                    {
                        //decimal totalemp = decimal.Parse(drempco["totalemp"].ToString(), CultureInfo.InvariantCulture);
                        //empcountf = string.Format(hindi, "{0:#,#}", totalemp);

                        //empcount = drempco["totalemp"].ToString();

                    }
                    foreach (DataRow drstaffempco in dtstafftotalemployes.Select("branchid='" + branchid + "'"))
                    {
                        staffempcount = drstaffempco["totemp"].ToString();
                    }
                    foreach (DataRow drcasualempco in dtcasualtotalemployes.Select("branchid='" + branchid + "'"))
                    {
                        casualempcount = drcasualempco["totemp"].ToString();
                    }
                    foreach (DataRow drnetpay in dtnetpay.Select("branchid='" + branchid + "'"))
                    {
                        Netpay = drnetpay["Netpay"].ToString();
                        totnetpay = Convert.ToDouble(drnetpay["Netpay"].ToString());
                    }
                    foreach (DataRow drgross in dtgrosspay.Select("branchid='" + branchid + "'"))
                    {
                        totgross = drgross["totgross"].ToString();
                        empcount = drgross["totemp"].ToString();
                    }
                    foreach (DataRow drbankpay in dtbankpay.Select("branchid='" + branchid + "'"))
                    {
                        totbnkpaymnt = Convert.ToDouble(drbankpay["totcount"].ToString());
                    }
                    totoutstandings = totnetpay - totbnkpaymnt;
                    branchwiseesalary obj = new branchwiseesalary();
                    obj.branchid = branchid;
                    obj.branchnames = branchname;
                    obj.branchtype = branchtype;
                    obj.empcounts = empcount;
                    obj.staffempcounts = staffempcount;
                    obj.casualempcounts = casualempcount;
                    obj.Netpays = Netpay;
                    obj.totgrosss = totgross;
                    obj.totalbankpaymenyt = totbnkpaymnt.ToString();
                    obj.totaloutstandings = totoutstandings.ToString();
                    getBranchList.Add(obj);
                }
            }
            string response = GetJson(getBranchList);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }


    public class get_svdspl_branctypehwise_details
    {
        public string branchname { get; set; }
        public string branchtype { get; set; }
        public string totgross { get; set; }
        public string totnetpay { get; set; }
        public string year { get; set; }
        public string month { get; set; }
        public string cmpid { get; set; }
        public string totemp { get; set; }
        public string totbtype { get; set; }
        public string spntotgross { get; set; }
    }
    private void get_gosvd_branchtypewise_report(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            DateTime ServerDateCurrentdate = DBManager.GetTime(vdm.conn);
            int from_year = ServerDateCurrentdate.Year;
            string month = context.Request["month"].ToString();
            string companyid = context.Request["companyid"].ToString();
            cmd = new SqlCommand("SELECT SUM(totgross) AS totgross, SUM(totnet) AS totnet, SUM(totemp) AS totemp, COUNT(branchtype) AS totbtype, branchtype, sno FROM  (SELECT SUM(monthlysalarystatement.salary) AS totgross, SUM(monthlysalarystatement.netpay) AS totnet, COUNT(employedetails.empid) AS totemp, company_master.sno, branchmaster.branchtype, branchmaster.branchname FROM  branchmaster INNER JOIN monthlysalarystatement ON branchmaster.branchid = monthlysalarystatement.branchid INNER JOIN company_master ON branchmaster.company_code = company_master.sno INNER JOIN employedetails ON monthlysalarystatement.empid = employedetails.empid WHERE (monthlysalarystatement.year = @year) AND (monthlysalarystatement.month = @month) AND (company_master.sno = @cmpid) GROUP BY company_master.sno, branchmaster.branchtype, branchmaster.branchname) AS s2 GROUP BY branchtype, sno");
            cmd.Parameters.Add("@year", from_year);
            cmd.Parameters.Add("@cmpid", companyid);
            cmd.Parameters.Add("@month", month);
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<get_svdspl_branctypehwise_details> branch_Masterlist = new List<get_svdspl_branctypehwise_details>();
            foreach (DataRow dr in routes.Rows)
            {
                get_svdspl_branctypehwise_details branch_details = new get_svdspl_branctypehwise_details();

                CultureInfo hindi = new CultureInfo("hi-IN");
                if (dr["totgross"].ToString() == "" || dr["totgross"].ToString() == null || dr["totgross"].ToString() == "null")
                {
                    branch_details.totgross = "0";
                }
                else
                {
                    decimal totgrosss = decimal.Parse(dr["totgross"].ToString(), CultureInfo.InvariantCulture);
                    branch_details.totgross = string.Format(hindi, "{0:#,#}", totgrosss);
                }

                branch_details.branchtype = dr["branchtype"].ToString();
                branch_details.spntotgross = dr["totgross"].ToString();
                branch_details.totnetpay = dr["totnet"].ToString();
                branch_details.totbtype = dr["totbtype"].ToString();
                //branch_details.month = dr["month"].ToString();
                branch_details.cmpid = dr["sno"].ToString();
                branch_details.totemp = dr["totemp"].ToString();
                branch_Masterlist.Add(branch_details);
            }
            string response = GetJson(branch_Masterlist);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }
    //--------------------test-----------------//
    private void get_svdcc_dephwise_report(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            DateTime ServerDateCurrentdate = DBManager.GetTime(vdm.conn);
            int from_year = ServerDateCurrentdate.Year;
            string month = context.Request["month"].ToString();
            string companyid = context.Request["companycode"].ToString();
            string branchid = context.Request["branchid"].ToString();
            string btype = context.Request["btype"].ToString();
            cmd = new SqlCommand("SELECT  SUM(monthlysalarystatement.salary) AS totgross, SUM(monthlysalarystatement.netpay) AS totnetpay, branchmaster.branchid, branchmaster.branchname, departments.department, departments.deptid FROM   branchmaster INNER JOIN monthlysalarystatement ON branchmaster.branchid = monthlysalarystatement.branchid INNER JOIN departments ON monthlysalarystatement.deptid = departments.deptid LEFT OUTER JOIN company_master ON branchmaster.company_code = company_master.sno WHERE (monthlysalarystatement.year = @year) AND (monthlysalarystatement.month = @month) AND (company_master.sno = @cmpid) AND (branchmaster.branchid = @branchid) AND (branchmaster.branchtype = @btype) GROUP BY branchmaster.branchid, branchmaster.branchname, departments.department, departments.deptid");
            cmd.Parameters.Add("@year", from_year);
            cmd.Parameters.Add("@cmpid", companyid);
            cmd.Parameters.Add("@branchid", branchid);
            cmd.Parameters.Add("@btype", btype);
            cmd.Parameters.Add("@month", month);
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            double caltotgross = 0;
            double totpercentage = 0;
            double totgross = 0;
            List<get_svdspl_branchwise_details> branch_Masterlist = new List<get_svdspl_branchwise_details>();
            foreach (DataRow drr in routes.Rows)
            {

                caltotgross += Convert.ToDouble(drr["totgross"].ToString());

            }
            foreach (DataRow dr in routes.Rows)
            {
                get_svdspl_branchwise_details branch_details = new get_svdspl_branchwise_details();
                CultureInfo hindi = new CultureInfo("hi-IN");
                if (dr["totgross"].ToString() == "" || dr["totgross"].ToString() == null || dr["totgross"].ToString() == "null")
                {
                    branch_details.totgross = "0";
                }
                else
                {
                    decimal totgrosss = decimal.Parse(dr["totgross"].ToString(), CultureInfo.InvariantCulture);
                    branch_details.totgross = string.Format(hindi, "{0:#,#}", totgrosss);
                }
                totgross = Convert.ToDouble(dr["totgross"].ToString());
                totpercentage = totgross / caltotgross * 100;
                branch_details.totpercentage = totpercentage.ToString();
                branch_details.deptname = dr["department"].ToString();
                branch_details.spntotgross = dr["totgross"].ToString();
                branch_details.totnetpay = dr["totnetpay"].ToString();
                branch_details.branchid = dr["branchid"].ToString();
                branch_details.deptid = dr["deptid"].ToString();
                branch_Masterlist.Add(branch_details);
            }
            string response = GetJson(branch_Masterlist);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }
    //----------------------------------------//
    public class get_svdspl_branchwise_details
    {
        public string branchname { get; set; }
        public string totgross { get; set; }
        public string totnetpay { get; set; }
        public string year { get; set; }
        public string month { get; set; }
        public string branchid { get; set; }
        public string totemp { get; set; }
        public string spntotgross { get; set; }
        public string deptid { get; set; }
        public string deptname { get; set; }
        public string totpercentage { get; set; }
    }
    private void get_gosvd_branchwise_report(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            DateTime ServerDateCurrentdate = DBManager.GetTime(vdm.conn);
            int from_year = ServerDateCurrentdate.Year;
            string month = context.Request["month"].ToString();
            string companyid = context.Request["cmpid"].ToString();
            string btype = context.Request["btype"].ToString();
            cmd = new SqlCommand("SELECT   SUM(monthlysalarystatement.salary) AS totgross, SUM(monthlysalarystatement.netpay) AS totnetpay, branchmaster.branchid, branchmaster.branchname, branchmaster.branchtype FROM   branchmaster INNER JOIN monthlysalarystatement ON branchmaster.branchid = monthlysalarystatement.branchid LEFT OUTER JOIN company_master ON branchmaster.company_code = company_master.sno WHERE   (monthlysalarystatement.year = @year) AND (monthlysalarystatement.month = @month) AND (company_master.sno = @cmpid) AND (branchmaster.branchtype = @btype) GROUP BY branchmaster.branchtype, branchmaster.branchid, branchmaster.branchname");
            cmd.Parameters.Add("@year", from_year);
            cmd.Parameters.Add("@cmpid", companyid);
            cmd.Parameters.Add("@btype", btype);
            cmd.Parameters.Add("@month", month);
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<get_svdspl_branchwise_details> branch_Masterlist = new List<get_svdspl_branchwise_details>();
            foreach (DataRow dr in routes.Rows)
            {
                get_svdspl_branchwise_details branch_details = new get_svdspl_branchwise_details();



                CultureInfo hindi = new CultureInfo("hi-IN");
                if (dr["totgross"].ToString() == "" || dr["totgross"].ToString() == null || dr["totgross"].ToString() == "null")
                {
                    branch_details.totgross = "0";
                }
                else
                {
                    decimal totgrosss = decimal.Parse(dr["totgross"].ToString(), CultureInfo.InvariantCulture);
                    branch_details.totgross = string.Format(hindi, "{0:#,#}", totgrosss);
                }

                branch_details.branchname = dr["branchname"].ToString();
                branch_details.spntotgross = dr["totgross"].ToString();
                branch_details.totnetpay = dr["totnetpay"].ToString();
                branch_details.branchid = dr["branchid"].ToString();
                branch_Masterlist.Add(branch_details);
            }
            string response = GetJson(branch_Masterlist);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }
    private void get_gosvd_dephwise_report(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            DateTime ServerDateCurrentdate = DBManager.GetTime(vdm.conn);
            int from_year = ServerDateCurrentdate.Year;
            string month = context.Request["month"].ToString();
            string companyid = context.Request["companycode"].ToString();
            string branchid = context.Request["branchid"].ToString();
            string btype = context.Request["btype"].ToString();
            cmd = new SqlCommand("SELECT  SUM(monthlysalarystatement.salary) AS totgross, SUM(monthlysalarystatement.netpay) AS totnetpay, branchmaster.branchid, branchmaster.branchname, departments.department, departments.deptid FROM   branchmaster INNER JOIN monthlysalarystatement ON branchmaster.branchid = monthlysalarystatement.branchid INNER JOIN departments ON monthlysalarystatement.deptid = departments.deptid LEFT OUTER JOIN company_master ON branchmaster.company_code = company_master.sno WHERE (monthlysalarystatement.year = @year) AND (monthlysalarystatement.month = @month) AND (company_master.sno = @cmpid) AND (branchmaster.branchid = @branchid) AND (branchmaster.branchtype = @btype) GROUP BY branchmaster.branchid, branchmaster.branchname, departments.department, departments.deptid");
            cmd.Parameters.Add("@year", from_year);
            cmd.Parameters.Add("@cmpid", companyid);
            cmd.Parameters.Add("@branchid", branchid);
            cmd.Parameters.Add("@btype", btype);
            cmd.Parameters.Add("@month", month);
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            double caltotgross = 0;
            double totpercentage = 0;
            double totgross = 0;
            List<get_svdspl_branchwise_details> branch_Masterlist = new List<get_svdspl_branchwise_details>();
            foreach (DataRow drr in routes.Rows)
            {

                caltotgross += Convert.ToDouble(drr["totgross"].ToString());

            }
            foreach (DataRow dr in routes.Rows)
            {
                get_svdspl_branchwise_details branch_details = new get_svdspl_branchwise_details();
                CultureInfo hindi = new CultureInfo("hi-IN");
                if (dr["totgross"].ToString() == "" || dr["totgross"].ToString() == null || dr["totgross"].ToString() == "null")
                {
                    branch_details.totgross = "0";
                }
                else
                {
                    decimal totgrosss = decimal.Parse(dr["totgross"].ToString(), CultureInfo.InvariantCulture);
                    branch_details.totgross = string.Format(hindi, "{0:#,#}", totgrosss);
                }
                totgross = Convert.ToDouble(dr["totgross"].ToString());
                totpercentage = totgross / caltotgross * 100;
                branch_details.totpercentage = totpercentage.ToString();
                branch_details.deptname = dr["department"].ToString();
                branch_details.spntotgross = dr["totgross"].ToString();
                branch_details.totnetpay = dr["totnetpay"].ToString();
                branch_details.branchid = dr["branchid"].ToString();
                branch_details.deptid = dr["deptid"].ToString();
                branch_Masterlist.Add(branch_details);
            }
            string response = GetJson(branch_Masterlist);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }


    private void get_gosvd_branchwisee_report(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            DateTime ServerDateCurrentdate = DBManager.GetTime(vdm.conn);
            int from_year = ServerDateCurrentdate.Year;
            string month = context.Request["month"].ToString();
            string companyid = context.Request["cmpid"].ToString();
            string btype = context.Request["btype"].ToString();
            cmd = new SqlCommand("SELECT   SUM(monthlysalarystatement.salary) AS totgross, SUM(monthlysalarystatement.netpay) AS totnetpay, branchmaster.branchid, branchmaster.branchname, branchmaster.branchtype FROM   branchmaster INNER JOIN monthlysalarystatement ON branchmaster.branchid = monthlysalarystatement.branchid LEFT OUTER JOIN company_master ON branchmaster.company_code = company_master.sno WHERE   (monthlysalarystatement.year = @year) AND (monthlysalarystatement.month = @month) AND (company_master.sno = @cmpid) AND (branchmaster.branchtype = @btype) GROUP BY branchmaster.branchtype, branchmaster.branchid, branchmaster.branchname");
            cmd.Parameters.Add("@year", from_year);
            cmd.Parameters.Add("@cmpid", companyid);
            cmd.Parameters.Add("@btype", btype);
            cmd.Parameters.Add("@month", month);
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            double caltotgross = 0;
            double totpercentage = 0;
            double totgross = 0;
            List<get_svdspl_branchwise_details> branch_Masterlist = new List<get_svdspl_branchwise_details>();
            foreach (DataRow drr in routes.Rows)
            {

                caltotgross += Convert.ToDouble(drr["totgross"].ToString());

            }
            foreach (DataRow dr in routes.Rows)
            {
                get_svdspl_branchwise_details branch_details = new get_svdspl_branchwise_details();
                CultureInfo hindi = new CultureInfo("hi-IN");
                if (dr["totgross"].ToString() == "" || dr["totgross"].ToString() == null || dr["totgross"].ToString() == "null")
                {
                    branch_details.totgross = "0";
                }
                else
                {
                    decimal totgrosss = decimal.Parse(dr["totgross"].ToString(), CultureInfo.InvariantCulture);
                    branch_details.totgross = string.Format(hindi, "{0:#,#}", totgrosss);
                }
                totgross = Convert.ToDouble(dr["totgross"].ToString());
                totpercentage = totgross / caltotgross * 100;
                branch_details.totpercentage = totpercentage.ToString();
                branch_details.branchname = dr["branchname"].ToString();
                branch_details.spntotgross = dr["totgross"].ToString();
                branch_details.totnetpay = dr["totnetpay"].ToString();
                branch_details.branchid = dr["branchid"].ToString();
                branch_Masterlist.Add(branch_details);
            }
            string response = GetJson(branch_Masterlist);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }
    private void get_gosvd_depwisee_report(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            DateTime ServerDateCurrentdate = DBManager.GetTime(vdm.conn);
            int from_year = ServerDateCurrentdate.Year;
            string month = context.Request["month"].ToString();
            string companyid = context.Request["cmpid"].ToString();
            string branchid = context.Request["branchid"].ToString();
            string btype = context.Request["btype"].ToString();
            cmd = new SqlCommand("SELECT  SUM(monthlysalarystatement.salary) AS totgross, SUM(monthlysalarystatement.netpay) AS totnetpay, branchmaster.branchid, branchmaster.branchname, branchmaster.branchtype, COUNT(*) AS Expr1, departments.deptid,  departments.department FROM  branchmaster INNER JOIN monthlysalarystatement ON branchmaster.branchid = monthlysalarystatement.branchid INNER JOIN departments ON monthlysalarystatement.deptid = departments.deptid LEFT OUTER JOIN company_master ON branchmaster.company_code = company_master.sno WHERE  (monthlysalarystatement.year = @year) AND (monthlysalarystatement.month = @month) AND (company_master.sno = @cmpid) AND (branchmaster.branchtype = @btype) AND (branchmaster.branchid = @branchid) GROUP BY branchmaster.branchtype, branchmaster.branchid, branchmaster.branchname, departments.deptid, departments.department");
            cmd.Parameters.Add("@year", from_year);
            cmd.Parameters.Add("@cmpid", companyid);
            cmd.Parameters.Add("@branchid", branchid);
            cmd.Parameters.Add("@btype", btype);
            cmd.Parameters.Add("@month", month);
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            double caltotgross = 0;
            double totpercentage = 0;
            double totgross = 0;
            List<get_svdspl_branchwise_details> branch_Masterlist = new List<get_svdspl_branchwise_details>();
            foreach (DataRow drr in routes.Rows)
            {

                caltotgross += Convert.ToDouble(drr["totgross"].ToString());

            }
            foreach (DataRow dr in routes.Rows)
            {
                get_svdspl_branchwise_details branch_details = new get_svdspl_branchwise_details();
                CultureInfo hindi = new CultureInfo("hi-IN");
                if (dr["totgross"].ToString() == "" || dr["totgross"].ToString() == null || dr["totgross"].ToString() == "null")
                {
                    branch_details.totgross = "0";
                }
                else
                {
                    decimal totgrosss = decimal.Parse(dr["totgross"].ToString(), CultureInfo.InvariantCulture);
                    branch_details.totgross = string.Format(hindi, "{0:#,#}", totgrosss);
                }
                totgross = Convert.ToDouble(dr["totgross"].ToString());
                totpercentage = totgross / caltotgross * 100;
                branch_details.totpercentage = totpercentage.ToString();
                branch_details.deptname = dr["department"].ToString();
                branch_details.deptid = dr["branchid"].ToString();
                branch_details.spntotgross = dr["totgross"].ToString();
                branch_details.totnetpay = dr["totnetpay"].ToString();
                branch_details.branchid = dr["branchid"].ToString();
                branch_Masterlist.Add(branch_details);
            }
            string response = GetJson(branch_Masterlist);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }

    private void get_gosvd_deptwise_report(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            DateTime ServerDateCurrentdate = DBManager.GetTime(vdm.conn);
            int from_year = ServerDateCurrentdate.Year;
            string month = context.Request["month"].ToString();
            string companyid = context.Request["cmpid"].ToString();
            string btype = context.Request["btype"].ToString();
            cmd = new SqlCommand("SELECT  SUM(monthlysalarystatement.salary) AS totgross, SUM(monthlysalarystatement.netpay) AS totnetpay, branchmaster.branchid, branchmaster.branchname FROM  branchmaster INNER JOIN monthlysalarystatement ON branchmaster.branchid = monthlysalarystatement.branchid INNER JOIN departments ON monthlysalarystatement.deptid = departments.deptid LEFT OUTER JOIN company_master ON branchmaster.company_code = company_master.sno WHERE (monthlysalarystatement.year = @year) AND (monthlysalarystatement.month = @month) AND (company_master.sno = @cmpid) AND (branchmaster.branchtype = @btype) GROUP BY branchmaster.branchid, branchmaster.branchname");
            cmd.Parameters.Add("@year", from_year);
            cmd.Parameters.Add("@cmpid", companyid);
            cmd.Parameters.Add("@btype", btype);
            cmd.Parameters.Add("@month", month);
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            double caltotgross = 0;
            double totpercentage = 0;
            double totgross = 0;
            List<get_svdspl_branchwise_details> branch_Masterlist = new List<get_svdspl_branchwise_details>();
            foreach (DataRow drr in routes.Rows)
            {

                caltotgross += Convert.ToDouble(drr["totgross"].ToString());

            }
            foreach (DataRow dr in routes.Rows)
            {
                get_svdspl_branchwise_details branch_details = new get_svdspl_branchwise_details();
                CultureInfo hindi = new CultureInfo("hi-IN");
                if (dr["totgross"].ToString() == "" || dr["totgross"].ToString() == null || dr["totgross"].ToString() == "null")
                {
                    branch_details.totgross = "0";
                }
                else
                {
                    decimal totgrosss = decimal.Parse(dr["totgross"].ToString(), CultureInfo.InvariantCulture);
                    branch_details.totgross = string.Format(hindi, "{0:#,#}", totgrosss);
                }
                totgross = Convert.ToDouble(dr["totgross"].ToString());
                totpercentage = totgross / caltotgross * 100;
                branch_details.totpercentage = totpercentage.ToString();
                branch_details.branchname = dr["branchname"].ToString();
                branch_details.spntotgross = dr["totgross"].ToString();
                branch_details.totnetpay = dr["totnetpay"].ToString();
                branch_details.branchid = dr["branchid"].ToString();
                branch_Masterlist.Add(branch_details);
            }
            string response = GetJson(branch_Masterlist);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }


    private void get_svdsPlant_deptwise_report(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            DateTime ServerDateCurrentdate = DBManager.GetTime(vdm.conn);
            int from_year = ServerDateCurrentdate.Year;
            string month = context.Request["month"].ToString();
            string companyid = context.Request["companycode"].ToString();
            string branchid = context.Request["branchid"].ToString();
            string btype = context.Request["btype"].ToString();
            cmd = new SqlCommand("SELECT  SUM(monthlysalarystatement.salary) AS totgross, SUM(monthlysalarystatement.netpay) AS totnetpay, branchmaster.branchid, departments.department, departments.deptid FROM   branchmaster INNER JOIN monthlysalarystatement ON branchmaster.branchid = monthlysalarystatement.branchid INNER JOIN departments ON monthlysalarystatement.deptid = departments.deptid LEFT OUTER JOIN company_master ON branchmaster.company_code = company_master.sno WHERE  (monthlysalarystatement.year = @year) AND (monthlysalarystatement.month = @month) AND (company_master.sno = @cmpid) AND (branchmaster.branchtype = @btype) AND (branchmaster.branchid = @branchid ) GROUP BY branchmaster.branchid, departments.department, departments.deptid");
            cmd.Parameters.Add("@year", from_year);
            cmd.Parameters.Add("@cmpid", companyid);
            cmd.Parameters.Add("@branchid ", branchid);
            cmd.Parameters.Add("@btype", btype);
            cmd.Parameters.Add("@month", month);
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            double caltotgross = 0;
            double totpercentage = 0;
            double totgross = 0;
            List<get_svdspl_branchwise_details> branch_Masterlist = new List<get_svdspl_branchwise_details>();
            foreach (DataRow drr in routes.Rows)
            {

                caltotgross += Convert.ToDouble(drr["totgross"].ToString());

            }
            foreach (DataRow dr in routes.Rows)
            {
                get_svdspl_branchwise_details branch_details = new get_svdspl_branchwise_details();
                CultureInfo hindi = new CultureInfo("hi-IN");
                if (dr["totgross"].ToString() == "" || dr["totgross"].ToString() == null || dr["totgross"].ToString() == "null")
                {
                    branch_details.totgross = "0";
                }
                else
                {
                    decimal totgrosss = decimal.Parse(dr["totgross"].ToString(), CultureInfo.InvariantCulture);
                    branch_details.totgross = string.Format(hindi, "{0:#,#}", totgrosss);
                }
                totgross = Convert.ToDouble(dr["totgross"].ToString());
                totpercentage = totgross / caltotgross * 100;
                branch_details.totpercentage = totpercentage.ToString();
                branch_details.deptname = dr["department"].ToString();
                branch_details.spntotgross = dr["totgross"].ToString();
                branch_details.totnetpay = dr["totnetpay"].ToString();
                branch_details.deptid = dr["deptid"].ToString();
                branch_details.branchid = dr["branchid"].ToString();
                branch_Masterlist.Add(branch_details);
            }
            string response = GetJson(branch_Masterlist);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }
    private void get_svdssalesofc_deptwise_report(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            DateTime ServerDateCurrentdate = DBManager.GetTime(vdm.conn);
            int from_year = ServerDateCurrentdate.Year;
            string month = context.Request["month"].ToString();
            string companyid = context.Request["companycode"].ToString();
            string branchid = context.Request["branchid"].ToString();
            string btype = context.Request["btype"].ToString();
            cmd = new SqlCommand("SELECT  SUM(monthlysalarystatement.salary) AS totgross, SUM(monthlysalarystatement.netpay) AS totnetpay, branchmaster.branchid, departments.department, departments.deptid FROM   branchmaster INNER JOIN monthlysalarystatement ON branchmaster.branchid = monthlysalarystatement.branchid INNER JOIN departments ON monthlysalarystatement.deptid = departments.deptid LEFT OUTER JOIN company_master ON branchmaster.company_code = company_master.sno WHERE  (monthlysalarystatement.year = @year) AND (monthlysalarystatement.month = @month) AND (company_master.sno = @cmpid) AND (branchmaster.branchtype = @btype) AND (branchmaster.branchid = @branchid ) GROUP BY branchmaster.branchid, departments.department, departments.deptid");
            cmd.Parameters.Add("@year", from_year);
            cmd.Parameters.Add("@cmpid", companyid);
            cmd.Parameters.Add("@branchid ", branchid);
            cmd.Parameters.Add("@btype", btype);
            cmd.Parameters.Add("@month", month);
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            double caltotgross = 0;
            double totpercentage = 0;
            double totgross = 0;
            List<get_svdspl_branchwise_details> branch_Masterlist = new List<get_svdspl_branchwise_details>();
            foreach (DataRow drr in routes.Rows)
            {

                caltotgross += Convert.ToDouble(drr["totgross"].ToString());

            }
            foreach (DataRow dr in routes.Rows)
            {
                get_svdspl_branchwise_details branch_details = new get_svdspl_branchwise_details();
                CultureInfo hindi = new CultureInfo("hi-IN");
                if (dr["totgross"].ToString() == "" || dr["totgross"].ToString() == null || dr["totgross"].ToString() == "null")
                {
                    branch_details.totgross = "0";
                }
                else
                {
                    decimal totgrosss = decimal.Parse(dr["totgross"].ToString(), CultureInfo.InvariantCulture);
                    branch_details.totgross = string.Format(hindi, "{0:#,#}", totgrosss);
                }
                totgross = Convert.ToDouble(dr["totgross"].ToString());
                totpercentage = totgross / caltotgross * 100;
                branch_details.totpercentage = totpercentage.ToString();
                branch_details.deptname = dr["department"].ToString();
                branch_details.spntotgross = dr["totgross"].ToString();
                branch_details.totnetpay = dr["totnetpay"].ToString();
                branch_details.deptid = dr["deptid"].ToString();
                branch_details.branchid = dr["branchid"].ToString();
                branch_Masterlist.Add(branch_details);
            }
            string response = GetJson(branch_Masterlist);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }
    public class get_svdspl_depwise_details
    {
        public string fullname { get; set; }
        public string empid { get; set; }
        public string department { get; set; }
        public string totgross { get; set; }
        public string totnetpay { get; set; }
        public string year { get; set; }
        public string month { get; set; }
        public string totemp { get; set; }
        public string deptid { get; set; }
        public string branchid { get; set; }
        public string branchname { get; set; }
        public string pers { get; set; }
        public string totalbankpayments { get; set; }
        public string totaloutstandings { get; set; }
    }
    private void get_svdspl_depthwise_report(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            DateTime ServerDateCurrentdate = DBManager.GetTime(vdm.conn);
            int from_year = ServerDateCurrentdate.Year;
            string month = context.Request["month"].ToString();
            string companyid = context.Request["companyid"].ToString();
            string branchid = context.Request["branchid"].ToString();
            cmd = new SqlCommand("SELECT  departments.department, SUM(monthlysalarystatement.salary) AS totgross, SUM(monthlysalarystatement.netpay) AS totnetpay, COUNT(employedetails.empid) AS totemp, branchmaster.branchid, departments.deptid FROM employedetails INNER JOIN branchmaster ON employedetails.branchid = branchmaster.branchid INNER JOIN company_master ON branchmaster.company_code = company_master.sno INNER JOIN  monthlysalarystatement ON employedetails.empid = monthlysalarystatement.empid INNER JOIN departments ON monthlysalarystatement.deptid = departments.deptid WHERE (employedetails.status = 'no') AND (monthlysalarystatement.year = @year) AND (monthlysalarystatement.month = @month) AND (company_master.sno = @sno) AND (branchmaster.branchid = @bid) GROUP BY branchmaster.branchid, departments.deptid, departments.department");
            cmd.Parameters.Add("@year", from_year);
            cmd.Parameters.Add("@sno", companyid);
            cmd.Parameters.Add("@bid", branchid);
            cmd.Parameters.Add("@month", month);
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<get_svdspl_depwise_details> branch_Masterlist = new List<get_svdspl_depwise_details>();
            foreach (DataRow dr in routes.Rows)
            {
                get_svdspl_depwise_details branch_details = new get_svdspl_depwise_details();
                branch_details.department = dr["department"].ToString();
                branch_details.totgross = dr["totgross"].ToString();
                branch_details.totnetpay = dr["totnetpay"].ToString();
                branch_details.totemp = dr["totemp"].ToString();
                branch_details.deptid = dr["deptid"].ToString();
                branch_details.branchid = dr["branchid"].ToString();
                branch_Masterlist.Add(branch_details);
            }
            string response = GetJson(branch_Masterlist);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }
    public class get_svdspl_empwise_details
    {
        public string fullname { get; set; }
        public string totgross { get; set; }
        public string totnetpay { get; set; }
        public string year { get; set; }
        public string month { get; set; }
        public string empid { get; set; }
        public string totalbankpayments { get; set; }
        public string totaloutstandings { get; set; }
    }
    private void get_svdspl_empwise_report(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            DateTime ServerDateCurrentdate = DBManager.GetTime(vdm.conn);
            int from_year = ServerDateCurrentdate.Year;
            string month = context.Request["month"].ToString();
            string companyid = context.Request["companyid"].ToString();
            string branchid = context.Request["branchid"].ToString();
            string deptid = context.Request["deptid"].ToString();
            cmd = new SqlCommand("SELECT  employedetails.fullname, SUM(monthlysalarystatement.salary) AS totgross, SUM(monthlysalarystatement.netpay) AS totnetpay, employedetails.empid, branchmaster.branchid FROM  employedetails INNER JOIN branchmaster ON employedetails.branchid = branchmaster.branchid INNER JOIN company_master ON branchmaster.company_code = company_master.sno INNER JOIN monthlysalarystatement ON employedetails.empid = monthlysalarystatement.empid INNER JOIN departments ON monthlysalarystatement.deptid = departments.deptid WHERE (employedetails.status = 'no') AND (monthlysalarystatement.year = @year) AND (monthlysalarystatement.month = @month) AND (company_master.sno = @sno) AND (branchmaster.branchid = @bid) AND  (departments.deptid = @depid) GROUP BY branchmaster.branchid, departments.deptid, departments.department, employedetails.fullname, employedetails.empid");
            cmd.Parameters.Add("@year", from_year);
            cmd.Parameters.Add("@sno", companyid);
            cmd.Parameters.Add("@bid", branchid);
            cmd.Parameters.Add("@month", month);
            cmd.Parameters.Add("@depid", deptid);
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<get_svdspl_empwise_details> branch_Masterlist = new List<get_svdspl_empwise_details>();
            foreach (DataRow dr in routes.Rows)
            {
                get_svdspl_empwise_details branch_details = new get_svdspl_empwise_details();
                branch_details.fullname = dr["fullname"].ToString();
                branch_details.totgross = dr["totgross"].ToString();
                branch_details.totnetpay = dr["totnetpay"].ToString();
                branch_details.empid = dr["empid"].ToString();
                branch_Masterlist.Add(branch_details);
            }
            string response = GetJson(branch_Masterlist);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }
    private void get_gosvd_depthwise_report(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            DateTime ServerDateCurrentdate = DBManager.GetTime(vdm.conn);
            int from_year = ServerDateCurrentdate.Year;
            string month = context.Request["month"].ToString();
            string branchid = context.Request["branchid"].ToString();
            cmd = new SqlCommand("SELECT   departments.department, SUM(monthlysalarystatement.salary) AS totgross, SUM(monthlysalarystatement.netpay) AS totnetpay, COUNT(employedetails.empid) AS totemp, branchmaster.branchid, departments.deptid FROM   monthlysalarystatement INNER JOIN employedetails ON monthlysalarystatement.empid = employedetails.empid INNER JOIN departments ON monthlysalarystatement.deptid = departments.deptid INNER JOIN branchmaster ON monthlysalarystatement.branchid = branchmaster.branchid WHERE  (monthlysalarystatement.year = @year) AND (monthlysalarystatement.month = @month) AND (branchmaster.branchid = @bid) GROUP BY branchmaster.branchid, departments.deptid, departments.department");
            cmd.Parameters.Add("@year", from_year);
            cmd.Parameters.Add("@bid", branchid);
            cmd.Parameters.Add("@month", month);
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];

            cmd = new SqlCommand("SELECT    SUM(CONVERT(decimal(18, 2), ROUND(subbankformatmaster.netpay, 2))) AS totcount, branchmaster.branchid, branchmapping.mainbranch, departments.deptid, departments.department FROM   subbankformatmaster INNER JOIN branchmaster ON subbankformatmaster.branchid = branchmaster.branchid INNER JOIN employedetails ON subbankformatmaster.empid = employedetails.empid INNER JOIN branchmapping ON branchmaster.branchid = branchmapping.subbranch INNER JOIN departments ON subbankformatmaster.deptid = departments.deptid WHERE   (subbankformatmaster.year = @year) AND (subbankformatmaster.month = @month)  AND (branchmaster.branchid = @bid) GROUP BY branchmaster.branchid, branchmapping.mainbranch, departments.deptid, departments.department");
            cmd.Parameters.Add("@year", from_year);
            cmd.Parameters.Add("@month", month);
            //cmd.Parameters.Add("@m", mainbranch);
            cmd.Parameters.Add("@bid", branchid);
            DataTable dtbankpay = vdm.SelectQuery(cmd).Tables[0];

            double totoutstandings = 0;
            double totbankpayment = 0;
            double totalnetpay = 0;

            List<get_svdspl_depwise_details> branch_Masterlist = new List<get_svdspl_depwise_details>();
            if (routes.Rows.Count > 0)
            {
                foreach (DataRow dr in routes.Rows)
                {
                    get_svdspl_depwise_details branch_details = new get_svdspl_depwise_details();
                    branch_details.department = dr["department"].ToString();
                    branch_details.totgross = dr["totgross"].ToString();
                    branch_details.totnetpay = dr["totnetpay"].ToString();
                    totalnetpay = Convert.ToDouble(dr["totnetpay"].ToString());
                    branch_details.totemp = dr["totemp"].ToString();
                    branch_details.deptid = dr["deptid"].ToString();
                    branch_details.branchid = dr["branchid"].ToString();
                    foreach (DataRow drr in dtbankpay.Select("deptid='" + dr["deptid"].ToString() + "'"))
                    {
                        if (drr["totcount"].ToString() != "" || drr["totcount"].ToString() != null || drr["totcount"].ToString() != "null")
                        {
                            branch_details.totalbankpayments = drr["totcount"].ToString();
                            totbankpayment = Convert.ToDouble(drr["totcount"].ToString());
                            totoutstandings = totalnetpay - totbankpayment;
                            branch_details.totaloutstandings = totoutstandings.ToString();
                        }
                        else
                        {
                            branch_details.totalbankpayments = "0";
                            branch_details.totaloutstandings = "0";
                        }
                    }
                    branch_Masterlist.Add(branch_details);
                }
            }
            string response = GetJson(branch_Masterlist);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }

    private void get_gosvd_empwise_report(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            DateTime ServerDateCurrentdate = DBManager.GetTime(vdm.conn);
            int from_year = ServerDateCurrentdate.Year;
            string month = context.Request["month"].ToString();
            string branchid = context.Request["branchid"].ToString();
            string deptid = context.Request["deptid"].ToString();
            cmd = new SqlCommand("SELECT  SUM(monthlysalarystatement.salary) AS totgross, SUM(monthlysalarystatement.netpay) AS totnetpay, employedetails.fullname, employedetails.empid FROM  monthlysalarystatement INNER JOIN employedetails ON monthlysalarystatement.empid = employedetails.empid INNER JOIN departments ON monthlysalarystatement.deptid = departments.deptid INNER JOIN branchmaster ON monthlysalarystatement.branchid = branchmaster.branchid WHERE   (monthlysalarystatement.year = @year) AND (monthlysalarystatement.month = @month) AND (branchmaster.branchid = @bid) AND (departments.deptid = @deptid) GROUP BY employedetails.fullname, employedetails.empid");
            cmd.Parameters.Add("@year", from_year);
            cmd.Parameters.Add("@deptid", deptid);
            cmd.Parameters.Add("@bid", branchid);
            cmd.Parameters.Add("@month", month);
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];

            cmd = new SqlCommand("SELECT   SUM(CONVERT(decimal(18, 2), ROUND(subbankformatmaster.netpay, 2))) AS totcount, employedetails.empid, employedetails.fullname, departments.deptid FROM  subbankformatmaster INNER JOIN branchmaster ON subbankformatmaster.branchid = branchmaster.branchid INNER JOIN employedetails ON subbankformatmaster.empid = employedetails.empid INNER JOIN branchmapping ON branchmaster.branchid = branchmapping.subbranch INNER JOIN departments ON subbankformatmaster.deptid = departments.deptid WHERE  (subbankformatmaster.year = @year) AND (subbankformatmaster.month = @month) AND (branchmaster.branchid = @bid) AND (departments.deptid = @deptid) GROUP BY employedetails.empid, employedetails.fullname, departments.deptid");
            cmd.Parameters.Add("@year", from_year);
            cmd.Parameters.Add("@month", month);
            cmd.Parameters.Add("@bid", branchid);
            cmd.Parameters.Add("@deptid", deptid);
            DataTable dtbankpay = vdm.SelectQuery(cmd).Tables[0];
            double totalnetpay = 0;
            double totoutstandings = 0;
            double totbankpayment = 0;
            List<get_svdspl_depwise_details> branch_Masterlist = new List<get_svdspl_depwise_details>();
            if (routes.Rows.Count > 0)
            {
                foreach (DataRow dr in routes.Rows)
                {
                    get_svdspl_depwise_details branch_details = new get_svdspl_depwise_details();
                    branch_details.fullname = dr["fullname"].ToString();
                    branch_details.empid = dr["empid"].ToString();
                    branch_details.totgross = dr["totgross"].ToString();
                    branch_details.totnetpay = dr["totnetpay"].ToString();
                    totalnetpay = Convert.ToDouble(dr["totnetpay"].ToString());

                    foreach (DataRow drr in dtbankpay.Select("empid='" + dr["empid"].ToString() + "'"))
                    {
                        if (drr["totcount"].ToString() != "" || drr["totcount"].ToString() != null || drr["totcount"].ToString() != "null")
                        {
                            branch_details.totalbankpayments = drr["totcount"].ToString();
                            totbankpayment = Convert.ToDouble(drr["totcount"].ToString());
                            totoutstandings = totalnetpay - totbankpayment;
                            branch_details.totaloutstandings = totoutstandings.ToString();
                        }
                        else
                        {
                            branch_details.totalbankpayments = "0";
                            branch_details.totaloutstandings = "0";
                        }
                    }
                    branch_Masterlist.Add(branch_details);
                }
            }
            string response = GetJson(branch_Masterlist);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }
    private void get_gosvd_empwise_details(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            DateTime ServerDateCurrentdate = DBManager.GetTime(vdm.conn);
            int from_year = ServerDateCurrentdate.Year;
            string month = context.Request["month"].ToString();
            string mainbranch = context.Session["mainbranch"].ToString();
            cmd = new SqlCommand("SELECT   SUM(monthlysalarystatement.salary) AS totgross, SUM(monthlysalarystatement.netpay) AS totnetpay, employedetails.empid, employedetails.fullname, branchmaster.branchname FROM  company_master INNER JOIN branchmaster ON company_master.sno = branchmaster.company_code INNER JOIN branchmapping ON branchmaster.branchid = branchmapping.subbranch INNER JOIN monthlysalarystatement ON branchmaster.branchid = monthlysalarystatement.branchid INNER JOIN employedetails ON monthlysalarystatement.empid = employedetails.empid WHERE  (branchmapping.mainbranch = @m) AND (monthlysalarystatement.year = @year) AND (monthlysalarystatement.month = @month) GROUP BY employedetails.empid, employedetails.fullname, branchmaster.branchname ORDER BY branchmaster.branchname");
            cmd.Parameters.Add("@year", from_year);
            cmd.Parameters.Add("@month", month);
            cmd.Parameters.Add("@m", mainbranch);
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];

            cmd = new SqlCommand("SELECT  SUM(CONVERT(decimal(18, 2), ROUND(subbankformatmaster.netpay, 2))) AS totcount, employedetails.empid, employedetails.fullname, departments.deptid FROM  subbankformatmaster INNER JOIN branchmaster ON subbankformatmaster.branchid = branchmaster.branchid INNER JOIN employedetails ON subbankformatmaster.empid = employedetails.empid INNER JOIN branchmapping ON branchmaster.branchid = branchmapping.subbranch INNER JOIN departments ON subbankformatmaster.deptid = departments.deptid WHERE  (subbankformatmaster.year = @year) AND (subbankformatmaster.month = @month) AND (branchmapping.mainbranch = @m) GROUP BY employedetails.empid, employedetails.fullname, departments.deptid");
            cmd.Parameters.Add("@year", from_year);
            cmd.Parameters.Add("@month", month);
            cmd.Parameters.Add("@m", mainbranch);
            DataTable dtbankpay = vdm.SelectQuery(cmd).Tables[0];

            double totalnetpay = 0;
            double totoutstandings = 0;
            double totbankpayment = 0;
            List<get_svdspl_depwise_details> branch_Masterlist = new List<get_svdspl_depwise_details>();
            if (routes.Rows.Count > 0)
            {
                foreach (DataRow dr in routes.Rows)
                {
                    get_svdspl_depwise_details branch_details = new get_svdspl_depwise_details();
                    branch_details.branchname = dr["branchname"].ToString();
                    branch_details.fullname = dr["fullname"].ToString();
                    branch_details.totgross = dr["totgross"].ToString();
                    branch_details.totnetpay = dr["totnetpay"].ToString();
                    totalnetpay = Convert.ToDouble(dr["totnetpay"].ToString());

                    foreach (DataRow drr in dtbankpay.Select("empid='" + dr["empid"].ToString() + "'"))
                    {
                        if (drr["totcount"].ToString() != "" || drr["totcount"].ToString() != null || drr["totcount"].ToString() != "null")
                        {
                            branch_details.totalbankpayments = drr["totcount"].ToString();
                            totbankpayment = Convert.ToDouble(drr["totcount"].ToString());
                            totoutstandings = totalnetpay - totbankpayment;
                            branch_details.totaloutstandings = totoutstandings.ToString();
                        }
                        else
                        {
                            branch_details.totalbankpayments = "0";
                            branch_details.totaloutstandings = "0";
                        }
                    }
                    branch_Masterlist.Add(branch_details);
                }
            }
            string response = GetJson(branch_Masterlist);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }
    private void get_svds_empwise_details(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            DateTime ServerDateCurrentdate = DBManager.GetTime(vdm.conn);
            int from_year = ServerDateCurrentdate.Year;
            string month = context.Request["month"].ToString();
            string mainbranch = context.Session["mainbranch"].ToString();
            cmd = new SqlCommand("SELECT   SUM(monthlysalarystatement.salary) AS totsal, SUM(monthlysalarystatement.netpay) AS totnet, employedetails.empid, employedetails.fullname, branchmaster.branchname, branchmaster.branchid FROM   company_master INNER JOIN branchmaster ON company_master.sno = branchmaster.company_code INNER JOIN branchmapping ON branchmaster.branchid = branchmapping.subbranch INNER JOIN monthlysalarystatement ON branchmaster.branchid = monthlysalarystatement.branchid INNER JOIN employedetails ON monthlysalarystatement.empid = employedetails.empid WHERE  (branchmapping.mainbranch = @m) AND (monthlysalarystatement.year = @year) AND (monthlysalarystatement.month = @month) AND (branchmaster.company_code = '1') GROUP BY employedetails.empid, employedetails.fullname, branchmaster.branchname, branchmaster.branchid ORDER BY branchmaster.branchname");
            cmd.Parameters.Add("@year", from_year);
            cmd.Parameters.Add("@month", month);
            cmd.Parameters.Add("@m", mainbranch);
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];

            cmd = new SqlCommand("SELECT   SUM(CONVERT(decimal(18, 2), ROUND(subbankformatmaster.netpay, 2))) AS totcount, branchmaster.branchid, branchmapping.mainbranch, employedetails.empid FROM  subbankformatmaster INNER JOIN branchmaster ON subbankformatmaster.branchid = branchmaster.branchid INNER JOIN employedetails ON subbankformatmaster.empid = employedetails.empid INNER JOIN branchmapping ON branchmaster.branchid = branchmapping.subbranch WHERE    (subbankformatmaster.year = @year) AND (subbankformatmaster.month = @month) AND (branchmapping.mainbranch = @m) AND (branchmaster.company_code = '1') GROUP BY branchmaster.branchid, branchmapping.mainbranch, employedetails.empid");
            cmd.Parameters.Add("@year", from_year);
            cmd.Parameters.Add("@month", month);
            cmd.Parameters.Add("@m", mainbranch);
            DataTable dtbankpay = vdm.SelectQuery(cmd).Tables[0];
            double totnetpay = 0;
            double totbankpayment = 0;
            double totoutstandings = 0;
            List<get_svdspl_depwise_details> branch_detailsss = new List<get_svdspl_depwise_details>();
            if (routes.Rows.Count > 0)
            {
                foreach (DataRow dr in routes.Rows)
                {
                    get_svdspl_depwise_details branch_details = new get_svdspl_depwise_details();
                    string empid = dr["empid"].ToString();
                    branch_details.fullname = dr["fullname"].ToString();
                    branch_details.totgross = dr["totsal"].ToString();
                    branch_details.totnetpay = dr["totnet"].ToString();
                    totnetpay = Convert.ToDouble(dr["totnet"].ToString());
                    branch_details.branchname = dr["branchname"].ToString();
                    branch_details.branchid = dr["branchid"].ToString();

                    foreach (DataRow drr in dtbankpay.Select("empid='" + empid + "'"))
                    {
                        if (drr["totcount"].ToString() != "" || drr["totcount"].ToString() != null || drr["totcount"].ToString() != "null")
                        {
                            branch_details.totalbankpayments = drr["totcount"].ToString();
                            totbankpayment = Convert.ToDouble(drr["totcount"].ToString());
                            totoutstandings = totnetpay - totbankpayment;
                            branch_details.totaloutstandings = totoutstandings.ToString();
                        }
                        else
                        {
                            branch_details.totalbankpayments = "0";
                            branch_details.totaloutstandings = "0";
                        }
                    }
                    branch_detailsss.Add(branch_details);
                }
            }
            string response = GetJson(branch_detailsss);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }
    private void get_svd_empwise_details(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            DateTime ServerDateCurrentdate = DBManager.GetTime(vdm.conn);
            int from_year = ServerDateCurrentdate.Year;
            string month = context.Request["month"].ToString();
            string mainbranch = context.Session["mainbranch"].ToString();

            cmd = new SqlCommand("SELECT   SUM(monthlysalarystatement.salary) AS totsal, SUM(monthlysalarystatement.netpay) AS totnet, employedetails.empid, employedetails.fullname, branchmaster.branchname FROM  company_master INNER JOIN branchmaster ON company_master.sno = branchmaster.company_code INNER JOIN branchmapping ON branchmaster.branchid = branchmapping.subbranch INNER JOIN monthlysalarystatement ON branchmaster.branchid = monthlysalarystatement.branchid INNER JOIN employedetails ON monthlysalarystatement.empid = employedetails.empid WHERE  (branchmapping.mainbranch = @m) AND (monthlysalarystatement.year = @year) AND (monthlysalarystatement.month = @month) AND (branchmaster.company_code = '2') GROUP BY employedetails.empid, employedetails.fullname, branchmaster.branchname, branchmaster.address ORDER BY branchmaster.branchname");
            cmd.Parameters.Add("@year", from_year);
            cmd.Parameters.Add("@month", month);
            cmd.Parameters.Add("@m", mainbranch);
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];


            cmd = new SqlCommand("SELECT   SUM(CONVERT(decimal(18, 2), ROUND(subbankformatmaster.netpay, 2))) AS totcount, branchmaster.branchid, branchmapping.mainbranch, employedetails.empid FROM  subbankformatmaster INNER JOIN branchmaster ON subbankformatmaster.branchid = branchmaster.branchid INNER JOIN employedetails ON subbankformatmaster.empid = employedetails.empid INNER JOIN branchmapping ON branchmaster.branchid = branchmapping.subbranch WHERE    (subbankformatmaster.year = @year) AND (subbankformatmaster.month = @month) AND (branchmapping.mainbranch = @m) AND (branchmaster.company_code = '2') GROUP BY branchmaster.branchid, branchmapping.mainbranch, employedetails.empid");
            cmd.Parameters.Add("@year", from_year);
            cmd.Parameters.Add("@month", month);
            cmd.Parameters.Add("@m", mainbranch);
            DataTable dtbankpay = vdm.SelectQuery(cmd).Tables[0];
            double totnetpay = 0;
            double totbankpayment = 0;
            double totoutstandings = 0;
            List<get_svdspl_depwise_details> branch_detailsss = new List<get_svdspl_depwise_details>();
            if (routes.Rows.Count > 0)
            {
                foreach (DataRow dr in routes.Rows)
                {
                    get_svdspl_depwise_details branch_details = new get_svdspl_depwise_details();
                    string empid = dr["empid"].ToString();
                    branch_details.fullname = dr["fullname"].ToString();
                    branch_details.totgross = dr["totsal"].ToString();
                    branch_details.totnetpay = dr["totnet"].ToString();
                    totnetpay = Convert.ToDouble(dr["totnet"].ToString());
                    branch_details.branchname = dr["branchname"].ToString();

                    foreach (DataRow drr in dtbankpay.Select("empid='" + empid + "'"))
                    {
                        if (drr["totcount"].ToString() != "" || drr["totcount"].ToString() != null || drr["totcount"].ToString() != "null")
                        {
                            branch_details.totalbankpayments = drr["totcount"].ToString();
                            totbankpayment = Convert.ToDouble(drr["totcount"].ToString());
                            totoutstandings = totnetpay - totbankpayment;
                            branch_details.totaloutstandings = totoutstandings.ToString();
                        }
                        else
                        {
                            branch_details.totalbankpayments = "0";
                            branch_details.totaloutstandings = "0";
                        }
                    }
                    branch_detailsss.Add(branch_details);
                }
            }
            string response = GetJson(branch_detailsss);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }
    private void get_rmrd_empwise_details(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            DateTime ServerDateCurrentdate = DBManager.GetTime(vdm.conn);
            int from_year = ServerDateCurrentdate.Year;
            string month = context.Request["month"].ToString();
            string mainbranch = context.Session["mainbranch"].ToString();
            cmd = new SqlCommand("SELECT   SUM(monthlysalarystatement.salary) AS totsal, SUM(monthlysalarystatement.netpay) AS totnet, employedetails.empid, employedetails.fullname, branchmaster.branchname, branchmaster.address FROM  company_master INNER JOIN branchmaster ON company_master.sno = branchmaster.company_code INNER JOIN branchmapping ON branchmaster.branchid = branchmapping.subbranch INNER JOIN monthlysalarystatement ON branchmaster.branchid = monthlysalarystatement.branchid INNER JOIN employedetails ON monthlysalarystatement.empid = employedetails.empid WHERE  (branchmapping.mainbranch = @m) AND (monthlysalarystatement.year = @year) AND (monthlysalarystatement.month = @month) AND (branchmaster.company_code = '4') GROUP BY employedetails.empid, employedetails.fullname, branchmaster.branchname, branchmaster.address ORDER BY branchmaster.branchname");
            cmd.Parameters.Add("@year", from_year);
            cmd.Parameters.Add("@month", month);
            cmd.Parameters.Add("@m", mainbranch);
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];

            cmd = new SqlCommand("SELECT   SUM(CONVERT(decimal(18, 2), ROUND(subbankformatmaster.netpay, 2))) AS totcount, branchmaster.branchid, branchmapping.mainbranch, employedetails.empid FROM  subbankformatmaster INNER JOIN branchmaster ON subbankformatmaster.branchid = branchmaster.branchid INNER JOIN employedetails ON subbankformatmaster.empid = employedetails.empid INNER JOIN branchmapping ON branchmaster.branchid = branchmapping.subbranch WHERE    (subbankformatmaster.year = @year) AND (subbankformatmaster.month = @month) AND (branchmapping.mainbranch = @m) AND (branchmaster.company_code = '4') GROUP BY branchmaster.branchid, branchmapping.mainbranch, employedetails.empid");
            cmd.Parameters.Add("@year", from_year);
            cmd.Parameters.Add("@month", month);
            cmd.Parameters.Add("@m", mainbranch);
            DataTable dtbankpay = vdm.SelectQuery(cmd).Tables[0];
            double totnetpay = 0;
            double totbankpayment = 0;
            double totoutstandings = 0;
            List<get_svdspl_depwise_details> branch_detailsss = new List<get_svdspl_depwise_details>();
            if (routes.Rows.Count > 0)
            {
                foreach (DataRow dr in routes.Rows)
                {
                    get_svdspl_depwise_details branch_details = new get_svdspl_depwise_details();
                    string empid = dr["empid"].ToString();
                    branch_details.fullname = dr["fullname"].ToString();
                    branch_details.totgross = dr["totsal"].ToString();
                    branch_details.totnetpay = dr["totnet"].ToString();
                    totnetpay = Convert.ToDouble(dr["totnet"].ToString());
                    branch_details.branchname = dr["branchname"].ToString();

                    foreach (DataRow drr in dtbankpay.Select("empid='" + empid + "'"))
                    {
                        if (drr["totcount"].ToString() != "" || drr["totcount"].ToString() != null || drr["totcount"].ToString() != "null")
                        {
                            branch_details.totalbankpayments = drr["totcount"].ToString();
                            totbankpayment = Convert.ToDouble(drr["totcount"].ToString());
                            totoutstandings = totnetpay - totbankpayment;
                            branch_details.totaloutstandings = totoutstandings.ToString();
                        }
                        else
                        {
                            branch_details.totalbankpayments = "0";
                            branch_details.totaloutstandings = "0";
                        }
                    }
                    branch_detailsss.Add(branch_details);
                }
            }
            string response = GetJson(branch_detailsss);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }
    private void get_staff_empwise_details(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            DateTime ServerDateCurrentdate = DBManager.GetTime(vdm.conn);
            int from_year = ServerDateCurrentdate.Year;
            string month = context.Request["month"].ToString();
            string mainbranch = context.Session["mainbranch"].ToString();
            cmd = new SqlCommand("SELECT  SUM(monthlysalarystatement.salary) AS totsal, SUM(monthlysalarystatement.netpay) AS totnet, branchmaster.branchname, employedetails.fullname, employedetails.empid FROM   company_master INNER JOIN branchmaster ON company_master.sno = branchmaster.company_code INNER JOIN branchmapping ON branchmaster.branchid = branchmapping.subbranch INNER JOIN monthlysalarystatement ON branchmaster.branchid = monthlysalarystatement.branchid INNER JOIN employedetails ON monthlysalarystatement.empid = employedetails.empid WHERE   (branchmapping.mainbranch = @m) AND (monthlysalarystatement.year = @year) AND (monthlysalarystatement.month = @month) AND (monthlysalarystatement.emptype = 'Staff') GROUP BY branchmaster.branchname, employedetails.fullname, employedetails.empid ORDER BY branchmaster.branchname");
            cmd.Parameters.Add("@year", from_year);
            cmd.Parameters.Add("@month", month);
            cmd.Parameters.Add("@m", mainbranch);
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];

            cmd = new SqlCommand("SELECT   SUM(CONVERT(decimal(18, 2), ROUND(subbankformatmaster.netpay, 2))) AS totcount, branchmaster.branchid, branchmapping.mainbranch, employedetails.empid FROM  subbankformatmaster INNER JOIN branchmaster ON subbankformatmaster.branchid = branchmaster.branchid INNER JOIN employedetails ON subbankformatmaster.empid = employedetails.empid INNER JOIN branchmapping ON branchmaster.branchid = branchmapping.subbranch WHERE (subbankformatmaster.year = @year) AND (subbankformatmaster.month = @month) AND (branchmapping.mainbranch = @m) AND (subbankformatmaster.emptype = 'Staff') GROUP BY branchmaster.branchid, branchmapping.mainbranch, employedetails.empid");
            cmd.Parameters.Add("@year", from_year);
            cmd.Parameters.Add("@month", month);
            cmd.Parameters.Add("@m", mainbranch);
            DataTable dtbankpay = vdm.SelectQuery(cmd).Tables[0];

            double totnetpay = 0;
            double totbankpayment = 0;
            double totoutstandings = 0;
            List<get_svdspl_depwise_details> branch_detailsss = new List<get_svdspl_depwise_details>();
            if (routes.Rows.Count > 0)
            {
                foreach (DataRow dr in routes.Rows)
                {
                    get_svdspl_depwise_details branch_details = new get_svdspl_depwise_details();
                    string empid = dr["empid"].ToString();
                    branch_details.fullname = dr["fullname"].ToString();
                    branch_details.totgross = dr["totsal"].ToString();
                    branch_details.totnetpay = dr["totnet"].ToString();
                    totnetpay = Convert.ToDouble(dr["totnet"].ToString());
                    branch_details.branchname = dr["branchname"].ToString();

                    foreach (DataRow drr in dtbankpay.Select("empid='" + empid + "'"))
                    {
                        if (drr["totcount"].ToString() != "" || drr["totcount"].ToString() != null || drr["totcount"].ToString() != "null")
                        {
                            branch_details.totalbankpayments = drr["totcount"].ToString();
                            totbankpayment = Convert.ToDouble(drr["totcount"].ToString());
                            totoutstandings = totnetpay - totbankpayment;
                            branch_details.totaloutstandings = totoutstandings.ToString();
                        }
                        else
                        {
                            branch_details.totalbankpayments = "0";
                            branch_details.totaloutstandings = "0";
                        }
                    }
                    branch_detailsss.Add(branch_details);
                }
            }
            string response = GetJson(branch_detailsss);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }
    private void get_casual_empwise_details(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            DateTime ServerDateCurrentdate = DBManager.GetTime(vdm.conn);
            int from_year = ServerDateCurrentdate.Year;
            string month = context.Request["month"].ToString();
            string mainbranch = context.Session["mainbranch"].ToString();
            cmd = new SqlCommand("SELECT  SUM(monthlysalarystatement.salary) AS totsal, SUM(monthlysalarystatement.netpay) AS totnet, branchmaster.branchname, employedetails.fullname, employedetails.empid FROM   company_master INNER JOIN branchmaster ON company_master.sno = branchmaster.company_code INNER JOIN branchmapping ON branchmaster.branchid = branchmapping.subbranch INNER JOIN monthlysalarystatement ON branchmaster.branchid = monthlysalarystatement.branchid INNER JOIN employedetails ON monthlysalarystatement.empid = employedetails.empid WHERE   (branchmapping.mainbranch = @m) AND (monthlysalarystatement.year = @year) AND (monthlysalarystatement.month = @month) AND (monthlysalarystatement.emptype <> 'Staff') GROUP BY branchmaster.branchname, employedetails.fullname, employedetails.empid ORDER BY branchmaster.branchname");
            cmd.Parameters.Add("@year", from_year);
            cmd.Parameters.Add("@month", month);
            cmd.Parameters.Add("@m", mainbranch);
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];

            cmd = new SqlCommand("SELECT   SUM(CONVERT(decimal(18, 2), ROUND(subbankformatmaster.netpay, 2))) AS totcount, branchmaster.branchid, branchmapping.mainbranch, employedetails.empid FROM  subbankformatmaster INNER JOIN branchmaster ON subbankformatmaster.branchid = branchmaster.branchid INNER JOIN employedetails ON subbankformatmaster.empid = employedetails.empid INNER JOIN branchmapping ON branchmaster.branchid = branchmapping.subbranch WHERE (subbankformatmaster.year = @year) AND (subbankformatmaster.month = @month) AND (branchmapping.mainbranch = @m) AND (subbankformatmaster.emptype <> 'Staff') GROUP BY branchmaster.branchid, branchmapping.mainbranch, employedetails.empid");
            cmd.Parameters.Add("@year", from_year);
            cmd.Parameters.Add("@month", month);
            cmd.Parameters.Add("@m", mainbranch);
            DataTable dtbankpay = vdm.SelectQuery(cmd).Tables[0];

            double totnetpay = 0;
            double totbankpayment = 0;
            double totoutstandings = 0;
            List<get_svdspl_depwise_details> branch_detailsss = new List<get_svdspl_depwise_details>();
            if (routes.Rows.Count > 0)
            {
                foreach (DataRow dr in routes.Rows)
                {
                    get_svdspl_depwise_details branch_details = new get_svdspl_depwise_details();
                    string empid = dr["empid"].ToString();
                    branch_details.fullname = dr["fullname"].ToString();
                    branch_details.totgross = dr["totsal"].ToString();
                    branch_details.totnetpay = dr["totnet"].ToString();
                    totnetpay = Convert.ToDouble(dr["totnet"].ToString());
                    branch_details.branchname = dr["branchname"].ToString();

                    foreach (DataRow drr in dtbankpay.Select("empid='" + empid + "'"))
                    {
                        if (drr["totcount"].ToString() != "" || drr["totcount"].ToString() != null || drr["totcount"].ToString() != "null")
                        {
                            branch_details.totalbankpayments = drr["totcount"].ToString();
                            totbankpayment = Convert.ToDouble(drr["totcount"].ToString());
                            totoutstandings = totnetpay - totbankpayment;
                            branch_details.totaloutstandings = totoutstandings.ToString();
                        }
                        else
                        {
                            branch_details.totalbankpayments = "0";
                            branch_details.totaloutstandings = "0";
                        }
                    }
                    branch_detailsss.Add(branch_details);
                }
            }
            string response = GetJson(branch_detailsss);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }
    //private void get_branchwise_empattandance(HttpContext context)
    //{
    //    try
    //    {
    //        vdm = new DBManager();
    //        string branchid = context.Request["branchid"];
    //        string company_code = context.Request["company_code"];
    //        string mainbranch = context.Session["mainbranch"].ToString();
    //        string doe = context.Request["doe"];
    //        List<attandancedetailes> attlst = new List<attandancedetailes>();
    //        int present = 0;
    //        int total = 0;
    //        int absent = 0;
    //        string fullnameee = "";
    //        string branchname = "";
    //        string branch_id = "";
    //        DateTime dtdoe = Convert.ToDateTime(doe);
    //        DateTime ServerDateCurrentdate = DBManager.GetTime(vdm.conn);
    //        string curentdt = Convert.ToDateTime(ServerDateCurrentdate).ToString("MM/dd/yyyy");
    //        DateTime dt = Convert.ToDateTime(curentdt);
    //        if (dtdoe == dt)
    //        {
    //            dtdoe = GetLowDate(dtdoe).AddDays(-1);
    //        }
    //        DataTable dttotalemployes = new DataTable();
    //        DataTable dtpresent = new DataTable();
    //        DataTable dtlogs = new DataTable();
    //        DataTable dtbranch = new DataTable();

    //        if (company_code == "ALL")
    //        {
    //            cmd = new SqlCommand("SELECT   branchmaster.branchname, branchmaster.branchid, company_master.companyname FROM   branchmaster INNER JOIN branchmapping ON branchmaster.branchid = branchmapping.subbranch INNER JOIN company_master ON branchmaster.company_code = company_master.sno INNER JOIN employedetails ON branchmaster.branchid = employedetails.branchid WHERE  (branchmapping.mainbranch = @m) AND (employedetails.status = 'no') GROUP BY branchmaster.branchname, branchmaster.branchid, company_master.companyname");
    //            cmd.Parameters.Add("@m", mainbranch);
    //            dtbranch = vdm.SelectQuery(cmd).Tables[0];
    //            if (dtbranch.Rows.Count > 0)
    //            {
    //                foreach (DataRow dr in dtbranch.Rows)
    //                {
    //                    string branch = dr["branchname"].ToString();
    //                    branch_id = dr["branchid"].ToString();
    //                    branchname = branch;
    //                    cmd = new SqlCommand("SELECT COUNT(*) AS totalemp, employedetails.empid, employedetails.fullname FROM   employedetails INNER JOIN branchmapping ON employedetails.branchid = branchmapping.subbranch WHERE  (branchmapping.mainbranch = @m) AND (employedetails.status = 'No') GROUP BY employedetails.empid, employedetails.fullname");
    //                    cmd.Parameters.Add("@m", mainbranch);
    //                    dttotalemployes = vdm.SelectQuery(cmd).Tables[0];
    //                    if (dttotalemployes.Rows.Count > 0)
    //                    {
    //                        foreach (DataRow drr in dttotalemployes.Rows)
    //                        {
    //                            string temp = drr["totalemp"].ToString();//totalemployee
    //                            total = Convert.ToInt32(temp);
    //                        }
    //                    }
    //                    cmd = new SqlCommand("SELECT   COUNT(DISTINCT EmpId) AS totalemplogs FROM     AttendanceLogs WHERE   (LogDate BETWEEN @d1 AND @d2)");
    //                    cmd.Parameters.Add("@d1", GetLowDate(dtdoe));
    //                    cmd.Parameters.Add("@d2", GetHighDate(dtdoe));
    //                    dtlogs = vdm.SelectQuery(cmd).Tables[0];
    //                    string totalemplogs = dtlogs.Rows[0]["totalemplogs"].ToString();
    //                    cmd = new SqlCommand("SELECT   branchmaster.branchid, branchmaster.branchname, dailyattandancedetails.empid, employedetails.fullname, dailyattandancedetails.status FROM    dailyattandancedetails INNER JOIN branchmapping ON dailyattandancedetails.branchid = branchmapping.subbranch INNER JOIN branchmaster ON dailyattandancedetails.branchid = branchmaster.branchid INNER JOIN company_master ON branchmaster.company_code = company_master.sno INNER JOIN employedetails ON dailyattandancedetails.empid = employedetails.empid WHERE  (branchmapping.mainbranch = @m) AND (dailyattandancedetails.status = 'P') AND (dailyattandancedetails.attendance_date BETWEEN @d1 AND @d2) GROUP BY branchmaster.branchid, branchmaster.branchname, dailyattandancedetails.empid, employedetails.fullname, dailyattandancedetails.status");
    //                    cmd.Parameters.Add("@d1", GetLowDate(dtdoe));
    //                    cmd.Parameters.Add("@d2", GetHighDate(dtdoe));
    //                    cmd.Parameters.Add("@m", mainbranch);
    //                    dtpresent = vdm.SelectQuery(cmd).Tables[0];
    //                    if (dtpresent.Rows.Count > 0)
    //                    {
    //                        foreach (DataRow dr1 in dtpresent.Rows)
    //                        {
    //                            string tpresent = dr1["present"].ToString();//branch wise present employee
    //                            present = Convert.ToInt32(tpresent);
    //                            string fullnamee = dr1["fullname"].ToString();
    //                            fullnameee = fullnamee;
    //                        }
    //                    }
    //                    absent = total - present;

    //                    if (total != 0)
    //                    {
    //                        attandancedetailes getdepts = new attandancedetailes();

    //                        getdepts.presentemployes = present.ToString();
    //                        getdepts.absentemployes = absent.ToString();
    //                        getdepts.totalemployes = total.ToString();
    //                        getdepts.branchname = branchname;
    //                        getdepts.fullname = fullnameee;
    //                        getdepts.branch_id = branch_id;
    //                        string presentemployes = present.ToString();
    //                        if (totalemplogs == "0")
    //                        {
    //                            getdepts.msg = "In This Branch Network Problem  ";
    //                        }
    //                        else if (totalemplogs != "0" && presentemployes == "0")
    //                        {
    //                            getdepts.msg = "This Branch Attendence Not Finalized ";
    //                        }

    //                        attlst.Add(getdepts);
    //                    }
    //                }
    //            }
    //        }
    //        else
    //        {

    //            if (branchid == "ALL")
    //            {
    //                cmd = new SqlCommand("SELECT branchmaster.branchname, branchmaster.branchid, company_master.companyname FROM branchmaster INNER JOIN branchmapping ON branchmaster.branchid = branchmapping.subbranch INNER JOIN company_master ON branchmaster.company_code = company_master.sno WHERE (branchmapping.mainbranch = @m) AND (branchmaster.company_code = @company) GROUP BY branchmaster.branchname, branchmaster.branchid, company_master.companyname");
    //                cmd.Parameters.Add("@m", mainbranch);
    //                cmd.Parameters.Add("@company", company_code);
    //                dtbranch = vdm.SelectQuery(cmd).Tables[0];
    //                if (dtbranch.Rows.Count > 0)
    //                {
    //                    foreach (DataRow dr in dtbranch.Rows)
    //                    {
    //                        string branch = dr["branchname"].ToString();
    //                        branch_id = dr["branchid"].ToString();
    //                        branchname = branch;
    //                        //cmd = new SqlCommand("SELECT   COUNT(*) AS totalemp FROM  employedetails INNER JOIN branchmapping ON employedetails.branchid = branchmapping.subbranch WHERE (employedetails.branchid = @branchid) AND (employedetails.status = 'No') AND (branchmapping.mainbranch = @m) AND (employedetails.employee_type = 'Staff')");
    //                        cmd = new SqlCommand("SELECT   COUNT(*) AS totalemp FROM   employedetails INNER JOIN branchmapping ON employedetails.branchid = branchmapping.subbranch WHERE  (branchmapping.mainbranch = @m) AND (employedetails.branchid = @branchid) AND (employedetails.status = 'No')");
    //                        cmd.Parameters.Add("@branchid", branch_id);
    //                        cmd.Parameters.Add("@m", mainbranch);
    //                        dttotalemployes = vdm.SelectQuery(cmd).Tables[0];
    //                        if (dttotalemployes.Rows.Count > 0)
    //                        {
    //                            foreach (DataRow drr in dttotalemployes.Rows)
    //                            {
    //                                string temp = drr["totalemp"].ToString();//totalemployee
    //                                total = Convert.ToInt32(temp);
    //                            }
    //                        }
    //                        cmd = new SqlCommand("SELECT COUNT(DISTINCT EmpId) AS totalemplogs FROM   AttendanceLogs WHERE (BranchId = @branchid) AND (LogDate BETWEEN @d1 AND @d2)");
    //                        cmd.Parameters.Add("@branchid", branch_id);
    //                        cmd.Parameters.Add("@d1", GetLowDate(dtdoe));
    //                        cmd.Parameters.Add("@d2", GetHighDate(dtdoe));
    //                        dtlogs = vdm.SelectQuery(cmd).Tables[0];
    //                        string totalemplogs = dtlogs.Rows[0]["totalemplogs"].ToString();
    //                        cmd = new SqlCommand("SELECT COUNT(*) AS present FROM dailyattandancedetails INNER JOIN branchmapping ON dailyattandancedetails.branchid = branchmapping.subbranch INNER JOIN branchmaster ON dailyattandancedetails.branchid = branchmaster.branchid INNER JOIN company_master ON branchmaster.company_code = company_master.sno WHERE (dailyattandancedetails.status = 'P') AND (dailyattandancedetails.branchid = @branchid) AND (dailyattandancedetails.attendance_date BETWEEN @d1 AND @d2) AND (branchmapping.mainbranch = @m) AND (branchmaster.company_code = @company)");
    //                        //cmd = new SqlCommand("SELECT COUNT(*) AS present FROM dailyattandancedetails INNER JOIN branchmapping ON dailyattandancedetails.branchid = branchmapping.subbranch WHERE (dailyattandancedetails.status = 'P') AND (dailyattandancedetails.branchid = @branchid) AND (dailyattandancedetails.attendance_date BETWEEN @d1 AND @d2) AND (branchmapping.mainbranch = @m)");
    //                        //cmd = new SqlCommand("SELECT Count(*) AS present FROM  dailyattandancedetails  WHERE  (status = 'P') AND (branchid=@branchid) AND (attendance_date BETWEEN @d1 and @d2)");
    //                        cmd.Parameters.Add("@branchid", branch_id);
    //                        cmd.Parameters.Add("@company", company_code);
    //                        cmd.Parameters.Add("@d1", GetLowDate(dtdoe));
    //                        cmd.Parameters.Add("@d2", GetHighDate(dtdoe));
    //                        cmd.Parameters.Add("@m", mainbranch);
    //                        dtpresent = vdm.SelectQuery(cmd).Tables[0];
    //                        if (dtpresent.Rows.Count > 0)
    //                        {
    //                            foreach (DataRow dr1 in dtpresent.Rows)
    //                            {
    //                                string tpresent = dr1["present"].ToString();//branch wise present employee
    //                                present = Convert.ToInt32(tpresent);
    //                            }
    //                        }
    //                        absent = total - present;

    //                        if (total != 0)
    //                        {
    //                            attandancedetailes getdepts = new attandancedetailes();

    //                            getdepts.presentemployes = present.ToString();
    //                            getdepts.absentemployes = absent.ToString();
    //                            getdepts.totalemployes = total.ToString();
    //                            getdepts.branchname = branchname;
    //                            getdepts.branch_id = branch_id;
    //                            string presentemployes = present.ToString();
    //                            if (totalemplogs == "0")
    //                            {
    //                                getdepts.msg = "In This Branch Network Problem  ";
    //                            }
    //                            else if (totalemplogs != "0" && presentemployes == "0")
    //                            {
    //                                getdepts.msg = "This Branch Attendence Not Finalized ";
    //                            }


    //                            attlst.Add(getdepts);
    //                        }
    //                    }
    //                }
    //            }
    //            else
    //            {
    //                cmd = new SqlCommand("SELECT Count(*) AS totalemp FROM employedetails WHERE branchid=@branchid AND status='No'");
    //                cmd.Parameters.Add("@branchid", branchid);
    //                dttotalemployes = vdm.SelectQuery(cmd).Tables[0];
    //                cmd = new SqlCommand("SELECT Count(*) AS present FROM  dailyattandancedetails  WHERE  (status = 'P') AND (branchid=@bid) AND (attendance_date BETWEEN @d1 and @d2)");
    //                cmd.Parameters.Add("@bid", branchid);
    //                cmd.Parameters.Add("@d1", GetLowDate(dtdoe));
    //                cmd.Parameters.Add("@d2", GetHighDate(dtdoe));
    //                dtpresent = vdm.SelectQuery(cmd).Tables[0];
    //                cmd = new SqlCommand("SELECT branchname,branchid FROM branchmaster WHERE branchid=@bid");
    //                cmd.Parameters.Add("@bid", branchid);
    //                dtbranch = vdm.SelectQuery(cmd).Tables[0];
    //                if (dtbranch.Rows.Count > 0)
    //                {
    //                    foreach (DataRow dr in dtbranch.Rows)
    //                    {
    //                        string branch = dr["branchname"].ToString();
    //                        branch_id = dr["branchid"].ToString();
    //                        branchname = branch;
    //                    }
    //                }
    //                if (dtpresent.Rows.Count > 0)
    //                {
    //                    foreach (DataRow dr in dtpresent.Rows)
    //                    {
    //                        string tpresent = dr["present"].ToString();//branch wise present employee
    //                        present = Convert.ToInt32(tpresent);
    //                    }
    //                }
    //                if (dttotalemployes.Rows.Count > 0)
    //                {
    //                    foreach (DataRow drr in dttotalemployes.Rows)
    //                    {
    //                        string temp = drr["totalemp"].ToString();//totalemployee
    //                        total = Convert.ToInt32(temp);
    //                    }
    //                }
    //                absent = total - present;
    //                attandancedetailes getdepts1 = new attandancedetailes();
    //                getdepts1.totalemployes = total.ToString();
    //                getdepts1.presentemployes = present.ToString();
    //                getdepts1.absentemployes = absent.ToString();
    //                getdepts1.branchname = branchname;
    //                getdepts1.branch_id = branch_id;
    //                attlst.Add(getdepts1);
    //            }
    //        }
    //        string response = GetJson(attlst);
    //        context.Response.Write(response);
    //    }
    //    catch
    //    {
    //    }
    //}
    public class gsvd_emp_status
    {
        public string fullname { get; set; }
        public string branchname { get; set; }
        public string status { get; set; }
    }
    private void get_branchwise_empattandance(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            string DOA = context.Request["doe"];
            DateTime dtDOE = Convert.ToDateTime(DOA);
            DateTime ServerDateCurrentdate = DBManager.GetTime(vdm.conn);
            string curentdt = Convert.ToDateTime(ServerDateCurrentdate).ToString("MM/dd/yyyy");
            DateTime dt = Convert.ToDateTime(curentdt);
            if (dtDOE == dt)
            {
                dtDOE = GetLowDate(dtDOE).AddDays(-1);
            }
            string mainbranch = context.Session["mainbranch"].ToString();
            string branchid = context.Request["branchid"];
            string company_code = context.Request["company_code"];
            List<Employeedet> bankMasterlist = new List<Employeedet>();
            if (company_code == "ALL")
            {
                cmd = new SqlCommand("SELECT  Atten.empid, Atten.fullname, Atten.Expr1, Atten.employee_num, daily.sno, daily.branchid, daily.empid AS Expr2, daily.status, daily.doe, daily.attendance_date, daily.remarks, Atten.branchname, Atten.designation FROM   (SELECT  t1.empid, t1.fullname, ISNULL(f2.D, '') AS Expr1, t1.employee_num, t1.branchname, t1.designation FROM  (SELECT  employedetails.empid, employedetails.fullname, employedetails.employee_num, branchmaster.branchname, designation.designation FROM  employedetails INNER JOIN branchmapping ON employedetails.branchid = branchmapping.subbranch INNER JOIN branchmaster ON employedetails.branchid = branchmaster.branchid LEFT OUTER JOIN designation ON employedetails.designationid = designation.designationid WHERE  (employedetails.status = 'No')) AS t1 LEFT OUTER JOIN (SELECT        Eid, D FROM   (SELECT   EmpId AS Eid, CONVERT(nvarchar(20), LogDate, 103) AS D FROM  AttendanceLogs WHERE  (LogDate BETWEEN @d1 AND @d2) GROUP BY EmpId, LogDate) AS t2 GROUP BY Eid, D) AS f2 ON t1.empid = f2.Eid) AS Atten LEFT OUTER JOIN (SELECT sno, branchid, empid, status, doe, attendance_date, remarks FROM  dailyattandancedetails WHERE  (attendance_date BETWEEN @d1 AND @d2)) AS daily ON Atten.empid = daily.empid");
                cmd.Parameters.Add("@d1", GetLowDate(dtDOE));
                cmd.Parameters.Add("@d2", GetHighDate(dtDOE));

                DataTable dtemp = vdm.SelectQuery(cmd).Tables[0];
                if (dtemp.Rows.Count > 0)
                {
                    foreach (DataRow dr in dtemp.Rows)
                    {
                        Employeedet GetEmployee = new Employeedet();
                        GetEmployee.empsno = dr["empid"].ToString();
                        GetEmployee.employee_name = dr["fullname"].ToString();
                        GetEmployee.registrationid = dr["employee_num"].ToString();
                        GetEmployee.branchid = dr["branchid"].ToString();
                        GetEmployee.branchname = dr["branchname"].ToString();
                        GetEmployee.designation = dr["designation"].ToString();
                        GetEmployee.status = dr["status"].ToString();
                        string status = dr["status"].ToString();
                        if (status == "")
                        {
                            GetEmployee.status = "A";
                        }
                        string date = dr["attendance_date"].ToString();

                        if (date != "")
                        {
                            DateTime dtDoe = Convert.ToDateTime(date);
                            string strdateTime = dtDoe.ToString("HH");
                            string strdate = dtDoe.ToString("dd/MMM");
                            //DateTime Date1 = Convert.ToDateTime(date);
                            GetEmployee.LogDate = strdate;
                        }
                        else
                        {


                            DateTime Date1 = Convert.ToDateTime(dtDOE);
                            string strdateTime2 = dtDOE.ToString("HH");
                            string strdate1 = dtDOE.ToString("dd/MMM");
                            GetEmployee.LogDate = strdate1;

                        }
                        GetEmployee.Date = dtDOE.ToString("dd/MM/yyyy");
                        bankMasterlist.Add(GetEmployee);
                    }
                }
            }
            else
            {
                if (branchid == "ALL")
                {
                    cmd = new SqlCommand("SELECT  Atten.empid, Atten.fullname, Atten.Expr1, Atten.employee_num, daily.sno, daily.branchid, daily.empid AS Expr2, daily.status, daily.doe, daily.attendance_date, daily.remarks, Atten.branchname, Atten.designation FROM   (SELECT  t1.empid, t1.fullname, ISNULL(f2.D, '') AS Expr1, t1.employee_num, t1.branchname, t1.designation FROM  (SELECT employedetails.empid, employedetails.fullname, employedetails.employee_num, branchmaster.branchname, designation.designation FROM   employedetails INNER JOIN branchmapping ON employedetails.branchid = branchmapping.subbranch INNER JOIN branchmaster ON employedetails.branchid = branchmaster.branchid LEFT OUTER JOIN designation ON employedetails.designationid = designation.designationid WHERE  (employedetails.status = 'No') AND (branchmapping.mainbranch = @m) AND (branchmaster.company_code = @company_code)) AS t1 LEFT OUTER JOIN (SELECT  Eid, D FROM    (SELECT   EmpId AS Eid, CONVERT(nvarchar(20), LogDate, 103) AS D FROM   AttendanceLogs WHERE  (LogDate BETWEEN @d1 AND @d2) GROUP BY EmpId, LogDate) AS t2 GROUP BY Eid, D) AS f2 ON t1.empid = f2.Eid) AS Atten LEFT OUTER JOIN (SELECT sno, branchid, empid, status, doe, attendance_date, remarks FROM  dailyattandancedetails WHERE  (attendance_date BETWEEN @d1 AND @d2)) AS daily ON Atten.empid = daily.empid");
                    cmd.Parameters.Add("@d1", GetLowDate(dtDOE));
                    cmd.Parameters.Add("@d2", GetHighDate(dtDOE));
                    cmd.Parameters.Add("@m", mainbranch);
                    cmd.Parameters.Add("@company_code", company_code);

                    DataTable dtemp = vdm.SelectQuery(cmd).Tables[0];

                    if (dtemp.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dtemp.Rows)
                        {
                            Employeedet GetEmployee = new Employeedet();
                            GetEmployee.empsno = dr["empid"].ToString();
                            GetEmployee.employee_name = dr["fullname"].ToString();
                            GetEmployee.registrationid = dr["employee_num"].ToString();
                            GetEmployee.branchid = dr["branchid"].ToString();
                            GetEmployee.branchname = dr["branchname"].ToString();
                            GetEmployee.designation = dr["designation"].ToString();
                            GetEmployee.status = dr["status"].ToString();
                            string status = dr["status"].ToString();
                            if (status == "")
                            {
                                GetEmployee.status = "A";
                            }
                            string date = dr["attendance_date"].ToString();

                            if (date != "")
                            {
                                DateTime dtDoe = Convert.ToDateTime(date);
                                string strdateTime = dtDoe.ToString("HH");
                                string strdate = dtDoe.ToString("dd/MMM");
                                //DateTime Date1 = Convert.ToDateTime(date);
                                GetEmployee.LogDate = strdate;
                            }
                            else
                            {
                                DateTime Date1 = Convert.ToDateTime(dtDOE);
                                string strdateTime2 = dtDOE.ToString("HH");
                                string strdate1 = dtDOE.ToString("dd/MMM");
                                GetEmployee.LogDate = strdate1;
                            }
                            GetEmployee.Date = dtDOE.ToString("dd/MM/yyyy");
                            bankMasterlist.Add(GetEmployee);
                        }
                    }
                }
                else
                {
                    cmd = new SqlCommand("SELECT  Atten.empid, Atten.fullname, Atten.Expr1, Atten.employee_num, daily.sno, daily.branchid, daily.empid AS Expr2, daily.status, daily.doe, daily.attendance_date, daily.remarks, Atten.branchname, Atten.designation FROM   (SELECT  t1.empid, t1.fullname, ISNULL(f2.D, '') AS Expr1, t1.employee_num, t1.branchname, t1.designation FROM  (SELECT employedetails.empid, employedetails.fullname, employedetails.employee_num, branchmaster.branchname, designation.designation FROM   employedetails INNER JOIN branchmapping ON employedetails.branchid = branchmapping.subbranch INNER JOIN branchmaster ON employedetails.branchid = branchmaster.branchid LEFT OUTER JOIN designation ON employedetails.designationid = designation.designationid WHERE  (employedetails.status = 'No') AND (branchmapping.mainbranch = @m) AND (branchmaster.company_code = @company_code)AND (branchmaster.branchid = @branchid)) AS t1 LEFT OUTER JOIN (SELECT  Eid, D FROM    (SELECT   EmpId AS Eid, CONVERT(nvarchar(20), LogDate, 103) AS D FROM   AttendanceLogs WHERE  (LogDate BETWEEN @d1 AND @d2) GROUP BY EmpId, LogDate) AS t2 GROUP BY Eid, D) AS f2 ON t1.empid = f2.Eid) AS Atten LEFT OUTER JOIN (SELECT sno, branchid, empid, status, doe, attendance_date, remarks FROM  dailyattandancedetails WHERE  (attendance_date BETWEEN @d1 AND @d2)) AS daily ON Atten.empid = daily.empid");
                    cmd.Parameters.Add("@d1", GetLowDate(dtDOE));
                    cmd.Parameters.Add("@d2", GetHighDate(dtDOE));
                    cmd.Parameters.Add("@company_code", company_code);
                    cmd.Parameters.Add("@branchid", branchid);
                    cmd.Parameters.Add("@m", mainbranch);

                    DataTable dtemp = vdm.SelectQuery(cmd).Tables[0];
                    if (dtemp.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dtemp.Rows)
                        {
                            Employeedet GetEmployee = new Employeedet();
                            GetEmployee.empsno = dr["empid"].ToString();
                            GetEmployee.employee_name = dr["fullname"].ToString();
                            GetEmployee.registrationid = dr["employee_num"].ToString();
                            GetEmployee.branchid = dr["branchid"].ToString();
                            GetEmployee.branchname = dr["branchname"].ToString();
                            GetEmployee.designation = dr["designation"].ToString();
                            GetEmployee.status = dr["status"].ToString();
                            string status = dr["status"].ToString();
                            if (status == "")
                            {
                                GetEmployee.status = "A";
                            }
                            string date = dr["attendance_date"].ToString();

                            if (date != "")
                            {
                                DateTime dtDoe = Convert.ToDateTime(date);
                                string strdateTime = dtDoe.ToString("HH");
                                string strdate = dtDoe.ToString("dd/MMM");
                                //DateTime Date1 = Convert.ToDateTime(date);
                                GetEmployee.LogDate = strdate;
                            }
                            else
                            {
                                DateTime Date1 = Convert.ToDateTime(dtDOE);
                                string strdateTime2 = dtDOE.ToString("HH");
                                string strdate1 = dtDOE.ToString("dd/MMM");
                                GetEmployee.LogDate = strdate1;
                            }
                            GetEmployee.Date = dtDOE.ToString("dd/MM/yyyy");
                            bankMasterlist.Add(GetEmployee);
                        }
                    }
                }
            }
            string response = GetJson(bankMasterlist);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }
    public class Employeedet
    {
        public string empsno { get; set; }
        public string employee_name { get; set; }
        public string attendance_status { get; set; }
        public string registrationid { get; set; }
        public string status { get; set; }
        public string Date { get; set; }
        public string LogDate { get; set; }
        public string branchid { get; set; }
        public string totcount { get; set; }
        public string branchname { get; set; }
        public string designation { get; set; }
        public string fullname { get; set; }
        public string empid { get; set; }
    }
    public class Employeedetsub
    {
        public string fullname { get; set; }
        public string empid { get; set; }
        public string designation { get; set; }
        public string branchname { get; set; }
        public string status { get; set; }
        public string LogDate { get; set; }
    }
    public class Employeebiodetails
    {
        public string fullname { get; set; }
        public string empid { get; set; }
        public string designation { get; set; }
        public string branchname { get; set; }
        public string status { get; set; }
        public string LogDate { get; set; }
    }
    
    public class Employeebio
    {
        public string LogDate { get; set; }
        public string EmpId { get; set; }
    }
    public class getemployeealldetails
    {
        List<Employeedetsub> Employeedetsub { get; set; }
        List<Employeebio> Employeebiosub { get; set; }

    }
    public class Employeebiodetailssdet
    {
        public string EmpId { get; set; }
        public string logdate { get; set; }
        public string empsno { get; set; }
        public string fullname { get; set; }
        public string branchname { get; set; }
        public string department { get; set; }
        public string status { get; set; }
    }

    private void get_branchwise_staffattandance(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            string DOA = context.Request["doe"];
            DateTime dtDOE = Convert.ToDateTime(DOA);
            DateTime ServerDateCurrentdate = DBManager.GetTime(vdm.conn);
            string curentdt = Convert.ToDateTime(ServerDateCurrentdate).ToString("MM/dd/yyyy");
            DateTime dt = Convert.ToDateTime(curentdt);
            //if (dtDOE == dt)
            //{
            //    dtDOE = GetLowDate(dtDOE).AddDays(-1);
            //}
            string mainbranch = context.Session["mainbranch"].ToString();
            string branchid = context.Request["branchid"];
            string company_code = context.Request["company_code"];
            List<Employeebiodetailssdet> Employeebiodetailssdet = new List<Employeebiodetailssdet>();
            if (company_code == "ALL")
            {
                //cmd = new SqlCommand("SELECT  t1.EmpId, t1.logdate, employedetails.empid AS empsno, employedetails.fullname, branchmaster.branchname, departments.department FROM   branchmaster INNER JOIN employedetails ON branchmaster.branchid = employedetails.branchid INNER JOIN departments ON employedetails.employee_dept = departments.deptid LEFT OUTER JOIN (SELECT DISTINCT EmpId, CONVERT(varchar, LogDate, 103) AS logdate FROM  AttendanceLogs WHERE  (LogDate BETWEEN @d1 AND @d2)) AS t1 ON employedetails.empid = t1.EmpId WHERE  (employedetails.status = 'No') AND (employedetails.employee_type = 'Staff') AND (employedetails.empid IS NOT NULL)");
                cmd = new SqlCommand("SELECT   t1.EmpId, t1.logdate, employedetails.empid AS empsno, employedetails.fullname, branchmaster.branchname, designation.designation FROM    branchmaster INNER JOIN employedetails ON branchmaster.branchid = employedetails.branchid INNER JOIN designation ON employedetails.designationid = designation.designationid INNER JOIN branchmapping ON branchmaster.branchid = branchmapping.subbranch LEFT OUTER JOIN (SELECT DISTINCT EmpId, CONVERT(varchar, LogDate, 103) AS logdate FROM   AttendanceLogs WHERE   (LogDate BETWEEN @d1 AND @d2)) AS t1 ON employedetails.empid = t1.EmpId WHERE   (employedetails.status = 'No') AND (employedetails.employee_type = 'Staff') AND (employedetails.empid IS NOT NULL) AND (branchmapping.mainbranch <> 0)");
                cmd.Parameters.Add("@d1", GetLowDate(dtDOE));
                cmd.Parameters.Add("@d2", GetHighDate(dtDOE));
                DataTable dtemp = vdm.SelectQuery(cmd).Tables[0];
                if (dtemp.Rows.Count > 0)
                {
                    foreach (DataRow dr in dtemp.Rows)
                    {
                        Employeebiodetailssdet obj = new Employeebiodetailssdet();
                        obj.EmpId = dr["EmpId"].ToString();
                        obj.logdate = dr["logdate"].ToString();
                        obj.empsno = dr["empsno"].ToString();
                        obj.fullname = dr["fullname"].ToString();
                        obj.branchname = dr["branchname"].ToString();
                        string EmpId = dr["EmpId"].ToString();
                        string status = "";
                        if (EmpId == "")
                        {
                            status = "Absent";
                        }
                        else
                        {
                            status = "Present";
                        }
                        obj.status = status.ToString();
                        obj.department = dr["designation"].ToString();
                        Employeebiodetailssdet.Add(obj);
                    }
                }
            }
            else
            {
                if (branchid == "ALL")
                {
                    //cmd = new SqlCommand("SELECT  t1.EmpId, t1.logdate, employedetails.empid AS empsno, employedetails.fullname, branchmaster.branchname, departments.department FROM  branchmaster INNER JOIN employedetails ON branchmaster.branchid = employedetails.branchid INNER JOIN departments ON employedetails.employee_dept = departments.deptid LEFT OUTER JOIN (SELECT DISTINCT EmpId, CONVERT(varchar, LogDate, 103) AS logdate FROM   AttendanceLogs WHERE (LogDate BETWEEN @d1 AND @d2)) AS t1 ON employedetails.empid = t1.EmpId WHERE  (employedetails.status = 'No') AND (employedetails.employee_type = 'Staff') AND (employedetails.empid IS NOT NULL) AND (branchmaster.company_code = @companycode)");
                    cmd = new SqlCommand("SELECT t1.EmpId, t1.logdate, employedetails.empid AS empsno, employedetails.fullname, branchmaster.branchname, designation.designation FROM   branchmaster INNER JOIN employedetails ON branchmaster.branchid = employedetails.branchid INNER JOIN designation ON employedetails.designationid = designation.designationid INNER JOIN branchmapping ON branchmaster.branchid = branchmapping.subbranch LEFT OUTER JOIN (SELECT DISTINCT EmpId, CONVERT(varchar, LogDate, 103) AS logdate FROM   AttendanceLogs WHERE  (LogDate BETWEEN @d1 AND @d2)) AS t1 ON employedetails.empid = t1.EmpId WHERE  (employedetails.status = 'No') AND (employedetails.employee_type = 'Staff') AND (employedetails.empid IS NOT NULL) AND (branchmaster.company_code = @companycode) AND (branchmapping.mainbranch <> 0)");
                    cmd.Parameters.Add("@companycode", company_code);
                    cmd.Parameters.Add("@d1", GetLowDate(dtDOE));
                    cmd.Parameters.Add("@d2", GetHighDate(dtDOE));
                    DataTable dtemp = vdm.SelectQuery(cmd).Tables[0];
                    if (dtemp.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dtemp.Rows)
                        {
                            Employeebiodetailssdet obj = new Employeebiodetailssdet();
                            obj.EmpId = dr["EmpId"].ToString();
                            obj.logdate = dr["logdate"].ToString();
                            obj.empsno = dr["empsno"].ToString();
                            obj.fullname = dr["fullname"].ToString();
                            obj.branchname = dr["branchname"].ToString();
                            string EmpId = dr["EmpId"].ToString();
                            string status = "";
                            if (EmpId == "")
                            {
                                status = "Absent";
                            }
                            else
                            {
                                status = "Present";
                            }
                            obj.status = status.ToString();
                            obj.department = dr["designation"].ToString();
                            Employeebiodetailssdet.Add(obj);
                        }
                    }
                }
                else
                {
                    //cmd = new SqlCommand("SELECT  t1.EmpId, t1.logdate, employedetails.empid AS empsno, employedetails.fullname, branchmaster.branchname, departments.department FROM  branchmaster INNER JOIN employedetails ON branchmaster.branchid = employedetails.branchid INNER JOIN departments ON employedetails.employee_dept = departments.deptid LEFT OUTER JOIN (SELECT DISTINCT EmpId, CONVERT(varchar, LogDate, 103) AS logdate FROM   AttendanceLogs WHERE (LogDate BETWEEN @d1 AND @d2)) AS t1 ON employedetails.empid = t1.EmpId WHERE  (employedetails.status = 'No') AND (employedetails.employee_type = 'Staff') AND (employedetails.empid IS NOT NULL) AND (branchmaster.company_code = @companycode) AND (branchmaster.branchid = @branchid)");
                    cmd = new SqlCommand("SELECT  t1.EmpId, t1.logdate, employedetails.empid AS empsno, employedetails.fullname, branchmaster.branchname, designation.designation FROM  branchmaster INNER JOIN employedetails ON branchmaster.branchid = employedetails.branchid INNER JOIN designation ON employedetails.designationid = designation.designationid INNER JOIN branchmapping ON branchmaster.branchid = branchmapping.subbranch LEFT OUTER JOIN (SELECT DISTINCT EmpId, CONVERT(varchar, LogDate, 103) AS logdate FROM  AttendanceLogs WHERE  (LogDate BETWEEN @d1 AND @d2)) AS t1 ON employedetails.empid = t1.EmpId WHERE  (employedetails.status = 'No') AND (employedetails.employee_type = 'Staff') AND (employedetails.empid IS NOT NULL) AND (branchmaster.company_code = @companycode) AND (branchmaster.branchid = @branchid) AND (branchmapping.mainbranch <> 0)");
                    cmd.Parameters.Add("@companycode", company_code);
                    cmd.Parameters.Add("@branchid", branchid);
                    cmd.Parameters.Add("@d1", GetLowDate(dtDOE));
                    cmd.Parameters.Add("@d2", GetHighDate(dtDOE));
                    DataTable dtemp = vdm.SelectQuery(cmd).Tables[0];
                    if (dtemp.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dtemp.Rows)
                        {
                            Employeebiodetailssdet obj = new Employeebiodetailssdet();
                            obj.EmpId = dr["EmpId"].ToString();
                            obj.logdate = dr["logdate"].ToString();
                            obj.empsno = dr["empsno"].ToString();
                            obj.fullname = dr["fullname"].ToString();
                            obj.branchname = dr["branchname"].ToString();
                            string EmpId = dr["EmpId"].ToString();
                            string status = "";
                            if (EmpId == "")
                            {
                                status = "Absent";
                            }
                            else
                            {
                                status = "Present";
                            }
                            obj.status = status.ToString();
                            obj.department = dr["designation"].ToString();
                            Employeebiodetailssdet.Add(obj);
                        }
                    }
                }
            }
            string response = GetJson(Employeebiodetailssdet);
            context.Response.Write(response);

            
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }
    private void get_branchwise_casuallattandance(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            string DOA = context.Request["doe"];
            DateTime dtDOE = Convert.ToDateTime(DOA);
            DateTime ServerDateCurrentdate = DBManager.GetTime(vdm.conn);
            string curentdt = Convert.ToDateTime(ServerDateCurrentdate).ToString("MM/dd/yyyy");
            DateTime dt = Convert.ToDateTime(curentdt);
            //if (dtDOE == dt)
            //{
            //    dtDOE = GetLowDate(dtDOE).AddDays(-1);
            //}
            string mainbranch = context.Session["mainbranch"].ToString();
            string branchid = context.Request["branchid"];
            string company_code = context.Request["company_code"];
            List<Employeebiodetailssdet> Employeebiodetailssdet = new List<Employeebiodetailssdet>();
            if (company_code == "ALL")
            {
                //cmd = new SqlCommand("SELECT  t1.EmpId, t1.logdate, employedetails.empid AS empsno, employedetails.fullname, branchmaster.branchname, departments.department FROM   branchmaster INNER JOIN employedetails ON branchmaster.branchid = employedetails.branchid INNER JOIN departments ON employedetails.employee_dept = departments.deptid LEFT OUTER JOIN (SELECT DISTINCT EmpId, CONVERT(varchar, LogDate, 103) AS logdate FROM  AttendanceLogs WHERE  (LogDate BETWEEN @d1 AND @d2)) AS t1 ON employedetails.empid = t1.EmpId WHERE  (employedetails.status = 'No') AND (employedetails.employee_type = 'Staff') AND (employedetails.empid IS NOT NULL)");
                cmd = new SqlCommand("SELECT  t1.EmpId, t1.logdate, employedetails.empid AS empsno, employedetails.fullname, branchmaster.branchname, designation.designation FROM   branchmaster INNER JOIN employedetails ON branchmaster.branchid = employedetails.branchid INNER JOIN designation ON employedetails.designationid = designation.designationid INNER JOIN branchmapping ON branchmaster.branchid = branchmapping.subbranch LEFT OUTER JOIN (SELECT DISTINCT EmpId, CONVERT(varchar, LogDate, 103) AS logdate FROM   AttendanceLogs WHERE  (LogDate BETWEEN @d1 AND @d2)) AS t1 ON employedetails.empid = t1.EmpId WHERE  (employedetails.status = 'No') AND (employedetails.employee_type <> 'Staff') AND (employedetails.empid IS NOT NULL) AND (branchmapping.mainbranch <> 0)");
                cmd.Parameters.Add("@d1", GetLowDate(dtDOE));
                cmd.Parameters.Add("@d2", GetHighDate(dtDOE));
                DataTable dtemp = vdm.SelectQuery(cmd).Tables[0];
                if (dtemp.Rows.Count > 0)
                {
                    foreach (DataRow dr in dtemp.Rows)
                    {
                        Employeebiodetailssdet obj = new Employeebiodetailssdet();
                        obj.EmpId = dr["EmpId"].ToString();
                        obj.logdate = dr["logdate"].ToString();
                        obj.empsno = dr["empsno"].ToString();
                        obj.fullname = dr["fullname"].ToString();
                        obj.branchname = dr["branchname"].ToString();
                        string EmpId = dr["EmpId"].ToString();
                        string status = "";
                        if (EmpId == "")
                        {
                            status = "Absent";
                        }
                        else
                        {
                            status = "Present";
                        }
                        obj.status = status.ToString();
                        obj.department = dr["designation"].ToString();
                        Employeebiodetailssdet.Add(obj);
                    }
                }
            }
            else
            {
                if (branchid == "ALL")
                {
                    //cmd = new SqlCommand("SELECT  t1.EmpId, t1.logdate, employedetails.empid AS empsno, employedetails.fullname, branchmaster.branchname, departments.department FROM  branchmaster INNER JOIN employedetails ON branchmaster.branchid = employedetails.branchid INNER JOIN departments ON employedetails.employee_dept = departments.deptid LEFT OUTER JOIN (SELECT DISTINCT EmpId, CONVERT(varchar, LogDate, 103) AS logdate FROM   AttendanceLogs WHERE (LogDate BETWEEN @d1 AND @d2)) AS t1 ON employedetails.empid = t1.EmpId WHERE  (employedetails.status = 'No') AND (employedetails.employee_type = 'Staff') AND (employedetails.empid IS NOT NULL) AND (branchmaster.company_code = @companycode)");
                    cmd = new SqlCommand("SELECT   t1.EmpId, t1.logdate, employedetails.empid AS empsno, employedetails.fullname, branchmaster.branchname, designation.designation FROM   branchmaster INNER JOIN employedetails ON branchmaster.branchid = employedetails.branchid INNER JOIN designation ON employedetails.designationid = designation.designationid INNER JOIN branchmapping ON branchmaster.branchid = branchmapping.subbranch LEFT OUTER JOIN (SELECT DISTINCT EmpId, CONVERT(varchar, LogDate, 103) AS logdate FROM    AttendanceLogs WHERE  (LogDate BETWEEN @d1 AND @d2)) AS t1 ON employedetails.empid = t1.EmpId WHERE  (employedetails.status = 'No') AND (employedetails.employee_type <> 'Staff') AND (employedetails.empid IS NOT NULL) AND (branchmaster.company_code = @companycode) AND (branchmapping.mainbranch <> 0)");
                    cmd.Parameters.Add("@companycode", company_code);
                    cmd.Parameters.Add("@d1", GetLowDate(dtDOE));
                    cmd.Parameters.Add("@d2", GetHighDate(dtDOE));
                    DataTable dtemp = vdm.SelectQuery(cmd).Tables[0];
                    if (dtemp.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dtemp.Rows)
                        {
                            Employeebiodetailssdet obj = new Employeebiodetailssdet();
                            obj.EmpId = dr["EmpId"].ToString();
                            obj.logdate = dr["logdate"].ToString();
                            obj.empsno = dr["empsno"].ToString();
                            obj.fullname = dr["fullname"].ToString();
                            obj.branchname = dr["branchname"].ToString();
                            string EmpId = dr["EmpId"].ToString();
                            string status = "";
                            if (EmpId == "")
                            {
                                status = "Absent";
                            }
                            else
                            {
                                status = "Present";
                            }
                            obj.status = status.ToString();
                            obj.department = dr["designation"].ToString();
                            Employeebiodetailssdet.Add(obj);
                        }
                    }
                }
                else
                {
                    //cmd = new SqlCommand("SELECT  t1.EmpId, t1.logdate, employedetails.empid AS empsno, employedetails.fullname, branchmaster.branchname, departments.department FROM  branchmaster INNER JOIN employedetails ON branchmaster.branchid = employedetails.branchid INNER JOIN departments ON employedetails.employee_dept = departments.deptid LEFT OUTER JOIN (SELECT DISTINCT EmpId, CONVERT(varchar, LogDate, 103) AS logdate FROM   AttendanceLogs WHERE (LogDate BETWEEN @d1 AND @d2)) AS t1 ON employedetails.empid = t1.EmpId WHERE  (employedetails.status = 'No') AND (employedetails.employee_type = 'Staff') AND (employedetails.empid IS NOT NULL) AND (branchmaster.company_code = @companycode) AND (branchmaster.branchid = @branchid)");
                    cmd = new SqlCommand("SELECT   t1.EmpId, t1.logdate, employedetails.empid AS empsno, employedetails.fullname, branchmaster.branchname, designation.designation FROM   branchmaster INNER JOIN employedetails ON branchmaster.branchid = employedetails.branchid INNER JOIN designation ON employedetails.designationid = designation.designationid INNER JOIN branchmapping ON branchmaster.branchid = branchmapping.subbranch LEFT OUTER JOIN (SELECT DISTINCT EmpId, CONVERT(varchar, LogDate, 103) AS logdate FROM  AttendanceLogs WHERE   (LogDate BETWEEN @d1 AND @d2)) AS t1 ON employedetails.empid = t1.EmpId WHERE   (employedetails.status = 'No') AND (employedetails.employee_type <> 'Staff') AND (employedetails.empid IS NOT NULL) AND (branchmaster.company_code = @companycode) AND (branchmaster.branchid = @branchid) AND (branchmapping.mainbranch <> 0)");
                    cmd.Parameters.Add("@companycode", company_code);
                    cmd.Parameters.Add("@branchid", branchid);
                    cmd.Parameters.Add("@d1", GetLowDate(dtDOE));
                    cmd.Parameters.Add("@d2", GetHighDate(dtDOE));
                    DataTable dtemp = vdm.SelectQuery(cmd).Tables[0];
                    if (dtemp.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dtemp.Rows)
                        {
                            Employeebiodetailssdet obj = new Employeebiodetailssdet();
                            obj.EmpId = dr["EmpId"].ToString();
                            obj.logdate = dr["logdate"].ToString();
                            obj.empsno = dr["empsno"].ToString();
                            obj.fullname = dr["fullname"].ToString();
                            obj.branchname = dr["branchname"].ToString();
                            string EmpId = dr["EmpId"].ToString();
                            string status = "";
                            if (EmpId == "")
                            {
                                status = "Absent";
                            }
                            else
                            {
                                status = "Present";
                            }
                            obj.status = status.ToString();
                            obj.department = dr["designation"].ToString();
                            Employeebiodetailssdet.Add(obj);
                        }
                    }
                }
            }
            string response = GetJson(Employeebiodetailssdet);
            context.Response.Write(response);


        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }
    private void get_branchwise_allempattandance(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            string DOA = context.Request["doe"];
            DateTime dtDOE = Convert.ToDateTime(DOA);
            DateTime ServerDateCurrentdate = DBManager.GetTime(vdm.conn);
            string curentdt = Convert.ToDateTime(ServerDateCurrentdate).ToString("MM/dd/yyyy");
            DateTime dt = Convert.ToDateTime(curentdt);
            //if (dtDOE == dt)
            //{
            //    dtDOE = GetLowDate(dtDOE).AddDays(-1);
            //}
            string mainbranch = context.Session["mainbranch"].ToString();
            string branchid = context.Request["branchid"];
            string company_code = context.Request["company_code"];
            List<Employeebiodetailssdet> Employeebiodetailssdet = new List<Employeebiodetailssdet>();
            if (company_code == "ALL")
            {
                //cmd = new SqlCommand("SELECT  t1.EmpId, t1.logdate, employedetails.empid AS empsno, employedetails.fullname, branchmaster.branchname, departments.department FROM   branchmaster INNER JOIN employedetails ON branchmaster.branchid = employedetails.branchid INNER JOIN departments ON employedetails.employee_dept = departments.deptid LEFT OUTER JOIN (SELECT DISTINCT EmpId, CONVERT(varchar, LogDate, 103) AS logdate FROM  AttendanceLogs WHERE  (LogDate BETWEEN @d1 AND @d2)) AS t1 ON employedetails.empid = t1.EmpId WHERE  (employedetails.status = 'No') AND (employedetails.employee_type = 'Staff') AND (employedetails.empid IS NOT NULL)");
                cmd = new SqlCommand("SELECT   t1.EmpId, t1.logdate, employedetails.empid AS empsno, employedetails.fullname, branchmaster.branchname, designation.designation FROM   branchmaster INNER JOIN employedetails ON branchmaster.branchid = employedetails.branchid INNER JOIN designation ON employedetails.designationid = designation.designationid INNER JOIN branchmapping ON branchmaster.branchid = branchmapping.subbranch LEFT OUTER JOIN (SELECT DISTINCT EmpId, CONVERT(varchar, LogDate, 103) AS logdate FROM  AttendanceLogs WHERE  (LogDate BETWEEN @d1 AND @d2)) AS t1 ON employedetails.empid = t1.EmpId WHERE  (employedetails.status = 'No') AND (employedetails.empid IS NOT NULL) AND (branchmapping.mainbranch <> 0)");
                cmd.Parameters.Add("@d1", GetLowDate(dtDOE));
                cmd.Parameters.Add("@d2", GetHighDate(dtDOE));
                DataTable dtemp = vdm.SelectQuery(cmd).Tables[0];
                if (dtemp.Rows.Count > 0)
                {
                    foreach (DataRow dr in dtemp.Rows)
                    {
                        Employeebiodetailssdet obj = new Employeebiodetailssdet();
                        obj.EmpId = dr["EmpId"].ToString();
                        obj.logdate = dr["logdate"].ToString();
                        obj.empsno = dr["empsno"].ToString();
                        obj.fullname = dr["fullname"].ToString();
                        obj.branchname = dr["branchname"].ToString();
                        string EmpId = dr["EmpId"].ToString();
                        string status = "";
                        if (EmpId == "")
                        {
                            status = "Absent";
                        }
                        else
                        {
                            status = "Present";
                        }
                        obj.status = status.ToString();
                        obj.department = dr["designation"].ToString();
                        Employeebiodetailssdet.Add(obj);
                    }
                }
            }
            else
            {
                if (branchid == "ALL")
                {
                    //cmd = new SqlCommand("SELECT  t1.EmpId, t1.logdate, employedetails.empid AS empsno, employedetails.fullname, branchmaster.branchname, departments.department FROM  branchmaster INNER JOIN employedetails ON branchmaster.branchid = employedetails.branchid INNER JOIN departments ON employedetails.employee_dept = departments.deptid LEFT OUTER JOIN (SELECT DISTINCT EmpId, CONVERT(varchar, LogDate, 103) AS logdate FROM   AttendanceLogs WHERE (LogDate BETWEEN @d1 AND @d2)) AS t1 ON employedetails.empid = t1.EmpId WHERE  (employedetails.status = 'No') AND (employedetails.employee_type = 'Staff') AND (employedetails.empid IS NOT NULL) AND (branchmaster.company_code = @companycode)");
                    cmd = new SqlCommand("SELECT   t1.EmpId, t1.logdate, employedetails.empid AS empsno, employedetails.fullname, branchmaster.branchname, designation.designation FROM  branchmaster INNER JOIN employedetails ON branchmaster.branchid = employedetails.branchid INNER JOIN designation ON employedetails.designationid = designation.designationid INNER JOIN branchmapping ON branchmaster.branchid = branchmapping.subbranch LEFT OUTER JOIN (SELECT DISTINCT EmpId, CONVERT(varchar, LogDate, 103) AS logdate FROM   AttendanceLogs WHERE   (LogDate BETWEEN @d1 AND @d2)) AS t1 ON employedetails.empid = t1.EmpId WHERE  (employedetails.status = 'No') AND (employedetails.empid IS NOT NULL) AND (branchmaster.company_code = @companycode) AND (branchmapping.mainbranch <> 0)");
                    cmd.Parameters.Add("@companycode", company_code);
                    cmd.Parameters.Add("@d1", GetLowDate(dtDOE));
                    cmd.Parameters.Add("@d2", GetHighDate(dtDOE));
                    DataTable dtemp = vdm.SelectQuery(cmd).Tables[0];
                    if (dtemp.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dtemp.Rows)
                        {
                            Employeebiodetailssdet obj = new Employeebiodetailssdet();
                            obj.EmpId = dr["EmpId"].ToString();
                            obj.logdate = dr["logdate"].ToString();
                            obj.empsno = dr["empsno"].ToString();
                            obj.fullname = dr["fullname"].ToString();
                            obj.branchname = dr["branchname"].ToString();
                            string EmpId = dr["EmpId"].ToString();
                            string status = "";
                            if (EmpId == "")
                            {
                                status = "Absent";
                            }
                            else
                            {
                                status = "Present";
                            }
                            obj.status = status.ToString();
                            obj.department = dr["designation"].ToString();
                            Employeebiodetailssdet.Add(obj);
                        }
                    }
                }
                else
                {
                    //cmd = new SqlCommand("SELECT  t1.EmpId, t1.logdate, employedetails.empid AS empsno, employedetails.fullname, branchmaster.branchname, departments.department FROM  branchmaster INNER JOIN employedetails ON branchmaster.branchid = employedetails.branchid INNER JOIN departments ON employedetails.employee_dept = departments.deptid LEFT OUTER JOIN (SELECT DISTINCT EmpId, CONVERT(varchar, LogDate, 103) AS logdate FROM   AttendanceLogs WHERE (LogDate BETWEEN @d1 AND @d2)) AS t1 ON employedetails.empid = t1.EmpId WHERE  (employedetails.status = 'No') AND (employedetails.employee_type = 'Staff') AND (employedetails.empid IS NOT NULL) AND (branchmaster.company_code = @companycode) AND (branchmaster.branchid = @branchid)");
                    cmd = new SqlCommand("SELECT  t1.EmpId, t1.logdate, employedetails.empid AS empsno, employedetails.fullname, branchmaster.branchname, designation.designation, branchmapping.mainbranch FROM  branchmaster INNER JOIN employedetails ON branchmaster.branchid = employedetails.branchid INNER JOIN designation ON employedetails.designationid = designation.designationid INNER JOIN branchmapping ON branchmaster.branchid = branchmapping.subbranch LEFT OUTER JOIN (SELECT DISTINCT EmpId, CONVERT(varchar, LogDate, 103) AS logdate FROM  AttendanceLogs WHERE  (LogDate BETWEEN @d1 AND @d2)) AS t1 ON employedetails.empid = t1.EmpId WHERE  (employedetails.status = 'No') AND (employedetails.empid IS NOT NULL) AND (branchmaster.company_code = @companycode) AND (branchmaster.branchid = @branchid) AND (branchmapping.mainbranch <> 0)");
                    cmd.Parameters.Add("@companycode", company_code);
                    cmd.Parameters.Add("@branchid", branchid);
                    cmd.Parameters.Add("@d1", GetLowDate(dtDOE));
                    cmd.Parameters.Add("@d2", GetHighDate(dtDOE));
                    DataTable dtemp = vdm.SelectQuery(cmd).Tables[0];
                    if (dtemp.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dtemp.Rows)
                        {
                            Employeebiodetailssdet obj = new Employeebiodetailssdet();
                            obj.EmpId = dr["EmpId"].ToString();
                            obj.logdate = dr["logdate"].ToString();
                            obj.empsno = dr["empsno"].ToString();
                            obj.fullname = dr["fullname"].ToString();
                            obj.branchname = dr["branchname"].ToString();
                            string EmpId = dr["EmpId"].ToString();
                            string status = "";
                            if (EmpId == "")
                            {
                                status = "Absent";
                            }
                            else
                            {
                                status = "Present";
                            }
                            obj.status = status.ToString();
                            obj.department = dr["designation"].ToString();
                            Employeebiodetailssdet.Add(obj);
                        }
                    }
                }
            }
            string response = GetJson(Employeebiodetailssdet);
            context.Response.Write(response);


        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }
    private void get_branchwise_casualattandance(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            string DOA = context.Request["doe"];
            DateTime dtDOE = Convert.ToDateTime(DOA);
            DateTime ServerDateCurrentdate = DBManager.GetTime(vdm.conn);
            string curentdt = Convert.ToDateTime(ServerDateCurrentdate).ToString("MM/dd/yyyy");
            DateTime dt = Convert.ToDateTime(curentdt);
            //if (dtDOE == dt)
            //{
            //    dtDOE = GetLowDate(dtDOE).AddDays(-1);
            //}
            string mainbranch = context.Session["mainbranch"].ToString();
            string branchid = context.Request["branchid"];
            string company_code = context.Request["company_code"];
            List<Employeedet> bankMasterlist = new List<Employeedet>();
            if (company_code == "ALL")
            {
                cmd = new SqlCommand("SELECT  Atten.empid, Atten.fullname, Atten.Expr1, Atten.employee_num, daily.sno, daily.branchid, daily.empid AS Expr2, daily.status, daily.doe, daily.attendance_date, daily.remarks, Atten.branchname, Atten.designation FROM  (SELECT   t1.empid, t1.fullname, ISNULL(f2.D, '') AS Expr1, t1.employee_num, t1.branchname, t1.designation FROM   (SELECT  employedetails.empid, employedetails.fullname, employedetails.employee_num, branchmaster.branchname, designation.designation FROM  employedetails INNER JOIN branchmapping ON employedetails.branchid = branchmapping.subbranch INNER JOIN branchmaster ON employedetails.branchid = branchmaster.branchid LEFT OUTER JOIN designation ON employedetails.designationid = designation.designationid WHERE   (employedetails.status = 'No') AND (branchmapping.mainbranch = @m) AND (employedetails.employee_type <> 'Staff')) AS t1 LEFT OUTER JOIN (SELECT   Eid, D FROM    (SELECT  EmpId AS Eid, CONVERT(nvarchar(20), LogDate, 103) AS D FROM   AttendanceLogs WHERE  (LogDate BETWEEN @d1 AND @d2) GROUP BY EmpId, LogDate) AS t2 GROUP BY Eid, D) AS f2 ON t1.empid = f2.Eid) AS Atten LEFT OUTER JOIN (SELECT  sno, branchid, empid, status, doe, attendance_date, remarks FROM  dailyattandancedetails WHERE  (attendance_date BETWEEN @d1 AND @d2)) AS daily ON Atten.empid = daily.empid");
                //cmd = new SqlCommand("SELECT  dailyattandancedetails.empid, employedetails.fullname, dailyattandancedetails.status, employedetails.employee_num, branchmaster_1.branchid FROM dailyattandancedetails INNER JOIN branchmapping ON dailyattandancedetails.branchid = branchmapping.subbranch INNER JOIN branchmaster ON dailyattandancedetails.branchid = branchmaster.branchid INNER JOIN employedetails ON dailyattandancedetails.empid = employedetails.empid INNER JOIN branchmaster AS branchmaster_1 ON dailyattandancedetails.branchid = branchmaster_1.branchid WHERE (branchmapping.mainbranch = @m) AND (dailyattandancedetails.attendance_date BETWEEN @d1 AND @d2) AND (dailyattandancedetails.emp_type = 'Staff') GROUP BY dailyattandancedetails.empid, employedetails.fullname, dailyattandancedetails.status, employedetails.employee_num, branchmaster_1.branchid");
                cmd.Parameters.Add("@d1", GetLowDate(dtDOE));
                cmd.Parameters.Add("@d2", GetHighDate(dtDOE));
                cmd.Parameters.Add("@m", mainbranch);

                DataTable dtemp = vdm.SelectQuery(cmd).Tables[0];
                if (dtemp.Rows.Count > 0)
                {
                    foreach (DataRow dr in dtemp.Rows)
                    {
                        Employeedet GetEmployee = new Employeedet();
                        GetEmployee.empsno = dr["empid"].ToString();
                        GetEmployee.employee_name = dr["fullname"].ToString();
                        GetEmployee.registrationid = dr["employee_num"].ToString();
                        GetEmployee.branchid = dr["branchid"].ToString();
                        GetEmployee.branchname = dr["branchname"].ToString();
                        GetEmployee.designation = dr["designation"].ToString();
                        GetEmployee.status = dr["status"].ToString();
                        string status = dr["status"].ToString();
                        if (status == "")
                        {
                            GetEmployee.status = "A";
                        }
                        string date = dr["attendance_date"].ToString();

                        if (date != "")
                        {
                            DateTime dtDoe = Convert.ToDateTime(date);
                            string strdateTime = dtDoe.ToString("HH");
                            string strdate = dtDoe.ToString("dd/MMM");
                            //DateTime Date1 = Convert.ToDateTime(date);
                            GetEmployee.LogDate = strdate;
                        }
                        else
                        {


                            DateTime Date1 = Convert.ToDateTime(dtDOE);
                            string strdateTime2 = dtDOE.ToString("HH");
                            string strdate1 = dtDOE.ToString("dd/MMM");
                            GetEmployee.LogDate = strdate1;

                        }
                        GetEmployee.Date = dtDOE.ToString("dd/MM/yyyy");
                        bankMasterlist.Add(GetEmployee);
                    }
                }
            }
            else
            {
                if (branchid == "ALL")
                {
                    cmd = new SqlCommand("SELECT  Atten.empid, Atten.fullname, Atten.Expr1, Atten.employee_num, daily.sno, daily.branchid, daily.empid AS Expr2, daily.status, daily.doe, daily.attendance_date, daily.remarks, Atten.branchname, Atten.designation FROM  (SELECT   t1.empid, t1.fullname, ISNULL(f2.D, '') AS Expr1, t1.employee_num, t1.branchname, t1.designation FROM   (SELECT  employedetails.empid, employedetails.fullname, employedetails.employee_num, branchmaster.branchname, designation.designation FROM  employedetails INNER JOIN branchmapping ON employedetails.branchid = branchmapping.subbranch INNER JOIN branchmaster ON employedetails.branchid = branchmaster.branchid LEFT OUTER JOIN designation ON employedetails.designationid = designation.designationid WHERE   (employedetails.status = 'No') AND (branchmapping.mainbranch = @m) AND (branchmaster.company_code = @company_code) AND (employedetails.employee_type <> 'Staff')) AS t1 LEFT OUTER JOIN (SELECT   Eid, D FROM    (SELECT  EmpId AS Eid, CONVERT(nvarchar(20), LogDate, 103) AS D FROM   AttendanceLogs WHERE  (LogDate BETWEEN @d1 AND @d2) GROUP BY EmpId, LogDate) AS t2 GROUP BY Eid, D) AS f2 ON t1.empid = f2.Eid) AS Atten LEFT OUTER JOIN (SELECT  sno, branchid, empid, status, doe, attendance_date, remarks FROM  dailyattandancedetails WHERE  (attendance_date BETWEEN @d1 AND @d2)) AS daily ON Atten.empid = daily.empid");
                    cmd.Parameters.Add("@d1", GetLowDate(dtDOE));
                    cmd.Parameters.Add("@d2", GetHighDate(dtDOE));
                    cmd.Parameters.Add("@m", mainbranch);
                    cmd.Parameters.Add("@company_code", company_code);

                    DataTable dtemp = vdm.SelectQuery(cmd).Tables[0];

                    if (dtemp.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dtemp.Rows)
                        {
                            Employeedet GetEmployee = new Employeedet();
                            GetEmployee.empsno = dr["empid"].ToString();
                            GetEmployee.employee_name = dr["fullname"].ToString();
                            GetEmployee.registrationid = dr["employee_num"].ToString();
                            GetEmployee.branchid = dr["branchid"].ToString();
                            GetEmployee.branchname = dr["branchname"].ToString();
                            GetEmployee.designation = dr["designation"].ToString();
                            GetEmployee.status = dr["status"].ToString();
                            string status = dr["status"].ToString();
                            if (status == "")
                            {
                                GetEmployee.status = "A";
                            }
                            string date = dr["attendance_date"].ToString();

                            if (date != "")
                            {
                                DateTime dtDoe = Convert.ToDateTime(date);
                                string strdateTime = dtDoe.ToString("HH");
                                string strdate = dtDoe.ToString("dd/MMM");
                                //DateTime Date1 = Convert.ToDateTime(date);
                                GetEmployee.LogDate = strdate;
                            }
                            else
                            {
                                DateTime Date1 = Convert.ToDateTime(dtDOE);
                                string strdateTime2 = dtDOE.ToString("HH");
                                string strdate1 = dtDOE.ToString("dd/MMM");
                                GetEmployee.LogDate = strdate1;
                            }
                            GetEmployee.Date = dtDOE.ToString("dd/MM/yyyy");
                            bankMasterlist.Add(GetEmployee);
                        }
                    }
                }
                else
                {
                    cmd = new SqlCommand("SELECT  Atten.empid, Atten.fullname, Atten.Expr1, Atten.employee_num, daily.sno, daily.branchid, daily.empid AS Expr2, daily.status, daily.doe, daily.attendance_date, daily.remarks, Atten.branchname, Atten.designation FROM  (SELECT   t1.empid, t1.fullname, ISNULL(f2.D, '') AS Expr1, t1.employee_num, t1.branchname, t1.designation FROM   (SELECT  employedetails.empid, employedetails.fullname, employedetails.employee_num, branchmaster.branchname, designation.designation FROM  employedetails INNER JOIN branchmapping ON employedetails.branchid = branchmapping.subbranch INNER JOIN branchmaster ON employedetails.branchid = branchmaster.branchid LEFT OUTER JOIN designation ON employedetails.designationid = designation.designationid WHERE   (employedetails.status = 'No') AND (branchmapping.mainbranch = @m) AND (branchmaster.company_code = @company_code) AND (branchmaster.branchid = @branchid) AND (employedetails.employee_type <> 'Staff')) AS t1 LEFT OUTER JOIN (SELECT   Eid, D FROM    (SELECT  EmpId AS Eid, CONVERT(nvarchar(20), LogDate, 103) AS D FROM   AttendanceLogs WHERE  (LogDate BETWEEN @d1 AND @d2) GROUP BY EmpId, LogDate) AS t2 GROUP BY Eid, D) AS f2 ON t1.empid = f2.Eid) AS Atten LEFT OUTER JOIN (SELECT  sno, branchid, empid, status, doe, attendance_date, remarks FROM  dailyattandancedetails WHERE  (attendance_date BETWEEN @d1 AND @d2)) AS daily ON Atten.empid = daily.empid");
                    cmd.Parameters.Add("@d1", GetLowDate(dtDOE));
                    cmd.Parameters.Add("@d2", GetHighDate(dtDOE));
                    cmd.Parameters.Add("@company_code", company_code);
                    cmd.Parameters.Add("@branchid", branchid);
                    cmd.Parameters.Add("@m", mainbranch);

                    DataTable dtemp = vdm.SelectQuery(cmd).Tables[0];
                    if (dtemp.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dtemp.Rows)
                        {
                            Employeedet GetEmployee = new Employeedet();
                            GetEmployee.empsno = dr["empid"].ToString();
                            GetEmployee.employee_name = dr["fullname"].ToString();
                            GetEmployee.registrationid = dr["employee_num"].ToString();
                            GetEmployee.branchid = dr["branchid"].ToString();
                            GetEmployee.branchname = dr["branchname"].ToString();
                            GetEmployee.designation = dr["designation"].ToString();
                            GetEmployee.status = dr["status"].ToString();
                            string status = dr["status"].ToString();
                            if (status == "")
                            {
                                GetEmployee.status = "A";
                            }
                            string date = dr["attendance_date"].ToString();

                            if (date != "")
                            {
                                DateTime dtDoe = Convert.ToDateTime(date);
                                string strdateTime = dtDoe.ToString("HH");
                                string strdate = dtDoe.ToString("dd/MMM");
                                //DateTime Date1 = Convert.ToDateTime(date);
                                GetEmployee.LogDate = strdate;
                            }
                            else
                            {
                                DateTime Date1 = Convert.ToDateTime(dtDOE);
                                string strdateTime2 = dtDOE.ToString("HH");
                                string strdate1 = dtDOE.ToString("dd/MMM");
                                GetEmployee.LogDate = strdate1;
                            }
                            GetEmployee.Date = dtDOE.ToString("dd/MM/yyyy");
                            bankMasterlist.Add(GetEmployee);
                        }
                    }
                }
            }
            string response = GetJson(bankMasterlist);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }
    private void get_branchwise_staff_absent_attandance(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            string DOA = context.Request["doe"];
            DateTime dtDOE = Convert.ToDateTime(DOA);
            DateTime ServerDateCurrentdate = DBManager.GetTime(vdm.conn);
            string curentdt = Convert.ToDateTime(ServerDateCurrentdate).ToString("MM/dd/yyyy");
            DateTime dt = Convert.ToDateTime(curentdt);
            //if (dtDOE == dt)
            //{
            //    dtDOE = GetLowDate(dtDOE).AddDays(-1);
            //}
            string mainbranch = context.Session["mainbranch"].ToString();
            string branchid = context.Request["branchid"];
            string company_code = context.Request["company_code"];
            List<Employeedet> bankMasterlist = new List<Employeedet>();
            if (company_code == "ALL")
            {
                //cmd = new SqlCommand("SELECT  Atten.empid, Atten.fullname, Atten.Expr1, Atten.employee_num, daily.sno, daily.branchid, daily.empid AS Expr2, daily.status, daily.doe, daily.attendance_date, daily.remarks, Atten.branchname, Atten.designation FROM  (SELECT   t1.empid, t1.fullname, ISNULL(f2.D, '') AS Expr1, t1.employee_num, t1.branchname, t1.designation FROM   (SELECT  employedetails.empid, employedetails.fullname, employedetails.employee_num, branchmaster.branchname, designation.designation FROM  employedetails INNER JOIN branchmapping ON employedetails.branchid = branchmapping.subbranch INNER JOIN branchmaster ON employedetails.branchid = branchmaster.branchid LEFT OUTER JOIN designation ON employedetails.designationid = designation.designationid WHERE   (employedetails.status = 'No') AND (branchmapping.mainbranch = @m) AND (employedetails.employee_type = 'Staff')) AS t1 LEFT OUTER JOIN (SELECT   Eid, D FROM    (SELECT  EmpId AS Eid, CONVERT(nvarchar(20), LogDate, 103) AS D FROM   AttendanceLogs WHERE  (LogDate BETWEEN @d1 AND @d2) GROUP BY EmpId, LogDate) AS t2 GROUP BY Eid, D) AS f2 ON t1.empid = f2.Eid) AS Atten LEFT OUTER JOIN (SELECT  sno, branchid, empid, status, doe, attendance_date, remarks FROM  dailyattandancedetails WHERE  (attendance_date BETWEEN @d1 AND @d2)) AS daily ON Atten.empid = daily.empid");
                cmd = new SqlCommand("SELECT  Atten.EmpId, Atten.fullname, Atten.Expr1, Atten.employee_num, daily.sno, daily.branchid, daily.empid AS Expr2, daily.status, daily.doe, daily.attendance_date, daily.remarks, Atten.branchname, Atten.designation FROM  (SELECT   t1.EmpId, t1.fullname, ISNULL(f2.D, N'') AS Expr1, t1.employee_num, t1.branchname, t1.designation FROM  (SELECT DISTINCT AttendanceLogs.EmpId, employedetails.fullname, employedetails.employee_num, branchmaster.branchname, designation.designation FROM   AttendanceLogs INNER JOIN branchmaster ON AttendanceLogs.BranchId = branchmaster.branchid INNER JOIN branchmapping ON AttendanceLogs.BranchId = branchmapping.subbranch INNER JOIN employedetails ON AttendanceLogs.EmpId = employedetails.empid INNER JOIN designation ON employedetails.designationid = designation.designationid WHERE  (employedetails.status = 'No') AND (branchmapping.mainbranch = @m) AND (employedetails.employee_type = 'Staff')) AS t1 LEFT OUTER JOIN (SELECT  Eid, D FROM  (SELECT  EmpId AS Eid, CONVERT(nvarchar(20), LogDate, 103) AS D FROM   AttendanceLogs AS AttendanceLogs_1 WHERE (LogDate BETWEEN @d1 AND @d2) GROUP BY EmpId, LogDate) AS t2 GROUP BY Eid, D) AS f2 ON t1.EmpId = f2.Eid) AS Atten LEFT OUTER JOIN (SELECT sno, branchid, empid, status, doe, attendance_date, remarks FROM  dailyattandancedetails WHERE (attendance_date BETWEEN @d1 AND @d2)) AS daily ON Atten.EmpId = daily.empid");
                cmd.Parameters.Add("@d1", GetLowDate(dtDOE));
                cmd.Parameters.Add("@d2", GetHighDate(dtDOE));
                cmd.Parameters.Add("@m", mainbranch);

                DataTable dtemp = vdm.SelectQuery(cmd).Tables[0];
                if (dtemp.Rows.Count > 0)
                {
                    foreach (DataRow dr in dtemp.Rows)
                    {
                        Employeedet GetEmployee = new Employeedet();
                        GetEmployee.empsno = dr["empid"].ToString();
                        GetEmployee.employee_name = dr["fullname"].ToString();
                        GetEmployee.registrationid = dr["employee_num"].ToString();
                        GetEmployee.branchid = dr["branchid"].ToString();
                        GetEmployee.branchname = dr["branchname"].ToString();
                        GetEmployee.designation = dr["designation"].ToString();
                        GetEmployee.status = dr["status"].ToString();
                        string status = dr["status"].ToString();
                        if (status == "")
                        {
                            GetEmployee.status = "A";
                        }
                        string date = dr["attendance_date"].ToString();

                        if (date != "")
                        {
                            DateTime dtDoe = Convert.ToDateTime(date);
                            string strdateTime = dtDoe.ToString("HH");
                            string strdate = dtDoe.ToString("dd/MMM");
                            //DateTime Date1 = Convert.ToDateTime(date);
                            GetEmployee.LogDate = strdate;
                        }
                        else
                        {


                            DateTime Date1 = Convert.ToDateTime(dtDOE);
                            string strdateTime2 = dtDOE.ToString("HH");
                            string strdate1 = dtDOE.ToString("dd/MMM");
                            GetEmployee.LogDate = strdate1;

                        }
                        GetEmployee.Date = dtDOE.ToString("dd/MM/yyyy");
                        bankMasterlist.Add(GetEmployee);
                    }
                }
            }
            else
            {
                if (branchid == "ALL")
                {
                    cmd = new SqlCommand("SELECT  Atten.empid, Atten.fullname, Atten.Expr1, Atten.employee_num, daily.sno, daily.branchid, daily.empid AS Expr2, daily.status, daily.doe, daily.attendance_date, daily.remarks, Atten.branchname, Atten.designation FROM  (SELECT   t1.empid, t1.fullname, ISNULL(f2.D, '') AS Expr1, t1.employee_num, t1.branchname, t1.designation FROM   (SELECT  employedetails.empid, employedetails.fullname, employedetails.employee_num, branchmaster.branchname, designation.designation FROM  employedetails INNER JOIN branchmapping ON employedetails.branchid = branchmapping.subbranch INNER JOIN branchmaster ON employedetails.branchid = branchmaster.branchid LEFT OUTER JOIN designation ON employedetails.designationid = designation.designationid WHERE   (employedetails.status = 'No') AND (branchmapping.mainbranch = @m) AND (branchmaster.company_code = @company_code) AND (employedetails.employee_type = 'Staff')) AS t1 LEFT OUTER JOIN (SELECT   Eid, D FROM    (SELECT  EmpId AS Eid, CONVERT(nvarchar(20), LogDate, 103) AS D FROM   AttendanceLogs WHERE  (LogDate BETWEEN @d1 AND @d2) GROUP BY EmpId, LogDate) AS t2 GROUP BY Eid, D) AS f2 ON t1.empid = f2.Eid) AS Atten LEFT OUTER JOIN (SELECT  sno, branchid, empid, status, doe, attendance_date, remarks FROM  dailyattandancedetails WHERE  (attendance_date BETWEEN @d1 AND @d2)) AS daily ON Atten.empid = daily.empid");
                    cmd.Parameters.Add("@d1", GetLowDate(dtDOE));
                    cmd.Parameters.Add("@d2", GetHighDate(dtDOE));
                    cmd.Parameters.Add("@m", mainbranch);
                    cmd.Parameters.Add("@company_code", company_code);

                    DataTable dtemp = vdm.SelectQuery(cmd).Tables[0];

                    if (dtemp.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dtemp.Rows)
                        {
                            Employeedet GetEmployee = new Employeedet();
                            GetEmployee.empsno = dr["empid"].ToString();
                            GetEmployee.employee_name = dr["fullname"].ToString();
                            GetEmployee.registrationid = dr["employee_num"].ToString();
                            GetEmployee.branchid = dr["branchid"].ToString();
                            GetEmployee.branchname = dr["branchname"].ToString();
                            GetEmployee.designation = dr["designation"].ToString();
                            GetEmployee.status = dr["status"].ToString();
                            string status = dr["status"].ToString();
                            if (status == "")
                            {
                                GetEmployee.status = "A";
                            }
                            string date = dr["attendance_date"].ToString();

                            if (date != "")
                            {
                                DateTime dtDoe = Convert.ToDateTime(date);
                                string strdateTime = dtDoe.ToString("HH");
                                string strdate = dtDoe.ToString("dd/MMM");
                                //DateTime Date1 = Convert.ToDateTime(date);
                                GetEmployee.LogDate = strdate;
                            }
                            else
                            {
                                DateTime Date1 = Convert.ToDateTime(dtDOE);
                                string strdateTime2 = dtDOE.ToString("HH");
                                string strdate1 = dtDOE.ToString("dd/MMM");
                                GetEmployee.LogDate = strdate1;
                            }
                            GetEmployee.Date = dtDOE.ToString("dd/MM/yyyy");
                            bankMasterlist.Add(GetEmployee);
                        }
                    }
                }
                else
                {
                    cmd = new SqlCommand("SELECT  Atten.empid, Atten.fullname, Atten.Expr1, Atten.employee_num, daily.sno, daily.branchid, daily.empid AS Expr2, daily.status, daily.doe, daily.attendance_date, daily.remarks, Atten.branchname, Atten.designation FROM  (SELECT   t1.empid, t1.fullname, ISNULL(f2.D, '') AS Expr1, t1.employee_num, t1.branchname, t1.designation FROM   (SELECT  employedetails.empid, employedetails.fullname, employedetails.employee_num, branchmaster.branchname, designation.designation FROM  employedetails INNER JOIN branchmapping ON employedetails.branchid = branchmapping.subbranch INNER JOIN branchmaster ON employedetails.branchid = branchmaster.branchid LEFT OUTER JOIN designation ON employedetails.designationid = designation.designationid WHERE   (employedetails.status = 'No') AND (branchmapping.mainbranch = @m) AND (branchmaster.company_code = @company_code) AND (branchmaster.branchid = @branchid) AND (employedetails.employee_type = 'Staff')) AS t1 LEFT OUTER JOIN (SELECT   Eid, D FROM    (SELECT  EmpId AS Eid, CONVERT(nvarchar(20), LogDate, 103) AS D FROM   AttendanceLogs WHERE  (LogDate BETWEEN @d1 AND @d2) GROUP BY EmpId, LogDate) AS t2 GROUP BY Eid, D) AS f2 ON t1.empid = f2.Eid) AS Atten LEFT OUTER JOIN (SELECT  sno, branchid, empid, status, doe, attendance_date, remarks FROM  dailyattandancedetails WHERE  (attendance_date BETWEEN @d1 AND @d2)) AS daily ON Atten.empid = daily.empid");
                    cmd.Parameters.Add("@d1", GetLowDate(dtDOE));
                    cmd.Parameters.Add("@d2", GetHighDate(dtDOE));
                    cmd.Parameters.Add("@company_code", company_code);
                    cmd.Parameters.Add("@branchid", branchid);
                    cmd.Parameters.Add("@m", mainbranch);

                    DataTable dtemp = vdm.SelectQuery(cmd).Tables[0];
                    if (dtemp.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dtemp.Rows)
                        {
                            Employeedet GetEmployee = new Employeedet();
                            GetEmployee.empsno = dr["empid"].ToString();
                            GetEmployee.employee_name = dr["fullname"].ToString();
                            GetEmployee.registrationid = dr["employee_num"].ToString();
                            GetEmployee.branchid = dr["branchid"].ToString();
                            GetEmployee.branchname = dr["branchname"].ToString();
                            GetEmployee.designation = dr["designation"].ToString();
                            GetEmployee.status = dr["status"].ToString();
                            string status = dr["status"].ToString();
                            if (status == "")
                            {
                                GetEmployee.status = "A";
                            }
                            string date = dr["attendance_date"].ToString();

                            if (date != "")
                            {
                                DateTime dtDoe = Convert.ToDateTime(date);
                                string strdateTime = dtDoe.ToString("HH");
                                string strdate = dtDoe.ToString("dd/MMM");
                                //DateTime Date1 = Convert.ToDateTime(date);
                                GetEmployee.LogDate = strdate;
                            }
                            else
                            {
                                DateTime Date1 = Convert.ToDateTime(dtDOE);
                                string strdateTime2 = dtDOE.ToString("HH");
                                string strdate1 = dtDOE.ToString("dd/MMM");
                                GetEmployee.LogDate = strdate1;
                            }
                            GetEmployee.Date = dtDOE.ToString("dd/MM/yyyy");
                            bankMasterlist.Add(GetEmployee);
                        }
                    }
                }
            }
            string response = GetJson(bankMasterlist);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }

    private void get_gosvd_report(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            DateTime ServerDateCurrentdate = DBManager.GetTime(vdm.conn);
            //int from_year = ServerDateCurrentdate.Year;
            string from_year = context.Request["year"].ToString();
            string month = context.Request["month"].ToString();
            string mainbranch = context.Session["mainbranch"].ToString();
            cmd = new SqlCommand("SELECT  SUM(monthlysalarystatement.salary) AS totsalary FROM   branchmaster INNER JOIN monthlysalarystatement ON branchmaster.branchid = monthlysalarystatement.branchid INNER JOIN company_master ON branchmaster.company_code = company_master.sno INNER JOIN branchmapping ON branchmaster.branchid = branchmapping.subbranch WHERE   (monthlysalarystatement.year = @year) AND (monthlysalarystatement.month = @month) AND (branchmapping.mainbranch = @m)");
            cmd.Parameters.Add("@m", mainbranch);
            cmd.Parameters.Add("@year", from_year);
            cmd.Parameters.Add("@month", month);
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<get_svdgroup_master> branch_Masterlist = new List<get_svdgroup_master>();
            foreach (DataRow dr in routes.Rows)
            {
                get_svdgroup_master branch_details = new get_svdgroup_master();

                CultureInfo hindi = new CultureInfo("hi-IN");
                if (dr["totsalary"].ToString() == "" || dr["totsalary"].ToString() == null || dr["totsalary"].ToString() == "null")
                {
                    branch_details.totgross = "0";
                }
                else
                {
                    decimal totgrosss = decimal.Parse(dr["totsalary"].ToString(), CultureInfo.InvariantCulture);
                    branch_details.totgross = string.Format(hindi, "{0:#,#}", totgrosss);
                }
                branch_details.spntotgross = dr["totsalary"].ToString();
                branch_Masterlist.Add(branch_details);
            }
            string response = GetJson(branch_Masterlist);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }

    private void get_allbranchestotsal_report(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            DateTime ServerDateCurrentdate = DBManager.GetTime(vdm.conn);
            //int from_year = ServerDateCurrentdate.Year;
            string from_year = context.Request["year"].ToString();
            string month = context.Request["month"].ToString();
            string mainbranch = context.Session["mainbranch"].ToString();
            cmd = new SqlCommand("SELECT    SUM(monthlysalarystatement.salary) AS totgross, SUM(monthlysalarystatement.netpay) AS totnet, branchmaster.company_code FROM   branchmaster INNER JOIN monthlysalarystatement ON branchmaster.branchid = monthlysalarystatement.branchid INNER JOIN branchmapping ON branchmaster.branchid = branchmapping.subbranch WHERE    (monthlysalarystatement.year = @year) AND (monthlysalarystatement.month = @month) AND (branchmapping.mainbranch = @m) GROUP BY branchmaster.company_code");
            cmd.Parameters.Add("@year", from_year);
            cmd.Parameters.Add("@m", mainbranch);
            cmd.Parameters.Add("@month", month);
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<get_svdspl_branctypehwise_details> branch_Masterlist = new List<get_svdspl_branctypehwise_details>();
            foreach (DataRow dr in routes.Rows)
            {
                get_svdspl_branctypehwise_details branch_details = new get_svdspl_branctypehwise_details();

                CultureInfo hindi = new CultureInfo("hi-IN");
                if (dr["totgross"].ToString() == "" || dr["totgross"].ToString() == null || dr["totgross"].ToString() == "null")
                {
                    branch_details.totgross = "0";
                }
                else
                {
                    decimal totgrosss = decimal.Parse(dr["totgross"].ToString(), CultureInfo.InvariantCulture);
                    branch_details.totgross = string.Format(hindi, "{0:#,#}", totgrosss);
                }

                branch_details.spntotgross = dr["totgross"].ToString();
                branch_details.totnetpay = dr["totnet"].ToString();
                branch_details.cmpid = dr["company_code"].ToString();
                branch_Masterlist.Add(branch_details);
            }
            string response = GetJson(branch_Masterlist);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }
    public class getsalarydetails
    {
        public string totgross { get; set; }
        public string branchname { get; set; }
        public string spntotgross { get; set; }
        public string totnetpay { get; set; }
        public string branchid { get; set; }
    }
    public class getsalarydetailsdet
    {
        public string branchtype { get; set; }
        public string totgross { get; set; }
        public string spntotgross { get; set; }
        public string totnetpay { get; set; }
        public string cmpid { get; set; }
    }
    public class get_alldetails
    {
        public List<getsalarydetails> getsalarydetails { get; set; }
        public List<getsalarydetailsdet> getsalarydetailsbranchtype { get; set; }
    }

    private void get_group_grosspay_details(HttpContext context)
    {
        vdm = new DBManager();
        List<get_alldetails> getalldetailslist = new List<get_alldetails>();
        List<getsalarydetails> getsalarydetailslist = new List<getsalarydetails>();
        List<getsalarydetailsdet> getsalarydetailsdetlist = new List<getsalarydetailsdet>();
        DateTime ServerDateCurrentdate = DBManager.GetTime(vdm.conn);
        int from_year = ServerDateCurrentdate.Year;
        string month = context.Request["month"].ToString();
        string companyid = context.Request["cmpid"].ToString();
        string btype = context.Request["btype"].ToString();
        cmd = new SqlCommand("SELECT   SUM(monthlysalarystatement.salary) AS totgross, SUM(monthlysalarystatement.netpay) AS totnetpay, branchmaster.branchid, branchmaster.branchname, branchmaster.branchtype FROM   branchmaster INNER JOIN monthlysalarystatement ON branchmaster.branchid = monthlysalarystatement.branchid LEFT OUTER JOIN company_master ON branchmaster.company_code = company_master.sno WHERE   (monthlysalarystatement.year = @year) AND (monthlysalarystatement.month = @month) AND (company_master.sno = @cmpid) AND (branchmaster.branchtype = @btype) GROUP BY branchmaster.branchtype, branchmaster.branchid, branchmaster.branchname");
        //cmd = new SqlCommand("SELECT SUM(monthlysalarystatement.salary) AS totgross, SUM(monthlysalarystatement.netpay) AS totnetpay, branchmaster.branchid, branchmaster.branchname, branchmaster.branchtype, COUNT(employedetails.empid) AS totemp FROM  branchmaster INNER JOIN monthlysalarystatement ON branchmaster.branchid = monthlysalarystatement.branchid INNER JOIN company_master ON branchmaster.company_code = company_master.sno INNER JOIN employedetails ON monthlysalarystatement.empid = employedetails.empid WHERE (monthlysalarystatement.year = @year) AND (monthlysalarystatement.month = @month) AND (company_master.sno = @cmpid) AND (branchmaster.branchtype = @btype) GROUP BY branchmaster.branchtype, branchmaster.branchid, branchmaster.branchname");
        cmd.Parameters.Add("@year", from_year);
        cmd.Parameters.Add("@cmpid", companyid);
        cmd.Parameters.Add("@btype", btype);
        cmd.Parameters.Add("@month", month);
        DataTable routes = vdm.SelectQuery(cmd).Tables[0];
        foreach (DataRow dr in routes.Rows)
        {
            getsalarydetails obj = new getsalarydetails();
            CultureInfo hindi = new CultureInfo("hi-IN");
            if (dr["totgross"].ToString() == "" || dr["totgross"].ToString() == null || dr["totgross"].ToString() == "null")
            {
                obj.totgross = "0";
            }
            else
            {
                decimal totgrosss = decimal.Parse(dr["totgross"].ToString(), CultureInfo.InvariantCulture);
                obj.totgross = string.Format(hindi, "{0:#,#}", totgrosss);
            }
            obj.branchname = dr["branchname"].ToString();
            obj.spntotgross = dr["totgross"].ToString();
            obj.totnetpay = dr["totnetpay"].ToString();
            obj.branchid = dr["branchid"].ToString();
            getsalarydetailslist.Add(obj);
        }
        string response = GetJson(getsalarydetailslist);
        context.Response.Write(response);
    }
    public class get_smsrepo_details
    {
        public string totaltms { get; set; }
        public string branchid { get; set; }
        public string companycode { get; set; }
        public string BranchName { get; set; }
        public string companyid { get; set; }
        public string companyname { get; set; }
        public string salestotsms { get; set; }
        public string fleettotsms { get; set; }
        public string procuretotsms { get; set; }
        public string Moduleid { get; set; }
    }
    private void sms_report_details(HttpContext context)
    {
        try
        {
            MySqlCommand mycmd = new MySqlCommand();
            SalesDBManager sdm = new SalesDBManager();
            string DOA = context.Request["doe"];
            DateTime dtDOE = Convert.ToDateTime(DOA);
            mycmd = new MySqlCommand("SELECT   COUNT(smsinfo.msg) AS totaltms, branchdata.companycode FROM   smsinfo INNER JOIN branchdata ON smsinfo.branchid = branchdata.sno WHERE (smsinfo.doe BETWEEN @d1 AND @d2) GROUP BY branchdata.companycode ORDER BY branchdata.companycode");
            mycmd.Parameters.Add("@d1", GetLowDate(dtDOE));
            mycmd.Parameters.Add("@d2", GetHighDate(dtDOE));
            DataTable routes = sdm.SelectQuery(mycmd).Tables[0];
            List<get_smsrepo_details> get_smsrepo_list = new List<get_smsrepo_details>();
            foreach (DataRow dr in routes.Rows)
            {

                get_smsrepo_details sms_details = new get_smsrepo_details();
                if (dr["companycode"].ToString() == "1")
                {
                    sms_details.companyname = "SVDS";
                }
                else if (dr["companycode"].ToString() == "3")
                {
                    sms_details.companyname = "SVF";
                }
                else if (dr["companycode"].ToString() == "2")
                {
                    sms_details.companyname = "SVD";
                }
                sms_details.totaltms = dr["totaltms"].ToString();
                sms_details.companyid = dr["companycode"].ToString();
                get_smsrepo_list.Add(sms_details);
            }
            string response = GetJson(get_smsrepo_list);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }
    private void sms_reportbybranch_details(HttpContext context)
    {
        try
        {
            MySqlCommand mycmd = new MySqlCommand();
            SalesDBManager sdm = new SalesDBManager();
            string DOA = context.Request["doe"];
            string companycode = context.Request["companycode"].ToString();
            DateTime dtDOE = Convert.ToDateTime(DOA);
            mycmd = new MySqlCommand("SELECT   COUNT(smsinfo.msg) AS totaltms, branchdata.BranchName, smsinfo.branchid FROM   smsinfo INNER JOIN branchdata ON smsinfo.branchid = branchdata.sno WHERE  (smsinfo.doe BETWEEN @d1 AND @d2) AND (branchdata.companycode = @cmpid) GROUP BY branchdata.BranchName, smsinfo.branchid");
            mycmd.Parameters.Add("@d1", GetLowDate(dtDOE));
            mycmd.Parameters.Add("@d2", GetHighDate(dtDOE));
            mycmd.Parameters.Add("@cmpid", companycode);

            DataTable routes = sdm.SelectQuery(mycmd).Tables[0];
            List<get_smsrepo_details> get_smsrepo_list = new List<get_smsrepo_details>();
            foreach (DataRow dr in routes.Rows)
            {
                get_smsrepo_details sms_details = new get_smsrepo_details();
                sms_details.totaltms = dr["totaltms"].ToString();
                sms_details.BranchName = dr["BranchName"].ToString();
                sms_details.branchid = dr["branchid"].ToString();
                get_smsrepo_list.Add(sms_details);
            }
            string response = GetJson(get_smsrepo_list);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }
    private void sms_fleet_reportbybranch_details(HttpContext context)
    {
        try
        {
            MySqlCommand mycmd = new MySqlCommand();
            FleetDBManager sdm = new FleetDBManager();
            string DOA = context.Request["doe"];
            DateTime dtDOE = Convert.ToDateTime(DOA);
            mycmd = new MySqlCommand("SELECT   COUNT(smsinfo.msg) AS totsms, branch_info.branchname, smsinfo.branchid FROM   smsinfo INNER JOIN branch_info ON smsinfo.branchid = branch_info.brnch_sno WHERE  (smsinfo.doe BETWEEN @d1 AND @d2) GROUP BY branch_info.branchname, smsinfo.branchid");
            mycmd.Parameters.Add("@d1", GetLowDate(dtDOE));
            mycmd.Parameters.Add("@d2", GetHighDate(dtDOE));
            DataTable routes = sdm.SelectQuery(mycmd).Tables[0];
            double totalsmsd = 0;
            double totalsms = 0;
            List<get_smsrepo_details> get_smsrepo_list = new List<get_smsrepo_details>();
            get_smsrepo_details sms_details = new get_smsrepo_details();
            foreach (DataRow dr in routes.Rows)
            {
                sms_details.BranchName = dr["BranchName"].ToString();
                sms_details.branchid = dr["branchid"].ToString();
                if (dr["branchid"].ToString() == "1" || dr["branchid"].ToString() == "3" || dr["branchid"].ToString() == "4")
                {
                    totalsmsd += Convert.ToDouble(dr["totsms"].ToString());
                }
            }
            if (totalsmsd > 0)
            {
                sms_details.companyname = "SVDS";
                sms_details.companycode = "1";
                sms_details.totaltms = totalsmsd.ToString();
                get_smsrepo_list.Add(sms_details);
            }
            foreach (DataRow dr in routes.Rows)
            {
                if (dr["branchid"].ToString() == "6" || dr["branchid"].ToString() == "7" || dr["branchid"].ToString() == "8" || dr["branchid"].ToString() == "12" || dr["branchid"].ToString() == "13" || dr["branchid"].ToString() == "15")
                {
                    totalsms += Convert.ToDouble(dr["totsms"].ToString());
                }
            }
            if (totalsms > 0)
            {
                sms_details.companyname = "SVF";
                sms_details.companycode = "2";
                sms_details.totaltms = totalsms.ToString();
            }
            string response = GetJson(get_smsrepo_list);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }
    private void fleetsms_reportbybranch_details(HttpContext context)
    {
        try
        {
            MySqlCommand mycmd = new MySqlCommand();
            FleetDBManager sdm = new FleetDBManager();
            string DOA = context.Request["doe"];
            DateTime dtDOE = Convert.ToDateTime(DOA);
            mycmd = new MySqlCommand("SELECT   COUNT(smsinfo.msg) AS totsms, branch_info.branchname, branch_info.brnch_sno FROM  smsinfo INNER JOIN branch_info ON smsinfo.branchid = branch_info.brnch_sno WHERE   (smsinfo.doe BETWEEN @d1 AND @d2) GROUP BY branch_info.branchname, branch_info.brnch_sno");
            mycmd.Parameters.Add("@d1", GetLowDate(dtDOE));
            mycmd.Parameters.Add("@d2", GetHighDate(dtDOE));

            DataTable routes = sdm.SelectQuery(mycmd).Tables[0];
            List<get_smsrepo_details> get_smsrepo_list = new List<get_smsrepo_details>();

            foreach (DataRow dr in routes.Rows)
            {
                get_smsrepo_details sms_details = new get_smsrepo_details();
                sms_details.totaltms = dr["totsms"].ToString();
                sms_details.BranchName = dr["BranchName"].ToString();
                sms_details.branchid = dr["brnch_sno"].ToString();
                get_smsrepo_list.Add(sms_details);
            }
            string response = GetJson(get_smsrepo_list);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }
    private void procuresms_reportbybranch_details(HttpContext context)
    {
        try
        {
            SqlCommand cmd = new SqlCommand();
            ProcureDBManager vdm = new ProcureDBManager();
            string DOA = context.Request["doe"];
            DateTime dtDOE = Convert.ToDateTime(DOA);
            cmd = new SqlCommand("SELECT COUNT(Message_Histroy.Message) AS totsms, Company_Master.Company_Name, Message_Histroy.Company_code FROM   Message_Histroy INNER JOIN Company_Master ON Message_Histroy.Company_code = Company_Master.Company_Code WHERE   (Message_Histroy.Send_date = @date) GROUP BY Company_Master.Company_Name, Message_Histroy.Company_code");
            cmd.Parameters.Add("@date", dtDOE);
            //mycmd.Parameters.Add("@d2", GetHighDate(dtDOE));
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<get_smsrepo_details> get_smsrepo_list = new List<get_smsrepo_details>();

            foreach (DataRow dr in routes.Rows)
            {
                get_smsrepo_details sms_details = new get_smsrepo_details();
                sms_details.totaltms = dr["totsms"].ToString();
                if (dr["Company_code"].ToString() == "1")
                {
                    sms_details.companyname = "SVDS";
                }
                if (dr["Company_code"].ToString() == "2")
                {
                    sms_details.companyname = "SVD";
                }
                if (dr["Company_code"].ToString() == "3")
                {
                    sms_details.companyname = "SVF";
                }
                //sms_details.companyname = dr["Company_Name"].ToString();
                sms_details.companycode = dr["Company_code"].ToString();
                get_smsrepo_list.Add(sms_details);
            }
            string response = GetJson(get_smsrepo_list);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }
    private void procuresms_reportbybranch_wise_details(HttpContext context)
    {
        try
        {
            SqlCommand cmd = new SqlCommand();
            ProcureDBManager vdm = new ProcureDBManager();
            string companycode = context.Request["companycode"];
            string DOA = context.Request["doe"];
            DateTime dtDOE = Convert.ToDateTime(DOA);
            cmd = new SqlCommand("SELECT   COUNT(Message_Histroy.Message) AS totsms, Plant_Master.Plant_Name, Plant_Master.Plant_Code FROM   Message_Histroy INNER JOIN Plant_Master ON Message_Histroy.Plant_code = Plant_Master.Plant_Code WHERE  (Message_Histroy.Send_date = @date) AND (Message_Histroy.Company_code = @ccode) GROUP BY Plant_Master.Plant_Name, Plant_Master.Plant_Code");
            cmd.Parameters.Add("@ccode", companycode);
            cmd.Parameters.Add("@date", dtDOE);
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];
            List<get_smsrepo_details> get_smsrepo_list = new List<get_smsrepo_details>();

            foreach (DataRow dr in routes.Rows)
            {
                get_smsrepo_details sms_details = new get_smsrepo_details();
                sms_details.totaltms = dr["totsms"].ToString();
                sms_details.BranchName = dr["Plant_Name"].ToString();
                sms_details.branchid = dr["Plant_Code"].ToString();
                get_smsrepo_list.Add(sms_details);
            }
            string response = GetJson(get_smsrepo_list);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }
    private void overal_sms_report_details(HttpContext context)
    {
        try
        {
            MySqlCommand mycmd = new MySqlCommand();
            SalesDBManager sdm = new SalesDBManager();
            string DOA = context.Request["doe"];
            DateTime dtDOE = Convert.ToDateTime(DOA);
            List<get_smsrepo_details> get_smsrepo_list = new List<get_smsrepo_details>();

            mycmd = new MySqlCommand("SELECT  COUNT(msg) AS totaltms FROM  smsinfo WHERE  (doe BETWEEN @d1 AND @d2)");
            mycmd.Parameters.Add("@d1", GetLowDate(dtDOE));
            mycmd.Parameters.Add("@d2", GetHighDate(dtDOE));
            DataTable salesroutes = sdm.SelectQuery(mycmd).Tables[0];
            double salestotsms = 0;
            if (salesroutes.Rows.Count > 0)
            {
                string Salessmscount = salesroutes.Rows[0]["totaltms"].ToString();
                string moduleid = "Sales";
                get_smsrepo_details obj1 = new get_smsrepo_details();
                obj1.salestotsms = Salessmscount;
                obj1.Moduleid = moduleid;
                get_smsrepo_list.Add(obj1);
            }
            //---------------fleet------------//
            FleetDBManager fdm = new FleetDBManager();
            mycmd = new MySqlCommand("SELECT    COUNT(msg) AS totfleetsms FROM  smsinfo WHERE  (doe BETWEEN @d1 AND @d2)");
            mycmd.Parameters.Add("@d1", GetLowDate(dtDOE));
            mycmd.Parameters.Add("@d2", GetHighDate(dtDOE));
            DataTable fleetroutes = fdm.SelectQuery(mycmd).Tables[0];
            double totalsmsd = 0;
            if (fleetroutes.Rows.Count > 0)
            {
                string Salessmscount = fleetroutes.Rows[0]["totfleetsms"].ToString();
                string moduleid = "Fleet";
                get_smsrepo_details obj2 = new get_smsrepo_details();
                obj2.salestotsms = Salessmscount;
                obj2.Moduleid = moduleid;
                get_smsrepo_list.Add(obj2);
            }
            //------------------procurement----------------//
            SqlCommand cmd = new SqlCommand();
            ProcureDBManager vdm = new ProcureDBManager();
            cmd = new SqlCommand("SELECT COUNT(Message) AS totsms FROM  Message_Histroy WHERE  (Send_date = @date)");
            cmd.Parameters.Add("@date", dtDOE);
            DataTable procroutes = vdm.SelectQuery(cmd).Tables[0];
            double procuretotsms = 0;

            if (procroutes.Rows.Count > 0)
            {
                string Salessmscount = procroutes.Rows[0]["totsms"].ToString();
                string moduleid = "Procurement";
                get_smsrepo_details obj3 = new get_smsrepo_details();
                obj3.salestotsms = Salessmscount;
                obj3.Moduleid = moduleid;
                get_smsrepo_list.Add(obj3);
            }
            string response = GetJson(get_smsrepo_list);
            context.Response.Write(response);
        }

        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }
    private void overal_sms_compwise_details(HttpContext context)
    {
        try
        {
            MySqlCommand mycmd = new MySqlCommand();
            SalesDBManager sdm = new SalesDBManager();
            string DOA = context.Request["doe"];
            string moduleid = context.Request["moduleid"];
            DateTime dtDOE = Convert.ToDateTime(DOA);
            List<get_smsrepo_details> get_smsrepo_list = new List<get_smsrepo_details>();
            if (moduleid == "Sales")
            {
                mycmd = new MySqlCommand("SELECT   COUNT(smsinfo.msg) AS totaltms, branchdata.companycode FROM   smsinfo INNER JOIN branchdata ON smsinfo.branchid = branchdata.sno WHERE (smsinfo.doe BETWEEN @d1 AND @d2) GROUP BY branchdata.companycode ORDER BY branchdata.companycode");
                mycmd.Parameters.Add("@d1", GetLowDate(dtDOE));
                mycmd.Parameters.Add("@d2", GetHighDate(dtDOE));
                DataTable routes = sdm.SelectQuery(mycmd).Tables[0];

                foreach (DataRow dr in routes.Rows)
                {
                    get_smsrepo_details sms_details = new get_smsrepo_details();
                    if (dr["companycode"].ToString() == "1")
                    {
                        sms_details.companyname = "SVDS";
                    }
                    else if (dr["companycode"].ToString() == "3")
                    {
                        sms_details.companyname = "SVF";
                    }
                    else if (dr["companycode"].ToString() == "2")
                    {
                        sms_details.companyname = "SVD";
                    }
                    sms_details.totaltms = dr["totaltms"].ToString();
                    sms_details.companyid = dr["companycode"].ToString();
                    sms_details.Moduleid = "Sales";
                    get_smsrepo_list.Add(sms_details);
                }

            }
            else if (moduleid == "Fleet")
            {
                FleetDBManager fdm = new FleetDBManager();
                mycmd = new MySqlCommand("SELECT   COUNT(smsinfo.msg) AS totsms, branch_info.branchname, smsinfo.branchid FROM   smsinfo INNER JOIN branch_info ON smsinfo.branchid = branch_info.brnch_sno WHERE  (smsinfo.doe BETWEEN @d1 AND @d2) GROUP BY branch_info.branchname, smsinfo.branchid");
                mycmd.Parameters.Add("@d1", GetLowDate(dtDOE));
                mycmd.Parameters.Add("@d2", GetHighDate(dtDOE));
                DataTable routes = fdm.SelectQuery(mycmd).Tables[0];
                double totalsmsd = 0;
                double totalsms = 0;
                get_smsrepo_details sms_details = new get_smsrepo_details();
                foreach (DataRow dr in routes.Rows)
                {
                    sms_details.BranchName = dr["BranchName"].ToString();
                    sms_details.branchid = dr["branchid"].ToString();
                    if (dr["branchid"].ToString() == "1" || dr["branchid"].ToString() == "3" || dr["branchid"].ToString() == "4")
                    {
                        totalsmsd += Convert.ToDouble(dr["totsms"].ToString());
                    }
                }
                if (totalsmsd > 0)
                {
                    sms_details.companyname = "SVDS";
                    sms_details.companycode = "1";
                    sms_details.Moduleid = "Fleet";
                    sms_details.totaltms = totalsmsd.ToString();
                    get_smsrepo_list.Add(sms_details);
                }
                foreach (DataRow dr in routes.Rows)
                {
                    if (dr["branchid"].ToString() == "6" || dr["branchid"].ToString() == "7" || dr["branchid"].ToString() == "8" || dr["branchid"].ToString() == "12" || dr["branchid"].ToString() == "13" || dr["branchid"].ToString() == "15")
                    {
                        totalsms += Convert.ToDouble(dr["totsms"].ToString());
                    }
                }
                if (totalsms > 0)
                {
                    sms_details.companyname = "SVF";
                    sms_details.companycode = "2";
                    sms_details.Moduleid = "Fleet";
                    sms_details.totaltms = totalsms.ToString();
                    get_smsrepo_list.Add(sms_details);
                }
            }
            else
            {
                SqlCommand cmd = new SqlCommand();
                ProcureDBManager vdm = new ProcureDBManager();
                cmd = new SqlCommand("SELECT COUNT(Message_Histroy.Message) AS totsms, Company_Master.Company_Name, Message_Histroy.Company_code FROM   Message_Histroy INNER JOIN Company_Master ON Message_Histroy.Company_code = Company_Master.Company_Code WHERE   (Message_Histroy.Send_date = @date) GROUP BY Company_Master.Company_Name, Message_Histroy.Company_code");
                cmd.Parameters.Add("@date", dtDOE);
                DataTable routes = vdm.SelectQuery(cmd).Tables[0];
                foreach (DataRow dr in routes.Rows)
                {
                    get_smsrepo_details sms_details = new get_smsrepo_details();
                    sms_details.totaltms = dr["totsms"].ToString();
                    if (dr["Company_code"].ToString() == "1")
                    {
                        sms_details.companyname = "SVDS";
                    }
                    if (dr["Company_code"].ToString() == "2")
                    {
                        sms_details.companyname = "SVD";
                    }
                    if (dr["Company_code"].ToString() == "3")
                    {
                        sms_details.companyname = "SVF";
                    }
                    sms_details.companyid = dr["Company_code"].ToString();
                    sms_details.companycode = dr["Company_code"].ToString();
                    sms_details.Moduleid = "Procurement";
                    get_smsrepo_list.Add(sms_details);
                }
            }
            string response = GetJson(get_smsrepo_list);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }
    private void branch_wisesms_details(HttpContext context)
    {
        try
        {
            MySqlCommand mycmd = new MySqlCommand();
            SalesDBManager sdm = new SalesDBManager();
            string DOA = context.Request["doe"];
            string companycode = context.Request["companycode"].ToString();
            string moduleid = context.Request["Moduleid"].ToString();
            DateTime dtDOE = Convert.ToDateTime(DOA);
            List<get_smsrepo_details> get_smsrepo_list = new List<get_smsrepo_details>();
            if (moduleid == "Sales")
            {
                mycmd = new MySqlCommand("SELECT COUNT(smsinfo.msg) AS totaltms, branchdata.BranchName, smsinfo.branchid FROM   smsinfo INNER JOIN branchdata ON smsinfo.branchid = branchdata.sno WHERE  (smsinfo.doe BETWEEN @d1 AND @d2) AND (branchdata.companycode = @cmpid) GROUP BY branchdata.BranchName, smsinfo.branchid");
                mycmd.Parameters.Add("@d1", GetLowDate(dtDOE));
                mycmd.Parameters.Add("@d2", GetHighDate(dtDOE));
                mycmd.Parameters.Add("@cmpid", companycode);

                DataTable routes = sdm.SelectQuery(mycmd).Tables[0];
                foreach (DataRow dr in routes.Rows)
                {
                    get_smsrepo_details sms_details = new get_smsrepo_details();
                    sms_details.totaltms = dr["totaltms"].ToString();
                    sms_details.BranchName = dr["BranchName"].ToString();
                    sms_details.branchid = dr["branchid"].ToString();
                    get_smsrepo_list.Add(sms_details);
                }
            }
            else if (moduleid == "Fleet")
            {
                FleetDBManager fdm = new FleetDBManager();
                mycmd = new MySqlCommand("SELECT   COUNT(smsinfo.msg) AS totsms, branch_info.branchname, branch_info.brnch_sno FROM  smsinfo INNER JOIN branch_info ON smsinfo.branchid = branch_info.brnch_sno WHERE   (smsinfo.doe BETWEEN @d1 AND @d2) GROUP BY branch_info.branchname, branch_info.brnch_sno");
                mycmd.Parameters.Add("@d1", GetLowDate(dtDOE));
                mycmd.Parameters.Add("@d2", GetHighDate(dtDOE));
                DataTable routes = fdm.SelectQuery(mycmd).Tables[0];
                foreach (DataRow dr in routes.Rows)
                {
                    get_smsrepo_details sms_details = new get_smsrepo_details();
                    sms_details.totaltms = dr["totsms"].ToString();
                    sms_details.BranchName = dr["BranchName"].ToString();
                    sms_details.branchid = dr["brnch_sno"].ToString();
                    get_smsrepo_list.Add(sms_details);
                }
            }
            else
            {
                SqlCommand cmd = new SqlCommand();
                ProcureDBManager vdm = new ProcureDBManager();
                cmd = new SqlCommand("SELECT   COUNT(Message_Histroy.Message) AS totsms, Plant_Master.Plant_Name, Plant_Master.Plant_Code FROM   Message_Histroy INNER JOIN Plant_Master ON Message_Histroy.Plant_code = Plant_Master.Plant_Code WHERE  (Message_Histroy.Send_date = @date) AND (Message_Histroy.Company_code = @ccode) GROUP BY Plant_Master.Plant_Name, Plant_Master.Plant_Code");
                cmd.Parameters.Add("@ccode", companycode);
                cmd.Parameters.Add("@date", dtDOE);
                DataTable routes = vdm.SelectQuery(cmd).Tables[0];
                foreach (DataRow dr in routes.Rows)
                {
                    get_smsrepo_details sms_details = new get_smsrepo_details();
                    sms_details.totaltms = dr["totsms"].ToString();
                    sms_details.BranchName = dr["Plant_Name"].ToString();
                    sms_details.branchid = dr["Plant_Code"].ToString();
                    get_smsrepo_list.Add(sms_details);
                }
            }
            string response = GetJson(get_smsrepo_list);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }
    private void save_branchDocument_data(HttpContext context)
    {
        try
        {
            if (context.Request.Files.Count > 0)
            {
                string branchid = context.Request["branchid"];
                string branchtype = context.Request["branchtype"];
                string issuedate = context.Request["issuedate"];
                string expairydate = context.Request["expairydate"];
                string validity = context.Request["validity"];
                string documentname = context.Request["documentname"];
                documentname = documentname.TrimEnd();
                string documentid = context.Request["documentid"];
                documentid = documentid.TrimEnd();
                string insuranceid = context.Request["insuranceid"];
                insuranceid = insuranceid.TrimEnd();
                string insurancename = context.Request["insurancename"];
                insurancename = insurancename.TrimEnd();
                string createdby = context.Session["empid"].ToString();
                string editedby = context.Session["empid"].ToString();
                HttpFileCollection files = context.Request.Files;
                DateTime ServerDateCurrentdate = DBManager.GetTime(vdm.conn);
                string btnvalue = context.Request["btnvalue"];
                string sno = context.Request["sno"];
                string msg = "";
                cmd = new SqlCommand("SELECT   bc.sno, bc.branchid, bc.branchtype, bc.issuedate, bc.expairydate, bc.Validity, bc.fileno, bc.filepath, bc.doe, bc.createdby, bc.editedby, bc.editedon, bc.filename, bc.insuranceid, bc.insurancename, bm.branchname FROM   BranchCertificates AS bc INNER JOIN branchmaster AS bm ON bc.branchid = bm.branchid WHERE   (bc.branchid = @branchid) AND (bc.fileno = @fileno)");
                cmd.Parameters.Add("@branchid", branchid);
                cmd.Parameters.Add("@fileno", documentid);
                DataTable dtemp = vdm.SelectQuery(cmd).Tables[0];

                for (int i = 0; i < files.Count; i++)
                {
                    HttpPostedFile file = files[i];
                    string[] extension = file.FileName.Split('.');
                    string LastName = documentname.Replace(" ", String.Empty);
                    string upload_filename = LastName + documentid + ".jpeg";// +extension[extension.Length - 1];
                    if (UploadToFTP(file, upload_filename))
                    {
                        if (btnvalue == "UPLOAD")
                        {
                            cmd = new SqlCommand("INSERT INTO BranchCertificates (filepath, doe, createdby, filename, fileno, branchid, branchtype, issuedate, expairydate, Validity, insuranceid, insurancename) VALUES  (@filepath,@doe,@createdby,@filename,@fileno,@branchid,@branchtype,@issuedate,@expairydate,@Validity,@insuranceid,@insurancename)");
                            //cmd.Parameters.Add("@empid", empsno);
                            cmd.Parameters.Add("@branchid", branchid);
                            cmd.Parameters.Add("@branchtype", branchtype);
                            cmd.Parameters.Add("@issuedate", issuedate);
                            cmd.Parameters.Add("@expairydate", expairydate);
                            cmd.Parameters.Add("@validity", validity);
                            cmd.Parameters.Add("@filepath", upload_filename);
                            cmd.Parameters.Add("@filename", documentname);
                            cmd.Parameters.Add("@fileno", documentid);
                            cmd.Parameters.Add("@doe", ServerDateCurrentdate);
                            cmd.Parameters.Add("@createdby", createdby);
                            cmd.Parameters.Add("@insuranceid", insuranceid);
                            cmd.Parameters.Add("@insurancename", insurancename);
                            vdm.insert(cmd);
                            msg = "File successfully saved";
                        }
                        else
                        {
                            cmd = new SqlCommand("Update BranchCertificates set branchid=@branchid,branchtype=@branchtype,issuedate=@issuedate,expairydate=@expairydate,Validity=@validity,filepath=@filepath,filename=@filename,fileno=@fileno,editedon=@editedon,editedby=@editedby,insuranceid=@insuranceid,insurancename=@insurancename where sno=@sno");
                            cmd.Parameters.Add("@branchtype", branchtype);
                            cmd.Parameters.Add("@issuedate", issuedate);
                            cmd.Parameters.Add("@branchid", branchid);
                            cmd.Parameters.Add("@expairydate", expairydate);
                            cmd.Parameters.Add("@validity", validity);
                            cmd.Parameters.Add("@filepath", upload_filename);
                            cmd.Parameters.Add("@filename", documentname);
                            cmd.Parameters.Add("@fileno", documentid);
                            cmd.Parameters.Add("@editedon", ServerDateCurrentdate);
                            cmd.Parameters.Add("@editedby", editedby);
                            cmd.Parameters.Add("@insuranceid", insuranceid);
                            cmd.Parameters.Add("@insurancename", insurancename);
                            cmd.Parameters.Add("@sno", sno);
                            vdm.Update(cmd);
                            msg = "File successfully updated";
                        }
                    }
                    string response = GetJson(msg);
                    context.Response.Write(response);
                }
            }
        }
        catch (Exception ex)
        {
            string response = GetJson(ex.Message);
            context.Response.Write(response);
        }
    }
    public class branch_policydocument_details
    {
        public string sno { get; set; }
        public string employee_name { get; set; }
        public string documentid { get; set; }
        public string documentname { get; set; }
        public string ftplocation { get; set; }
        public string documentpath { get; set; }
        public string branchname { get; set; }
        public string branchid { get; set; }
        public string insuranceid { get; set; }
        public string insurancename { get; set; }
        public string branchtype { get; set; }
        public string issuedate { get; set; }
        public string expairydate { get; set; }
        public string Validity { get; set; }
        public string isdate { get; set; }
        public string expdate { get; set; }
    }

    private void getfile_Uploaded_Documents(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            string empid = context.Request["empsno"];
            //cmd = new SqlCommand("SELECT sno, policyno, policypath, doe, createdby, editedby, editedon, policyname FROM policy_details");
            cmd = new SqlCommand("SELECT   BranchCertificates.sno, BranchCertificates.branchid, BranchCertificates.branchtype, BranchCertificates.issuedate, BranchCertificates.expairydate, BranchCertificates.Validity, BranchCertificates.fileno, BranchCertificates.filepath, BranchCertificates.doe, BranchCertificates.createdby, BranchCertificates.editedby, BranchCertificates.editedon, BranchCertificates.filename, BranchCertificates.insuranceid, BranchCertificates.insurancename, branchmaster.branchname,CONVERT(varchar, BranchCertificates.issuedate, 23) AS isdate, CONVERT(varchar, BranchCertificates.expairydate, 23) AS expdate FROM   BranchCertificates INNER JOIN branchmaster ON BranchCertificates.branchid = branchmaster.branchid");
            // cmd.Parameters.Add("@EmpID", empid);
            DataTable dtemp = vdm.SelectQuery(cmd).Tables[0];
            List<branch_policydocument_details> bankMasterlist = new List<branch_policydocument_details>();
            if (dtemp.Rows.Count > 0)
            {
                foreach (DataRow dr in dtemp.Rows)
                {
                    branch_policydocument_details GetEmployee = new branch_policydocument_details();
                    GetEmployee.sno = dr["sno"].ToString();
                    GetEmployee.branchname = dr["branchname"].ToString();
                    GetEmployee.branchtype = dr["branchtype"].ToString();
                    GetEmployee.branchid = dr["branchid"].ToString();
                    GetEmployee.documentid = dr["fileno"].ToString();
                    GetEmployee.documentname = dr["filename"].ToString();
                    GetEmployee.ftplocation = "http://182.18.138.228:81/";
                    GetEmployee.documentpath = dr["filepath"].ToString();
                    GetEmployee.insuranceid = dr["insuranceid"].ToString();
                    GetEmployee.insurancename = dr["insurancename"].ToString();
                    GetEmployee.issuedate = dr["issuedate"].ToString();
                    GetEmployee.expairydate = dr["expairydate"].ToString();
                    GetEmployee.Validity = dr["Validity"].ToString();
                    GetEmployee.isdate = dr["isdate"].ToString();
                    GetEmployee.expdate = dr["expdate"].ToString();
                    bankMasterlist.Add(GetEmployee);
                }
            }
            string response = GetJson(bankMasterlist);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }
    public class employe_basic_info
    {
        public string empid { get; set; }
        public string employee_num { get; set; }
        public string fullname { get; set; }
        public string branchname { get; set; }
        public string cellphone { get; set; }
        public string designation { get; set; }
        public string ftplocation { get; set; }
        public string photos { get; set; }
    }
    private void get_employebasicinfo(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            //string empid = context.Request["empsno"];
            cmd = new SqlCommand("SELECT   employedetails.empid, employedetails.employee_num, employedetails.fullname, employedetails.cellphone, designation.designation, branchmaster.branchname, employedetails.photos FROM    employedetails INNER JOIN designation ON employedetails.designationid = designation.designationid INNER JOIN branchmaster ON employedetails.branchid = branchmaster.branchid WHERE  (employedetails.status = 'no') ORDER BY employedetails.designationid");
            //cmd.Parameters.Add("@EmpID", empid);
            DataTable dtemp = vdm.SelectQuery(cmd).Tables[0];
            List<employe_basic_info> employe_list = new List<employe_basic_info>();
            if (dtemp.Rows.Count > 0)
            {
                foreach (DataRow dr in dtemp.Rows)
                {
                    employe_basic_info GetEmployee = new employe_basic_info();
                    GetEmployee.empid = dr["empid"].ToString();
                    GetEmployee.employee_num = dr["employee_num"].ToString();
                    GetEmployee.fullname = dr["fullname"].ToString();
                    GetEmployee.branchname = dr["branchname"].ToString();
                    GetEmployee.cellphone = dr["cellphone"].ToString();
                    GetEmployee.photos = dr["photos"].ToString();
                    GetEmployee.designation = dr["designation"].ToString();
                    GetEmployee.ftplocation = "http://182.18.138.228:81/";
                    employe_list.Add(GetEmployee);
                }
            }
            string response = GetJson(employe_list);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }
    public class branch_master
    {
        public string branchname { get; set; }
        public string branchid { get; set; }
        public string empname { get; set; }
        public string empnum { get; set; }

        public string empid { get; set; }
        public string fullname { get; set; }
        public string employee_num { get; set; }
        public string designation { get; set; }
        public string department { get; set; }
        public string joindate { get; set; }
        public string appraisal { get; set; }
        public string changedpackage { get; set; }
        public string erningbasic { get; set; }
        public string emprefaddress1 { get; set; }
        public string emprefaddress2 { get; set; }
        public string cellphone { get; set; }
        public string dob { get; set; }
        public string experience { get; set; }
        public string fathername { get; set; }
        public string presentaddress { get; set; }
        public string ftplocation { get; set; }
        public string photos { get; set; }
        public string mbranchname { get; set; }
        public string mbranchid { get; set; }
        public string sbranchname { get; set; }
        public string sbranchid { get; set; }
        public string gross { get; set; }

        public string totgrass { get; set; }
        public string totnetpay { get; set; }
        public string totsalary { get; set; }
        public string year { get; set; }
        public string month { get; set; }
        public string remaingtotpay { get; set; }
        public string companyname { get; set; }
        public string address { get; set; }
        public string aadhaar { get; set; }
        public string pfeligible { get; set; }
        public string spousename { get; set; }
        public string bankaccountno { get; set; }
        public string ifsccode { get; set; }
        public string pf { get; set; }
        public string pt { get; set; }
        public string salaryadvance { get; set; }
        public string loan { get; set; }
        public string netpay { get; set; }
        public string otherdeduction { get; set; }
        public string bankbranchname { get; set; }
        public string bankname { get; set; }

        public string pfscheme { get; set; }
        public string pfjoindate { get; set; }
        public string uannumber { get; set; }
        public string pfnumber { get; set; }

        public string salaryperyear { get; set; }
        public string hra { get; set; }
        public string conveyance { get; set; }
        public string washingallowance { get; set; }
        public string medicalerning { get; set; }
        public string profitionaltax { get; set; }
        public string esi { get; set; }
        public string providentfund { get; set; }
    }


    private void btn_apprisal_Click(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            DateTime ServerDateCurrentdate = DBManager.GetTime(vdm.conn);
            DateTime dttate = ServerDateCurrentdate.AddMonths(-2);
            int from_year = dttate.Year;
            int from_month = dttate.Month;
            string empid = context.Request["empids"];
            cmd = new SqlCommand("SELECT   employedetails.empid, employedetails.fullname, employedetails.employee_num, branchmaster.branchname, designation.designation, departments.department, employedetails.joindate, employedetails.photos, employedetails.dob, employedetails.home_address AS emprefaddress1, employedetails.home_address AS emprefaddress2, employedetails.cellphone, employedetails.experience, employedetails.fathername, employedetails.presentaddress, employedetails.aadhaar_id, employedetails.spouse_fullname, employedetails.pfeligible, employedetails.idproof, employepfdetails.pfscheme, employepfdetails.pfjoindate, employepfdetails.uannumber, employepfdetails.pfnumber, employebankdetails.accountno, employebankdetails.branchname AS bankbranchname, employebankdetails.bankid, employebankdetails.ifsccode,employedetails.email, bankmaster.bankname FROM   employedetails INNER JOIN designation ON employedetails.designationid = designation.designationid INNER JOIN branchmaster ON employedetails.branchid = branchmaster.branchid INNER JOIN departments ON employedetails.employee_dept = departments.deptid INNER JOIN employebankdetails ON employedetails.empid = employebankdetails.employeid LEFT OUTER JOIN bankmaster ON bankmaster.sno = employebankdetails.bankid LEFT OUTER JOIN employepfdetails ON employedetails.empid = employepfdetails.employeid WHERE   (employedetails.empid = @empid)");
            cmd.Parameters.Add("@empid", empid);
            DataTable routes = vdm.SelectQuery(cmd).Tables[0];

            cmd = new SqlCommand("SELECT employedetails.empid, salaryappraisals.salaryperyear, salaryappraisals.gross, salaryappraisals.erningbasic, salaryappraisals.hra, salaryappraisals.conveyance, salaryappraisals.washingallowance, salaryappraisals.medicalerning, salaryappraisals.profitionaltax, salaryappraisals.esi, salaryappraisals.providentfund, salaryappraisals.netpay  FROM            employedetails INNER JOIN  salaryappraisals ON employedetails.empid = salaryappraisals.empid  WHERE (salaryappraisals.endingdate IS NULL) AND (salaryappraisals.startingdate <= @d1) AND (employedetails.empid = @emptype) OR (salaryappraisals.endingdate > @d1) AND (salaryappraisals.startingdate <= @d1) AND (employedetails.empid = @emptype)");
            cmd.Parameters.Add("@emptype", empid);
            cmd.Parameters.Add("@d1", dttate);
            DataTable dtsalary = vdm.SelectQuery(cmd).Tables[0];

            List<branch_master> branchMasterlist = new List<branch_master>();
            foreach (DataRow dr in routes.Rows)
            {
                branch_master branchrdetails = new branch_master();
                string currentdate = ServerDateCurrentdate.ToString("yyyy-MM-dd");
                //basic information
                branchrdetails.empid = dr["empid"].ToString();
                branchrdetails.fullname = dr["fullname"].ToString();
                branchrdetails.employee_num = dr["employee_num"].ToString();
                branchrdetails.branchname = dr["branchname"].ToString();
                branchrdetails.designation = dr["designation"].ToString();
                branchrdetails.department = dr["department"].ToString();
                string joindat = ((DateTime)dr["joindate"]).ToString("yyyy-MM-dd");
                DateTime jdate = Convert.ToDateTime(joindat);
                DateTime cdate = Convert.ToDateTime(currentdate);
                TimeSpan span = cdate - jdate;
                double days = span.Days;
                //or
                double months = (double)(span.Days / 30);
                double years = (double)(months / 12);
                double expe = Math.Round(years, 1);
                branchrdetails.joindate = joindat;
                branchrdetails.experience = expe.ToString();
                branchrdetails.spousename = dr["spouse_fullname"].ToString();
                branchrdetails.pfeligible = dr["pfeligible"].ToString();
                branchrdetails.emprefaddress1 = dr["emprefaddress1"].ToString();
                branchrdetails.emprefaddress2 = dr["emprefaddress2"].ToString();
                branchrdetails.cellphone = dr["cellphone"].ToString();
                branchrdetails.dob = dr["dob"].ToString();
                branchrdetails.fathername = dr["fathername"].ToString();
                branchrdetails.presentaddress = dr["presentaddress"].ToString();
                branchrdetails.ftplocation = "http://182.18.138.228:81/";
                branchrdetails.photos = dr["photos"].ToString();
                //branchrdetails.address = dr["address"].ToString();

                // bank details   
                branchrdetails.bankaccountno = dr["accountno"].ToString();
                branchrdetails.bankbranchname = dr["bankbranchname"].ToString();
                branchrdetails.bankname = dr["bankname"].ToString();
                branchrdetails.ifsccode = dr["ifsccode"].ToString();

                // pf details
                branchrdetails.pfscheme = dr["pfscheme"].ToString();
                branchrdetails.pfjoindate = dr["pfjoindate"].ToString();
                branchrdetails.uannumber = dr["uannumber"].ToString();
                branchrdetails.pfnumber = dr["pfnumber"].ToString();

                // employe preent salary structure
                foreach (DataRow dra in dtsalary.Select("empid='" + empid + "'"))
                {
                    branchrdetails.salaryperyear = dra["salaryperyear"].ToString();
                    branchrdetails.gross = dra["gross"].ToString();
                    branchrdetails.erningbasic = dra["erningbasic"].ToString();
                    branchrdetails.hra = dra["hra"].ToString();
                    branchrdetails.conveyance = dra["conveyance"].ToString();
                    branchrdetails.washingallowance = dra["washingallowance"].ToString();
                    branchrdetails.medicalerning = dra["medicalerning"].ToString();
                    branchrdetails.profitionaltax = dra["profitionaltax"].ToString();
                    branchrdetails.esi = dra["esi"].ToString();
                    branchrdetails.providentfund = dra["providentfund"].ToString();
                    branchrdetails.netpay = dra["netpay"].ToString();
                }
                branchMasterlist.Add(branchrdetails);
            }
            string response = GetJson(branchMasterlist);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }
    public class financial_year_info
    {
        public string year { get; set; }
    }
    public class esiform
    {
        public string branchid { get; set; }
        public string branchname { get; set; }
        public string employe { get; set; }
        public string employer { get; set; }
        public string sno { get; set; }
    }
    private void get_financial_years(HttpContext context)
    {
        try
        {
            List<financial_year_info> financial_yeart_list = new List<financial_year_info>();
            DateTime ServerDateCurrentdate = DBManager.GetTime(vdm.conn);
            string year = "";
            string pyear = "";
            for (int i = DateTime.Now.Year; i >= 1970; i--)
            {
                financial_year_info fianancial_year = new financial_year_info();
                year = i.ToString();
                pyear = (Convert.ToInt32(year) - 1).ToString();
                fianancial_year.year = pyear + "-" + year;
                financial_yeart_list.Add(fianancial_year);
            }
            string response = GetJson(financial_yeart_list);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }

    private void get_esiform_details(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            cmd = new SqlCommand("SELECT esipercentage.branchid, esipercentage.employe, esipercentage.employer, esipercentage.sno, branchmaster.branchname   FROM  esipercentage INNER JOIN  branchmaster ON esipercentage.branchid = branchmaster.branchid where branchmaster.company_code=@cmpid");
            cmd.Parameters.Add("@cmpid", context.Session["company_id"].ToString());
            DataTable dtemp = vdm.SelectQuery(cmd).Tables[0];
            List<esiform> employe_loan_list = new List<esiform>();
            if (dtemp.Rows.Count > 0)
            {
                foreach (DataRow dr in dtemp.Rows)
                {
                    esiform GetEmployee_loan = new esiform();
                    GetEmployee_loan.branchname = dr["branchname"].ToString();
                    GetEmployee_loan.branchid = dr["branchid"].ToString();
                    GetEmployee_loan.employe = dr["employe"].ToString();
                    GetEmployee_loan.employer = dr["employer"].ToString();
                    GetEmployee_loan.sno = dr["sno"].ToString();
                    employe_loan_list.Add(GetEmployee_loan);
                }
            }
            string response = GetJson(employe_loan_list);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }

    private void save_esiform_details(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            string empid = context.Session["empid"].ToString();
            string branchid = context.Request["branchid"];
            string employe = context.Request["employe"];
            string employer = context.Request["employer"];
            string btn_save = context.Request["btnval"];
            //string photo = context.Request["photo"];
            DateTime ServerDateCurrentdate = DBManager.GetTime(vdm.conn);
            string sno = context.Request["sno"];
            if (btn_save == "Save")
            {
                cmd = new SqlCommand("insert into esipercentage (branchid,employe,employer,doe,createdby) values (@branchid,@employe,@employer,@doe,@createdby)");
                cmd.Parameters.Add("@branchid", branchid);
                cmd.Parameters.Add("@employe", employe);
                cmd.Parameters.Add("@employer", employer);
                //cmd.Parameters.Add("@photo", photo);
                cmd.Parameters.Add("@doe", ServerDateCurrentdate);
                cmd.Parameters.Add("@createdby", empid);
                vdm.insert(cmd);
                string msg = "Details successfully saved";
                string Response = GetJson(msg);
                context.Response.Write(Response);
            }
            else
            {
                cmd = new SqlCommand("Update esipercentage set branchid=@branchid,employe=@employe,employer=@employer where sno=@sno");
                cmd.Parameters.Add("@branchid", branchid);
                cmd.Parameters.Add("@employe", employe);
                cmd.Parameters.Add("@employer", employer);
                cmd.Parameters.Add("@sno", sno);
                vdm.Update(cmd);
                string msg = "Details successfully updated";
                string Response = GetJson(msg);
                context.Response.Write(Response);
            }
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }
    public class employe_tds_info
    {
        public string empid { get; set; }
        public string fullname { get; set; }
        public string pancard { get; set; }
        public string changedpackage { get; set; }
        public string appraisal { get; set; }
        public string previouspf { get; set; }
        public string providentfund { get; set; }
        public string gross { get; set; }
        public string erningbasic { get; set; }
        public string totalbasicc { get; set; }
        public string totalhra { get; set; }
        public string conveyance { get; set; }
        public string totalconveyance { get; set; }
        public string total1 { get; set; }
        public string totprofitionaltax { get; set; }
        public string total2 { get; set; }
        public string totpf { get; set; }
        public string totalhra2 { get; set; }
        public string lic { get; set; }
        public string tutionfee { get; set; }
        public string others { get; set; }
        public string totalsavings { get; set; }
        public string eightyd { get; set; }
        public string totaltaxablesal { get; set; }
        public string totalpt { get; set; }

        public string totalprevioussal { get; set; }
        public string taxbayablebeforerebate { get; set; }
        public string rebateUbyS { get; set; }
        public string total3 { get; set; }
        public string subcharges { get; set; }
        public string taxpayable { get; set; }
        public string tdsdedected { get; set; }
        public string taxpayablerefundable { get; set; }

        public string totalgross { get; set; }
        public string joindate { get; set; }
        public string employee_num { get; set; }
    }

    private void get_employe_tds_details(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            string year = context.Request["year"];
            string[] yr = year.Split('-');
            string prevyear = yr[0];
            string current = yr[1];
            string month = "04";
            string date = "01";
            string fromdate = month + "/" + date + "/" + prevyear;
            string todate = month + "/" + date + "/" + current;
            DateTime dtfromdate = Convert.ToDateTime(fromdate);
            DateTime dttodate = Convert.ToDateTime(todate);
            cmd = new SqlCommand("SELECT employedetails.empid, salaryappraisals.changedpackage, salaryappraisals.appraisal, salaryappraisals.hra, salaryappraisals.profitionaltax, salaryappraisals.providentfund,  salaryappraisals.conveyance, salaryappraisals.erningbasic, salaryappraisals.changedpackage AS Expr1, salaryappraisals.gross, salaryappraisals.totaldeduction, salaryappraisals.salaryperyear,  salaryappraisals.endingdate  FROM            employedetails INNER JOIN salaryappraisals ON employedetails.empid = salaryappraisals.empid WHERE        (salaryappraisals.endingdate IS NULL) AND (salaryappraisals.startingdate <= @d1) OR  (salaryappraisals.endingdate > @d1) AND (salaryappraisals.startingdate <= @d1)");
            cmd.Parameters.Add("@d1", GetLowDate(dtfromdate));
            DataTable dtemp = vdm.SelectQuery(cmd).Tables[0];

            cmd = new SqlCommand("SELECT empid, employee_num, joindate, fullname, initials, pancard  FROM employedetails WHERE (status = 'NO') AND (company_id IN (1, 2))");
            DataTable dtempdetails = vdm.SelectQuery(cmd).Tables[0];

            double totprevioussal = 0;
            double totgross = 0;
            double totalgrosss = 0;
            double basic1 = 0;
            double totbasic = 0;
            double hra = 0;
            double tothra = 0;
            double conveyance1 = 0;
            double totconveyace = 0;
            double total1 = 0;
            double totpf1 = 0;
            double pt = 0;
            double totpt = 0;
            double tot2 = 0;
            double totpf = 0;
            double tothra2 = 0;
            double lic1 = 0;
            double tutionfee1 = 0;
            double others1 = 0;
            double totsavings = 0;
            double totsavingss = 0;
            double tottaxblesal = 0;
            double previouspf = 0;
            double taxbayablebeforerebate = 0;
            double total3 = 0;
            double subchargs = 0;
            double taxpayable = 0;
            double taxpayablerefundable = 0;
            List<employe_tds_info> tds_employe_list = new List<employe_tds_info>();
            if (dtempdetails.Rows.Count > 0)
            {

                foreach (DataRow drr in dtempdetails.Rows)
                {
                    employe_tds_info Get_tds_Employee = new employe_tds_info();
                    string empid = drr["empid"].ToString();
                    Get_tds_Employee.empid = drr["empid"].ToString();
                    Get_tds_Employee.employee_num = drr["employee_num"].ToString();
                    Get_tds_Employee.fullname = drr["fullname"].ToString();
                    Get_tds_Employee.joindate = drr["joindate"].ToString();
                    Get_tds_Employee.pancard = drr["pancard"].ToString();

                    foreach (DataRow dr in dtemp.Select("empid='" + empid + "'"))
                    {

                        Get_tds_Employee.changedpackage = dr["changedpackage"].ToString();
                        totprevioussal += Convert.ToDouble(dr["changedpackage"].ToString());
                        Get_tds_Employee.totalprevioussal = totprevioussal.ToString();

                        Get_tds_Employee.appraisal = dr["appraisal"].ToString();

                        Get_tds_Employee.gross = dr["gross"].ToString();
                        totgross = Convert.ToDouble(dr["gross"].ToString());
                        totalgrosss = totgross * 12;
                        Get_tds_Employee.totalgross = totalgrosss.ToString();

                        Get_tds_Employee.providentfund = dr["providentfund"].ToString();
                        totpf1 = Convert.ToDouble(dr["providentfund"].ToString());

                        Get_tds_Employee.conveyance = dr["conveyance"].ToString();
                        conveyance1 = Convert.ToDouble(dr["conveyance"].ToString());
                        totconveyace = conveyance1 * 12;
                        Get_tds_Employee.totalconveyance = totconveyace.ToString();

                        Get_tds_Employee.erningbasic = dr["erningbasic"].ToString();
                        basic1 = Convert.ToDouble(dr["erningbasic"].ToString());
                        totbasic = (totalgrosss - totconveyace) * 100 / 150;
                        Get_tds_Employee.totalbasicc = totbasic.ToString();

                        previouspf = (basic1 / 100) * 12;
                        Get_tds_Employee.previouspf = previouspf.ToString();

                        hra = Convert.ToDouble(dr["hra"].ToString());
                        tothra = totbasic * 0.5;
                        Get_tds_Employee.totalhra = tothra.ToString();



                        total1 = totbasic + tothra + totconveyace;
                        Get_tds_Employee.total1 = total1.ToString();

                        pt = Convert.ToDouble(dr["profitionaltax"].ToString());
                        totpt = pt * 12;
                        Get_tds_Employee.totprofitionaltax = totpt.ToString();

                        tot2 = total1 - totpt;
                        Get_tds_Employee.total2 = tot2.ToString();

                        totpf = totpf1 * 12;
                        Get_tds_Employee.totpf = totpf.ToString();

                        tothra2 = (totbasic * 0.5) - totpf;
                        Get_tds_Employee.totalhra2 = tothra2.ToString();

                        Get_tds_Employee.lic = "0";
                        //lic1=Convert.ToDouble(["lic"].ToString());

                        Get_tds_Employee.tutionfee = "0";
                        //tutionfee1=Convert.ToDouble(["tutionfee"].ToString());

                        Get_tds_Employee.others = "0";
                        //others1=Convert.ToDouble(["others"].ToString());

                        totsavings = totpf + tothra + 0 + 0;
                        Get_tds_Employee.totalsavings = totsavings.ToString();
                        Get_tds_Employee.eightyd = "0";

                        //tottaxblesal = pt1 - tothra - totsavings - 0;
                        Get_tds_Employee.totaltaxablesal = tottaxblesal.ToString();
                        taxbayablebeforerebate = (tottaxblesal - 250000) * 5;
                        Get_tds_Employee.taxbayablebeforerebate = taxbayablebeforerebate.ToString();

                        Get_tds_Employee.rebateUbyS = taxbayablebeforerebate.ToString();
                        total3 = taxbayablebeforerebate - taxbayablebeforerebate;
                        Get_tds_Employee.total3 = total3.ToString();
                        subchargs = total3 * 3;
                        Get_tds_Employee.subcharges = subchargs.ToString();
                        taxpayable = total3 + subchargs;
                        Get_tds_Employee.taxpayable = taxpayable.ToString();
                        Get_tds_Employee.tdsdedected = "0";
                        taxpayablerefundable = taxpayable - 0;
                        Get_tds_Employee.taxpayablerefundable = taxpayablerefundable.ToString();
                    }

                    tds_employe_list.Add(Get_tds_Employee);
                }
            }
            string response = GetJson(tds_employe_list);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }
    private void save_emp_Loan_Request(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            string employename = context.Request["employename"];
            string employeid = context.Request["employeid"];
            string loanamount = context.Request["loanamount"];
            string loanpurpose = context.Request["loanpurpose"];
            string preveousloan = context.Request["preveousloan"];
            string reportingtoid = context.Request["reportingtoid"];
            string phone = context.Request["phone"];
            string email = context.Request["email"];
            DateTime ServerDateCurrentdate = DBManager.GetTime(vdm.conn);
            string btnval = context.Request["btnval"];
            string User = context.Session["empid"].ToString();
            string branchid = context.Session["branchid"].ToString();
            string designationid = context.Session["designationid"].ToString();
            if (btnval == "Request")
            {
                cmd = new SqlCommand("insert into Employee_LoanRequest (Empid,EmployeName,BranchId,DesignationId,LoanAmount,PurposeOfLoan,PreviousLoans,ReportingTo,Doe,EntryBy) values (@employeid,@employename,@branchid,@designationid,@loanamount,@loanpurpose,@preveousloan,@reportingto,@doe,@entry_by)"); ;
                cmd.Parameters.Add("@employeid", employeid);
                cmd.Parameters.Add("@employename", employename);
                cmd.Parameters.Add("@branchid", branchid);
                cmd.Parameters.Add("@designationid", designationid);
                cmd.Parameters.Add("@loanamount", loanamount);
                cmd.Parameters.Add("@loanpurpose", loanpurpose);
                cmd.Parameters.Add("@preveousloan", preveousloan);
                cmd.Parameters.Add("@reportingto", reportingtoid);
                cmd.Parameters.Add("@doe", ServerDateCurrentdate);
                cmd.Parameters.Add("@entry_by", User);
                vdm.insert(cmd);
                string body = "";
                if (email.Length > 0)
                {
                    string toAddress = email;
                    string subject = "Loan Request";
                    var st = new StackTrace(ex, true);
                    var frame = st.GetFrame(0);
                    var line = frame.GetFileLineNumber();
                    body = "Dear Sir, I am " + employename + " applying  Loan For the purpose of " + loanpurpose + " And Amount of RS-" + loanamount + "/  Please kindely approve my Loan";
                    //body = "hi Your Account was hacked.And transferd RS-10000/- from Your Account By the linked mobile Number(9618655163).Please be aware";
                    SendEmail(toAddress, subject, body);
                }
                cmd = new SqlCommand("SELECT    employedetails.empid, employedetails.fullname, employedetails.designationid, employedetails.employee_dept, employedetails.status, employedetails.email, employedetails.cellphone, employedetails.company_id, branchmapping.mainbranch FROM  employedetails INNER JOIN branchmapping ON employedetails.branchid = branchmapping.subbranch WHERE     (employedetails.employee_dept = 2) AND (employedetails.status = 'No') AND (branchmapping.mainbranch = @main)");
                cmd.Parameters.Add("@main", context.Session["mainbranch"].ToString());
                DataTable dtemp = vdm.SelectQuery(cmd).Tables[0];
                if (dtemp.Rows.Count > 0)
                {
                    foreach (DataRow dr in dtemp.Rows)
                    {
                        string eid = dr["email"].ToString();
                        string toAddress = eid;
                        string subject = "Loan Request";
                        var st = new StackTrace(ex, true);
                        var frame = st.GetFrame(0);
                        var line = frame.GetFileLineNumber();
                        body = "Dear Sir, I am " + employename + " applying  Loan For the purpose of " + loanpurpose + " And Amount of RS-" + loanamount + "/  Please kindely approve my Loan";
                        SendEmail(toAddress, subject, body);
                    }
                }
                WebClient client = new WebClient();
                string mno = phone;
                string baseurl = "http://www.smsstriker.com/API/sms.php?username=vaishnavidairy&password=vyshnavi@123&from=VYSNVI&to=" + mno + "&msg=" + body + "";
                Stream data = client.OpenRead(baseurl);
                StreamReader reader = new StreamReader(data);
                string ResponseID = reader.ReadToEnd();
                data.Close();
                reader.Close();
                string response = GetJson("Inserted Successfully");
                context.Response.Write(response);

            }
            else
            {
                string sno = context.Request["sno"];
                cmd = new SqlCommand("Update Employee_LoanRequest set Empid=@employeid,employename=@employename,BranchId=@branchid,DesignationId=@designationid,LoanAmount=@loanamount,PurposeOfLoan=@loanpurpose,PreviousLoans=@preveousloan,ReportingTo=@reportingto,EditedBy=@EditedBy,ModifiedDate=@ModifiedDate where Sno=@sno");
                cmd.Parameters.Add("@employeid", employeid);
                cmd.Parameters.Add("@employename", employename);
                cmd.Parameters.Add("@branchid", branchid);
                cmd.Parameters.Add("@designationid", designationid);
                cmd.Parameters.Add("@loanamount", loanamount);
                cmd.Parameters.Add("@loanpurpose", loanpurpose);
                cmd.Parameters.Add("@preveousloan", preveousloan);
                cmd.Parameters.Add("@reportingto", reportingtoid);
                cmd.Parameters.Add("@ModifiedDate", ServerDateCurrentdate);
                cmd.Parameters.Add("@EditedBy", User);
                cmd.Parameters.Add("@sno", sno);
                vdm.Update(cmd);
                string response = GetJson("UPDATE Successfully");
                context.Response.Write(response);
            }
        }
        catch (Exception ex)
        {
            string response = GetJson(ex.Message);
            context.Response.Write(response);
        }
    }
    public class employe_loan_info
    {
        public string empid { get; set; }
        public string fullname { get; set; }
        public string branchname { get; set; }
        public string designation { get; set; }
        public string LoanAmount { get; set; }
        public string PurposeOfLoan { get; set; }
        public string ReportingTo { get; set; }
        public string reportingtoid { get; set; }
        public string Doe { get; set; }
        public string PreviousLoans { get; set; }
        public string repoemail { get; set; }
    }
    private void get_emp_loan_details(HttpContext context)
    {
        try
        {
            vdm = new DBManager();
            cmd = new SqlCommand("SELECT  Employee_LoanRequest.Empid, Employee_LoanRequest.EmployeName, branchmaster.branchname, designation.designation, Employee_LoanRequest.LoanAmount, Employee_LoanRequest.PurposeOfLoan, Employee_LoanRequest.PreviousLoans, Employee_LoanRequest.Doe, employedetails_1.fullname AS reportingto, employedetails_1.empid AS reportingtoid, employedetails_1.email AS repoemail FROM  Employee_LoanRequest INNER JOIN employedetails ON Employee_LoanRequest.Empid = employedetails.empid INNER JOIN designation ON employedetails.designationid = designation.designationid INNER JOIN branchmaster ON employedetails.branchid = branchmaster.branchid INNER JOIN employedetails AS employedetails_1 ON Employee_LoanRequest.ReportingTo = employedetails_1.empid");
            DataTable dtemp = vdm.SelectQuery(cmd).Tables[0];
            List<employe_loan_info> employe_loan_list = new List<employe_loan_info>();
            if (dtemp.Rows.Count > 0)
            {
                foreach (DataRow dr in dtemp.Rows)
                {
                    employe_loan_info GetEmployee_loan = new employe_loan_info();
                    GetEmployee_loan.empid = dr["Empid"].ToString();
                    GetEmployee_loan.fullname = dr["EmployeName"].ToString();
                    GetEmployee_loan.branchname = dr["branchname"].ToString();
                    GetEmployee_loan.designation = dr["designation"].ToString();
                    GetEmployee_loan.LoanAmount = dr["LoanAmount"].ToString();
                    GetEmployee_loan.PurposeOfLoan = dr["PurposeOfLoan"].ToString();
                    GetEmployee_loan.ReportingTo = dr["reportingto"].ToString();
                    GetEmployee_loan.reportingtoid = dr["reportingtoid"].ToString();
                    GetEmployee_loan.repoemail = dr["repoemail"].ToString();
                    string date = Convert.ToDateTime(dr["Doe"].ToString()).ToString("dd-MMM-yyyy");
                    GetEmployee_loan.Doe = date;
                    GetEmployee_loan.PreviousLoans = dr["PreviousLoans"].ToString();
                    employe_loan_list.Add(GetEmployee_loan);
                }
            }
            string response = GetJson(employe_loan_list);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }

    public Thread ex { get; set; }
}